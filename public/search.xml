<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>codeing中常用到的tips</title>
      <link href="/2079/01/01/0809003/"/>
      <content type="html"><![CDATA[<ul><li><a href="#getKey">1. 获取json的<code>key</code>值</a></li><li><a href="#input">2. JS实时监听文本域的变化</a></li><li><a href="#checkType">3. JavaScript类型检验</a></li></ul><hr><h4 id="1-获取json的-key-值"><a href="#1-获取json的-key-值" class="headerlink" title="1. 获取json的 key 值"></a><a name="getKey">1. </a>获取json的 <code>key</code> 值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">"naruto"</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">dad</span>: <span class="string">"minato"</span>&#125;</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h5 id="1-1-使用-for-in-来循环"><a href="#1-1-使用-for-in-来循环" class="headerlink" title="1.1. 使用 for in 来循环 :"></a>1.1. 使用 <code>for in</code> 来循环 :</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key) <span class="comment">// 依次输出 "name", "age", "dad"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法比较常见，相信大家看到这个问题时第一时间都会想到吧，但是我要介绍的是下面这个更简单的方法。</p><h5 id="1-2-使用-Object-keys-来获取"><a href="#1-2-使用-Object-keys-来获取" class="headerlink" title="1.2. 使用 Object.keys() 来获取 :"></a>1.2. 使用 <code>Object.keys()</code> 来获取 :</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- console.log( Object.keys(obj) ) // 输出一个数组 [&quot;name&quot;, &quot;age&quot;, &quot;dad&quot;]</span><br><span class="line">- 所以, 当我们需要某个key值时可以从当前数组中取得。</span><br></pre></td></tr></table></figure><hr><h4 id="2-JS实时监听文本域的变化"><a href="#2-JS实时监听文本域的变化" class="headerlink" title="2. JS实时监听文本域的变化"></a><a name="input">2. JS实时监听文本域的变化</a></h4><p>众所周知，使用 <code>onchange</code> 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， <code>onchange</code> 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用<code>keydown</code>和<code>keyup</code>外，我们还可以:</p><h5 id="2-1-使用-onpropertychange"><a href="#2-1-使用-onpropertychange" class="headerlink" title="2.1. 使用 onpropertychange"></a>2.1. 使用 <code>onpropertychange</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> id=<span class="string">"txt"</span>&gt;</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#ysy"</span>).bind(<span class="string">'input propertychange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="2-2-使用-oninput"><a href="#2-2-使用-oninput" class="headerlink" title="2.2 使用 oninput"></a>2.2 使用 <code>oninput</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'txt'</span>).oninput = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，总结一下<code>onchange, onpropertychange</code>和<code>oninput</code>之间的异同：</p><ol><li><code>onchange</code>事件与<code>onpropertychange</code>事件的区别：<code>onchange</code>事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；<code>onpropertychange</code>事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。</li><li><code>oninput</code>事件与<code>onpropertychange</code>事件的区别：<code>oninput</code>事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；<code>onpropertychange</code>事件是任何属性改变都会触发的，而<code>oninput</code>却只在value改变时触发，<code>oninput</code>要通过<code>addEventListener()</code>来注册，<code>onpropertychange</code>注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）&gt;</li><li><code>oninput</code>与<code>onpropertychange</code>失效的情况：  （1）<code>oninput</code>事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）<code>onpropertychange</code>事件：当input设置为<code>disable=true</code>后，onpropertychange不会触发。</li></ol><hr><h4 id="3-JavaScript类型检验"><a href="#3-JavaScript类型检验" class="headerlink" title="3. JavaScript类型检验"></a><a name="checkType">3. JavaScript类型检验</a></h4><p>一个简单有用的js类型检验的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkType</span>(<span class="params">sth</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o)</span><br><span class="line">    .match(<span class="regexp">/(\w+)\]$/</span>)[<span class="number">1</span>]</span><br><span class="line">    .toLowerCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkType(&#123;&#125;)               <span class="comment">// object</span></span><br><span class="line">checkType([])               <span class="comment">// array</span></span><br><span class="line">checkType(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)     <span class="comment">// function</span></span><br><span class="line">checkType(<span class="number">1</span>)                <span class="comment">// number</span></span><br><span class="line">checkType(+<span class="string">'3'</span>)             <span class="comment">// number</span></span><br><span class="line">checkType(<span class="number">3</span>+<span class="string">''</span>)             <span class="comment">// string</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> other </tag>
            
            <tag> 置顶 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常用的markdown语法</title>
      <link href="/2018/03/02/0809013/"/>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>常用的Vim命令</title>
      <link href="/2018/03/02/0809012/"/>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>常用的GIT命令</title>
      <link href="/2018/03/02/0809011/"/>
      <content type="html"><![CDATA[]]></content>
      
      
        <tags>
            
            <tag> GIT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小窥Node.js服务端框架Express</title>
      <link href="/2018/03/02/0809010/"/>
      <content type="html"><![CDATA[]]></content>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue-cli快速构建vue.js项目</title>
      <link href="/2018/03/01/0809009/"/>
      <content type="html"><![CDATA[<ul><li><a href="#Quickstart">快速上手</a></li><li><a href="#Commands">构建命令</a></li><li><a href="#Babel">配置Babel</a></li></ul><h4 id="1-快速上手"><a href="#1-快速上手" class="headerlink" title="1. 快速上手"></a><a name="Quickstart">1. 快速上手</a></h4><p>本文介绍如何使用vue-cli快速构建vus.js项目，主要用到<code>webpack</code>，以及<code>vue-loader</code>，所以确保你的环境中安装有webpack。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装vue-cli脚手架工具</span></span><br><span class="line">$ npm install -g vue-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 my-project 目录中生成一个项目</span></span><br><span class="line"><span class="comment"># 这一步中你还可以选择是否安装vue-router,ESLint,unit tests, e2e tests...</span></span><br><span class="line">$ vue init webpack my-project</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入到项目</span></span><br><span class="line">$ <span class="built_in">cd</span> my-project</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">$ npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建并启动项目</span></span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><p>如果你在 <code>vue init webpack my-project</code> 步骤中选择安装所有的工具，那么我们的项目目录结构应该是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── build/                      # webpack config files</span><br><span class="line">│   └── ...</span><br><span class="line">├── config/</span><br><span class="line">│   ├── index.js                # main project config</span><br><span class="line">│   └── ...</span><br><span class="line">├── src/</span><br><span class="line">│   ├── main.js                 # app entry file</span><br><span class="line">│   ├── App.vue                 # main app component</span><br><span class="line">│   ├── components/             # ui components</span><br><span class="line">│   │   └── ...</span><br><span class="line">│   └── assets/                 # module assets (processed by webpack)</span><br><span class="line">│       └── ...</span><br><span class="line">├── static/                     # pure static assets (directly copied)</span><br><span class="line">├── test/</span><br><span class="line">│   └── unit/                   # unit tests</span><br><span class="line">│   │   ├── specs/              # test spec files</span><br><span class="line">│   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests</span><br><span class="line">│   │   ├── index.js            # test build entry file</span><br><span class="line">│   │   ├── jest.conf.js        # Config file when using Jest for unit tests</span><br><span class="line">│   │   └── karma.conf.js       # test runner config file when using Karma for unit tests</span><br><span class="line">│   │   ├── setup.js            # file that runs before Jest runs your unit tests</span><br><span class="line">│   └── e2e/                    # e2e tests</span><br><span class="line">│   │   ├── specs/              # test spec files</span><br><span class="line">│   │   ├── custom-assertions/  # custom assertions for e2e tests</span><br><span class="line">│   │   ├── runner.js           # test runner script</span><br><span class="line">│   │   └── nightwatch.conf.js  # test runner config file</span><br><span class="line">├── .babelrc                    # babel config</span><br><span class="line">├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor</span><br><span class="line">├── .eslintrc.js                # eslint config</span><br><span class="line">├── .eslintignore               # eslint ignore rules</span><br><span class="line">├── .gitignore                  # sensible defaults for gitignore</span><br><span class="line">├── .postcssrc.js               # postcss config</span><br><span class="line">├── index.html                  # index.html template</span><br><span class="line">├── package.json                # build scripts and dependencies</span><br><span class="line">└── README.md                   # Default README file</span><br></pre></td></tr></table></figure></p><blockquote><p>目录/文件介绍：</p></blockquote><ul><li><p><code>build/</code>：该目录保存的是开发和生产环境中的webpack配置，一般情况下是不需要进行修改的；当需要自定义webpack配置时，可以从webpack.base.conf.js开始研究。</p></li><li><p><code>config/index.js</code>：这是项目构建时需要的一些最常用到的配置文件。</p></li><li><p><code>src/</code>：这里存放的就是我们的业务代码了，我们可以根据项目需要自行配置。</p></li><li><p><code>static/</code>：在这里，我们可以存放一些我们不希望webpack来处理的静态资源文件，在使用webpack来构建时，这里的文件将会直接复制到构建后的资源目录下。</p></li><li><p><code>test/unit</code>：单元测试相关文件。</p></li><li><p><code>test/e2e</code>：e2e测试相关文件。</p></li><li><p><code>index.html</code>：基于vue.js的SPA单页应用的入口HTML模板，在开发、构建过程中，webpack将生成很多资源文件，文件之间的URL会被自动的注入到该index.html中。</p></li><li><p><code>package.json</code>：npm包源文件，包含所有的构建依赖和构建命令。</p></li></ul><h4 id="2-构建命令"><a href="#2-构建命令" class="headerlink" title="2. 构建命令"></a><a name="Commands">2. 构建命令</a></h4><p><strong>所有的构建命令都是通过<code>npm</code>脚本执行的，见<code>package.json//scripts</code>。<strong></strong></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>在本地开发环境启动一个node.js服务器。</p><ul><li><code>webpack</code> + <code>vue-loader</code> 作用于vue的单文件组件</li><li>状态保存，热加载</li><li>使用<code>ESLint</code>检查js</li><li>生成资源文件的sourcemap</li><li>……</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>在生产环境中构建资源</p><ul><li>使用<code>UglifyJS v3</code>压缩JavaScript</li><li>使用<code>html-minifier</code>压缩HTML</li><li>使用<code>cssnano</code>将所有组件的CSS提取到一个文件中</li><li>使用版本哈希编译所有的静态文件，以实现资源的持久缓存。为所有的资源自定生成合适的URL，最后注入到<code>index.html</code>中，完成整个工程的构建。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run unit</span><br></pre></td></tr></table></figure><ul><li>使用Jest在JSDOM中运行单元测试</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run lint</span><br></pre></td></tr></table></figure><ul><li>运行ESLint并报告任何linting错误。</li></ul><blockquote><p>更多构建命令请查阅相关资料</p></blockquote><h4 id="3-配置Babel"><a href="#3-配置Babel" class="headerlink" title="3. 配置Babel"></a><a name="Babel">3. 配置Babel</a></h4><blockquote><p>详见我的<a href="/2018/03/01/0809007/">另外一篇文章</a></p></blockquote><p><code>至此，通过vue-cli构建vue工程的基本过程已经结束，查看更多详细配置，</code><a href="https://vuejs-templates.github.io/webpack/" target="_blank" rel="noopener">请转</a></p>]]></content>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> webpack </tag>
            
            <tag> es6 </tag>
            
            <tag> vue.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记一次在公司中配置Babel的经历</title>
      <link href="/2018/03/01/0809007/"/>
      <content type="html"><![CDATA[<ul><li><a href="#install">安装</a></li><li><a href="#usage">使用</a></li><li><a href="#babelrc">创建.babelrc文件</a></li><li><a href="#polyfill">Babel-Polyfill</a></li><li><a href="#register">Babel-Register</a></li></ul><p>&emsp;首先，为什么会写这样一篇文章呢？在进入公司几个月后，写业务代码都是使用es5语法，es6，于是想着使用Babel来构建一下。这样既可以愉快的使用ES6了，还能舒心的写代码，何乐而不为。</p><ul><li>Babel的使用是基于Node.js环境的，所以必须先安装Node。</li><li>我们将采用通过安装babel-cli的方式来使用babel。</li></ul><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a><a name="install">1. 安装</a></h4><p>&emsp;虽然你可以在你的机器上全局安装<code>Babel CLI</code>, 但根据单个项目进行本地安装会更好一些。这样做有两个主要的原因：</p><ul><li>同一机器上的不同的项目可以依赖不同版本的 Babel, 这允许你一次更新一个项目。</li><li>这意味着在你的工作环境中没有隐含的依赖项。它将使你的项目更方便移植、更易于安装。</li></ul><blockquote><p>首先我们需要生成一个package.json文件，进入到项目目录执行<code>npm init</code>命令，随后一顿选择回车。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">YSY@SY-YU MINGW64 /d/START/webpack</span><br><span class="line">$ npm init</span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See `npm <span class="built_in">help</span> json` <span class="keyword">for</span> definitive documentation on these fields</span><br><span class="line">and exactly what they <span class="keyword">do</span>.</span><br><span class="line"></span><br><span class="line">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class="line">save it as a dependency <span class="keyword">in</span> the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (webpack)</span><br></pre></td></tr></table></figure><p><em>最后，目录下会生成一个package.json文件，打开看一下</em><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"yvshare.cn"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>里面都是刚才npm init时自己的配置</em></p><blockquote><p>我们可以通过以下命令本地安装 Babel CLI:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 全局安装</span><br><span class="line">npm install babel-cli -g</span><br><span class="line">// 安装在当前项目中</span><br><span class="line">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure><p>我们在当前目录安装babel-cli，随后我们的package.json应该长这个样：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"yvshare.cn"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-cli"</span>: <span class="string">"^6.26.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a><a name="usage">2. 使用</a></h4><ul><li>我们将把我们的指令放在本地版本的 npm 脚本中，而不是直接通过命令行来运行 Babel.</li></ul><blockquote><p>简单的在你的 package.json 中添加一个 “scripts” 属性并将 babel 命令放在它的 build 属性中：</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">    <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">      <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">+     "build": "babel src -d lib"  // 加入这一句命令</span><br><span class="line">    &#125;,</span><br><span class="line">    "devDependencies": &#123;</span><br><span class="line">      "babel-cli": "^6.26.0"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>现在从我们的终端可以运行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></p><p><em>这会按照和之前一样的方式来运行 Babel 并将输出放在 lib 目录下，唯一不同在于我们现在使用了一个本地拷贝。</em></p><blockquote><p>值得注意的是在babel的build命令是可以在build属性中自行配置的，上面是把src目录下的脚本打包到lib目录中，你也可以打包单个文件…</p></blockquote><h4 id="3-创建-babelrc配置文件"><a href="#3-创建-babelrc配置文件" class="headerlink" title="3. 创建.babelrc配置文件"></a><a name="babelrc">3. 创建.babelrc配置文件</a></h4><ul><li>虽然已经配置好了 Babel ，但并没有让它真正生效。在项目的根目录中创建一个 .babelrc 文件并启用一些插件。 <a href="https://babeljs.cn/docs/setup/#installation" target="_blank" rel="noopener">详看</a></li></ul><p>首先，你可以使用转换 ES2015+ 的 env preset：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-preset-env --save-dev</span><br></pre></td></tr></table></figure></p><p>为了让 preset 生效，你需要像下面这样定义你的 .babelrc 文件：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"env"</span>],</span><br><span class="line">  <span class="attr">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>.babelrc配置文件非常丰富：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ES2015转码规则</span></span><br><span class="line">$ npm install --save-dev babel-preset-es2015</span><br><span class="line"></span><br><span class="line"><span class="comment"># react转码规则</span></span><br><span class="line">$ npm install --save-dev babel-preset-react</span><br><span class="line"></span><br><span class="line"><span class="comment"># ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</span></span><br><span class="line">$ npm install --save-dev babel-preset-stage-0</span><br><span class="line">$ npm install --save-dev babel-preset-stage-1</span><br><span class="line">$ npm install --save-dev babel-preset-stage-2</span><br><span class="line">$ npm install --save-dev babel-preset-stage-3</span><br></pre></td></tr></table></figure><p>最后，我们的 .babelrc 文件可以长这个样：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="string">"react"</span>,</span><br><span class="line">    <span class="string">"stage-2"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4-Babel-Polyfill"><a href="#4-Babel-Polyfill" class="headerlink" title="4. Babel-Polyfill"></a><a name="polyfill">4. Babel-Polyfill</a></h4><p>Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如<code>Object.assign</code>）都不会转码。</p><p>举例来说，ES6在Array对象上新增了<code>Array.from</code>方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。</p><p>安装命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure></p><p>然后，在脚本头部，加入如下一行代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'babel-polyfill'</span>;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'babel-polyfill'</span>);</span><br></pre></td></tr></table></figure></p><h4 id="5-Babel-Register"><a href="#5-Babel-Register" class="headerlink" title="5. Babel-Register"></a><a name="register">5. Babel-Register</a></h4><p>babel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-register</span><br></pre></td></tr></table></figure></p><p>使用时，必须首先加载babel-register：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">"babel-register"</span>);</span><br><span class="line"><span class="keyword">import</span>(<span class="string">"./index.js"</span>);</span><br></pre></td></tr></table></figure></p><p>然后，就不需要手动对index.js转码了。</p><blockquote><p>需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在<code>开发环境</code>使用。</p></blockquote><h4 id="后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。"><a href="#后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。" class="headerlink" title="后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。"></a><code>后记</code>：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。</h4><hr><blockquote><p>参考文档： <a href="https://babeljs.cn/" target="_blank" rel="noopener">babeljs.cn</a> / <a href="http://www.ruanyifeng.com/blog/2016/01/babel.html?20170213113809" target="_blank" rel="noopener">ruanyifeng.com</a></p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> es6 </tag>
            
            <tag> Babel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JSON 序列化选项</title>
      <link href="/2018/02/27/0809005/"/>
      <content type="html"><![CDATA[<p>实际上，JSON.stringify()除了要序列化JavaScript对象外，还可以接受另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。<strong>第一个</strong>参数是个过滤器，可以使一个数组，也可以是个函数；<strong>第二个</strong>参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用者两个参数，可以更全面深入地控制JSON的序列化。</p><h4 id="1-过滤器（第一个参数）"><a href="#1-过滤器（第一个参数）" class="headerlink" title="1. 过滤器（第一个参数）"></a>1. 过滤器（第一个参数）</h4><p>1.数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hero = &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"MasterYi"</span>,</span><br><span class="line">    <span class="string">"skills"</span>: [</span><br><span class="line">        <span class="string">"AlphaStrike"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"Warrior"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonTxt = <span class="built_in">JSON</span>.stringify(hero, [<span class="string">"name"</span>, <span class="string">"type"</span>]);</span><br><span class="line">jsonTxt --&gt; <span class="string">"&#123;"</span>name<span class="string">":"</span>MasterYi<span class="string">","</span>type<span class="string">":"</span>Warrior<span class="string">"&#125;"</span></span><br></pre></td></tr></table></figure></p><p>2.函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonTxt = <span class="built_in">JSON</span>.stringify(hero, <span class="function"><span class="keyword">function</span>(<span class="params">k, v</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(k)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"name"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Annie"</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"type"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Mage"</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">jsonTxt --&gt; <span class="string">"&#123;"</span>name<span class="string">":"</span>Annie<span class="string">","</span>skills<span class="string">":["</span>AlphaStrike<span class="string">"],"</span>type<span class="string">":"</span>Mage<span class="string">"&#125;"</span></span><br></pre></td></tr></table></figure></p><p><em>值得注意的是，如果函数返回了undefined，那么相应的属性会被忽略。另外请务必写上default，此时返回传入的值，以便其他值都能正常出现在结果中</em></p><h4 id="2-选项（字符串缩进）"><a href="#2-选项（字符串缩进）" class="headerlink" title="2. 选项（字符串缩进）"></a>2. 选项（字符串缩进）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonTxt1 = <span class="built_in">JSON</span>.stringify(hero, <span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">jsonTxt1 --&gt;</span><br><span class="line"><span class="string">"&#123;</span></span><br><span class="line"><span class="string">  "</span>name<span class="string">": "</span>MasterYi<span class="string">",</span></span><br><span class="line"><span class="string">  "</span>skills<span class="string">": [</span></span><br><span class="line"><span class="string">    "</span>AlphaStrike<span class="string">"</span></span><br><span class="line"><span class="string">  ],</span></span><br><span class="line"><span class="string">  "</span>type<span class="string">": "</span>Warrior<span class="string">"</span></span><br><span class="line"><span class="string">&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonTxt2 = <span class="built_in">JSON</span>.stringify(hero, <span class="literal">null</span>, <span class="number">4</span>);</span><br><span class="line">jsonTxt2 --&gt;</span><br><span class="line"><span class="string">"&#123;</span></span><br><span class="line"><span class="string">    "</span>name<span class="string">": "</span>MasterYi<span class="string">",</span></span><br><span class="line"><span class="string">    "</span>skills<span class="string">": [</span></span><br><span class="line"><span class="string">        "</span>AlphaStrike<span class="string">"</span></span><br><span class="line"><span class="string">    ],</span></span><br><span class="line"><span class="string">    "</span>type<span class="string">": "</span>Warrior<span class="string">"</span></span><br><span class="line"><span class="string">&#125;"</span></span><br></pre></td></tr></table></figure><p><em>如上，结果字符串中也插入了换行符，这样一来就提高了可读性。只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。最大缩进空格数为10，大于10会默认转换为10.</em></p>]]></content>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS3 渐变</title>
      <link href="/2018/02/27/0809002/"/>
      <content type="html"><![CDATA[<h4 id="CSS3-定义了两种类型的渐变（gradients）："><a href="#CSS3-定义了两种类型的渐变（gradients）：" class="headerlink" title="CSS3 定义了两种类型的渐变（gradients）："></a>CSS3 定义了两种类型的渐变（gradients）：</h4><ol><li>线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向</li><li>径向渐变（Radial Gradients）- 由它们的中心定义<h4 id="注意：-IE-9-及之前的版本不支持渐变。"><a href="#注意：-IE-9-及之前的版本不支持渐变。" class="headerlink" title="注意： IE 9 及之前的版本不支持渐变。"></a>注意： IE 9 及之前的版本不支持渐变。</h4><h3 id="线性渐变："><a href="#线性渐变：" class="headerlink" title="线性渐变："></a>线性渐变：</h3></li></ol><ul><li><code>background: linear-gradient(direction, color-stop1, color-stop2, ...);</code><h4 id="1-线性渐变-从上到下（默认情况下）"><a href="#1-线性渐变-从上到下（默认情况下）" class="headerlink" title="1. 线性渐变 - 从上到下（默认情况下）:"></a>1. 线性渐变 - 从上到下（默认情况下）:</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(red, blue);   <span class="comment">/* Safari 5.1 - 6.0 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(red, blue);        <span class="comment">/* Opera 11.1 - 12.0 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(red, blue);      <span class="comment">/* Firefox 3.6 - 15 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(red, blue);           <span class="comment">/* 标准的语法(必须放在最后) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>效果图 <img src="/images/gradient/渐变1.png" alt="效果图"></p><h4 id="2-线性渐变-从左到右"><a href="#2-线性渐变-从左到右" class="headerlink" title="2. 线性渐变 - 从左到右"></a>2. 线性渐变 - 从左到右</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left, red , blue);  <span class="comment">/* Safari 5.1 - 6.0 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(right, red, blue);       <span class="comment">/* Opera 11.1 - 12.0 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(right, red, blue);     <span class="comment">/* Firefox 3.6 - 15 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, red , blue);      <span class="comment">/* 标准的语法（必须放在最后） */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图 <img src="/images/gradient/渐变2.png" alt="效果图"></p><h4 id="3-重复的线性渐变"><a href="#3-重复的线性渐变" class="headerlink" title="3. 重复的线性渐变"></a>3. 重复的线性渐变</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-repeating-linear-gradient</span>(red, yellow 10%, green 20%);  <span class="comment">/* Safari 5.1 - 6.0 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-o-repeating-linear-gradient</span>(red, yellow 10%, green 20%);       <span class="comment">/* Opera 11.1 - 12.0 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-moz-repeating-linear-gradient</span>(red, yellow 10%, green 20%);     <span class="comment">/* Firefox 3.6 - 15 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">repeating-linear-gradient</span>(red, yellow 10%, green 20%);          <span class="comment">/* 标准的语法（必须放在最后） */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图 <img src="/images/gradient/渐变3.png" alt="效果图"></p><h4 id="4-线性渐变进阶"><a href="#4-线性渐变进阶" class="headerlink" title="4. 线性渐变进阶"></a>4. 线性渐变进阶</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图 <img src="/images/gradient/0deg.png" alt="效果图"></p><p>没错，就是通过角度来空值渐变的起始位置：</p><ul><li>45deg 效果图 <img src="/images/gradient/45deg.png" alt="效果图"></li><li>90deg 效果图 <img src="/images/gradient/90deg.png" alt="效果图"></li><li>135deg 效果图 <img src="/images/gradient/135deg.png" alt="效果图"></li></ul><p><em>由此，我们知道了起始可以通过角度来获得我们想要的线性渐变的各种效果了，这基本能满足我们大多数的需求了。</em><br>径向渐变</p><ul><li><code>background: radial-gradient(center, shape size, start-color, ..., last-color);</code></li></ul><ol><li>径向渐变由它的中心定义。</li><li>为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。<h4 id="1-普通的径向渐变"><a href="#1-普通的径向渐变" class="headerlink" title="1. 普通的径向渐变"></a>1. 普通的径向渐变</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(red, green, blue);  <span class="comment">/* Safari 5.1 - 6.0 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-o-radial-gradient</span>(red, green, blue);       <span class="comment">/* Opera 11.6 - 12.0 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-moz-radial-gradient</span>(red, green, blue);     <span class="comment">/* Firefox 3.6 - 15 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(red, green, blue);          <span class="comment">/* 标准的语法（必须放在最后） */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>效果图 <img src="/images/gradient/径向渐变1.png" alt="效果图"></p><h4 id="2-不均匀的径向渐变"><a href="#2-不均匀的径向渐变" class="headerlink" title="2. 不均匀的径向渐变"></a>2. 不均匀的径向渐变</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(red 5%, green 15%, blue 60%);     <span class="comment">/* Safari 5.1 - 6.0 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-o-radial-gradient</span>(red 5%, green 15%, blue 60%);          <span class="comment">/* Opera 11.6 - 12.0 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-radial-gradient</span>(red 5%, green 15%, blue 60%);        <span class="comment">/* Firefox 3.6 - 15 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(red 5%, green 15%, blue 60%);             <span class="comment">/* 标准的语法 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>效果图 <img src="/images/gradient/径向渐变2.png" alt="效果图"><br><strong>径向渐变容器如果不为正方形，则渐变区域会默认呈现为椭圆，若为正方形，则会呈现为正方形。</strong></p><h4 id="3-不同尺寸的径向渐变"><a href="#3-不同尺寸的径向渐变" class="headerlink" title="3.不同尺寸的径向渐变"></a>3.不同尺寸的径向渐变</h4></li><li>closest-side</li><li>farthest-side</li><li>closest-corner</li><li><p>farthest-corner</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(70% 50%, closest-side,red,green,blue);     <span class="comment">/* Safari 5.1 - 6.0 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-o-radial-gradient</span>(70% 50%, closest-side,red,green,blue);          <span class="comment">/* Opera 11.6 - 12.0 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-moz-radial-gradient</span>(70% 50%, closest-side,red,green,blue);        <span class="comment">/* Firefox 3.6 - 15 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(70% 50%, closest-side,red,green,blue);             <span class="comment">/* 标准的语法（必须放在最后） */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>效果图 <img src="/images/gradient/径向渐变3.png" alt="效果图"></p></li></ul><ol><li>从上面的效果图中可以看出径向渐变的渐变原点的作用</li><li>通过设置尺寸属性可以改变其大小<h4 id="4-重复的径向渐变"><a href="#4-重复的径向渐变" class="headerlink" title="4.重复的径向渐变"></a>4.重复的径向渐变</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-repeating-radial-gradient</span>(red, yellow 10%, green 15%);  <span class="comment">/* Safari 5.1 - 6.0 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-o-repeating-radial-gradient</span>(red, yellow 10%, green 15%);       <span class="comment">/* Opera 11.6 - 12.0 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-moz-repeating-radial-gradient</span>(red, yellow 10%, green 15%);     <span class="comment">/* Firefox 3.6 - 15 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">repeating-radial-gradient</span>(red, yellow 10%, green 15%);          <span class="comment">/* 标准的语法（必须放在最后） */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>效果图 <img src="/images/gradient/径向渐变4.png" alt="效果图"></li></ul>]]></content>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML5存储webStorage</title>
      <link href="/2018/02/27/0809004/"/>
      <content type="html"><![CDATA[<h4 id="客户端存储数据的两个对象为："><a href="#客户端存储数据的两个对象为：" class="headerlink" title="客户端存储数据的两个对象为："></a>客户端存储数据的两个对象为：</h4><ul><li><code>localStorage</code> - 没有时间限制的数据存储</li><li><code>sessionStorage</code> - 针对一个 session(会话) 的数据存储<blockquote><p>在使用 web 存储前，应检查浏览器是否支持 localStorage 和sessionStorage :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if( typeof(Storage) !== &quot;undefined&quot; )</span><br><span class="line">&#123;</span><br><span class="line">    // 是的! 支持 localStorage  sessionStorage 对象!</span><br><span class="line">    // your code</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    // 抱歉! 不支持 web 存储。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><h5 id="1-localStorage-对象"><a href="#1-localStorage-对象" class="headerlink" title="1. localStorage 对象"></a>1. localStorage 对象</h5><ul><li>localStorage 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。<blockquote><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">localStorage.name=&quot;yasuo&quot;;</span><br><span class="line">document.getElementById(&quot;hero&quot;).innerHTML=&quot;英雄：&quot; + localStorage.name;</span><br></pre></td></tr></table></figure></blockquote></li></ul>]]></content>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> sessionStorage </tag>
            
            <tag> localStorage </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript面向对象</title>
      <link href="/2018/02/27/0809008/"/>
      <content type="html"><![CDATA[<h4 id="1-原始方式："><a href="#1-原始方式：" class="headerlink" title="1. 原始方式："></a>1. 原始方式：</h4><ul><li><p>对象字面量方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Hero = &#123; </span><br><span class="line">    name: <span class="string">'MasterYi'</span>,</span><br><span class="line">    skill: <span class="string">'AlphaStrike'</span>,</span><br><span class="line">    todo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="keyword">this</span>.name); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>Object构造函数方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Hero = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">Hero.name = <span class="string">'MasterYi'</span>;</span><br><span class="line">Hero.skill = <span class="string">'Q'</span>;</span><br><span class="line">Hero.do = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">' use '</span> + <span class="keyword">this</span>.skill + <span class="string">' kill '</span> + <span class="string">'yasuo'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert( Hero.skill );    <span class="comment">// AlphaStrike</span></span><br><span class="line">alert( Hero.do() );     <span class="comment">// MasterYi use AlphaStrike kill yasuo</span></span><br></pre></td></tr></table></figure></li></ul><p>如上，当我们要创建批量的Hero1、Hero2……时，<br>每次都要敲很多代码，资深copypaster都吃不消！<br>然后就有了下面批量生产的工厂模式。</p><h4 id="2-工厂模式"><a href="#2-工厂模式" class="headerlink" title="2. 工厂模式"></a>2. 工厂模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heroObj</span>(<span class="params">name, skill</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Hero = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">    Hero.name = name;</span><br><span class="line">    Hero.skill = skill;</span><br><span class="line">    Hero.do = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">' use '</span> + <span class="keyword">this</span>.skill + <span class="string">' kill '</span> + <span class="string">'MasterYi'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Hero;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> riven = heroObj(<span class="string">'yasuo'</span>, <span class="string">'R'</span>);</span><br><span class="line"><span class="keyword">var</span> ashe = heroObj(<span class="string">'Caitlin'</span>, <span class="string">'W'</span>);</span><br><span class="line"></span><br><span class="line">alert(riven.skill);     <span class="comment">// R</span></span><br><span class="line">alert(ashe.do());       <span class="comment">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure><p>工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。<br>指定姓名年龄就可以造一堆小宝宝啦，解放双手。<br>但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、<br>是人还是狗傻傻分不清（instanceof 测试为 Object），<br>另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？</p><h4 id="3-构造函数"><a href="#3-构造函数" class="headerlink" title="3. 构造函数"></a>3. 构造函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HeroObj</span>(<span class="params">name, skill</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.skill = skill;</span><br><span class="line">    <span class="keyword">this</span>.do = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">' use '</span> + <span class="keyword">this</span>.skill + <span class="string">' kill '</span> + <span class="string">'MasterYi'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> riven = <span class="keyword">new</span> heroObj(<span class="string">'yasuo'</span>, <span class="string">'R'</span>);</span><br><span class="line"><span class="keyword">var</span> ashe = <span class="keyword">new</span> heroObj(<span class="string">'Caitlin'</span>, <span class="string">'W'</span>);</span><br><span class="line"></span><br><span class="line">alert(riven.skill);     <span class="comment">// R</span></span><br><span class="line">alert(ashe.do());       <span class="comment">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure><p>ECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。</p><h4 id="4-原型模式"><a href="#4-原型模式" class="headerlink" title="4. 原型模式"></a>4. 原型模式</h4><ul><li><p>直接使用 prototype 属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hero</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Hero.prototype.name = <span class="string">'MasterYi'</span>;</span><br><span class="line">Hero.prototype.skill = <span class="string">'AlphaStrike'</span>;</span><br><span class="line">Hero.prototype.do = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="keyword">this</span>.name); &#125;;</span><br></pre></td></tr></table></figure></li><li><p>字面量定义方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hero</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Hero.prototype = &#123;</span><br><span class="line">    name: <span class="string">'MasterYi'</span>,</span><br><span class="line">    skill: <span class="string">'AlphaStrike'</span>,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="keyword">this</span>.name); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Hero(); <span class="comment">//name='MasterYi'</span></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Hero(); <span class="comment">//name='MasterYi'</span></span><br></pre></td></tr></table></figure></li></ul><p>这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。</p><h4 id="5-混合模式"><a href="#5-混合模式" class="headerlink" title="5. 混合模式"></a>5. 混合模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hero</span> (<span class="params">name, skill</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.skill = skill;</span><br><span class="line">&#125;</span><br><span class="line">Hero.prototype = &#123;</span><br><span class="line">    skillLists: [<span class="string">'Q'</span>, <span class="string">'W'</span>, <span class="string">'E'</span>, <span class="string">'R'</span>];</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">do</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name + <span class="string">' use '</span> + <span class="keyword">this</span>.skill + <span class="string">' kill '</span> + <span class="string">'MasterYi'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Hero(<span class="string">'yasuo'</span>, <span class="string">'R'</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Hero(<span class="string">'ashe'</span>, <span class="string">'w'</span>);</span><br><span class="line">p1.sayName();   <span class="comment">// yasuo</span></span><br><span class="line">p1.skillLists;  <span class="comment">// ['Q', 'W', 'E', 'R']</span></span><br><span class="line">p2.do();        <span class="comment">// ashe use w kill MasterYi</span></span><br></pre></td></tr></table></figure><h4 id="6-使用class关键字"><a href="#6-使用class关键字" class="headerlink" title="6. 使用class关键字"></a>6. 使用<code>class</code>关键字</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'MasterYi'</span>;</span><br><span class="line">        <span class="keyword">this</span>.skill = <span class="string">'AlphaStrike'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">do</span>(enemy)&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name + <span class="string">' use '</span> +  <span class="keyword">this</span>.skill + <span class="string">' kill '</span> + enemy)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ashe = <span class="keyword">new</span> Hero();</span><br><span class="line">ashe.do(<span class="string">'ashe'</span>);       <span class="comment">// MasterYi use AlphaStrike kill ashe</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yasuo</span> <span class="keyword">extends</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">'yasuo'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> yasuo = <span class="keyword">new</span> Yasuo();</span><br><span class="line">yasuo.do(<span class="string">'timor'</span>);      <span class="comment">// yasuo use AlphaStrike kill timor</span></span><br></pre></td></tr></table></figure><p>这里涉及到 <code>ES6</code> 里的新特性，想了解 <code>ES6</code> 中更多的新特性，大家可以去看看 <a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a> 老师的博客。</p>]]></content>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于javascript数组的一些思考</title>
      <link href="/2018/02/27/0809006/"/>
      <content type="html"><![CDATA[<h4 id="关于数组的一些认识"><a href="#关于数组的一些认识" class="headerlink" title="关于数组的一些认识"></a>关于数组的一些认识</h4><ol><li>使用构造器函数创建数组时:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure></li></ol><ul><li>若参数只有一个，且为数字，<code>let ary1 = new Array(3)</code>，这是其实我们是在指定数组的长度的，即 <code>ary1.length === 3</code>。<code>ary1[0]</code>则为<code>undefined</code>;</li><li>当定义<code>let ary2 = new Array(1, 2, 3)</code>时，此时<code>ary2 === [1, 2, 3]</code>;</li></ul><ol><li><p>JS中的数组定义非常的自由：<br>看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">ary[<span class="number">5</span>] = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(ary);           <span class="comment">// [1,2,3,undefined,undefined,5]</span></span><br><span class="line"><span class="built_in">console</span>.log(ary.length);    <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>再看：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">ary2.length = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(ary2);      <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="常用的数组API"><a href="#常用的数组API" class="headerlink" title="常用的数组API"></a>常用的数组API</h4><ol><li>万能方法 <code>splice()</code></li></ol><ul><li>splice()方法允许我们对数组进行插入、替换和删除的功能。<strong>splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组</strong>，简直完美呀！</li><li><code>splice()</code>方法接受三个参数，<strong>第一个</strong>为开始索引，<strong>第二个</strong>为删除元素的位置，<strong>第三个</strong>为插入的元素，可以为第二个，当然也可省略（表示删除元素）。</li><li><code>splice()</code>方法会修改原数组！</li><li>通过以下三个demo了解一下具体的用法吧：<br>插入:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary1 = [<span class="string">"first"</span>, <span class="string">"second"</span>, <span class="string">"third"</span>, <span class="string">"forth"</span>, <span class="string">"fifth"</span>];</span><br><span class="line"><span class="keyword">let</span> ary2 = ary1.splice(<span class="number">1</span>,<span class="number">0</span>,<span class="string">"add1"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ary1);      [ <span class="string">'first'</span>, <span class="string">'add1'</span>, <span class="string">'second'</span>, <span class="string">'third'</span>, <span class="string">'forth'</span>, <span class="string">'fifth'</span> ]</span><br><span class="line"><span class="built_in">console</span>.log(ary2);      [] 没有删除则放回一个空数组</span><br></pre></td></tr></table></figure></li></ul><p>替换：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary1 = [<span class="string">"first"</span>, <span class="string">"second"</span>, <span class="string">"third"</span>, <span class="string">"forth"</span>, <span class="string">"fifth"</span>];</span><br><span class="line"><span class="keyword">let</span> ary2 = ary1.splice(<span class="number">1</span>,<span class="number">1</span>,<span class="string">"replace"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ary1);      [ <span class="string">'first'</span>, <span class="string">"replace, 'third', 'forth', 'fifth' ]</span></span><br><span class="line"><span class="string">console.log(ary2);      ["</span>second<span class="string">"] 返回被删除(即替换)的数组</span></span><br></pre></td></tr></table></figure></p><p>删除：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary1 = [<span class="string">"first"</span>, <span class="string">"second"</span>, <span class="string">"third"</span>, <span class="string">"forth"</span>, <span class="string">"fifth"</span>];</span><br><span class="line"><span class="keyword">let</span> ary2 = ary1.splice(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ary1);      [<span class="string">"second"</span>, <span class="string">"third"</span>, <span class="string">"forth"</span>]</span><br><span class="line"><span class="built_in">console</span>.log(ary2);      [<span class="string">"first"</span>, <span class="string">"fifth"</span>]</span><br></pre></td></tr></table></figure></p><ol><li><code>slice()</code> 方法</li></ol><ul><li><code>slice()</code> 方法可以接受两个参数(start, end)；</li><li><code>slice()</code> 方法可从已有的数组中返回选定的元素；</li><li><code>slice()</code> 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；</li><li><code>slice()</code> 方法<strong>不会改变原始数组</strong>，而是返回一个新数组。<br>demo1:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="string">"first"</span>, <span class="string">"second"</span>, <span class="string">"third"</span>, <span class="string">"forth"</span>, <span class="string">"fifth"</span>];</span><br><span class="line"><span class="built_in">console</span>.log (ary.slice(<span class="number">1</span>,<span class="number">2</span>) );      <span class="comment">// ["second"]</span></span><br><span class="line"><span class="keyword">let</span> ary1 = ary.slice(<span class="number">1</span>,<span class="number">2</span>);          <span class="comment">// ["second"]</span></span><br><span class="line"><span class="keyword">let</span> ary2 = ary.slice(<span class="number">1</span>,<span class="number">3</span>);          <span class="comment">// ["second", "third"]</span></span><br><span class="line"><span class="built_in">console</span>.log(ary);                   <span class="comment">// ["first", "second", "third", "forth", "fifth"];</span></span><br></pre></td></tr></table></figure></li></ul><p>demo2:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="string">"first"</span>, <span class="string">"second"</span>, <span class="string">"third"</span>, <span class="string">"forth"</span>, <span class="string">"fifth"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(ary.slice(<span class="number">1</span>,<span class="number">2</span>));    <span class="comment">// ["second"]</span></span><br><span class="line"><span class="built_in">console</span>.log(ary.slice(<span class="number">1</span>,<span class="number">3</span>));    <span class="comment">// ["second", "third"]</span></span><br><span class="line"><span class="built_in">console</span>.log(ary));              <span class="comment">// ["first", "second", "third", "forth", "fifth"];</span></span><br></pre></td></tr></table></figure></p><p>demo3:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="string">"first"</span>, <span class="string">"second"</span>, <span class="string">"third"</span>, <span class="string">"forth"</span>, <span class="string">"fifth"</span>];</span><br><span class="line"><span class="keyword">let</span> ary1 = ary.slice();     <span class="comment">// ["first", "second", "third", "forth", "fifth"];</span></span><br><span class="line"><span class="keyword">let</span> ary2 = ary.slice(<span class="number">0</span>);     <span class="comment">// ["first", "second", "third", "forth", "fifth"];</span></span><br><span class="line"></span><br><span class="line">ary === ary1;       <span class="comment">// false</span></span><br><span class="line">ary === ary2;       <span class="comment">// false</span></span><br><span class="line">ary1 === ary2;      <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p><strong>看出来啥猫腻没，这不是深复制一个数据吗！</strong></p>]]></content>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/02/11/0809000/"/>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hello</title>
      <link href="/2017/02/09/0809001/"/>
      <content type="html"><![CDATA[]]></content>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
