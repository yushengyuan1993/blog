{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/anatole/source/css/blog_basic.css","path":"css/blog_basic.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/anatole/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","path":"js/jquery-migrate-1.2.1.min.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery.appear.js","path":"js/jquery.appear.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/logo@2x.png","path":"images/logo@2x.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/livere.js","path":"js/livere.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/anatole/.gitignore","hash":"cd089ae45ce870c45e434019e8f1ed4f066cd425","modified":1518334280309},{"_id":"themes/anatole/LICENSE","hash":"ee28de09fb00973dd131803ec3b30b6526c716d7","modified":1518319018205},{"_id":"themes/anatole/README.md","hash":"b1560aeedb772e839b93e71cc872330008bf7171","modified":1518319018206},{"_id":"themes/anatole/_config.sample.yml","hash":"7e1657b886a344a15a6da2c36f99f7269b4fb79b","modified":1518338163017},{"_id":"source/_posts/codeing中常用到的tips.md","hash":"0035ab47c3082d5cb5085e451a55250404247903","modified":1519973812882},{"_id":"source/_posts/JavaScript 创建对象的几种常见的方式.md","hash":"16eac98d70722216345aabda6211c7d50c2f8a57","modified":1519973918294},{"_id":"source/_posts/hello-world.md","hash":"4304a12b19ad6556efd208d18a51cff3519ad525","modified":1519973845283},{"_id":"source/_posts/hello.md","hash":"d28f318b4c14e3458a5063133ca23d64d608de51","modified":1519973854845},{"_id":"source/tags/index.md","hash":"4e5a63708cf4c6d561273edaeb06c990269a15f7","modified":1519717535259},{"_id":"source/_posts/关于JavaScript数组的一些思考.md","hash":"8f7221a5378f8f02f48fb049d206563a50eaf21d","modified":1519973897359},{"_id":"themes/anatole/package.json","hash":"eb94a9d0487218419c726152189c1c915d0c4fa7","modified":1518319349098},{"_id":"source/about/index.md","hash":"04ba66073f092f19094c5e7bbb7c221ef4a7ebbd","modified":1519641398391},{"_id":"themes/anatole/languages/pt-BR--.yml","hash":"765f275d7547779d67a1e83c55ef8850918e216e","modified":1518334973849},{"_id":"themes/anatole/languages/zh-cn.yml","hash":"b6ad22bfb3448d0d54cea0bcbb431e28e253cff9","modified":1518319018211},{"_id":"themes/anatole/layout/archive.pug","hash":"e5a7c55ff6402932dd6061b042c2695028814cfc","modified":1518319018213},{"_id":"themes/anatole/layout/category.pug","hash":"75ac0c1284a307a72e7b2f6cbf90f83f853e57f4","modified":1518319018214},{"_id":"themes/anatole/layout/index.pug","hash":"8c8d356abe40fc2465aa85c6904d9bc199458448","modified":1518319018215},{"_id":"themes/anatole/layout/mixins.pug","hash":"eee85d29a63b4d57d79fa331aeb26b10c1e21d04","modified":1518319018216},{"_id":"themes/anatole/layout/page.pug","hash":"4021d42128a2fccbb3a445f5a7d41dea93c8edff","modified":1518319018217},{"_id":"themes/anatole/layout/tag.pug","hash":"fc386024d51ce6834ee287d9027460bdd4273882","modified":1518319018226},{"_id":"themes/anatole/_config.yml","hash":"aaeae0040009bb4513afdb046aac968dffe65b77","modified":1519957735655},{"_id":"themes/anatole/layout/post.pug","hash":"dedefc5a4bed9901f92680183af47c7ad94d95cb","modified":1519959076830},{"_id":"themes/anatole/layout/partial/comments.pug","hash":"bce55420275c10c3052255110d22b808ceb3db3b","modified":1518319018218},{"_id":"themes/anatole/layout/partial/footer.pug","hash":"965539c08fe3d0d40142f1b3468d692c5fdce76a","modified":1518336517600},{"_id":"themes/anatole/layout/partial/head.pug","hash":"dc32113aae3d8c07f6ab8878a056d61173a9a82a","modified":1518319018220},{"_id":"themes/anatole/layout/partial/layout.pug","hash":"82f0858bf77082d39e5358508ab4953fd27b5cee","modified":1519958721079},{"_id":"themes/anatole/layout/partial/sidebar.pug","hash":"f8ee2fac51d62a008d97f545b1ad35961d5e3efc","modified":1519885049005},{"_id":"themes/anatole/layout/partial/nav.pug","hash":"8a3c01d6c3a7beca3d2b4cb1c4dc8157d751564d","modified":1519717250610},{"_id":"themes/anatole/source/css/blog_basic.css","hash":"a29ed959f16616515db3edb8c363d7dfaafe8f64","modified":1519881071740},{"_id":"themes/anatole/source/css/font-awesome.min.css","hash":"63ab94ae803ede34930640aa39219866bddeab63","modified":1518319018231},{"_id":"themes/anatole/source/css/style.css","hash":"d5ae9b662c3dd09bfad1cd80d90bb39fe2331b33","modified":1519970398087},{"_id":"themes/anatole/source/css/style.scss","hash":"9d1df0a936aebfa25adc05d6b7304e75ef027fd4","modified":1518319018233},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1518319018243},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","hash":"875bce76a77590c3c438bbc6e014b39c23c8c88d","modified":1518319018249},{"_id":"themes/anatole/source/js/jquery.appear.js","hash":"8e936fd0f45787309d917541e911c3440f7565b1","modified":1518319018251},{"_id":"themes/anatole/source/images/favicon.png","hash":"86ddbf2c91296f911b92aee951da38e28d9ffc20","modified":1518329502514},{"_id":"themes/anatole/source/images/logo@2x.png","hash":"079514207e436af0a6ac2494595702a47c060eac","modified":1518329973217},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1518319018235},{"_id":"themes/anatole/source/js/jquery.js","hash":"aa6ccf721c4e76921abda46c120772d364e5b285","modified":1518319018254},{"_id":"themes/anatole/source/images/logo.png","hash":"fcfff1033431ef67503991c81e267eaa1def9a23","modified":1518329541094},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1518319018242},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","hash":"e471023286b7dd1d2ccc72f670a471cfdfeafab7","modified":1518319018239},{"_id":"source/_posts/JSON-序列化选项.md","hash":"3d26c94253c981b69a4a68e14b546e4831abd722","modified":1519973888296},{"_id":"source/_posts/HTML5-存储.md","hash":"24c45f6a79327454102533ef105f8962e076895a","modified":1519973879282},{"_id":"source/_posts/CSS3-渐变.md","hash":"311581db36e124be78710bc295021a20d376a344","modified":1519973870690},{"_id":"source/_posts/记一次在公司项目中使用Babel的经历.md","hash":"89f1f4b7b09cffa51521d5547fba43c62dfe456a","modified":1519973907552},{"_id":"source/_posts/vue-cli快速构建vue-js项目.md","hash":"a754aaecc2f9fbe9f1440b77a9702dafc11a6d07","modified":1519973929485},{"_id":"themes/anatole/source/js/livere.js","hash":"d3fdfcd7aa0a7345c477f02e6c938175d8c8cbfc","modified":1519969835101}],"Category":[],"Data":[],"Page":[{"_content":"[CSS](/tags/CSS/)","source":"tags/index.md","raw":"[CSS](/tags/CSS/)","date":"2018-02-27T07:45:35.259Z","updated":"2018-02-27T07:45:35.259Z","path":"tags/index.html","title":"","comments":1,"layout":"page","_id":"cje5flt4r00014sc0dfdpvbuq","content":"<p><a href=\"/tags/CSS/\">CSS</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"/tags/CSS/\">CSS</a></p>\n"},{"title":"about","date":"2018-02-26T10:36:38.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-02-26 18:36:38\n---\n","updated":"2018-02-26T10:36:38.391Z","path":"about/index.html","comments":1,"layout":"page","_id":"cje5flt5m000l4sc0dkz9rmmk","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"id":"0809003","title":"codeing中常用到的tips","date":"2078-12-31T16:50:00.000Z","_content":"\n- <a href=\"#getKey\">1. 获取json的`key`值</a>\n- <a href=\"#input\">2. JS实时监听文本域的变化</a>\n- <a href=\"#checkType\">3. JavaScript类型检验</a>\n---\n#### <a name=\"getKey\">1. </a>获取json的 `key` 值\n```javascript\nvar obj = { name: \"naruto\", age: 23, dad: \"minato\"}\n````\n##### 1.1. 使用 `for in` 来循环 :\n```javascript\nfor (var key in obj){\n    console.log(key) // 依次输出 \"name\", \"age\", \"dad\"\n}\n```\n这种方法比较常见，相信大家看到这个问题时第一时间都会想到吧，但是我要介绍的是下面这个更简单的方法。\n##### 1.2. 使用 `Object.keys()` 来获取 :\n```\n- console.log( Object.keys(obj) ) // 输出一个数组 [\"name\", \"age\", \"dad\"]\n- 所以, 当我们需要某个key值时可以从当前数组中取得。\n```\n---\n\n#### <a name=\"input\">2. JS实时监听文本域的变化</a>\n众所周知，使用 `onchange` 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， `onchange` 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用`keydown`和`keyup`外，我们还可以:\n##### 2.1. 使用 `onpropertychange` \n```javascript\n<input type=\"text\" id=\"txt\">\n\n$(\"#ysy\").bind('input propertychange', function() {  \n    console.log(new Date().getTime()); \n});\n```\n##### 2.2 使用 `oninput` \n```javascript\ndocument.getElementById('txt').oninput = function(){\n    console.log(this.value);\n}\n```\n最后，总结一下`onchange, onpropertychange`和`oninput`之间的异同：\n1. `onchange`事件与`onpropertychange`事件的区别：`onchange`事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；`onpropertychange`事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。\n2. `oninput`事件与`onpropertychange`事件的区别：`oninput`事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；`onpropertychange`事件是任何属性改变都会触发的，而`oninput`却只在value改变时触发，`oninput`要通过`addEventListener()`来注册，`onpropertychange`注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）>\n3. `oninput`与`onpropertychange`失效的情况：  （1）`oninput`事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）`onpropertychange`事件：当input设置为`disable=true`后，onpropertychange不会触发。\n---\n\n#### <a name=\"checkType\">3. JavaScript类型检验</a>\n一个简单有用的js类型检验的方法\n```javascript\nfunction checkType(sth) {\n    return Object.prototype.toString.call(o)\n    .match(/(\\w+)\\]$/)[1]\n    .toLowerCase();\n}\n\ncheckType({})               // object\ncheckType([])               // array\ncheckType(function(){})     // function\ncheckType(1)                // number\ncheckType(+'3')             // number\ncheckType(3+'')             // string\n```\n","source":"_posts/codeing中常用到的tips.md","raw":"---\nid: 0809003\ntitle: codeing中常用到的tips\ndate: 2079-01-01 00:050:00\ntags: \n    - JavaScript\n    - other\n    - 置顶\ncategories:\n---\n\n- <a href=\"#getKey\">1. 获取json的`key`值</a>\n- <a href=\"#input\">2. JS实时监听文本域的变化</a>\n- <a href=\"#checkType\">3. JavaScript类型检验</a>\n---\n#### <a name=\"getKey\">1. </a>获取json的 `key` 值\n```javascript\nvar obj = { name: \"naruto\", age: 23, dad: \"minato\"}\n````\n##### 1.1. 使用 `for in` 来循环 :\n```javascript\nfor (var key in obj){\n    console.log(key) // 依次输出 \"name\", \"age\", \"dad\"\n}\n```\n这种方法比较常见，相信大家看到这个问题时第一时间都会想到吧，但是我要介绍的是下面这个更简单的方法。\n##### 1.2. 使用 `Object.keys()` 来获取 :\n```\n- console.log( Object.keys(obj) ) // 输出一个数组 [\"name\", \"age\", \"dad\"]\n- 所以, 当我们需要某个key值时可以从当前数组中取得。\n```\n---\n\n#### <a name=\"input\">2. JS实时监听文本域的变化</a>\n众所周知，使用 `onchange` 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， `onchange` 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用`keydown`和`keyup`外，我们还可以:\n##### 2.1. 使用 `onpropertychange` \n```javascript\n<input type=\"text\" id=\"txt\">\n\n$(\"#ysy\").bind('input propertychange', function() {  \n    console.log(new Date().getTime()); \n});\n```\n##### 2.2 使用 `oninput` \n```javascript\ndocument.getElementById('txt').oninput = function(){\n    console.log(this.value);\n}\n```\n最后，总结一下`onchange, onpropertychange`和`oninput`之间的异同：\n1. `onchange`事件与`onpropertychange`事件的区别：`onchange`事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；`onpropertychange`事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。\n2. `oninput`事件与`onpropertychange`事件的区别：`oninput`事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；`onpropertychange`事件是任何属性改变都会触发的，而`oninput`却只在value改变时触发，`oninput`要通过`addEventListener()`来注册，`onpropertychange`注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）>\n3. `oninput`与`onpropertychange`失效的情况：  （1）`oninput`事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）`onpropertychange`事件：当input设置为`disable=true`后，onpropertychange不会触发。\n---\n\n#### <a name=\"checkType\">3. JavaScript类型检验</a>\n一个简单有用的js类型检验的方法\n```javascript\nfunction checkType(sth) {\n    return Object.prototype.toString.call(o)\n    .match(/(\\w+)\\]$/)[1]\n    .toLowerCase();\n}\n\ncheckType({})               // object\ncheckType([])               // array\ncheckType(function(){})     // function\ncheckType(1)                // number\ncheckType(+'3')             // number\ncheckType(3+'')             // string\n```\n","slug":"codeing中常用到的tips","published":1,"updated":"2018-03-02T06:56:52.882Z","_id":"cje5flt4k00004sc06elpvb0g","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><a href=\"#getKey\">1. 获取json的<code>key</code>值</a></li>\n<li><a href=\"#input\">2. JS实时监听文本域的变化</a></li>\n<li><a href=\"#checkType\">3. JavaScript类型检验</a></li>\n</ul>\n<hr>\n<h4 id=\"1-获取json的-key-值\"><a href=\"#1-获取json的-key-值\" class=\"headerlink\" title=\"1. 获取json的 key 值\"></a><a name=\"getKey\">1. </a>获取json的 <code>key</code> 值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"naruto\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">23</span>, <span class=\"attr\">dad</span>: <span class=\"string\">\"minato\"</span>&#125;</span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"1-1-使用-for-in-来循环\"><a href=\"#1-1-使用-for-in-来循环\" class=\"headerlink\" title=\"1.1. 使用 for in 来循环 :\"></a>1.1. 使用 <code>for in</code> 来循环 :</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key) <span class=\"comment\">// 依次输出 \"name\", \"age\", \"dad\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法比较常见，相信大家看到这个问题时第一时间都会想到吧，但是我要介绍的是下面这个更简单的方法。</p>\n<h5 id=\"1-2-使用-Object-keys-来获取\"><a href=\"#1-2-使用-Object-keys-来获取\" class=\"headerlink\" title=\"1.2. 使用 Object.keys() 来获取 :\"></a>1.2. 使用 <code>Object.keys()</code> 来获取 :</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- console.log( Object.keys(obj) ) // 输出一个数组 [&quot;name&quot;, &quot;age&quot;, &quot;dad&quot;]</span><br><span class=\"line\">- 所以, 当我们需要某个key值时可以从当前数组中取得。</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"2-JS实时监听文本域的变化\"><a href=\"#2-JS实时监听文本域的变化\" class=\"headerlink\" title=\"2. JS实时监听文本域的变化\"></a><a name=\"input\">2. JS实时监听文本域的变化</a></h4><p>众所周知，使用 <code>onchange</code> 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， <code>onchange</code> 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用<code>keydown</code>和<code>keyup</code>外，我们还可以:</p>\n<h5 id=\"2-1-使用-onpropertychange\"><a href=\"#2-1-使用-onpropertychange\" class=\"headerlink\" title=\"2.1. 使用 onpropertychange\"></a>2.1. 使用 <code>onpropertychange</code></h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"txt\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">\"#ysy\"</span>).bind(<span class=\"string\">'input propertychange'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-2-使用-oninput\"><a href=\"#2-2-使用-oninput\" class=\"headerlink\" title=\"2.2 使用 oninput\"></a>2.2 使用 <code>oninput</code></h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'txt'</span>).oninput = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，总结一下<code>onchange, onpropertychange</code>和<code>oninput</code>之间的异同：</p>\n<ol>\n<li><code>onchange</code>事件与<code>onpropertychange</code>事件的区别：<code>onchange</code>事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；<code>onpropertychange</code>事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。</li>\n<li><code>oninput</code>事件与<code>onpropertychange</code>事件的区别：<code>oninput</code>事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；<code>onpropertychange</code>事件是任何属性改变都会触发的，而<code>oninput</code>却只在value改变时触发，<code>oninput</code>要通过<code>addEventListener()</code>来注册，<code>onpropertychange</code>注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）&gt;</li>\n<li><code>oninput</code>与<code>onpropertychange</code>失效的情况：  （1）<code>oninput</code>事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）<code>onpropertychange</code>事件：当input设置为<code>disable=true</code>后，onpropertychange不会触发。</li>\n</ol>\n<hr>\n<h4 id=\"3-JavaScript类型检验\"><a href=\"#3-JavaScript类型检验\" class=\"headerlink\" title=\"3. JavaScript类型检验\"></a><a name=\"checkType\">3. JavaScript类型检验</a></h4><p>一个简单有用的js类型检验的方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkType</span>(<span class=\"params\">sth</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o)</span><br><span class=\"line\">    .match(<span class=\"regexp\">/(\\w+)\\]$/</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    .toLowerCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkType(&#123;&#125;)               <span class=\"comment\">// object</span></span><br><span class=\"line\">checkType([])               <span class=\"comment\">// array</span></span><br><span class=\"line\">checkType(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)     <span class=\"comment\">// function</span></span><br><span class=\"line\">checkType(<span class=\"number\">1</span>)                <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(+<span class=\"string\">'3'</span>)             <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(<span class=\"number\">3</span>+<span class=\"string\">''</span>)             <span class=\"comment\">// string</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"#getKey\">1. 获取json的<code>key</code>值</a></li>\n<li><a href=\"#input\">2. JS实时监听文本域的变化</a></li>\n<li><a href=\"#checkType\">3. JavaScript类型检验</a></li>\n</ul>\n<hr>\n<h4 id=\"1-获取json的-key-值\"><a href=\"#1-获取json的-key-值\" class=\"headerlink\" title=\"1. 获取json的 key 值\"></a><a name=\"getKey\">1. </a>获取json的 <code>key</code> 值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"naruto\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">23</span>, <span class=\"attr\">dad</span>: <span class=\"string\">\"minato\"</span>&#125;</span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"1-1-使用-for-in-来循环\"><a href=\"#1-1-使用-for-in-来循环\" class=\"headerlink\" title=\"1.1. 使用 for in 来循环 :\"></a>1.1. 使用 <code>for in</code> 来循环 :</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key) <span class=\"comment\">// 依次输出 \"name\", \"age\", \"dad\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法比较常见，相信大家看到这个问题时第一时间都会想到吧，但是我要介绍的是下面这个更简单的方法。</p>\n<h5 id=\"1-2-使用-Object-keys-来获取\"><a href=\"#1-2-使用-Object-keys-来获取\" class=\"headerlink\" title=\"1.2. 使用 Object.keys() 来获取 :\"></a>1.2. 使用 <code>Object.keys()</code> 来获取 :</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- console.log( Object.keys(obj) ) // 输出一个数组 [&quot;name&quot;, &quot;age&quot;, &quot;dad&quot;]</span><br><span class=\"line\">- 所以, 当我们需要某个key值时可以从当前数组中取得。</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"2-JS实时监听文本域的变化\"><a href=\"#2-JS实时监听文本域的变化\" class=\"headerlink\" title=\"2. JS实时监听文本域的变化\"></a><a name=\"input\">2. JS实时监听文本域的变化</a></h4><p>众所周知，使用 <code>onchange</code> 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， <code>onchange</code> 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用<code>keydown</code>和<code>keyup</code>外，我们还可以:</p>\n<h5 id=\"2-1-使用-onpropertychange\"><a href=\"#2-1-使用-onpropertychange\" class=\"headerlink\" title=\"2.1. 使用 onpropertychange\"></a>2.1. 使用 <code>onpropertychange</code></h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"txt\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">\"#ysy\"</span>).bind(<span class=\"string\">'input propertychange'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-2-使用-oninput\"><a href=\"#2-2-使用-oninput\" class=\"headerlink\" title=\"2.2 使用 oninput\"></a>2.2 使用 <code>oninput</code></h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'txt'</span>).oninput = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，总结一下<code>onchange, onpropertychange</code>和<code>oninput</code>之间的异同：</p>\n<ol>\n<li><code>onchange</code>事件与<code>onpropertychange</code>事件的区别：<code>onchange</code>事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；<code>onpropertychange</code>事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。</li>\n<li><code>oninput</code>事件与<code>onpropertychange</code>事件的区别：<code>oninput</code>事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；<code>onpropertychange</code>事件是任何属性改变都会触发的，而<code>oninput</code>却只在value改变时触发，<code>oninput</code>要通过<code>addEventListener()</code>来注册，<code>onpropertychange</code>注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）&gt;</li>\n<li><code>oninput</code>与<code>onpropertychange</code>失效的情况：  （1）<code>oninput</code>事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）<code>onpropertychange</code>事件：当input设置为<code>disable=true</code>后，onpropertychange不会触发。</li>\n</ol>\n<hr>\n<h4 id=\"3-JavaScript类型检验\"><a href=\"#3-JavaScript类型检验\" class=\"headerlink\" title=\"3. JavaScript类型检验\"></a><a name=\"checkType\">3. JavaScript类型检验</a></h4><p>一个简单有用的js类型检验的方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkType</span>(<span class=\"params\">sth</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o)</span><br><span class=\"line\">    .match(<span class=\"regexp\">/(\\w+)\\]$/</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    .toLowerCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkType(&#123;&#125;)               <span class=\"comment\">// object</span></span><br><span class=\"line\">checkType([])               <span class=\"comment\">// array</span></span><br><span class=\"line\">checkType(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)     <span class=\"comment\">// function</span></span><br><span class=\"line\">checkType(<span class=\"number\">1</span>)                <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(+<span class=\"string\">'3'</span>)             <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(<span class=\"number\">3</span>+<span class=\"string\">''</span>)             <span class=\"comment\">// string</span></span><br></pre></td></tr></table></figure></p>\n"},{"id":"0809008","title":"JavaScript 创建对象的几种常见的方式","date":"2018-02-27T07:52:37.000Z","_content":"\n#### 1. 原始方式：\n* 对象字面量方式\n```javascript\nvar Hero = { \n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    todo: function () { alert(this.name); }\n};\n```\n* Object构造函数方式\n```javascript\nvar Hero = new Object();\n\nHero.name = 'MasterYi';\nHero.skill = 'Q';\nHero.do = function(){\n    return this.name + ' use ' + this.skill + ' kill ' + 'yasuo';\n}\n\nalert( Hero.skill );    // AlphaStrike\nalert( Hero.do() );     // MasterYi use AlphaStrike kill yasuo\n```\n如上，当我们要创建批量的Hero1、Hero2……时，\n每次都要敲很多代码，资深copypaster都吃不消！\n然后就有了下面批量生产的工厂模式。\n\n#### 2. 工厂模式\n```javascript\nfunction heroObj(name, skill){\n    var Hero = new Object();\n\n    Hero.name = name;\n    Hero.skill = skill;\n    Hero.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n    return Hero;\n}\nvar riven = heroObj('yasuo', 'R');\nvar ashe = heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\n工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。\n指定姓名年龄就可以造一堆小宝宝啦，解放双手。\n但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、\n是人还是狗傻傻分不清（instanceof 测试为 Object），\n另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？\n\n#### 3. 构造函数\n```javascript\nfunction HeroObj(name, skill){\n\n    this.name = name;\n    this.skill = skill;\n    this.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n}\n\nvar riven = new heroObj('yasuo', 'R');\nvar ashe = new heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\nECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。\n\n#### 4. 原型模式\n* 直接使用 prototype 属性\n```javascript\nfunction Hero () {}\nHero.prototype.name = 'MasterYi';\nHero.prototype.skill = 'AlphaStrike';\nHero.prototype.do = function () { alert(this.name); };\n```\n* 字面量定义方式\n```javascript\nfunction Hero () {}\nHero.prototype = {\n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    sayName: function () { alert(this.name); }\n};\nvar p1 = new Hero(); //name='MasterYi'\nvar p2 = new Hero(); //name='MasterYi'\n```\n这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。\n\n#### 5. 混合模式\n```javascript\nfunction Hero (name, skill) {\n    this.name = name;\n    this.skill = skill;\n}\nHero.prototype = {\n    skillLists: ['Q', 'W', 'E', 'R'];\n    sayName: function () {\n        alert(this.name);\n    },\n    do: function () {\n        alert(this.name + ' use ' + this.skill + ' kill ' + 'MasterYi');\n    }\n};\nvar p1 = new Hero('yasuo', 'R');\nvar p2 = new Hero('ashe', 'w');\np1.sayName();   // yasuo\np1.skillLists;  // ['Q', 'W', 'E', 'R']\np2.do();        // ashe use w kill MasterYi\n```\n\n#### 6. 使用`class`关键字\n```javascript\nclass Hero {\n    constructor(){\n        this.name = 'MasterYi';\n        this.skill = 'AlphaStrike';\n    }\n    do(enemy){\n        alert(this.name + ' use ' +  this.skill + ' kill ' + enemy)\n    }\n}\n\nlet ashe = new Hero();\nashe.do('ashe');       // MasterYi use AlphaStrike kill ashe\n\nclass Yasuo extends Hero {\n    constructor(){\n        super()\n        this.name = 'yasuo'\n    }\n}\nlet yasuo = new Yasuo();\nyasuo.do('timor');      // yasuo use AlphaStrike kill timor\n```\n这里涉及到 `ES6` 里的新特性，想了解 `ES6` 中更多的新特性，大家可以去看看 [阮一峰](http://es6.ruanyifeng.com/) 老师的博客。","source":"_posts/JavaScript 创建对象的几种常见的方式.md","raw":"---\nid: 0809008\ntitle: JavaScript 创建对象的几种常见的方式\ndate: 2018-02-27 15:52:37\ntags: \n    - JavaScript\ncategories:\n---\n\n#### 1. 原始方式：\n* 对象字面量方式\n```javascript\nvar Hero = { \n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    todo: function () { alert(this.name); }\n};\n```\n* Object构造函数方式\n```javascript\nvar Hero = new Object();\n\nHero.name = 'MasterYi';\nHero.skill = 'Q';\nHero.do = function(){\n    return this.name + ' use ' + this.skill + ' kill ' + 'yasuo';\n}\n\nalert( Hero.skill );    // AlphaStrike\nalert( Hero.do() );     // MasterYi use AlphaStrike kill yasuo\n```\n如上，当我们要创建批量的Hero1、Hero2……时，\n每次都要敲很多代码，资深copypaster都吃不消！\n然后就有了下面批量生产的工厂模式。\n\n#### 2. 工厂模式\n```javascript\nfunction heroObj(name, skill){\n    var Hero = new Object();\n\n    Hero.name = name;\n    Hero.skill = skill;\n    Hero.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n    return Hero;\n}\nvar riven = heroObj('yasuo', 'R');\nvar ashe = heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\n工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。\n指定姓名年龄就可以造一堆小宝宝啦，解放双手。\n但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、\n是人还是狗傻傻分不清（instanceof 测试为 Object），\n另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？\n\n#### 3. 构造函数\n```javascript\nfunction HeroObj(name, skill){\n\n    this.name = name;\n    this.skill = skill;\n    this.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n}\n\nvar riven = new heroObj('yasuo', 'R');\nvar ashe = new heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\nECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。\n\n#### 4. 原型模式\n* 直接使用 prototype 属性\n```javascript\nfunction Hero () {}\nHero.prototype.name = 'MasterYi';\nHero.prototype.skill = 'AlphaStrike';\nHero.prototype.do = function () { alert(this.name); };\n```\n* 字面量定义方式\n```javascript\nfunction Hero () {}\nHero.prototype = {\n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    sayName: function () { alert(this.name); }\n};\nvar p1 = new Hero(); //name='MasterYi'\nvar p2 = new Hero(); //name='MasterYi'\n```\n这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。\n\n#### 5. 混合模式\n```javascript\nfunction Hero (name, skill) {\n    this.name = name;\n    this.skill = skill;\n}\nHero.prototype = {\n    skillLists: ['Q', 'W', 'E', 'R'];\n    sayName: function () {\n        alert(this.name);\n    },\n    do: function () {\n        alert(this.name + ' use ' + this.skill + ' kill ' + 'MasterYi');\n    }\n};\nvar p1 = new Hero('yasuo', 'R');\nvar p2 = new Hero('ashe', 'w');\np1.sayName();   // yasuo\np1.skillLists;  // ['Q', 'W', 'E', 'R']\np2.do();        // ashe use w kill MasterYi\n```\n\n#### 6. 使用`class`关键字\n```javascript\nclass Hero {\n    constructor(){\n        this.name = 'MasterYi';\n        this.skill = 'AlphaStrike';\n    }\n    do(enemy){\n        alert(this.name + ' use ' +  this.skill + ' kill ' + enemy)\n    }\n}\n\nlet ashe = new Hero();\nashe.do('ashe');       // MasterYi use AlphaStrike kill ashe\n\nclass Yasuo extends Hero {\n    constructor(){\n        super()\n        this.name = 'yasuo'\n    }\n}\nlet yasuo = new Yasuo();\nyasuo.do('timor');      // yasuo use AlphaStrike kill timor\n```\n这里涉及到 `ES6` 里的新特性，想了解 `ES6` 中更多的新特性，大家可以去看看 [阮一峰](http://es6.ruanyifeng.com/) 老师的博客。","slug":"JavaScript 创建对象的几种常见的方式","published":1,"updated":"2018-03-02T06:58:38.294Z","_id":"cje5flt4t00024sc0zrb06b6y","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"1-原始方式：\"><a href=\"#1-原始方式：\" class=\"headerlink\" title=\"1. 原始方式：\"></a>1. 原始方式：</h4><ul>\n<li><p>对象字面量方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = &#123; </span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    todo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object构造函数方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">Hero.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.skill = <span class=\"string\">'Q'</span>;</span><br><span class=\"line\">Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'yasuo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert( Hero.skill );    <span class=\"comment\">// AlphaStrike</span></span><br><span class=\"line\">alert( Hero.do() );     <span class=\"comment\">// MasterYi use AlphaStrike kill yasuo</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如上，当我们要创建批量的Hero1、Hero2……时，<br>每次都要敲很多代码，资深copypaster都吃不消！<br>然后就有了下面批量生产的工厂模式。</p>\n<h4 id=\"2-工厂模式\"><a href=\"#2-工厂模式\" class=\"headerlink\" title=\"2. 工厂模式\"></a>2. 工厂模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    Hero.name = name;</span><br><span class=\"line\">    Hero.skill = skill;</span><br><span class=\"line\">    Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Hero;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。<br>指定姓名年龄就可以造一堆小宝宝啦，解放双手。<br>但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、<br>是人还是狗傻傻分不清（instanceof 测试为 Object），<br>另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？</p>\n<h4 id=\"3-构造函数\"><a href=\"#3-构造函数\" class=\"headerlink\" title=\"3. 构造函数\"></a>3. 构造函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HeroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>ECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。</p>\n<h4 id=\"4-原型模式\"><a href=\"#4-原型模式\" class=\"headerlink\" title=\"4. 原型模式\"></a>4. 原型模式</h4><ul>\n<li><p>直接使用 prototype 属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.prototype.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">Hero.prototype.do = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字面量定义方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。</p>\n<h4 id=\"5-混合模式\"><a href=\"#5-混合模式\" class=\"headerlink\" title=\"5. 混合模式\"></a>5. 混合模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\">name, skill</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    skillLists: [<span class=\"string\">'Q'</span>, <span class=\"string\">'W'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'R'</span>];</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">do</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'ashe'</span>, <span class=\"string\">'w'</span>);</span><br><span class=\"line\">p1.sayName();   <span class=\"comment\">// yasuo</span></span><br><span class=\"line\">p1.skillLists;  <span class=\"comment\">// ['Q', 'W', 'E', 'R']</span></span><br><span class=\"line\">p2.do();        <span class=\"comment\">// ashe use w kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-使用class关键字\"><a href=\"#6-使用class关键字\" class=\"headerlink\" title=\"6. 使用class关键字\"></a>6. 使用<code>class</code>关键字</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>(enemy)&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> +  <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + enemy)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ashe = <span class=\"keyword\">new</span> Hero();</span><br><span class=\"line\">ashe.do(<span class=\"string\">'ashe'</span>);       <span class=\"comment\">// MasterYi use AlphaStrike kill ashe</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Yasuo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'yasuo'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> yasuo = <span class=\"keyword\">new</span> Yasuo();</span><br><span class=\"line\">yasuo.do(<span class=\"string\">'timor'</span>);      <span class=\"comment\">// yasuo use AlphaStrike kill timor</span></span><br></pre></td></tr></table></figure>\n<p>这里涉及到 <code>ES6</code> 里的新特性，想了解 <code>ES6</code> 中更多的新特性，大家可以去看看 <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰</a> 老师的博客。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-原始方式：\"><a href=\"#1-原始方式：\" class=\"headerlink\" title=\"1. 原始方式：\"></a>1. 原始方式：</h4><ul>\n<li><p>对象字面量方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = &#123; </span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    todo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object构造函数方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">Hero.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.skill = <span class=\"string\">'Q'</span>;</span><br><span class=\"line\">Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'yasuo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert( Hero.skill );    <span class=\"comment\">// AlphaStrike</span></span><br><span class=\"line\">alert( Hero.do() );     <span class=\"comment\">// MasterYi use AlphaStrike kill yasuo</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如上，当我们要创建批量的Hero1、Hero2……时，<br>每次都要敲很多代码，资深copypaster都吃不消！<br>然后就有了下面批量生产的工厂模式。</p>\n<h4 id=\"2-工厂模式\"><a href=\"#2-工厂模式\" class=\"headerlink\" title=\"2. 工厂模式\"></a>2. 工厂模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    Hero.name = name;</span><br><span class=\"line\">    Hero.skill = skill;</span><br><span class=\"line\">    Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Hero;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。<br>指定姓名年龄就可以造一堆小宝宝啦，解放双手。<br>但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、<br>是人还是狗傻傻分不清（instanceof 测试为 Object），<br>另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？</p>\n<h4 id=\"3-构造函数\"><a href=\"#3-构造函数\" class=\"headerlink\" title=\"3. 构造函数\"></a>3. 构造函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HeroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>ECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。</p>\n<h4 id=\"4-原型模式\"><a href=\"#4-原型模式\" class=\"headerlink\" title=\"4. 原型模式\"></a>4. 原型模式</h4><ul>\n<li><p>直接使用 prototype 属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.prototype.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">Hero.prototype.do = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字面量定义方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。</p>\n<h4 id=\"5-混合模式\"><a href=\"#5-混合模式\" class=\"headerlink\" title=\"5. 混合模式\"></a>5. 混合模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\">name, skill</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    skillLists: [<span class=\"string\">'Q'</span>, <span class=\"string\">'W'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'R'</span>];</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">do</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'ashe'</span>, <span class=\"string\">'w'</span>);</span><br><span class=\"line\">p1.sayName();   <span class=\"comment\">// yasuo</span></span><br><span class=\"line\">p1.skillLists;  <span class=\"comment\">// ['Q', 'W', 'E', 'R']</span></span><br><span class=\"line\">p2.do();        <span class=\"comment\">// ashe use w kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-使用class关键字\"><a href=\"#6-使用class关键字\" class=\"headerlink\" title=\"6. 使用class关键字\"></a>6. 使用<code>class</code>关键字</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>(enemy)&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> +  <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + enemy)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ashe = <span class=\"keyword\">new</span> Hero();</span><br><span class=\"line\">ashe.do(<span class=\"string\">'ashe'</span>);       <span class=\"comment\">// MasterYi use AlphaStrike kill ashe</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Yasuo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'yasuo'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> yasuo = <span class=\"keyword\">new</span> Yasuo();</span><br><span class=\"line\">yasuo.do(<span class=\"string\">'timor'</span>);      <span class=\"comment\">// yasuo use AlphaStrike kill timor</span></span><br></pre></td></tr></table></figure>\n<p>这里涉及到 <code>ES6</code> 里的新特性，想了解 <code>ES6</code> 中更多的新特性，大家可以去看看 <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰</a> 老师的博客。</p>\n"},{"id":"0809000","title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\nid: 0809000\ntitle: Hello World\ntags: \n    - HTML\ncategories: \n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-02-11T02:47:49.091Z","updated":"2018-03-02T06:57:25.283Z","_id":"cje5flt4y00044sc0x7n85hyb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"id":"0809001","title":"hello","date":"2017-02-09T13:50:31.000Z","_content":"","source":"_posts/hello.md","raw":"---\nid: 0809001\ntitle: hello\ndate: 2017-02-09 21:50:31\ntags: \n    - HTML\n    - CSS\n---\n","slug":"hello","published":1,"updated":"2018-03-02T06:57:34.845Z","_id":"cje5flt5100054sc0fqn52zjl","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"id":"0809006","title":"关于javascript数组的一些思考","date":"2018-02-27T07:48:26.000Z","_content":"\n#### 关于数组的一些认识\n1. 使用构造器函数创建数组时:\n```javascript\nlet ary = new Array();\n```\n- 若参数只有一个，且为数字，`let ary1 = new Array(3)`，这是其实我们是在指定数组的长度的，即 `ary1.length === 3`。`ary1[0]`则为`undefined`;\n- 当定义`let ary2 = new Array(1, 2, 3)`时，此时`ary2 === [1, 2, 3]`;\n2. JS中的数组定义非常的自由：\n 看下面的例子：\n```javascript\nlet ary = [1, 2, 3];\nary[5] = 5;\nconsole.log(ary);           // [1,2,3,undefined,undefined,5]\nconsole.log(ary.length);    // 6\n```\n 再看：\n```javascript\nlet ary2 = [1, 2, 3, 4, 5];\nary2.length = 3;\nconsole.log(ary2);      // [1, 2, 3]\n```\n#### 常用的数组API\n1. 万能方法 `splice()`\n-  splice()方法允许我们对数组进行插入、替换和删除的功能。**splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组**，简直完美呀！\n- `splice()`方法接受三个参数，**第一个**为开始索引，**第二个**为删除元素的位置，**第三个**为插入的元素，可以为第二个，当然也可省略（表示删除元素）。\n- `splice()`方法会修改原数组！\n- 通过以下三个demo了解一下具体的用法吧：\n插入:\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,0,\"add1\");\nconsole.log(ary1);      [ 'first', 'add1', 'second', 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [] 没有删除则放回一个空数组\n```\n替换：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,1,\"replace\");\nconsole.log(ary1);      [ 'first', \"replace, 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [\"second\"] 返回被删除(即替换)的数组\n```\n删除：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,3);\nconsole.log(ary1);      [\"second\", \"third\", \"forth\"]\nconsole.log(ary2);      [\"first\", \"fifth\"]\n```\n2. `slice()` 方法\n- `slice()` 方法可以接受两个参数(start, end)；\n- `slice()` 方法可从已有的数组中返回选定的元素；\n- `slice()` 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；\n- `slice()` 方法**不会改变原始数组**，而是返回一个新数组。\ndemo1:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log (ary.slice(1,2) );      // [\"second\"]\nlet ary1 = ary.slice(1,2);          // [\"second\"]\nlet ary2 = ary.slice(1,3);          // [\"second\", \"third\"]\nconsole.log(ary);                   // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo2:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log(ary.slice(1,2));    // [\"second\"]\nconsole.log(ary.slice(1,3));    // [\"second\", \"third\"]\nconsole.log(ary));              // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo3:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary1 = ary.slice();     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary.slice(0);     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n\nary === ary1;       // false\nary === ary2;       // false\nary1 === ary2;      // false\n```\n**看出来啥猫腻没，这不是深复制一个数据吗！**","source":"_posts/关于JavaScript数组的一些思考.md","raw":"---\nid: 0809006\ntitle: 关于javascript数组的一些思考\ndate: 2018-02-27 15:48:26\ntags: \n    - JavaScript\ncategories:\n---\n\n#### 关于数组的一些认识\n1. 使用构造器函数创建数组时:\n```javascript\nlet ary = new Array();\n```\n- 若参数只有一个，且为数字，`let ary1 = new Array(3)`，这是其实我们是在指定数组的长度的，即 `ary1.length === 3`。`ary1[0]`则为`undefined`;\n- 当定义`let ary2 = new Array(1, 2, 3)`时，此时`ary2 === [1, 2, 3]`;\n2. JS中的数组定义非常的自由：\n 看下面的例子：\n```javascript\nlet ary = [1, 2, 3];\nary[5] = 5;\nconsole.log(ary);           // [1,2,3,undefined,undefined,5]\nconsole.log(ary.length);    // 6\n```\n 再看：\n```javascript\nlet ary2 = [1, 2, 3, 4, 5];\nary2.length = 3;\nconsole.log(ary2);      // [1, 2, 3]\n```\n#### 常用的数组API\n1. 万能方法 `splice()`\n-  splice()方法允许我们对数组进行插入、替换和删除的功能。**splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组**，简直完美呀！\n- `splice()`方法接受三个参数，**第一个**为开始索引，**第二个**为删除元素的位置，**第三个**为插入的元素，可以为第二个，当然也可省略（表示删除元素）。\n- `splice()`方法会修改原数组！\n- 通过以下三个demo了解一下具体的用法吧：\n插入:\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,0,\"add1\");\nconsole.log(ary1);      [ 'first', 'add1', 'second', 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [] 没有删除则放回一个空数组\n```\n替换：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,1,\"replace\");\nconsole.log(ary1);      [ 'first', \"replace, 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [\"second\"] 返回被删除(即替换)的数组\n```\n删除：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,3);\nconsole.log(ary1);      [\"second\", \"third\", \"forth\"]\nconsole.log(ary2);      [\"first\", \"fifth\"]\n```\n2. `slice()` 方法\n- `slice()` 方法可以接受两个参数(start, end)；\n- `slice()` 方法可从已有的数组中返回选定的元素；\n- `slice()` 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；\n- `slice()` 方法**不会改变原始数组**，而是返回一个新数组。\ndemo1:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log (ary.slice(1,2) );      // [\"second\"]\nlet ary1 = ary.slice(1,2);          // [\"second\"]\nlet ary2 = ary.slice(1,3);          // [\"second\", \"third\"]\nconsole.log(ary);                   // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo2:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log(ary.slice(1,2));    // [\"second\"]\nconsole.log(ary.slice(1,3));    // [\"second\", \"third\"]\nconsole.log(ary));              // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo3:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary1 = ary.slice();     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary.slice(0);     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n\nary === ary1;       // false\nary === ary2;       // false\nary1 === ary2;      // false\n```\n**看出来啥猫腻没，这不是深复制一个数据吗！**","slug":"关于JavaScript数组的一些思考","published":1,"updated":"2018-03-02T06:58:17.359Z","_id":"cje5flt5300064sc0m3ca2614","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"关于数组的一些认识\"><a href=\"#关于数组的一些认识\" class=\"headerlink\" title=\"关于数组的一些认识\"></a>关于数组的一些认识</h4><ol>\n<li>使用构造器函数创建数组时:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>若参数只有一个，且为数字，<code>let ary1 = new Array(3)</code>，这是其实我们是在指定数组的长度的，即 <code>ary1.length === 3</code>。<code>ary1[0]</code>则为<code>undefined</code>;</li>\n<li>当定义<code>let ary2 = new Array(1, 2, 3)</code>时，此时<code>ary2 === [1, 2, 3]</code>;</li>\n</ul>\n<ol>\n<li><p>JS中的数组定义非常的自由：<br>看下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">ary[<span class=\"number\">5</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);           <span class=\"comment\">// [1,2,3,undefined,undefined,5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.length);    <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>再看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">ary2.length = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"常用的数组API\"><a href=\"#常用的数组API\" class=\"headerlink\" title=\"常用的数组API\"></a>常用的数组API</h4><ol>\n<li>万能方法 <code>splice()</code></li>\n</ol>\n<ul>\n<li>splice()方法允许我们对数组进行插入、替换和删除的功能。<strong>splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组</strong>，简直完美呀！</li>\n<li><code>splice()</code>方法接受三个参数，<strong>第一个</strong>为开始索引，<strong>第二个</strong>为删除元素的位置，<strong>第三个</strong>为插入的元素，可以为第二个，当然也可省略（表示删除元素）。</li>\n<li><code>splice()</code>方法会修改原数组！</li>\n<li>通过以下三个demo了解一下具体的用法吧：<br>插入:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">\"add1\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">'add1'</span>, <span class=\"string\">'second'</span>, <span class=\"string\">'third'</span>, <span class=\"string\">'forth'</span>, <span class=\"string\">'fifth'</span> ]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [] 没有删除则放回一个空数组</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>替换：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">\"replace\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">\"replace, 'third', 'forth', 'fifth' ]</span></span><br><span class=\"line\"><span class=\"string\">console.log(ary2);      [\"</span>second<span class=\"string\">\"] 返回被删除(即替换)的数组</span></span><br></pre></td></tr></table></figure></p>\n<p>删除：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [<span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"fifth\"</span>]</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><code>slice()</code> 方法</li>\n</ol>\n<ul>\n<li><code>slice()</code> 方法可以接受两个参数(start, end)；</li>\n<li><code>slice()</code> 方法可从已有的数组中返回选定的元素；</li>\n<li><code>slice()</code> 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；</li>\n<li><code>slice()</code> 方法<strong>不会改变原始数组</strong>，而是返回一个新数组。<br>demo1:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log (ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>) );      <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>);          <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);          <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);                   <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>demo2:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>));    <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>));    <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary));              <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure></p>\n<p>demo3:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice();     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">0</span>);     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"></span><br><span class=\"line\">ary === ary1;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary === ary2;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary1 === ary2;      <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>看出来啥猫腻没，这不是深复制一个数据吗！</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"关于数组的一些认识\"><a href=\"#关于数组的一些认识\" class=\"headerlink\" title=\"关于数组的一些认识\"></a>关于数组的一些认识</h4><ol>\n<li>使用构造器函数创建数组时:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>若参数只有一个，且为数字，<code>let ary1 = new Array(3)</code>，这是其实我们是在指定数组的长度的，即 <code>ary1.length === 3</code>。<code>ary1[0]</code>则为<code>undefined</code>;</li>\n<li>当定义<code>let ary2 = new Array(1, 2, 3)</code>时，此时<code>ary2 === [1, 2, 3]</code>;</li>\n</ul>\n<ol>\n<li><p>JS中的数组定义非常的自由：<br>看下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">ary[<span class=\"number\">5</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);           <span class=\"comment\">// [1,2,3,undefined,undefined,5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.length);    <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>再看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">ary2.length = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"常用的数组API\"><a href=\"#常用的数组API\" class=\"headerlink\" title=\"常用的数组API\"></a>常用的数组API</h4><ol>\n<li>万能方法 <code>splice()</code></li>\n</ol>\n<ul>\n<li>splice()方法允许我们对数组进行插入、替换和删除的功能。<strong>splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组</strong>，简直完美呀！</li>\n<li><code>splice()</code>方法接受三个参数，<strong>第一个</strong>为开始索引，<strong>第二个</strong>为删除元素的位置，<strong>第三个</strong>为插入的元素，可以为第二个，当然也可省略（表示删除元素）。</li>\n<li><code>splice()</code>方法会修改原数组！</li>\n<li>通过以下三个demo了解一下具体的用法吧：<br>插入:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">\"add1\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">'add1'</span>, <span class=\"string\">'second'</span>, <span class=\"string\">'third'</span>, <span class=\"string\">'forth'</span>, <span class=\"string\">'fifth'</span> ]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [] 没有删除则放回一个空数组</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>替换：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">\"replace\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">\"replace, 'third', 'forth', 'fifth' ]</span></span><br><span class=\"line\"><span class=\"string\">console.log(ary2);      [\"</span>second<span class=\"string\">\"] 返回被删除(即替换)的数组</span></span><br></pre></td></tr></table></figure></p>\n<p>删除：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [<span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"fifth\"</span>]</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><code>slice()</code> 方法</li>\n</ol>\n<ul>\n<li><code>slice()</code> 方法可以接受两个参数(start, end)；</li>\n<li><code>slice()</code> 方法可从已有的数组中返回选定的元素；</li>\n<li><code>slice()</code> 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；</li>\n<li><code>slice()</code> 方法<strong>不会改变原始数组</strong>，而是返回一个新数组。<br>demo1:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log (ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>) );      <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>);          <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);          <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);                   <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>demo2:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>));    <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>));    <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary));              <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure></p>\n<p>demo3:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice();     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">0</span>);     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"></span><br><span class=\"line\">ary === ary1;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary === ary2;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary1 === ary2;      <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>看出来啥猫腻没，这不是深复制一个数据吗！</strong></p>\n"},{"id":"0809004","title":"HTML5 存储 localStorage 和 sessionStorage","date":"2018-02-27T09:56:48.000Z","_content":"\n#### 客户端存储数据的两个对象为：\n- `localStorage` - 没有时间限制的数据存储\n- `sessionStorage` - 针对一个 session(会话) 的数据存储\n> 在使用 web 存储前，应检查浏览器是否支持 localStorage 和sessionStorage :\n```\nif( typeof(Storage) !== \"undefined\" )\n{\n    // 是的! 支持 localStorage  sessionStorage 对象!\n    // your code\n} else {\n    // 抱歉! 不支持 web 存储。\n}\n```\n##### 1. localStorage 对象\n- localStorage 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。\n> 实例：\n```\nlocalStorage.name=\"yasuo\";\ndocument.getElementById(\"hero\").innerHTML=\"英雄：\" + localStorage.name;\n```\n","source":"_posts/HTML5-存储.md","raw":"---\nid: 0809004\ntitle: HTML5 存储 localStorage 和 sessionStorage\ndate: 2018-02-27 17:56:48\ntags: \n    - HTML5\n    - sessionStorage\n    - localStorage\ncategories:\n---\n\n#### 客户端存储数据的两个对象为：\n- `localStorage` - 没有时间限制的数据存储\n- `sessionStorage` - 针对一个 session(会话) 的数据存储\n> 在使用 web 存储前，应检查浏览器是否支持 localStorage 和sessionStorage :\n```\nif( typeof(Storage) !== \"undefined\" )\n{\n    // 是的! 支持 localStorage  sessionStorage 对象!\n    // your code\n} else {\n    // 抱歉! 不支持 web 存储。\n}\n```\n##### 1. localStorage 对象\n- localStorage 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。\n> 实例：\n```\nlocalStorage.name=\"yasuo\";\ndocument.getElementById(\"hero\").innerHTML=\"英雄：\" + localStorage.name;\n```\n","slug":"HTML5-存储","published":1,"updated":"2018-03-02T06:57:59.282Z","_id":"cje5h9poi000m4sc0et4qibog","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"客户端存储数据的两个对象为：\"><a href=\"#客户端存储数据的两个对象为：\" class=\"headerlink\" title=\"客户端存储数据的两个对象为：\"></a>客户端存储数据的两个对象为：</h4><ul>\n<li><code>localStorage</code> - 没有时间限制的数据存储</li>\n<li><code>sessionStorage</code> - 针对一个 session(会话) 的数据存储<blockquote>\n<p>在使用 web 存储前，应检查浏览器是否支持 localStorage 和sessionStorage :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if( typeof(Storage) !== &quot;undefined&quot; )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // 是的! 支持 localStorage  sessionStorage 对象!</span><br><span class=\"line\">    // your code</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    // 抱歉! 不支持 web 存储。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"1-localStorage-对象\"><a href=\"#1-localStorage-对象\" class=\"headerlink\" title=\"1. localStorage 对象\"></a>1. localStorage 对象</h5><ul>\n<li>localStorage 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。<blockquote>\n<p>实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localStorage.name=&quot;yasuo&quot;;</span><br><span class=\"line\">document.getElementById(&quot;hero&quot;).innerHTML=&quot;英雄：&quot; + localStorage.name;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"客户端存储数据的两个对象为：\"><a href=\"#客户端存储数据的两个对象为：\" class=\"headerlink\" title=\"客户端存储数据的两个对象为：\"></a>客户端存储数据的两个对象为：</h4><ul>\n<li><code>localStorage</code> - 没有时间限制的数据存储</li>\n<li><code>sessionStorage</code> - 针对一个 session(会话) 的数据存储<blockquote>\n<p>在使用 web 存储前，应检查浏览器是否支持 localStorage 和sessionStorage :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if( typeof(Storage) !== &quot;undefined&quot; )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // 是的! 支持 localStorage  sessionStorage 对象!</span><br><span class=\"line\">    // your code</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    // 抱歉! 不支持 web 存储。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"1-localStorage-对象\"><a href=\"#1-localStorage-对象\" class=\"headerlink\" title=\"1. localStorage 对象\"></a>1. localStorage 对象</h5><ul>\n<li>localStorage 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。<blockquote>\n<p>实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localStorage.name=&quot;yasuo&quot;;</span><br><span class=\"line\">document.getElementById(&quot;hero&quot;).innerHTML=&quot;英雄：&quot; + localStorage.name;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n"},{"id":"0809002","title":"CSS3 渐变","date":"2018-02-27T10:01:38.000Z","_content":"\n#### CSS3 定义了两种类型的渐变（gradients）：\n\n1. 线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向\n2. 径向渐变（Radial Gradients）- 由它们的中心定义\n#### 注意： IE 9 及之前的版本不支持渐变。\n### 线性渐变：\n- `background: linear-gradient(direction, color-stop1, color-stop2, ...);`\n#### 1. 线性渐变 - 从上到下（默认情况下）:\n```css\n.box {\n  background: -webkit-linear-gradient(red, blue);   /* Safari 5.1 - 6.0 */\n  background: -o-linear-gradient(red, blue);        /* Opera 11.1 - 12.0 */\n  background: -moz-linear-gradient(red, blue);      /* Firefox 3.6 - 15 */\n  background: linear-gradient(red, blue);           /* 标准的语法(必须放在最后) */\n}\n```\n效果图 ![效果图](/images/gradient/渐变1.png)\n#### 2. 线性渐变 - 从左到右\n```css\n.box {\n    height: 50px;\n    background: -webkit-linear-gradient(left, red , blue);  /* Safari 5.1 - 6.0 */\n    background: -o-linear-gradient(right, red, blue);       /* Opera 11.1 - 12.0 */\n    background: -moz-linear-gradient(right, red, blue);     /* Firefox 3.6 - 15 */\n    background: linear-gradient(to right, red , blue);      /* 标准的语法（必须放在最后） */\n}\n```\n效果图 ![效果图](/images/gradient/渐变2.png)\n#### 3. 重复的线性渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-repeating-linear-gradient(red, yellow 10%, green 20%);  /* Safari 5.1 - 6.0 */\n    background: -o-repeating-linear-gradient(red, yellow 10%, green 20%);       /* Opera 11.1 - 12.0 */\n    background: -moz-repeating-linear-gradient(red, yellow 10%, green 20%);     /* Firefox 3.6 - 15 */\n    background: repeating-linear-gradient(red, yellow 10%, green 20%);          /* 标准的语法（必须放在最后） */\n}\n```\n效果图 ![效果图](/images/gradient/渐变3.png)\n#### 4. 线性渐变进阶\n```css\n.box{\n    height: 100px;\n    width: 100px;\n    background: -webkit-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: -o-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: -moz-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n}\n```\n效果图 ![效果图](/images/gradient/0deg.png)\n\n没错，就是通过角度来空值渐变的起始位置：\n- 45deg 效果图 ![效果图](/images/gradient/45deg.png)\n- 90deg 效果图 ![效果图](/images/gradient/90deg.png)\n- 135deg 效果图 ![效果图](/images/gradient/135deg.png)\n\n*由此，我们知道了起始可以通过角度来获得我们想要的线性渐变的各种效果了，这基本能满足我们大多数的需求了。*\n径向渐变\n- `background: radial-gradient(center, shape size, start-color, ..., last-color);`\n1. 径向渐变由它的中心定义。\n2. 为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。\n#### 1. 普通的径向渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-radial-gradient(red, green, blue);  /* Safari 5.1 - 6.0 */\n    background: -o-radial-gradient(red, green, blue);       /* Opera 11.6 - 12.0 */\n    background: -moz-radial-gradient(red, green, blue);     /* Firefox 3.6 - 15 */\n    background: radial-gradient(red, green, blue);          /* 标准的语法（必须放在最后） */\n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变1.png)\n#### 2. 不均匀的径向渐变\n```css\n.box {\n  background: -webkit-radial-gradient(red 5%, green 15%, blue 60%);     /* Safari 5.1 - 6.0 */\n  background: -o-radial-gradient(red 5%, green 15%, blue 60%);          /* Opera 11.6 - 12.0 */\n  background: -moz-radial-gradient(red 5%, green 15%, blue 60%);        /* Firefox 3.6 - 15 */\n  background: radial-gradient(red 5%, green 15%, blue 60%);             /* 标准的语法 */\n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变2.png)\n**径向渐变容器如果不为正方形，则渐变区域会默认呈现为椭圆，若为正方形，则会呈现为正方形。**\n#### 3.不同尺寸的径向渐变\n- closest-side\n- farthest-side\n- closest-corner\n- farthest-corner\n```css\n.box {\n    background: -webkit-radial-gradient(70% 50%, closest-side,red,green,blue);     /* Safari 5.1 - 6.0 */\n    background: -o-radial-gradient(70% 50%, closest-side,red,green,blue);          /* Opera 11.6 - 12.0 */\n    background: -moz-radial-gradient(70% 50%, closest-side,red,green,blue);        /* Firefox 3.6 - 15 */\n    background: radial-gradient(70% 50%, closest-side,red,green,blue);             /* 标准的语法（必须放在最后） */\n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变3.png)\n1.  从上面的效果图中可以看出径向渐变的渐变原点的作用\n2. 通过设置尺寸属性可以改变其大小\n#### 4.重复的径向渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-repeating-radial-gradient(red, yellow 10%, green 15%);  /* Safari 5.1 - 6.0 */\n    background: -o-repeating-radial-gradient(red, yellow 10%, green 15%);       /* Opera 11.6 - 12.0 */\n    background: -moz-repeating-radial-gradient(red, yellow 10%, green 15%);     /* Firefox 3.6 - 15 */\n    background: repeating-radial-gradient(red, yellow 10%, green 15%);          /* 标准的语法（必须放在最后） */\n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变4.png)\n","source":"_posts/CSS3-渐变.md","raw":"---\nid: 0809002\ntitle: CSS3 渐变\ndate: 2018-02-27 18:01:38\ntags:\n    - CSS\n    - CSS3\ncategories:\n---\n\n#### CSS3 定义了两种类型的渐变（gradients）：\n\n1. 线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向\n2. 径向渐变（Radial Gradients）- 由它们的中心定义\n#### 注意： IE 9 及之前的版本不支持渐变。\n### 线性渐变：\n- `background: linear-gradient(direction, color-stop1, color-stop2, ...);`\n#### 1. 线性渐变 - 从上到下（默认情况下）:\n```css\n.box {\n  background: -webkit-linear-gradient(red, blue);   /* Safari 5.1 - 6.0 */\n  background: -o-linear-gradient(red, blue);        /* Opera 11.1 - 12.0 */\n  background: -moz-linear-gradient(red, blue);      /* Firefox 3.6 - 15 */\n  background: linear-gradient(red, blue);           /* 标准的语法(必须放在最后) */\n}\n```\n效果图 ![效果图](/images/gradient/渐变1.png)\n#### 2. 线性渐变 - 从左到右\n```css\n.box {\n    height: 50px;\n    background: -webkit-linear-gradient(left, red , blue);  /* Safari 5.1 - 6.0 */\n    background: -o-linear-gradient(right, red, blue);       /* Opera 11.1 - 12.0 */\n    background: -moz-linear-gradient(right, red, blue);     /* Firefox 3.6 - 15 */\n    background: linear-gradient(to right, red , blue);      /* 标准的语法（必须放在最后） */\n}\n```\n效果图 ![效果图](/images/gradient/渐变2.png)\n#### 3. 重复的线性渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-repeating-linear-gradient(red, yellow 10%, green 20%);  /* Safari 5.1 - 6.0 */\n    background: -o-repeating-linear-gradient(red, yellow 10%, green 20%);       /* Opera 11.1 - 12.0 */\n    background: -moz-repeating-linear-gradient(red, yellow 10%, green 20%);     /* Firefox 3.6 - 15 */\n    background: repeating-linear-gradient(red, yellow 10%, green 20%);          /* 标准的语法（必须放在最后） */\n}\n```\n效果图 ![效果图](/images/gradient/渐变3.png)\n#### 4. 线性渐变进阶\n```css\n.box{\n    height: 100px;\n    width: 100px;\n    background: -webkit-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: -o-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: -moz-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n}\n```\n效果图 ![效果图](/images/gradient/0deg.png)\n\n没错，就是通过角度来空值渐变的起始位置：\n- 45deg 效果图 ![效果图](/images/gradient/45deg.png)\n- 90deg 效果图 ![效果图](/images/gradient/90deg.png)\n- 135deg 效果图 ![效果图](/images/gradient/135deg.png)\n\n*由此，我们知道了起始可以通过角度来获得我们想要的线性渐变的各种效果了，这基本能满足我们大多数的需求了。*\n径向渐变\n- `background: radial-gradient(center, shape size, start-color, ..., last-color);`\n1. 径向渐变由它的中心定义。\n2. 为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。\n#### 1. 普通的径向渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-radial-gradient(red, green, blue);  /* Safari 5.1 - 6.0 */\n    background: -o-radial-gradient(red, green, blue);       /* Opera 11.6 - 12.0 */\n    background: -moz-radial-gradient(red, green, blue);     /* Firefox 3.6 - 15 */\n    background: radial-gradient(red, green, blue);          /* 标准的语法（必须放在最后） */\n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变1.png)\n#### 2. 不均匀的径向渐变\n```css\n.box {\n  background: -webkit-radial-gradient(red 5%, green 15%, blue 60%);     /* Safari 5.1 - 6.0 */\n  background: -o-radial-gradient(red 5%, green 15%, blue 60%);          /* Opera 11.6 - 12.0 */\n  background: -moz-radial-gradient(red 5%, green 15%, blue 60%);        /* Firefox 3.6 - 15 */\n  background: radial-gradient(red 5%, green 15%, blue 60%);             /* 标准的语法 */\n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变2.png)\n**径向渐变容器如果不为正方形，则渐变区域会默认呈现为椭圆，若为正方形，则会呈现为正方形。**\n#### 3.不同尺寸的径向渐变\n- closest-side\n- farthest-side\n- closest-corner\n- farthest-corner\n```css\n.box {\n    background: -webkit-radial-gradient(70% 50%, closest-side,red,green,blue);     /* Safari 5.1 - 6.0 */\n    background: -o-radial-gradient(70% 50%, closest-side,red,green,blue);          /* Opera 11.6 - 12.0 */\n    background: -moz-radial-gradient(70% 50%, closest-side,red,green,blue);        /* Firefox 3.6 - 15 */\n    background: radial-gradient(70% 50%, closest-side,red,green,blue);             /* 标准的语法（必须放在最后） */\n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变3.png)\n1.  从上面的效果图中可以看出径向渐变的渐变原点的作用\n2. 通过设置尺寸属性可以改变其大小\n#### 4.重复的径向渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-repeating-radial-gradient(red, yellow 10%, green 15%);  /* Safari 5.1 - 6.0 */\n    background: -o-repeating-radial-gradient(red, yellow 10%, green 15%);       /* Opera 11.6 - 12.0 */\n    background: -moz-repeating-radial-gradient(red, yellow 10%, green 15%);     /* Firefox 3.6 - 15 */\n    background: repeating-radial-gradient(red, yellow 10%, green 15%);          /* 标准的语法（必须放在最后） */\n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变4.png)\n","slug":"CSS3-渐变","published":1,"updated":"2018-03-02T06:57:50.690Z","_id":"cje5hfy0h001r4sc0wk8gnue7","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"CSS3-定义了两种类型的渐变（gradients）：\"><a href=\"#CSS3-定义了两种类型的渐变（gradients）：\" class=\"headerlink\" title=\"CSS3 定义了两种类型的渐变（gradients）：\"></a>CSS3 定义了两种类型的渐变（gradients）：</h4><ol>\n<li>线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向</li>\n<li>径向渐变（Radial Gradients）- 由它们的中心定义<h4 id=\"注意：-IE-9-及之前的版本不支持渐变。\"><a href=\"#注意：-IE-9-及之前的版本不支持渐变。\" class=\"headerlink\" title=\"注意： IE 9 及之前的版本不支持渐变。\"></a>注意： IE 9 及之前的版本不支持渐变。</h4><h3 id=\"线性渐变：\"><a href=\"#线性渐变：\" class=\"headerlink\" title=\"线性渐变：\"></a>线性渐变：</h3></li>\n</ol>\n<ul>\n<li><code>background: linear-gradient(direction, color-stop1, color-stop2, ...);</code><h4 id=\"1-线性渐变-从上到下（默认情况下）\"><a href=\"#1-线性渐变-从上到下（默认情况下）\" class=\"headerlink\" title=\"1. 线性渐变 - 从上到下（默认情况下）:\"></a>1. 线性渐变 - 从上到下（默认情况下）:</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(red, blue);   <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(red, blue);        <span class=\"comment\">/* Opera 11.1 - 12.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(red, blue);      <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(red, blue);           <span class=\"comment\">/* 标准的语法(必须放在最后) */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>效果图 <img src=\"/images/gradient/渐变1.png\" alt=\"效果图\"></p>\n<h4 id=\"2-线性渐变-从左到右\"><a href=\"#2-线性渐变-从左到右\" class=\"headerlink\" title=\"2. 线性渐变 - 从左到右\"></a>2. 线性渐变 - 从左到右</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(left, red , blue);  <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(right, red, blue);       <span class=\"comment\">/* Opera 11.1 - 12.0 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(right, red, blue);     <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to right, red , blue);      <span class=\"comment\">/* 标准的语法（必须放在最后） */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/渐变2.png\" alt=\"效果图\"></p>\n<h4 id=\"3-重复的线性渐变\"><a href=\"#3-重复的线性渐变\" class=\"headerlink\" title=\"3. 重复的线性渐变\"></a>3. 重复的线性渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-repeating-linear-gradient</span>(red, yellow 10%, green 20%);  <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-repeating-linear-gradient</span>(red, yellow 10%, green 20%);       <span class=\"comment\">/* Opera 11.1 - 12.0 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-repeating-linear-gradient</span>(red, yellow 10%, green 20%);     <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-linear-gradient</span>(red, yellow 10%, green 20%);          <span class=\"comment\">/* 标准的语法（必须放在最后） */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/渐变3.png\" alt=\"效果图\"></p>\n<h4 id=\"4-线性渐变进阶\"><a href=\"#4-线性渐变进阶\" class=\"headerlink\" title=\"4. 线性渐变进阶\"></a>4. 线性渐变进阶</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/0deg.png\" alt=\"效果图\"></p>\n<p>没错，就是通过角度来空值渐变的起始位置：</p>\n<ul>\n<li>45deg 效果图 <img src=\"/images/gradient/45deg.png\" alt=\"效果图\"></li>\n<li>90deg 效果图 <img src=\"/images/gradient/90deg.png\" alt=\"效果图\"></li>\n<li>135deg 效果图 <img src=\"/images/gradient/135deg.png\" alt=\"效果图\"></li>\n</ul>\n<p><em>由此，我们知道了起始可以通过角度来获得我们想要的线性渐变的各种效果了，这基本能满足我们大多数的需求了。</em><br>径向渐变</p>\n<ul>\n<li><code>background: radial-gradient(center, shape size, start-color, ..., last-color);</code></li>\n</ul>\n<ol>\n<li>径向渐变由它的中心定义。</li>\n<li>为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。<h4 id=\"1-普通的径向渐变\"><a href=\"#1-普通的径向渐变\" class=\"headerlink\" title=\"1. 普通的径向渐变\"></a>1. 普通的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(red, green, blue);  <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(red, green, blue);       <span class=\"comment\">/* Opera 11.6 - 12.0 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(red, green, blue);     <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(red, green, blue);          <span class=\"comment\">/* 标准的语法（必须放在最后） */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变1.png\" alt=\"效果图\"></p>\n<h4 id=\"2-不均匀的径向渐变\"><a href=\"#2-不均匀的径向渐变\" class=\"headerlink\" title=\"2. 不均匀的径向渐变\"></a>2. 不均匀的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(red 5%, green 15%, blue 60%);     <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(red 5%, green 15%, blue 60%);          <span class=\"comment\">/* Opera 11.6 - 12.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(red 5%, green 15%, blue 60%);        <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(red 5%, green 15%, blue 60%);             <span class=\"comment\">/* 标准的语法 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变2.png\" alt=\"效果图\"><br><strong>径向渐变容器如果不为正方形，则渐变区域会默认呈现为椭圆，若为正方形，则会呈现为正方形。</strong></p>\n<h4 id=\"3-不同尺寸的径向渐变\"><a href=\"#3-不同尺寸的径向渐变\" class=\"headerlink\" title=\"3.不同尺寸的径向渐变\"></a>3.不同尺寸的径向渐变</h4></li>\n<li>closest-side</li>\n<li>farthest-side</li>\n<li>closest-corner</li>\n<li><p>farthest-corner</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(70% 50%, closest-side,red,green,blue);     <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(70% 50%, closest-side,red,green,blue);          <span class=\"comment\">/* Opera 11.6 - 12.0 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(70% 50%, closest-side,red,green,blue);        <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(70% 50%, closest-side,red,green,blue);             <span class=\"comment\">/* 标准的语法（必须放在最后） */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变3.png\" alt=\"效果图\"></p>\n</li>\n</ul>\n<ol>\n<li>从上面的效果图中可以看出径向渐变的渐变原点的作用</li>\n<li>通过设置尺寸属性可以改变其大小<h4 id=\"4-重复的径向渐变\"><a href=\"#4-重复的径向渐变\" class=\"headerlink\" title=\"4.重复的径向渐变\"></a>4.重复的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-repeating-radial-gradient</span>(red, yellow 10%, green 15%);  <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-repeating-radial-gradient</span>(red, yellow 10%, green 15%);       <span class=\"comment\">/* Opera 11.6 - 12.0 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-repeating-radial-gradient</span>(red, yellow 10%, green 15%);     <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-radial-gradient</span>(red, yellow 10%, green 15%);          <span class=\"comment\">/* 标准的语法（必须放在最后） */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>效果图 <img src=\"/images/gradient/径向渐变4.png\" alt=\"效果图\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"CSS3-定义了两种类型的渐变（gradients）：\"><a href=\"#CSS3-定义了两种类型的渐变（gradients）：\" class=\"headerlink\" title=\"CSS3 定义了两种类型的渐变（gradients）：\"></a>CSS3 定义了两种类型的渐变（gradients）：</h4><ol>\n<li>线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向</li>\n<li>径向渐变（Radial Gradients）- 由它们的中心定义<h4 id=\"注意：-IE-9-及之前的版本不支持渐变。\"><a href=\"#注意：-IE-9-及之前的版本不支持渐变。\" class=\"headerlink\" title=\"注意： IE 9 及之前的版本不支持渐变。\"></a>注意： IE 9 及之前的版本不支持渐变。</h4><h3 id=\"线性渐变：\"><a href=\"#线性渐变：\" class=\"headerlink\" title=\"线性渐变：\"></a>线性渐变：</h3></li>\n</ol>\n<ul>\n<li><code>background: linear-gradient(direction, color-stop1, color-stop2, ...);</code><h4 id=\"1-线性渐变-从上到下（默认情况下）\"><a href=\"#1-线性渐变-从上到下（默认情况下）\" class=\"headerlink\" title=\"1. 线性渐变 - 从上到下（默认情况下）:\"></a>1. 线性渐变 - 从上到下（默认情况下）:</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(red, blue);   <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(red, blue);        <span class=\"comment\">/* Opera 11.1 - 12.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(red, blue);      <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(red, blue);           <span class=\"comment\">/* 标准的语法(必须放在最后) */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>效果图 <img src=\"/images/gradient/渐变1.png\" alt=\"效果图\"></p>\n<h4 id=\"2-线性渐变-从左到右\"><a href=\"#2-线性渐变-从左到右\" class=\"headerlink\" title=\"2. 线性渐变 - 从左到右\"></a>2. 线性渐变 - 从左到右</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(left, red , blue);  <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(right, red, blue);       <span class=\"comment\">/* Opera 11.1 - 12.0 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(right, red, blue);     <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to right, red , blue);      <span class=\"comment\">/* 标准的语法（必须放在最后） */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/渐变2.png\" alt=\"效果图\"></p>\n<h4 id=\"3-重复的线性渐变\"><a href=\"#3-重复的线性渐变\" class=\"headerlink\" title=\"3. 重复的线性渐变\"></a>3. 重复的线性渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-repeating-linear-gradient</span>(red, yellow 10%, green 20%);  <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-repeating-linear-gradient</span>(red, yellow 10%, green 20%);       <span class=\"comment\">/* Opera 11.1 - 12.0 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-repeating-linear-gradient</span>(red, yellow 10%, green 20%);     <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-linear-gradient</span>(red, yellow 10%, green 20%);          <span class=\"comment\">/* 标准的语法（必须放在最后） */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/渐变3.png\" alt=\"效果图\"></p>\n<h4 id=\"4-线性渐变进阶\"><a href=\"#4-线性渐变进阶\" class=\"headerlink\" title=\"4. 线性渐变进阶\"></a>4. 线性渐变进阶</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/0deg.png\" alt=\"效果图\"></p>\n<p>没错，就是通过角度来空值渐变的起始位置：</p>\n<ul>\n<li>45deg 效果图 <img src=\"/images/gradient/45deg.png\" alt=\"效果图\"></li>\n<li>90deg 效果图 <img src=\"/images/gradient/90deg.png\" alt=\"效果图\"></li>\n<li>135deg 效果图 <img src=\"/images/gradient/135deg.png\" alt=\"效果图\"></li>\n</ul>\n<p><em>由此，我们知道了起始可以通过角度来获得我们想要的线性渐变的各种效果了，这基本能满足我们大多数的需求了。</em><br>径向渐变</p>\n<ul>\n<li><code>background: radial-gradient(center, shape size, start-color, ..., last-color);</code></li>\n</ul>\n<ol>\n<li>径向渐变由它的中心定义。</li>\n<li>为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。<h4 id=\"1-普通的径向渐变\"><a href=\"#1-普通的径向渐变\" class=\"headerlink\" title=\"1. 普通的径向渐变\"></a>1. 普通的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(red, green, blue);  <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(red, green, blue);       <span class=\"comment\">/* Opera 11.6 - 12.0 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(red, green, blue);     <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(red, green, blue);          <span class=\"comment\">/* 标准的语法（必须放在最后） */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变1.png\" alt=\"效果图\"></p>\n<h4 id=\"2-不均匀的径向渐变\"><a href=\"#2-不均匀的径向渐变\" class=\"headerlink\" title=\"2. 不均匀的径向渐变\"></a>2. 不均匀的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(red 5%, green 15%, blue 60%);     <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(red 5%, green 15%, blue 60%);          <span class=\"comment\">/* Opera 11.6 - 12.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(red 5%, green 15%, blue 60%);        <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(red 5%, green 15%, blue 60%);             <span class=\"comment\">/* 标准的语法 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变2.png\" alt=\"效果图\"><br><strong>径向渐变容器如果不为正方形，则渐变区域会默认呈现为椭圆，若为正方形，则会呈现为正方形。</strong></p>\n<h4 id=\"3-不同尺寸的径向渐变\"><a href=\"#3-不同尺寸的径向渐变\" class=\"headerlink\" title=\"3.不同尺寸的径向渐变\"></a>3.不同尺寸的径向渐变</h4></li>\n<li>closest-side</li>\n<li>farthest-side</li>\n<li>closest-corner</li>\n<li><p>farthest-corner</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(70% 50%, closest-side,red,green,blue);     <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(70% 50%, closest-side,red,green,blue);          <span class=\"comment\">/* Opera 11.6 - 12.0 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(70% 50%, closest-side,red,green,blue);        <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(70% 50%, closest-side,red,green,blue);             <span class=\"comment\">/* 标准的语法（必须放在最后） */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变3.png\" alt=\"效果图\"></p>\n</li>\n</ul>\n<ol>\n<li>从上面的效果图中可以看出径向渐变的渐变原点的作用</li>\n<li>通过设置尺寸属性可以改变其大小<h4 id=\"4-重复的径向渐变\"><a href=\"#4-重复的径向渐变\" class=\"headerlink\" title=\"4.重复的径向渐变\"></a>4.重复的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-repeating-radial-gradient</span>(red, yellow 10%, green 15%);  <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-repeating-radial-gradient</span>(red, yellow 10%, green 15%);       <span class=\"comment\">/* Opera 11.6 - 12.0 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-repeating-radial-gradient</span>(red, yellow 10%, green 15%);     <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-radial-gradient</span>(red, yellow 10%, green 15%);          <span class=\"comment\">/* 标准的语法（必须放在最后） */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>效果图 <img src=\"/images/gradient/径向渐变4.png\" alt=\"效果图\"></li>\n</ul>\n"},{"id":"0809005","title":"JSON 序列化选项","date":"2018-02-27T10:46:18.000Z","_content":"\n实际上，JSON.stringify()除了要序列化JavaScript对象外，还可以接受另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。**第一个**参数是个过滤器，可以使一个数组，也可以是个函数；**第二个**参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用者两个参数，可以更全面深入地控制JSON的序列化。\n#### 1. 过滤器（第一个参数）\n1.数组\n```JavaScript\nvar hero = {\n    \"name\": \"MasterYi\",\n    \"skills\": [\n        \"AlphaStrike\"\n    ],\n    \"type\": \"Warrior\"\n}\n\nvar jsonTxt = JSON.stringify(hero, [\"name\", \"type\"]);\njsonTxt --> \"{\"name\":\"MasterYi\",\"type\":\"Warrior\"}\"\n```\n2.函数\n```JavaScript\nvar jsonTxt = JSON.stringify(hero, function(k, v){\n    switch(k){\n        case \"name\":\n            return \"Annie\";\n        case \"type\":\n            return \"Mage\";\n        default:\n            return v;\n    }\n});\njsonTxt --> \"{\"name\":\"Annie\",\"skills\":[\"AlphaStrike\"],\"type\":\"Mage\"}\"\n```\n*值得注意的是，如果函数返回了undefined，那么相应的属性会被忽略。另外请务必写上default，此时返回传入的值，以便其他值都能正常出现在结果中*\n#### 2. 选项（字符串缩进）\n```JavaScript\nvar jsonTxt1 = JSON.stringify(hero, null, 2);\njsonTxt1 -->\n\"{\n  \"name\": \"MasterYi\",\n  \"skills\": [\n    \"AlphaStrike\"\n  ],\n  \"type\": \"Warrior\"\n}\"\n\nvar jsonTxt2 = JSON.stringify(hero, null, 4);\njsonTxt2 -->\n\"{\n    \"name\": \"MasterYi\",\n    \"skills\": [\n        \"AlphaStrike\"\n    ],\n    \"type\": \"Warrior\"\n}\"\n```\n*如上，结果字符串中也插入了换行符，这样一来就提高了可读性。只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。最大缩进空格数为10，大于10会默认转换为10.*\n","source":"_posts/JSON-序列化选项.md","raw":"---\nid: 0809005\ntitle: JSON 序列化选项\ndate: 2018-02-27 18:46:18\ntags:\n    - JavaScript\n    - JSON\ncategories:\n---\n\n实际上，JSON.stringify()除了要序列化JavaScript对象外，还可以接受另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。**第一个**参数是个过滤器，可以使一个数组，也可以是个函数；**第二个**参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用者两个参数，可以更全面深入地控制JSON的序列化。\n#### 1. 过滤器（第一个参数）\n1.数组\n```JavaScript\nvar hero = {\n    \"name\": \"MasterYi\",\n    \"skills\": [\n        \"AlphaStrike\"\n    ],\n    \"type\": \"Warrior\"\n}\n\nvar jsonTxt = JSON.stringify(hero, [\"name\", \"type\"]);\njsonTxt --> \"{\"name\":\"MasterYi\",\"type\":\"Warrior\"}\"\n```\n2.函数\n```JavaScript\nvar jsonTxt = JSON.stringify(hero, function(k, v){\n    switch(k){\n        case \"name\":\n            return \"Annie\";\n        case \"type\":\n            return \"Mage\";\n        default:\n            return v;\n    }\n});\njsonTxt --> \"{\"name\":\"Annie\",\"skills\":[\"AlphaStrike\"],\"type\":\"Mage\"}\"\n```\n*值得注意的是，如果函数返回了undefined，那么相应的属性会被忽略。另外请务必写上default，此时返回传入的值，以便其他值都能正常出现在结果中*\n#### 2. 选项（字符串缩进）\n```JavaScript\nvar jsonTxt1 = JSON.stringify(hero, null, 2);\njsonTxt1 -->\n\"{\n  \"name\": \"MasterYi\",\n  \"skills\": [\n    \"AlphaStrike\"\n  ],\n  \"type\": \"Warrior\"\n}\"\n\nvar jsonTxt2 = JSON.stringify(hero, null, 4);\njsonTxt2 -->\n\"{\n    \"name\": \"MasterYi\",\n    \"skills\": [\n        \"AlphaStrike\"\n    ],\n    \"type\": \"Warrior\"\n}\"\n```\n*如上，结果字符串中也插入了换行符，这样一来就提高了可读性。只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。最大缩进空格数为10，大于10会默认转换为10.*\n","slug":"JSON-序列化选项","published":1,"updated":"2018-03-02T06:58:08.296Z","_id":"cje5j1din001x4sc0cep910ir","comments":1,"layout":"post","photos":[],"link":"","content":"<p>实际上，JSON.stringify()除了要序列化JavaScript对象外，还可以接受另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。<strong>第一个</strong>参数是个过滤器，可以使一个数组，也可以是个函数；<strong>第二个</strong>参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用者两个参数，可以更全面深入地控制JSON的序列化。</p>\n<h4 id=\"1-过滤器（第一个参数）\"><a href=\"#1-过滤器（第一个参数）\" class=\"headerlink\" title=\"1. 过滤器（第一个参数）\"></a>1. 过滤器（第一个参数）</h4><p>1.数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"MasterYi\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"skills\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"AlphaStrike\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Warrior\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt = <span class=\"built_in\">JSON</span>.stringify(hero, [<span class=\"string\">\"name\"</span>, <span class=\"string\">\"type\"</span>]);</span><br><span class=\"line\">jsonTxt --&gt; <span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>MasterYi<span class=\"string\">\",\"</span>type<span class=\"string\">\":\"</span>Warrior<span class=\"string\">\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p>2.函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k, v</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"name\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Annie\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"type\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Mage\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">jsonTxt --&gt; <span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>Annie<span class=\"string\">\",\"</span>skills<span class=\"string\">\":[\"</span>AlphaStrike<span class=\"string\">\"],\"</span>type<span class=\"string\">\":\"</span>Mage<span class=\"string\">\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p><em>值得注意的是，如果函数返回了undefined，那么相应的属性会被忽略。另外请务必写上default，此时返回传入的值，以便其他值都能正常出现在结果中</em></p>\n<h4 id=\"2-选项（字符串缩进）\"><a href=\"#2-选项（字符串缩进）\" class=\"headerlink\" title=\"2. 选项（字符串缩进）\"></a>2. 选项（字符串缩进）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt1 = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"literal\">null</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">jsonTxt1 --&gt;</span><br><span class=\"line\"><span class=\"string\">\"&#123;</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>name<span class=\"string\">\": \"</span>MasterYi<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>skills<span class=\"string\">\": [</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>AlphaStrike<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>type<span class=\"string\">\": \"</span>Warrior<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt2 = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"literal\">null</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">jsonTxt2 --&gt;</span><br><span class=\"line\"><span class=\"string\">\"&#123;</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>name<span class=\"string\">\": \"</span>MasterYi<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>skills<span class=\"string\">\": [</span></span><br><span class=\"line\"><span class=\"string\">        \"</span>AlphaStrike<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">    ],</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>type<span class=\"string\">\": \"</span>Warrior<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span></span><br></pre></td></tr></table></figure>\n<p><em>如上，结果字符串中也插入了换行符，这样一来就提高了可读性。只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。最大缩进空格数为10，大于10会默认转换为10.</em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>实际上，JSON.stringify()除了要序列化JavaScript对象外，还可以接受另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。<strong>第一个</strong>参数是个过滤器，可以使一个数组，也可以是个函数；<strong>第二个</strong>参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用者两个参数，可以更全面深入地控制JSON的序列化。</p>\n<h4 id=\"1-过滤器（第一个参数）\"><a href=\"#1-过滤器（第一个参数）\" class=\"headerlink\" title=\"1. 过滤器（第一个参数）\"></a>1. 过滤器（第一个参数）</h4><p>1.数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"MasterYi\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"skills\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"AlphaStrike\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Warrior\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt = <span class=\"built_in\">JSON</span>.stringify(hero, [<span class=\"string\">\"name\"</span>, <span class=\"string\">\"type\"</span>]);</span><br><span class=\"line\">jsonTxt --&gt; <span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>MasterYi<span class=\"string\">\",\"</span>type<span class=\"string\">\":\"</span>Warrior<span class=\"string\">\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p>2.函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k, v</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"name\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Annie\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"type\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Mage\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">jsonTxt --&gt; <span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>Annie<span class=\"string\">\",\"</span>skills<span class=\"string\">\":[\"</span>AlphaStrike<span class=\"string\">\"],\"</span>type<span class=\"string\">\":\"</span>Mage<span class=\"string\">\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p><em>值得注意的是，如果函数返回了undefined，那么相应的属性会被忽略。另外请务必写上default，此时返回传入的值，以便其他值都能正常出现在结果中</em></p>\n<h4 id=\"2-选项（字符串缩进）\"><a href=\"#2-选项（字符串缩进）\" class=\"headerlink\" title=\"2. 选项（字符串缩进）\"></a>2. 选项（字符串缩进）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt1 = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"literal\">null</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">jsonTxt1 --&gt;</span><br><span class=\"line\"><span class=\"string\">\"&#123;</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>name<span class=\"string\">\": \"</span>MasterYi<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>skills<span class=\"string\">\": [</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>AlphaStrike<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>type<span class=\"string\">\": \"</span>Warrior<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt2 = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"literal\">null</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">jsonTxt2 --&gt;</span><br><span class=\"line\"><span class=\"string\">\"&#123;</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>name<span class=\"string\">\": \"</span>MasterYi<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>skills<span class=\"string\">\": [</span></span><br><span class=\"line\"><span class=\"string\">        \"</span>AlphaStrike<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">    ],</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>type<span class=\"string\">\": \"</span>Warrior<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span></span><br></pre></td></tr></table></figure>\n<p><em>如上，结果字符串中也插入了换行符，这样一来就提高了可读性。只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。最大缩进空格数为10，大于10会默认转换为10.</em></p>\n"},{"id":"0809007","title":"记一次在公司项目中使用Babel的经历","date":"2018-03-01T01:46:10.000Z","_content":"\n- <a href=\"#install\">安装</a>\n- <a href=\"#usage\">使用</a>\n- <a href=\"#babelrc\">创建.babelrc文件</a>\n- <a href=\"#polyfill\">Babel-Polyfill</a>\n- <a href=\"#register\">Babel-Register</a>\n\n&emsp;首先，为什么会写这样一篇文章呢？在进入公司几个月后，写业务代码都是使用es5语法，es6，于是想着使用Babel来构建一下。这样既可以愉快的使用ES6了，还能舒心的写代码，何乐而不为。\n\n- Babel的使用是基于Node.js环境的，所以必须先安装Node。\n- 我们将采用通过安装babel-cli的方式来使用babel。\n\n#### <a name=\"install\">1. 安装</a>\n&emsp;虽然你可以在你的机器上全局安装`Babel CLI`, 但根据单个项目进行本地安装会更好一些。这样做有两个主要的原因：\n* 同一机器上的不同的项目可以依赖不同版本的 Babel, 这允许你一次更新一个项目。\n* 这意味着在你的工作环境中没有隐含的依赖项。它将使你的项目更方便移植、更易于安装。\n\n> 首先我们需要生成一个package.json文件，进入到项目目录执行`npm init`命令，随后一顿选择回车。\n\n```bash\nYSY@SY-YU MINGW64 /d/START/webpack\n$ npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help json` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install <pkg>` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\npackage name: (webpack)\n```\n*最后，目录下会生成一个package.json文件，打开看一下*\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\"\n}\n```\n*里面都是刚才npm init时自己的配置*\n\n> 我们可以通过以下命令本地安装 Babel CLI:\n\n```bash\n// 全局安装\nnpm install babel-cli -g\n// 安装在当前项目中\nnpm install --save-dev babel-cli\n```\n我们在当前目录安装babel-cli，随后我们的package.json应该长这个样：\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.26.0\"\n  }\n}\n```\n\n#### <a name=\"usage\">2. 使用</a>\n- 我们将把我们的指令放在本地版本的 npm 脚本中，而不是直接通过命令行来运行 Babel.\n\n> 简单的在你的 package.json 中添加一个 \"scripts\" 属性并将 babel 命令放在它的 build 属性中：\n\n```json\n  {\n    \"name\": \"webpack\",\n    \"version\": \"1.0.0\",\n    \"scripts\": {\n      \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n+     \"build\": \"babel src -d lib\"  // 加入这一句命令\n    },\n    \"devDependencies\": {\n      \"babel-cli\": \"^6.26.0\"\n    }\n  }\n```\n现在从我们的终端可以运行以下命令：\n```bash\nnpm run build\n```\n*这会按照和之前一样的方式来运行 Babel 并将输出放在 lib 目录下，唯一不同在于我们现在使用了一个本地拷贝。*\n> 值得注意的是在babel的build命令是可以在build属性中自行配置的，上面是把src目录下的脚本打包到lib目录中，你也可以打包单个文件...\n\n#### <a name=\"babelrc\">3. 创建.babelrc配置文件</a>\n\n- 虽然已经配置好了 Babel ，但并没有让它真正生效。在项目的根目录中创建一个 .babelrc 文件并启用一些插件。 [详看](https://babeljs.cn/docs/setup/#installation)\n\n首先，你可以使用转换 ES2015+ 的 env preset：\n```bash\nnpm install babel-preset-env --save-dev\n```\n为了让 preset 生效，你需要像下面这样定义你的 .babelrc 文件：\n```json\n{\n  \"presets\": [\"env\"],\n  \"plugins\": []\n}\n```\n> .babelrc配置文件非常丰富：\n\n```bash\n# ES2015转码规则\n$ npm install --save-dev babel-preset-es2015\n\n# react转码规则\n$ npm install --save-dev babel-preset-react\n\n# ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个\n$ npm install --save-dev babel-preset-stage-0\n$ npm install --save-dev babel-preset-stage-1\n$ npm install --save-dev babel-preset-stage-2\n$ npm install --save-dev babel-preset-stage-3\n```\n最后，我们的 .babelrc 文件可以长这个样：\n``` json\n{\n  \"presets\": [\n    \"es2015\",\n    \"react\",\n    \"stage-2\"\n  ],\n  \"plugins\": []\n}\n```\n\n#### <a name=\"polyfill\">4. Babel-Polyfill</a>\n\nBabel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如`Object.assign`）都不会转码。\n\n举例来说，ES6在Array对象上新增了`Array.from`方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。\n\n安装命令如下：\n```bash\nnpm install --save babel-polyfill\n```\n然后，在脚本头部，加入如下一行代码：\n```js\nimport 'babel-polyfill';\n// 或者\nrequire('babel-polyfill');\n```\n\n#### <a name=\"register\">5. Babel-Register</a>\n\nbabel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。\n```bash\nnpm install --save-dev babel-register\n```\n使用时，必须首先加载babel-register：\n```js\nimport(\"babel-register\");\nimport(\"./index.js\");\n```\n然后，就不需要手动对index.js转码了。\n> 需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在`开发环境`使用。\n\n#### `后记`：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\n---\n> 参考文档： [babeljs.cn](https://babeljs.cn/) / [ruanyifeng.com](http://www.ruanyifeng.com/blog/2016/01/babel.html?20170213113809)","source":"_posts/记一次在公司项目中使用Babel的经历.md","raw":"---\nid: 0809007\ntitle: 记一次在公司项目中使用Babel的经历\ndate: 2018-03-01 09:46:10\ntags:\n    - Babel\n    - es6\n    - JavaScript\ncategories:\n---\n\n- <a href=\"#install\">安装</a>\n- <a href=\"#usage\">使用</a>\n- <a href=\"#babelrc\">创建.babelrc文件</a>\n- <a href=\"#polyfill\">Babel-Polyfill</a>\n- <a href=\"#register\">Babel-Register</a>\n\n&emsp;首先，为什么会写这样一篇文章呢？在进入公司几个月后，写业务代码都是使用es5语法，es6，于是想着使用Babel来构建一下。这样既可以愉快的使用ES6了，还能舒心的写代码，何乐而不为。\n\n- Babel的使用是基于Node.js环境的，所以必须先安装Node。\n- 我们将采用通过安装babel-cli的方式来使用babel。\n\n#### <a name=\"install\">1. 安装</a>\n&emsp;虽然你可以在你的机器上全局安装`Babel CLI`, 但根据单个项目进行本地安装会更好一些。这样做有两个主要的原因：\n* 同一机器上的不同的项目可以依赖不同版本的 Babel, 这允许你一次更新一个项目。\n* 这意味着在你的工作环境中没有隐含的依赖项。它将使你的项目更方便移植、更易于安装。\n\n> 首先我们需要生成一个package.json文件，进入到项目目录执行`npm init`命令，随后一顿选择回车。\n\n```bash\nYSY@SY-YU MINGW64 /d/START/webpack\n$ npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help json` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install <pkg>` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\npackage name: (webpack)\n```\n*最后，目录下会生成一个package.json文件，打开看一下*\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\"\n}\n```\n*里面都是刚才npm init时自己的配置*\n\n> 我们可以通过以下命令本地安装 Babel CLI:\n\n```bash\n// 全局安装\nnpm install babel-cli -g\n// 安装在当前项目中\nnpm install --save-dev babel-cli\n```\n我们在当前目录安装babel-cli，随后我们的package.json应该长这个样：\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.26.0\"\n  }\n}\n```\n\n#### <a name=\"usage\">2. 使用</a>\n- 我们将把我们的指令放在本地版本的 npm 脚本中，而不是直接通过命令行来运行 Babel.\n\n> 简单的在你的 package.json 中添加一个 \"scripts\" 属性并将 babel 命令放在它的 build 属性中：\n\n```json\n  {\n    \"name\": \"webpack\",\n    \"version\": \"1.0.0\",\n    \"scripts\": {\n      \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n+     \"build\": \"babel src -d lib\"  // 加入这一句命令\n    },\n    \"devDependencies\": {\n      \"babel-cli\": \"^6.26.0\"\n    }\n  }\n```\n现在从我们的终端可以运行以下命令：\n```bash\nnpm run build\n```\n*这会按照和之前一样的方式来运行 Babel 并将输出放在 lib 目录下，唯一不同在于我们现在使用了一个本地拷贝。*\n> 值得注意的是在babel的build命令是可以在build属性中自行配置的，上面是把src目录下的脚本打包到lib目录中，你也可以打包单个文件...\n\n#### <a name=\"babelrc\">3. 创建.babelrc配置文件</a>\n\n- 虽然已经配置好了 Babel ，但并没有让它真正生效。在项目的根目录中创建一个 .babelrc 文件并启用一些插件。 [详看](https://babeljs.cn/docs/setup/#installation)\n\n首先，你可以使用转换 ES2015+ 的 env preset：\n```bash\nnpm install babel-preset-env --save-dev\n```\n为了让 preset 生效，你需要像下面这样定义你的 .babelrc 文件：\n```json\n{\n  \"presets\": [\"env\"],\n  \"plugins\": []\n}\n```\n> .babelrc配置文件非常丰富：\n\n```bash\n# ES2015转码规则\n$ npm install --save-dev babel-preset-es2015\n\n# react转码规则\n$ npm install --save-dev babel-preset-react\n\n# ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个\n$ npm install --save-dev babel-preset-stage-0\n$ npm install --save-dev babel-preset-stage-1\n$ npm install --save-dev babel-preset-stage-2\n$ npm install --save-dev babel-preset-stage-3\n```\n最后，我们的 .babelrc 文件可以长这个样：\n``` json\n{\n  \"presets\": [\n    \"es2015\",\n    \"react\",\n    \"stage-2\"\n  ],\n  \"plugins\": []\n}\n```\n\n#### <a name=\"polyfill\">4. Babel-Polyfill</a>\n\nBabel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如`Object.assign`）都不会转码。\n\n举例来说，ES6在Array对象上新增了`Array.from`方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。\n\n安装命令如下：\n```bash\nnpm install --save babel-polyfill\n```\n然后，在脚本头部，加入如下一行代码：\n```js\nimport 'babel-polyfill';\n// 或者\nrequire('babel-polyfill');\n```\n\n#### <a name=\"register\">5. Babel-Register</a>\n\nbabel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。\n```bash\nnpm install --save-dev babel-register\n```\n使用时，必须首先加载babel-register：\n```js\nimport(\"babel-register\");\nimport(\"./index.js\");\n```\n然后，就不需要手动对index.js转码了。\n> 需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在`开发环境`使用。\n\n#### `后记`：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\n---\n> 参考文档： [babeljs.cn](https://babeljs.cn/) / [ruanyifeng.com](http://www.ruanyifeng.com/blog/2016/01/babel.html?20170213113809)","slug":"记一次在公司项目中使用Babel的经历","published":1,"updated":"2018-03-02T06:58:27.552Z","_id":"cje7z68lf002krgc030opqudt","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><a href=\"#install\">安装</a></li>\n<li><a href=\"#usage\">使用</a></li>\n<li><a href=\"#babelrc\">创建.babelrc文件</a></li>\n<li><a href=\"#polyfill\">Babel-Polyfill</a></li>\n<li><a href=\"#register\">Babel-Register</a></li>\n</ul>\n<p>&emsp;首先，为什么会写这样一篇文章呢？在进入公司几个月后，写业务代码都是使用es5语法，es6，于是想着使用Babel来构建一下。这样既可以愉快的使用ES6了，还能舒心的写代码，何乐而不为。</p>\n<ul>\n<li>Babel的使用是基于Node.js环境的，所以必须先安装Node。</li>\n<li>我们将采用通过安装babel-cli的方式来使用babel。</li>\n</ul>\n<h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a><a name=\"install\">1. 安装</a></h4><p>&emsp;虽然你可以在你的机器上全局安装<code>Babel CLI</code>, 但根据单个项目进行本地安装会更好一些。这样做有两个主要的原因：</p>\n<ul>\n<li>同一机器上的不同的项目可以依赖不同版本的 Babel, 这允许你一次更新一个项目。</li>\n<li>这意味着在你的工作环境中没有隐含的依赖项。它将使你的项目更方便移植、更易于安装。</li>\n</ul>\n<blockquote>\n<p>首先我们需要生成一个package.json文件，进入到项目目录执行<code>npm init</code>命令，随后一顿选择回车。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YSY@SY-YU MINGW64 /d/START/webpack</span><br><span class=\"line\">$ npm init</span><br><span class=\"line\">This utility will walk you through creating a package.json file.</span><br><span class=\"line\">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class=\"line\"></span><br><span class=\"line\">See `npm <span class=\"built_in\">help</span> json` <span class=\"keyword\">for</span> definitive documentation on these fields</span><br><span class=\"line\">and exactly what they <span class=\"keyword\">do</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class=\"line\">save it as a dependency <span class=\"keyword\">in</span> the package.json file.</span><br><span class=\"line\"></span><br><span class=\"line\">Press ^C at any time to quit.</span><br><span class=\"line\">package name: (webpack)</span><br></pre></td></tr></table></figure>\n<p><em>最后，目录下会生成一个package.json文件，打开看一下</em><br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>里面都是刚才npm init时自己的配置</em></p>\n<blockquote>\n<p>我们可以通过以下命令本地安装 Babel CLI:</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 全局安装</span><br><span class=\"line\">npm install babel-cli -g</span><br><span class=\"line\">// 安装在当前项目中</span><br><span class=\"line\">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure>\n<p>我们在当前目录安装babel-cli，随后我们的package.json应该长这个样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-cli\"</span>: <span class=\"string\">\"^6.26.0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a><a name=\"usage\">2. 使用</a></h4><ul>\n<li>我们将把我们的指令放在本地版本的 npm 脚本中，而不是直接通过命令行来运行 Babel.</li>\n</ul>\n<blockquote>\n<p>简单的在你的 package.json 中添加一个 “scripts” 属性并将 babel 命令放在它的 build 属性中：</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">+     \"build\": \"babel src -d lib\"  // 加入这一句命令</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"devDependencies\": &#123;</span><br><span class=\"line\">      \"babel-cli\": \"^6.26.0\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>现在从我们的终端可以运行以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure></p>\n<p><em>这会按照和之前一样的方式来运行 Babel 并将输出放在 lib 目录下，唯一不同在于我们现在使用了一个本地拷贝。</em></p>\n<blockquote>\n<p>值得注意的是在babel的build命令是可以在build属性中自行配置的，上面是把src目录下的脚本打包到lib目录中，你也可以打包单个文件…</p>\n</blockquote>\n<h4 id=\"3-创建-babelrc配置文件\"><a href=\"#3-创建-babelrc配置文件\" class=\"headerlink\" title=\"3. 创建.babelrc配置文件\"></a><a name=\"babelrc\">3. 创建.babelrc配置文件</a></h4><ul>\n<li>虽然已经配置好了 Babel ，但并没有让它真正生效。在项目的根目录中创建一个 .babelrc 文件并启用一些插件。 <a href=\"https://babeljs.cn/docs/setup/#installation\" target=\"_blank\" rel=\"noopener\">详看</a></li>\n</ul>\n<p>首先，你可以使用转换 ES2015+ 的 env preset：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-preset-env --save-dev</span><br></pre></td></tr></table></figure></p>\n<p>为了让 preset 生效，你需要像下面这样定义你的 .babelrc 文件：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"env\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>.babelrc配置文件非常丰富：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ES2015转码规则</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-es2015</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># react转码规则</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-react</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-0</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-1</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-2</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-3</span><br></pre></td></tr></table></figure>\n<p>最后，我们的 .babelrc 文件可以长这个样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"es2015\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"stage-2\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-Babel-Polyfill\"><a href=\"#4-Babel-Polyfill\" class=\"headerlink\" title=\"4. Babel-Polyfill\"></a><a name=\"polyfill\">4. Babel-Polyfill</a></h4><p>Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如<code>Object.assign</code>）都不会转码。</p>\n<p>举例来说，ES6在Array对象上新增了<code>Array.from</code>方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。</p>\n<p>安装命令如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure></p>\n<p>然后，在脚本头部，加入如下一行代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'babel-polyfill'</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-Babel-Register\"><a href=\"#5-Babel-Register\" class=\"headerlink\" title=\"5. Babel-Register\"></a><a name=\"register\">5. Babel-Register</a></h4><p>babel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-register</span><br></pre></td></tr></table></figure></p>\n<p>使用时，必须首先加载babel-register：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">\"babel-register\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">\"./index.js\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>然后，就不需要手动对index.js转码了。</p>\n<blockquote>\n<p>需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在<code>开发环境</code>使用。</p>\n</blockquote>\n<h4 id=\"后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\"><a href=\"#后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\" class=\"headerlink\" title=\"后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\"></a><code>后记</code>：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。</h4><hr>\n<blockquote>\n<p>参考文档： <a href=\"https://babeljs.cn/\" target=\"_blank\" rel=\"noopener\">babeljs.cn</a> / <a href=\"http://www.ruanyifeng.com/blog/2016/01/babel.html?20170213113809\" target=\"_blank\" rel=\"noopener\">ruanyifeng.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"#install\">安装</a></li>\n<li><a href=\"#usage\">使用</a></li>\n<li><a href=\"#babelrc\">创建.babelrc文件</a></li>\n<li><a href=\"#polyfill\">Babel-Polyfill</a></li>\n<li><a href=\"#register\">Babel-Register</a></li>\n</ul>\n<p>&emsp;首先，为什么会写这样一篇文章呢？在进入公司几个月后，写业务代码都是使用es5语法，es6，于是想着使用Babel来构建一下。这样既可以愉快的使用ES6了，还能舒心的写代码，何乐而不为。</p>\n<ul>\n<li>Babel的使用是基于Node.js环境的，所以必须先安装Node。</li>\n<li>我们将采用通过安装babel-cli的方式来使用babel。</li>\n</ul>\n<h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a><a name=\"install\">1. 安装</a></h4><p>&emsp;虽然你可以在你的机器上全局安装<code>Babel CLI</code>, 但根据单个项目进行本地安装会更好一些。这样做有两个主要的原因：</p>\n<ul>\n<li>同一机器上的不同的项目可以依赖不同版本的 Babel, 这允许你一次更新一个项目。</li>\n<li>这意味着在你的工作环境中没有隐含的依赖项。它将使你的项目更方便移植、更易于安装。</li>\n</ul>\n<blockquote>\n<p>首先我们需要生成一个package.json文件，进入到项目目录执行<code>npm init</code>命令，随后一顿选择回车。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YSY@SY-YU MINGW64 /d/START/webpack</span><br><span class=\"line\">$ npm init</span><br><span class=\"line\">This utility will walk you through creating a package.json file.</span><br><span class=\"line\">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class=\"line\"></span><br><span class=\"line\">See `npm <span class=\"built_in\">help</span> json` <span class=\"keyword\">for</span> definitive documentation on these fields</span><br><span class=\"line\">and exactly what they <span class=\"keyword\">do</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class=\"line\">save it as a dependency <span class=\"keyword\">in</span> the package.json file.</span><br><span class=\"line\"></span><br><span class=\"line\">Press ^C at any time to quit.</span><br><span class=\"line\">package name: (webpack)</span><br></pre></td></tr></table></figure>\n<p><em>最后，目录下会生成一个package.json文件，打开看一下</em><br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>里面都是刚才npm init时自己的配置</em></p>\n<blockquote>\n<p>我们可以通过以下命令本地安装 Babel CLI:</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 全局安装</span><br><span class=\"line\">npm install babel-cli -g</span><br><span class=\"line\">// 安装在当前项目中</span><br><span class=\"line\">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure>\n<p>我们在当前目录安装babel-cli，随后我们的package.json应该长这个样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-cli\"</span>: <span class=\"string\">\"^6.26.0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a><a name=\"usage\">2. 使用</a></h4><ul>\n<li>我们将把我们的指令放在本地版本的 npm 脚本中，而不是直接通过命令行来运行 Babel.</li>\n</ul>\n<blockquote>\n<p>简单的在你的 package.json 中添加一个 “scripts” 属性并将 babel 命令放在它的 build 属性中：</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">+     \"build\": \"babel src -d lib\"  // 加入这一句命令</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"devDependencies\": &#123;</span><br><span class=\"line\">      \"babel-cli\": \"^6.26.0\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>现在从我们的终端可以运行以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure></p>\n<p><em>这会按照和之前一样的方式来运行 Babel 并将输出放在 lib 目录下，唯一不同在于我们现在使用了一个本地拷贝。</em></p>\n<blockquote>\n<p>值得注意的是在babel的build命令是可以在build属性中自行配置的，上面是把src目录下的脚本打包到lib目录中，你也可以打包单个文件…</p>\n</blockquote>\n<h4 id=\"3-创建-babelrc配置文件\"><a href=\"#3-创建-babelrc配置文件\" class=\"headerlink\" title=\"3. 创建.babelrc配置文件\"></a><a name=\"babelrc\">3. 创建.babelrc配置文件</a></h4><ul>\n<li>虽然已经配置好了 Babel ，但并没有让它真正生效。在项目的根目录中创建一个 .babelrc 文件并启用一些插件。 <a href=\"https://babeljs.cn/docs/setup/#installation\" target=\"_blank\" rel=\"noopener\">详看</a></li>\n</ul>\n<p>首先，你可以使用转换 ES2015+ 的 env preset：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-preset-env --save-dev</span><br></pre></td></tr></table></figure></p>\n<p>为了让 preset 生效，你需要像下面这样定义你的 .babelrc 文件：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"env\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>.babelrc配置文件非常丰富：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ES2015转码规则</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-es2015</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># react转码规则</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-react</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-0</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-1</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-2</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-3</span><br></pre></td></tr></table></figure>\n<p>最后，我们的 .babelrc 文件可以长这个样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"es2015\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"stage-2\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-Babel-Polyfill\"><a href=\"#4-Babel-Polyfill\" class=\"headerlink\" title=\"4. Babel-Polyfill\"></a><a name=\"polyfill\">4. Babel-Polyfill</a></h4><p>Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如<code>Object.assign</code>）都不会转码。</p>\n<p>举例来说，ES6在Array对象上新增了<code>Array.from</code>方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。</p>\n<p>安装命令如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure></p>\n<p>然后，在脚本头部，加入如下一行代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'babel-polyfill'</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-Babel-Register\"><a href=\"#5-Babel-Register\" class=\"headerlink\" title=\"5. Babel-Register\"></a><a name=\"register\">5. Babel-Register</a></h4><p>babel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-register</span><br></pre></td></tr></table></figure></p>\n<p>使用时，必须首先加载babel-register：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">\"babel-register\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">\"./index.js\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>然后，就不需要手动对index.js转码了。</p>\n<blockquote>\n<p>需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在<code>开发环境</code>使用。</p>\n</blockquote>\n<h4 id=\"后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\"><a href=\"#后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\" class=\"headerlink\" title=\"后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\"></a><code>后记</code>：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。</h4><hr>\n<blockquote>\n<p>参考文档： <a href=\"https://babeljs.cn/\" target=\"_blank\" rel=\"noopener\">babeljs.cn</a> / <a href=\"http://www.ruanyifeng.com/blog/2016/01/babel.html?20170213113809\" target=\"_blank\" rel=\"noopener\">ruanyifeng.com</a></p>\n</blockquote>\n"},{"id":"0809009","title":"vue-cli快速构建vue.js项目","date":"2018-03-01T06:59:28.000Z","_content":"- <a href=\"#Quickstart\">快速上手</a>\n- <a href=\"#Commands\">构建命令</a>\n- <a href=\"#Babel\">配置Babel</a>\n\n#### <a name=\"Quickstart\">1. 快速上手</a>\n本文介绍如何使用vue-cli快速构建vus.js项目，主要用到`webpack`，以及`vue-loader`，所以确保你的环境中安装有webpack。\n\n```bash\n# 安装vue-cli脚手架工具\n$ npm install -g vue-cli\n\n# 在 my-project 目录中生成一个项目\n# 这一步中你还可以选择是否安装vue-router,ESLint,unit tests, e2e tests...\n$ vue init webpack my-project\n\n# 进入到项目\n$ cd my-project\n\n# 安装依赖\n$ npm install\n\n# 构建并启动项目\n$ npm run dev\n```\n如果你在 `vue init webpack my-project` 步骤中选择安装所有的工具，那么我们的项目目录结构应该是这样的：\n```\n.\n├── build/                      # webpack config files\n│   └── ...\n├── config/\n│   ├── index.js                # main project config\n│   └── ...\n├── src/\n│   ├── main.js                 # app entry file\n│   ├── App.vue                 # main app component\n│   ├── components/             # ui components\n│   │   └── ...\n│   └── assets/                 # module assets (processed by webpack)\n│       └── ...\n├── static/                     # pure static assets (directly copied)\n├── test/\n│   └── unit/                   # unit tests\n│   │   ├── specs/              # test spec files\n│   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests\n│   │   ├── index.js            # test build entry file\n│   │   ├── jest.conf.js        # Config file when using Jest for unit tests\n│   │   └── karma.conf.js       # test runner config file when using Karma for unit tests\n│   │   ├── setup.js            # file that runs before Jest runs your unit tests\n│   └── e2e/                    # e2e tests\n│   │   ├── specs/              # test spec files\n│   │   ├── custom-assertions/  # custom assertions for e2e tests\n│   │   ├── runner.js           # test runner script\n│   │   └── nightwatch.conf.js  # test runner config file\n├── .babelrc                    # babel config\n├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor\n├── .eslintrc.js                # eslint config\n├── .eslintignore               # eslint ignore rules\n├── .gitignore                  # sensible defaults for gitignore\n├── .postcssrc.js               # postcss config\n├── index.html                  # index.html template\n├── package.json                # build scripts and dependencies\n└── README.md                   # Default README file\n```\n> 目录/文件介绍：\n\n- `build/`：该目录保存的是开发和生产环境中的webpack配置，一般情况下是不需要进行修改的；当需要自定义webpack配置时，可以从webpack.base.conf.js开始研究。\n\n- `config/index.js`：这是项目构建时需要的一些最常用到的配置文件。\n\n- `src/`：这里存放的就是我们的业务代码了，我们可以根据项目需要自行配置。\n\n- `static/`：在这里，我们可以存放一些我们不希望webpack来处理的静态资源文件，在使用webpack来构建时，这里的文件将会直接复制到构建后的资源目录下。\n\n- `test/unit`：单元测试相关文件。\n\n- `test/e2e`：e2e测试相关文件。\n\n- `index.html`：基于vue.js的SPA单页应用的入口HTML模板，在开发、构建过程中，webpack将生成很多资源文件，文件之间的URL会被自动的注入到该index.html中。\n\n- `package.json`：npm包源文件，包含所有的构建依赖和构建命令。\n\n#### <a name=\"Commands\">2. 构建命令</a>\n\n<strong>所有的构建命令都是通过`npm`脚本执行的，见`package.json//scripts`。<strong>\n\n```\nnpm run dev\n```\n在本地开发环境启动一个node.js服务器。\n- `webpack` + `vue-loader` 作用于vue的单文件组件\n- 状态保存，热加载\n- 使用`ESLint`检查js\n- 生成资源文件的sourcemap\n- ......\n\n```\nnpm run build\n```\n在生产环境中构建资源\n- 使用`UglifyJS v3`压缩JavaScript\n- 使用`html-minifier`压缩HTML\n- 使用`cssnano`将所有组件的CSS提取到一个文件中\n- 使用版本哈希编译所有的静态文件，以实现资源的持久缓存。为所有的资源自定生成合适的URL，最后注入到`index.html`中，完成整个工程的构建。\n\n```\nnpm run unit\n```\n- 使用Jest在JSDOM中运行单元测试\n\n```\nnpm run lint\n```\n- 运行ESLint并报告任何linting错误。\n\n> 更多构建命令请查阅相关资料\n\n#### <a name=\"Babel\">3. 配置Babel</a>\n\n> 详见我的[另外一篇文章](/)","source":"_posts/vue-cli快速构建vue-js项目.md","raw":"---\nid: 0809009\ntitle: vue-cli快速构建vue.js项目\ndate: 2018-03-01 14:59:28\ntags:\n    - vue.js\n    - webpack\n    - JavaScript\n    - es6\ncategories:\n---\n- <a href=\"#Quickstart\">快速上手</a>\n- <a href=\"#Commands\">构建命令</a>\n- <a href=\"#Babel\">配置Babel</a>\n\n#### <a name=\"Quickstart\">1. 快速上手</a>\n本文介绍如何使用vue-cli快速构建vus.js项目，主要用到`webpack`，以及`vue-loader`，所以确保你的环境中安装有webpack。\n\n```bash\n# 安装vue-cli脚手架工具\n$ npm install -g vue-cli\n\n# 在 my-project 目录中生成一个项目\n# 这一步中你还可以选择是否安装vue-router,ESLint,unit tests, e2e tests...\n$ vue init webpack my-project\n\n# 进入到项目\n$ cd my-project\n\n# 安装依赖\n$ npm install\n\n# 构建并启动项目\n$ npm run dev\n```\n如果你在 `vue init webpack my-project` 步骤中选择安装所有的工具，那么我们的项目目录结构应该是这样的：\n```\n.\n├── build/                      # webpack config files\n│   └── ...\n├── config/\n│   ├── index.js                # main project config\n│   └── ...\n├── src/\n│   ├── main.js                 # app entry file\n│   ├── App.vue                 # main app component\n│   ├── components/             # ui components\n│   │   └── ...\n│   └── assets/                 # module assets (processed by webpack)\n│       └── ...\n├── static/                     # pure static assets (directly copied)\n├── test/\n│   └── unit/                   # unit tests\n│   │   ├── specs/              # test spec files\n│   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests\n│   │   ├── index.js            # test build entry file\n│   │   ├── jest.conf.js        # Config file when using Jest for unit tests\n│   │   └── karma.conf.js       # test runner config file when using Karma for unit tests\n│   │   ├── setup.js            # file that runs before Jest runs your unit tests\n│   └── e2e/                    # e2e tests\n│   │   ├── specs/              # test spec files\n│   │   ├── custom-assertions/  # custom assertions for e2e tests\n│   │   ├── runner.js           # test runner script\n│   │   └── nightwatch.conf.js  # test runner config file\n├── .babelrc                    # babel config\n├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor\n├── .eslintrc.js                # eslint config\n├── .eslintignore               # eslint ignore rules\n├── .gitignore                  # sensible defaults for gitignore\n├── .postcssrc.js               # postcss config\n├── index.html                  # index.html template\n├── package.json                # build scripts and dependencies\n└── README.md                   # Default README file\n```\n> 目录/文件介绍：\n\n- `build/`：该目录保存的是开发和生产环境中的webpack配置，一般情况下是不需要进行修改的；当需要自定义webpack配置时，可以从webpack.base.conf.js开始研究。\n\n- `config/index.js`：这是项目构建时需要的一些最常用到的配置文件。\n\n- `src/`：这里存放的就是我们的业务代码了，我们可以根据项目需要自行配置。\n\n- `static/`：在这里，我们可以存放一些我们不希望webpack来处理的静态资源文件，在使用webpack来构建时，这里的文件将会直接复制到构建后的资源目录下。\n\n- `test/unit`：单元测试相关文件。\n\n- `test/e2e`：e2e测试相关文件。\n\n- `index.html`：基于vue.js的SPA单页应用的入口HTML模板，在开发、构建过程中，webpack将生成很多资源文件，文件之间的URL会被自动的注入到该index.html中。\n\n- `package.json`：npm包源文件，包含所有的构建依赖和构建命令。\n\n#### <a name=\"Commands\">2. 构建命令</a>\n\n<strong>所有的构建命令都是通过`npm`脚本执行的，见`package.json//scripts`。<strong>\n\n```\nnpm run dev\n```\n在本地开发环境启动一个node.js服务器。\n- `webpack` + `vue-loader` 作用于vue的单文件组件\n- 状态保存，热加载\n- 使用`ESLint`检查js\n- 生成资源文件的sourcemap\n- ......\n\n```\nnpm run build\n```\n在生产环境中构建资源\n- 使用`UglifyJS v3`压缩JavaScript\n- 使用`html-minifier`压缩HTML\n- 使用`cssnano`将所有组件的CSS提取到一个文件中\n- 使用版本哈希编译所有的静态文件，以实现资源的持久缓存。为所有的资源自定生成合适的URL，最后注入到`index.html`中，完成整个工程的构建。\n\n```\nnpm run unit\n```\n- 使用Jest在JSDOM中运行单元测试\n\n```\nnpm run lint\n```\n- 运行ESLint并报告任何linting错误。\n\n> 更多构建命令请查阅相关资料\n\n#### <a name=\"Babel\">3. 配置Babel</a>\n\n> 详见我的[另外一篇文章](/)","slug":"vue-cli快速构建vue-js项目","published":1,"updated":"2018-03-02T06:58:49.485Z","_id":"cje85td4m006mrgc05vw1ilja","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><a href=\"#Quickstart\">快速上手</a></li>\n<li><a href=\"#Commands\">构建命令</a></li>\n<li><a href=\"#Babel\">配置Babel</a></li>\n</ul>\n<h4 id=\"1-快速上手\"><a href=\"#1-快速上手\" class=\"headerlink\" title=\"1. 快速上手\"></a><a name=\"Quickstart\">1. 快速上手</a></h4><p>本文介绍如何使用vue-cli快速构建vus.js项目，主要用到<code>webpack</code>，以及<code>vue-loader</code>，所以确保你的环境中安装有webpack。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装vue-cli脚手架工具</span></span><br><span class=\"line\">$ npm install -g vue-cli</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 my-project 目录中生成一个项目</span></span><br><span class=\"line\"><span class=\"comment\"># 这一步中你还可以选择是否安装vue-router,ESLint,unit tests, e2e tests...</span></span><br><span class=\"line\">$ vue init webpack my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入到项目</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">$ npm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建并启动项目</span></span><br><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n<p>如果你在 <code>vue init webpack my-project</code> 步骤中选择安装所有的工具，那么我们的项目目录结构应该是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── build/                      # webpack config files</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── config/</span><br><span class=\"line\">│   ├── index.js                # main project config</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── src/</span><br><span class=\"line\">│   ├── main.js                 # app entry file</span><br><span class=\"line\">│   ├── App.vue                 # main app component</span><br><span class=\"line\">│   ├── components/             # ui components</span><br><span class=\"line\">│   │   └── ...</span><br><span class=\"line\">│   └── assets/                 # module assets (processed by webpack)</span><br><span class=\"line\">│       └── ...</span><br><span class=\"line\">├── static/                     # pure static assets (directly copied)</span><br><span class=\"line\">├── test/</span><br><span class=\"line\">│   └── unit/                   # unit tests</span><br><span class=\"line\">│   │   ├── specs/              # test spec files</span><br><span class=\"line\">│   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests</span><br><span class=\"line\">│   │   ├── index.js            # test build entry file</span><br><span class=\"line\">│   │   ├── jest.conf.js        # Config file when using Jest for unit tests</span><br><span class=\"line\">│   │   └── karma.conf.js       # test runner config file when using Karma for unit tests</span><br><span class=\"line\">│   │   ├── setup.js            # file that runs before Jest runs your unit tests</span><br><span class=\"line\">│   └── e2e/                    # e2e tests</span><br><span class=\"line\">│   │   ├── specs/              # test spec files</span><br><span class=\"line\">│   │   ├── custom-assertions/  # custom assertions for e2e tests</span><br><span class=\"line\">│   │   ├── runner.js           # test runner script</span><br><span class=\"line\">│   │   └── nightwatch.conf.js  # test runner config file</span><br><span class=\"line\">├── .babelrc                    # babel config</span><br><span class=\"line\">├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor</span><br><span class=\"line\">├── .eslintrc.js                # eslint config</span><br><span class=\"line\">├── .eslintignore               # eslint ignore rules</span><br><span class=\"line\">├── .gitignore                  # sensible defaults for gitignore</span><br><span class=\"line\">├── .postcssrc.js               # postcss config</span><br><span class=\"line\">├── index.html                  # index.html template</span><br><span class=\"line\">├── package.json                # build scripts and dependencies</span><br><span class=\"line\">└── README.md                   # Default README file</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>目录/文件介绍：</p>\n</blockquote>\n<ul>\n<li><p><code>build/</code>：该目录保存的是开发和生产环境中的webpack配置，一般情况下是不需要进行修改的；当需要自定义webpack配置时，可以从webpack.base.conf.js开始研究。</p>\n</li>\n<li><p><code>config/index.js</code>：这是项目构建时需要的一些最常用到的配置文件。</p>\n</li>\n<li><p><code>src/</code>：这里存放的就是我们的业务代码了，我们可以根据项目需要自行配置。</p>\n</li>\n<li><p><code>static/</code>：在这里，我们可以存放一些我们不希望webpack来处理的静态资源文件，在使用webpack来构建时，这里的文件将会直接复制到构建后的资源目录下。</p>\n</li>\n<li><p><code>test/unit</code>：单元测试相关文件。</p>\n</li>\n<li><p><code>test/e2e</code>：e2e测试相关文件。</p>\n</li>\n<li><p><code>index.html</code>：基于vue.js的SPA单页应用的入口HTML模板，在开发、构建过程中，webpack将生成很多资源文件，文件之间的URL会被自动的注入到该index.html中。</p>\n</li>\n<li><p><code>package.json</code>：npm包源文件，包含所有的构建依赖和构建命令。</p>\n</li>\n</ul>\n<h4 id=\"2-构建命令\"><a href=\"#2-构建命令\" class=\"headerlink\" title=\"2. 构建命令\"></a><a name=\"Commands\">2. 构建命令</a></h4><p><strong>所有的构建命令都是通过<code>npm</code>脚本执行的，见<code>package.json//scripts</code>。<strong></strong></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<p>在本地开发环境启动一个node.js服务器。</p>\n<ul>\n<li><code>webpack</code> + <code>vue-loader</code> 作用于vue的单文件组件</li>\n<li>状态保存，热加载</li>\n<li>使用<code>ESLint</code>检查js</li>\n<li>生成资源文件的sourcemap</li>\n<li>……</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p>在生产环境中构建资源</p>\n<ul>\n<li>使用<code>UglifyJS v3</code>压缩JavaScript</li>\n<li>使用<code>html-minifier</code>压缩HTML</li>\n<li>使用<code>cssnano</code>将所有组件的CSS提取到一个文件中</li>\n<li>使用版本哈希编译所有的静态文件，以实现资源的持久缓存。为所有的资源自定生成合适的URL，最后注入到<code>index.html</code>中，完成整个工程的构建。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run unit</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用Jest在JSDOM中运行单元测试</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run lint</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行ESLint并报告任何linting错误。</li>\n</ul>\n<blockquote>\n<p>更多构建命令请查阅相关资料</p>\n</blockquote>\n<h4 id=\"3-配置Babel\"><a href=\"#3-配置Babel\" class=\"headerlink\" title=\"3. 配置Babel\"></a><a name=\"Babel\">3. 配置Babel</a></h4><blockquote>\n<p>详见我的<a href=\"/\">另外一篇文章</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"#Quickstart\">快速上手</a></li>\n<li><a href=\"#Commands\">构建命令</a></li>\n<li><a href=\"#Babel\">配置Babel</a></li>\n</ul>\n<h4 id=\"1-快速上手\"><a href=\"#1-快速上手\" class=\"headerlink\" title=\"1. 快速上手\"></a><a name=\"Quickstart\">1. 快速上手</a></h4><p>本文介绍如何使用vue-cli快速构建vus.js项目，主要用到<code>webpack</code>，以及<code>vue-loader</code>，所以确保你的环境中安装有webpack。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装vue-cli脚手架工具</span></span><br><span class=\"line\">$ npm install -g vue-cli</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 my-project 目录中生成一个项目</span></span><br><span class=\"line\"><span class=\"comment\"># 这一步中你还可以选择是否安装vue-router,ESLint,unit tests, e2e tests...</span></span><br><span class=\"line\">$ vue init webpack my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入到项目</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">$ npm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建并启动项目</span></span><br><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n<p>如果你在 <code>vue init webpack my-project</code> 步骤中选择安装所有的工具，那么我们的项目目录结构应该是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── build/                      # webpack config files</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── config/</span><br><span class=\"line\">│   ├── index.js                # main project config</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── src/</span><br><span class=\"line\">│   ├── main.js                 # app entry file</span><br><span class=\"line\">│   ├── App.vue                 # main app component</span><br><span class=\"line\">│   ├── components/             # ui components</span><br><span class=\"line\">│   │   └── ...</span><br><span class=\"line\">│   └── assets/                 # module assets (processed by webpack)</span><br><span class=\"line\">│       └── ...</span><br><span class=\"line\">├── static/                     # pure static assets (directly copied)</span><br><span class=\"line\">├── test/</span><br><span class=\"line\">│   └── unit/                   # unit tests</span><br><span class=\"line\">│   │   ├── specs/              # test spec files</span><br><span class=\"line\">│   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests</span><br><span class=\"line\">│   │   ├── index.js            # test build entry file</span><br><span class=\"line\">│   │   ├── jest.conf.js        # Config file when using Jest for unit tests</span><br><span class=\"line\">│   │   └── karma.conf.js       # test runner config file when using Karma for unit tests</span><br><span class=\"line\">│   │   ├── setup.js            # file that runs before Jest runs your unit tests</span><br><span class=\"line\">│   └── e2e/                    # e2e tests</span><br><span class=\"line\">│   │   ├── specs/              # test spec files</span><br><span class=\"line\">│   │   ├── custom-assertions/  # custom assertions for e2e tests</span><br><span class=\"line\">│   │   ├── runner.js           # test runner script</span><br><span class=\"line\">│   │   └── nightwatch.conf.js  # test runner config file</span><br><span class=\"line\">├── .babelrc                    # babel config</span><br><span class=\"line\">├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor</span><br><span class=\"line\">├── .eslintrc.js                # eslint config</span><br><span class=\"line\">├── .eslintignore               # eslint ignore rules</span><br><span class=\"line\">├── .gitignore                  # sensible defaults for gitignore</span><br><span class=\"line\">├── .postcssrc.js               # postcss config</span><br><span class=\"line\">├── index.html                  # index.html template</span><br><span class=\"line\">├── package.json                # build scripts and dependencies</span><br><span class=\"line\">└── README.md                   # Default README file</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>目录/文件介绍：</p>\n</blockquote>\n<ul>\n<li><p><code>build/</code>：该目录保存的是开发和生产环境中的webpack配置，一般情况下是不需要进行修改的；当需要自定义webpack配置时，可以从webpack.base.conf.js开始研究。</p>\n</li>\n<li><p><code>config/index.js</code>：这是项目构建时需要的一些最常用到的配置文件。</p>\n</li>\n<li><p><code>src/</code>：这里存放的就是我们的业务代码了，我们可以根据项目需要自行配置。</p>\n</li>\n<li><p><code>static/</code>：在这里，我们可以存放一些我们不希望webpack来处理的静态资源文件，在使用webpack来构建时，这里的文件将会直接复制到构建后的资源目录下。</p>\n</li>\n<li><p><code>test/unit</code>：单元测试相关文件。</p>\n</li>\n<li><p><code>test/e2e</code>：e2e测试相关文件。</p>\n</li>\n<li><p><code>index.html</code>：基于vue.js的SPA单页应用的入口HTML模板，在开发、构建过程中，webpack将生成很多资源文件，文件之间的URL会被自动的注入到该index.html中。</p>\n</li>\n<li><p><code>package.json</code>：npm包源文件，包含所有的构建依赖和构建命令。</p>\n</li>\n</ul>\n<h4 id=\"2-构建命令\"><a href=\"#2-构建命令\" class=\"headerlink\" title=\"2. 构建命令\"></a><a name=\"Commands\">2. 构建命令</a></h4><p><strong>所有的构建命令都是通过<code>npm</code>脚本执行的，见<code>package.json//scripts</code>。<strong></strong></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<p>在本地开发环境启动一个node.js服务器。</p>\n<ul>\n<li><code>webpack</code> + <code>vue-loader</code> 作用于vue的单文件组件</li>\n<li>状态保存，热加载</li>\n<li>使用<code>ESLint</code>检查js</li>\n<li>生成资源文件的sourcemap</li>\n<li>……</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p>在生产环境中构建资源</p>\n<ul>\n<li>使用<code>UglifyJS v3</code>压缩JavaScript</li>\n<li>使用<code>html-minifier</code>压缩HTML</li>\n<li>使用<code>cssnano</code>将所有组件的CSS提取到一个文件中</li>\n<li>使用版本哈希编译所有的静态文件，以实现资源的持久缓存。为所有的资源自定生成合适的URL，最后注入到<code>index.html</code>中，完成整个工程的构建。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run unit</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用Jest在JSDOM中运行单元测试</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run lint</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行ESLint并报告任何linting错误。</li>\n</ul>\n<blockquote>\n<p>更多构建命令请查阅相关资料</p>\n</blockquote>\n<h4 id=\"3-配置Babel\"><a href=\"#3-配置Babel\" class=\"headerlink\" title=\"3. 配置Babel\"></a><a name=\"Babel\">3. 配置Babel</a></h4><blockquote>\n<p>详见我的<a href=\"/\">另外一篇文章</a></p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cje5flt5300064sc0m3ca2614","tag_id":"cje5flt4w00034sc0gtuznsxs","_id":"cje5flt5600084sc0v522htxq"},{"post_id":"cje5flt4t00024sc0zrb06b6y","tag_id":"cje5flt4w00034sc0gtuznsxs","_id":"cje5flt5d000f4sc0ibbji2y1"},{"post_id":"cje5flt4y00044sc0x7n85hyb","tag_id":"cje5flt5b000d4sc0b42hqa82","_id":"cje5flt5f000h4sc0p8wbylkh"},{"post_id":"cje5hfy0h001r4sc0wk8gnue7","tag_id":"cje5flt5f000i4sc01fo34iq2","_id":"cje5hg695001s4sc03bwp9uyp"},{"post_id":"cje5hfy0h001r4sc0wk8gnue7","tag_id":"cje5hg863001v4sc0ec3vz1t4","_id":"cje5hg864001w4sc0bo62g17b"},{"post_id":"cje5j1din001x4sc0cep910ir","tag_id":"cje5flt4w00034sc0gtuznsxs","_id":"cje5j20yk001y4sc0znzwryzl"},{"post_id":"cje5j1din001x4sc0cep910ir","tag_id":"cje5j23mw001z4sc0tmllvunn","_id":"cje5j23mx00204sc0p8y70ubq"},{"post_id":"cje7z68lf002krgc030opqudt","tag_id":"cje81qprw003frgc0f8pqcvqn","_id":"cje85pflt006jrgc03wm3kqbd"},{"post_id":"cje7z68lf002krgc030opqudt","tag_id":"cje7unc4s000prgc0dauw5dlr","_id":"cje85pflu006krgc0ugvrxnim"},{"post_id":"cje7z68lf002krgc030opqudt","tag_id":"cje5flt4w00034sc0gtuznsxs","_id":"cje85pflu006lrgc0ysooz8b4"},{"post_id":"cje5flt4k00004sc06elpvb0g","tag_id":"cje5flt4w00034sc0gtuznsxs","_id":"cje9l5w2r002r3sc03d4xqcmn"},{"post_id":"cje5flt4k00004sc06elpvb0g","tag_id":"cje5flt5400074sc02h9sha52","_id":"cje9l5w2s002s3sc0nghtd6wz"},{"post_id":"cje5flt4k00004sc06elpvb0g","tag_id":"cje5flt5600094sc0vxhtzjhq","_id":"cje9l5w2t002t3sc0gzprpq56"},{"post_id":"cje5flt5100054sc0fqn52zjl","tag_id":"cje5flt5b000d4sc0b42hqa82","_id":"cje9l6rfy002u3sc0k0mqjzrz"},{"post_id":"cje5flt5100054sc0fqn52zjl","tag_id":"cje5flt5f000i4sc01fo34iq2","_id":"cje9l6rfy002v3sc0slgqjz6j"},{"post_id":"cje5h9poi000m4sc0et4qibog","tag_id":"cje5hai8n000o4sc0ghp5mht0","_id":"cje9l7b43002w3sc02sx807br"},{"post_id":"cje5h9poi000m4sc0et4qibog","tag_id":"cje5hau44000q4sc0y9ztmtfe","_id":"cje9l7b44002x3sc09qpmtsdy"},{"post_id":"cje5h9poi000m4sc0et4qibog","tag_id":"cje5hb4g4001p4sc0f3jn35h6","_id":"cje9l7b45002y3sc0zmv7roqa"},{"post_id":"cje85td4m006mrgc05vw1ilja","tag_id":"cje85u3bn0075rgc08y8fmjul","_id":"cje9l8dm7002z3sc0xspb1v17"},{"post_id":"cje85td4m006mrgc05vw1ilja","tag_id":"cje7un4qm0007rgc0ysygxcu3","_id":"cje9l8dm800303sc0fv3235yf"},{"post_id":"cje85td4m006mrgc05vw1ilja","tag_id":"cje5flt4w00034sc0gtuznsxs","_id":"cje9l8dm800313sc0ebnvp7ub"},{"post_id":"cje85td4m006mrgc05vw1ilja","tag_id":"cje7unc4s000prgc0dauw5dlr","_id":"cje9l8dm900323sc0rozec7cb"}],"Tag":[{"name":"JavaScript","_id":"cje5flt4w00034sc0gtuznsxs"},{"name":"other","_id":"cje5flt5400074sc02h9sha52"},{"name":"置顶","_id":"cje5flt5600094sc0vxhtzjhq"},{"name":"HTML","_id":"cje5flt5b000d4sc0b42hqa82"},{"name":"CSS","_id":"cje5flt5f000i4sc01fo34iq2"},{"name":"HTML5","_id":"cje5hai8n000o4sc0ghp5mht0"},{"name":"sessionStorage","_id":"cje5hau44000q4sc0y9ztmtfe"},{"name":"l","_id":"cje5havo7000s4sc0ft63ts06"},{"name":"lo","_id":"cje5havsx000u4sc067289ytw"},{"name":"loca","_id":"cje5haw11000w4sc0d5suqsd5"},{"name":"local","_id":"cje5haw52000y4sc01oy4j75p"},{"name":"locals","_id":"cje5hawj300104sc0y3zsprsy"},{"name":"localS","_id":"cje5haxif00134sc0ufgml1xi"},{"name":"localSt","_id":"cje5hay8100154sc0rr53ufj8"},{"name":"localSta","_id":"cje5haym000174sc0rz1dwya4"},{"name":"localStao","_id":"cje5hayqn00194sc0sbuzh7l7"},{"name":"localStaor","_id":"cje5hayvs001b4sc0h5y01u5g"},{"name":"localStaora","_id":"cje5haz3l001d4sc0vwkzddy2"},{"name":"localSto","_id":"cje5hb34n001j4sc0s5ruwctz"},{"name":"localStor","_id":"cje5hb3lp001l4sc03kcth5xc"},{"name":"localStora","_id":"cje5hb3sn001n4sc061yxvbjx"},{"name":"localStorage","_id":"cje5hb4g4001p4sc0f3jn35h6"},{"name":"C","_id":"cje5hg73y001t4sc0pfjpcz8e"},{"name":"CSS3","_id":"cje5hg863001v4sc0ec3vz1t4"},{"name":"JSON","_id":"cje5j23mw001z4sc0tmllvunn"},{"name":"web","_id":"cje7un35n0001rgc0rxizihyh"},{"name":"webpa","_id":"cje7un3ud0003rgc0sazo2y2b"},{"name":"webpac","_id":"cje7un44b0005rgc07vgkwh2n"},{"name":"webpack","_id":"cje7un4qm0007rgc0ysygxcu3"},{"name":"webpack e","_id":"cje7un5i00009rgc0543j14ho"},{"name":"webpack es","_id":"cje7un5ol000brgc0etgrt4yq"},{"name":"webpack es6","_id":"cje7un62q000drgc0ro87e21q"},{"name":"webpack es6=","_id":"cje7un99t000frgc0b1uflew4"},{"name":"e","_id":"cje7unbmk000lrgc02fwcrvez"},{"name":"es","_id":"cje7unbtz000nrgc0r6gbl5w7"},{"name":"es6","_id":"cje7unc4s000prgc0dauw5dlr"},{"name":"ja","_id":"cje7unii3000rrgc0jdc1yza9"},{"name":"jav","_id":"cje7unjf5000trgc0fxzs7q3p"},{"name":"j","_id":"cje7unkaa000wrgc0ns5axmvx"},{"name":"J","_id":"cje7unkyc000yrgc009wrbtpw"},{"name":"Ja","_id":"cje7unl3x0010rgc0e43apg5w"},{"name":"Java","_id":"cje7unluy0012rgc06ei88g27"},{"name":"JavaS","_id":"cje7unmfe0014rgc0lmoq6se3"},{"name":"JavaScri","_id":"cje7unngv0016rgc0yj4lqwcv"},{"name":"JavaScrip","_id":"cje7unnmn001argc05keynui2"},{"name":"Babel","_id":"cje81qprw003frgc0f8pqcvqn"},{"name":"二手","_id":"cje85tyvu006orgc09kph3qf1"},{"name":"二","_id":"cje85tzhi006qrgc03q5v1gia"},{"name":"v","_id":"cje85u1xe006vrgc0on38cti6"},{"name":"vu","_id":"cje85u228006xrgc08s6h6z8s"},{"name":"vue","_id":"cje85u26w006zrgc0ruvme0ao"},{"name":"vue.","_id":"cje85u2w70071rgc0fa0kwqri"},{"name":"vue.j","_id":"cje85u3740073rgc0r56n4gm9"},{"name":"vue.js","_id":"cje85u3bn0075rgc08y8fmjul"},{"name":"we","_id":"cje85uvyz0077rgc0juoefh0f"}]}}
