{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/yvshare/source/css/blog_basic.css","path":"css/blog_basic.css","modified":1,"renderable":1},{"_id":"themes/yvshare/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/yvshare/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/yvshare/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/actionscript.svg","path":"icons/actionscript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-component.svg","path":"icons/angular-component.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/android.svg","path":"icons/android.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-directive.svg","path":"icons/angular-directive.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-guard.svg","path":"icons/angular-guard.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-pipe.svg","path":"icons/angular-pipe.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-resolver.svg","path":"icons/angular-resolver.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-routing.svg","path":"icons/angular-routing.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-service.svg","path":"icons/angular-service.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular.svg","path":"icons/angular.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/apiblueprint.svg","path":"icons/apiblueprint.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/applescript.svg","path":"icons/applescript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/appveyor.svg","path":"icons/appveyor.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/arduino.svg","path":"icons/arduino.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/audio.svg","path":"icons/audio.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/assembly.svg","path":"icons/assembly.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/aurelia.svg","path":"icons/aurelia.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/autohotkey.svg","path":"icons/autohotkey.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/autoit.svg","path":"icons/autoit.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/babel.svg","path":"icons/babel.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/bithound.svg","path":"icons/bithound.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/blink.svg","path":"icons/blink.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/blink_light.svg","path":"icons/blink_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/bower.svg","path":"icons/bower.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/browserlist.svg","path":"icons/browserlist.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/browserlist_light.svg","path":"icons/browserlist_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/bucklescript.svg","path":"icons/bucklescript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/c.svg","path":"icons/c.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/cabal.svg","path":"icons/cabal.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/cake.svg","path":"icons/cake.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/certificate.svg","path":"icons/certificate.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/changelog.svg","path":"icons/changelog.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/circleci.svg","path":"icons/circleci.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/circleci_light.svg","path":"icons/circleci_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/cloudfoundry.svg","path":"icons/cloudfoundry.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/clojure.svg","path":"icons/clojure.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/cmake.svg","path":"icons/cmake.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/code-climate.svg","path":"icons/code-climate.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/code-climate_light.svg","path":"icons/code-climate_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/coffee.svg","path":"icons/coffee.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/coldfusion.svg","path":"icons/coldfusion.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/conduct.svg","path":"icons/conduct.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/console.svg","path":"icons/console.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/contributing.svg","path":"icons/contributing.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/cpp.svg","path":"icons/cpp.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/credits.svg","path":"icons/credits.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/crystal.svg","path":"icons/crystal.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/crystal_light.svg","path":"icons/crystal_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/csharp.svg","path":"icons/csharp.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/css-map.svg","path":"icons/css-map.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/css.svg","path":"icons/css.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/cucumber.svg","path":"icons/cucumber.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/cuda.svg","path":"icons/cuda.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/dart.svg","path":"icons/dart.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/database.svg","path":"icons/database.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/diff.svg","path":"icons/diff.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/docker.svg","path":"icons/docker.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/document.svg","path":"icons/document.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/dotjs.svg","path":"icons/dotjs.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/drone.svg","path":"icons/drone.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/drone_light.svg","path":"icons/drone_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ejs.svg","path":"icons/ejs.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/elm.svg","path":"icons/elm.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/email.svg","path":"icons/email.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/elixir.svg","path":"icons/elixir.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/erlang.svg","path":"icons/erlang.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/eslint.svg","path":"icons/eslint.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/editorconfig.svg","path":"icons/editorconfig.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/exe.svg","path":"icons/exe.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/favicon.svg","path":"icons/favicon.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/firebase.svg","path":"icons/firebase.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/file.svg","path":"icons/file.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/flash.svg","path":"icons/flash.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-audio.svg","path":"icons/folder-audio.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-audio-open.svg","path":"icons/folder-audio-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/flow.svg","path":"icons/flow.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-aurelia-open.svg","path":"icons/folder-aurelia-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-aurelia.svg","path":"icons/folder-aurelia.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-aws-open.svg","path":"icons/folder-aws-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-aws.svg","path":"icons/folder-aws.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-bower-open.svg","path":"icons/folder-bower-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-bower.svg","path":"icons/folder-bower.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-circleci-open.svg","path":"icons/folder-circleci-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-circleci.svg","path":"icons/folder-circleci.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-components-open.svg","path":"icons/folder-components-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-components.svg","path":"icons/folder-components.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-config-open.svg","path":"icons/folder-config-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-config.svg","path":"icons/folder-config.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-coverage-open.svg","path":"icons/folder-coverage-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-coverage.svg","path":"icons/folder-coverage.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-css-open.svg","path":"icons/folder-css-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-css.svg","path":"icons/folder-css.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-database.svg","path":"icons/folder-database.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-database-open.svg","path":"icons/folder-database-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-dist-open.svg","path":"icons/folder-dist-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-dist.svg","path":"icons/folder-dist.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-docker-open.svg","path":"icons/folder-docker-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-docker.svg","path":"icons/folder-docker.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-docs-open.svg","path":"icons/folder-docs-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-docs.svg","path":"icons/folder-docs.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-expo-open.svg","path":"icons/folder-expo-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-expo.svg","path":"icons/folder-expo.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-export-open.svg","path":"icons/folder-export-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-export.svg","path":"icons/folder-export.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-font-open.svg","path":"icons/folder-font-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-font.svg","path":"icons/folder-font.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-git-open.svg","path":"icons/folder-git-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-git.svg","path":"icons/folder-git.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-github.svg","path":"icons/folder-github.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-github-open.svg","path":"icons/folder-github-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-gitlab-open.svg","path":"icons/folder-gitlab-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-gitlab.svg","path":"icons/folder-gitlab.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-global-open.svg","path":"icons/folder-global-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-global.svg","path":"icons/folder-global.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-gradle-open.svg","path":"icons/folder-gradle-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-gradle.svg","path":"icons/folder-gradle.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-i18n-open.svg","path":"icons/folder-i18n-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-images-open.svg","path":"icons/folder-images-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-i18n.svg","path":"icons/folder-i18n.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-images.svg","path":"icons/folder-images.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-import-open.svg","path":"icons/folder-import-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-import.svg","path":"icons/folder-import.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-include-open.svg","path":"icons/folder-include-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-include.svg","path":"icons/folder-include.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-javascript-open.svg","path":"icons/folder-javascript-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-javascript.svg","path":"icons/folder-javascript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-jinja-open.svg","path":"icons/folder-jinja-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-jinja-open_light.svg","path":"icons/folder-jinja-open_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-jinja.svg","path":"icons/folder-jinja.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-jinja_light.svg","path":"icons/folder-jinja_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-kubernetes-open.svg","path":"icons/folder-kubernetes-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-kubernetes.svg","path":"icons/folder-kubernetes.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-lib-open.svg","path":"icons/folder-lib-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-lib.svg","path":"icons/folder-lib.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-log-open.svg","path":"icons/folder-log-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-log.svg","path":"icons/folder-log.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-markdown-open.svg","path":"icons/folder-markdown-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-markdown.svg","path":"icons/folder-markdown.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-actions-open.svg","path":"icons/folder-ngrx-actions-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-actions.svg","path":"icons/folder-ngrx-actions.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-effects-open.svg","path":"icons/folder-ngrx-effects-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-effects.svg","path":"icons/folder-ngrx-effects.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-entities-open.svg","path":"icons/folder-ngrx-entities-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-entities.svg","path":"icons/folder-ngrx-entities.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-reducer-open.svg","path":"icons/folder-ngrx-reducer-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-reducer.svg","path":"icons/folder-ngrx-reducer.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-state-open.svg","path":"icons/folder-ngrx-state-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-state.svg","path":"icons/folder-ngrx-state.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-node-open.svg","path":"icons/folder-node-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-node.svg","path":"icons/folder-node.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-other-open.svg","path":"icons/folder-other-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-php.svg","path":"icons/folder-php.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-php-open.svg","path":"icons/folder-php-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-phpmailer-open.svg","path":"icons/folder-phpmailer-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-other.svg","path":"icons/folder-other.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-phpmailer.svg","path":"icons/folder-phpmailer.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-public-open.svg","path":"icons/folder-public-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-public.svg","path":"icons/folder-public.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-react-components-open.svg","path":"icons/folder-react-components-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-react-components.svg","path":"icons/folder-react-components.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-actions-open.svg","path":"icons/folder-redux-actions-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-actions.svg","path":"icons/folder-redux-actions.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-reducer-open.svg","path":"icons/folder-redux-reducer-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-reducer.svg","path":"icons/folder-redux-reducer.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-store-open.svg","path":"icons/folder-redux-store-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-store.svg","path":"icons/folder-redux-store.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-resource-open.svg","path":"icons/folder-resource-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-resource.svg","path":"icons/folder-resource.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-scripts-open.svg","path":"icons/folder-scripts-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-sass-open.svg","path":"icons/folder-sass-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-sass.svg","path":"icons/folder-sass.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-scripts.svg","path":"icons/folder-scripts.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-src.svg","path":"icons/folder-src.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-src-open.svg","path":"icons/folder-src-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-sublime-open.svg","path":"icons/folder-sublime-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-sublime.svg","path":"icons/folder-sublime.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-temp-open.svg","path":"icons/folder-temp-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-temp.svg","path":"icons/folder-temp.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-test-open.svg","path":"icons/folder-test-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-tools-open.svg","path":"icons/folder-tools-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-tools.svg","path":"icons/folder-tools.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-typescript-open.svg","path":"icons/folder-typescript-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-typescript.svg","path":"icons/folder-typescript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-video.svg","path":"icons/folder-video.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-video-open.svg","path":"icons/folder-video-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-views-open.svg","path":"icons/folder-views-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-test.svg","path":"icons/folder-test.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-views.svg","path":"icons/folder-views.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-vscode-open.svg","path":"icons/folder-vscode-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-vscode.svg","path":"icons/folder-vscode.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-vue-open.svg","path":"icons/folder-vue-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-vue.svg","path":"icons/folder-vue.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-wakatime-open.svg","path":"icons/folder-wakatime-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-wakatime.svg","path":"icons/folder-wakatime.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-webpack-open.svg","path":"icons/folder-webpack-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-webpack.svg","path":"icons/folder-webpack.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-wordpress-open.svg","path":"icons/folder-wordpress-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-wordpress.svg","path":"icons/folder-wordpress.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/font.svg","path":"icons/font.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/gatsby.svg","path":"icons/gatsby.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/fsharp.svg","path":"icons/fsharp.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/fusebox.svg","path":"icons/fusebox.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/gitlab.svg","path":"icons/gitlab.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/git.svg","path":"icons/git.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/go.svg","path":"icons/go.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/gradle.svg","path":"icons/gradle.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/graphql.svg","path":"icons/graphql.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/gulp.svg","path":"icons/gulp.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/groovy.svg","path":"icons/groovy.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/graphcool.svg","path":"icons/graphcool.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/h.svg","path":"icons/h.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/haml.svg","path":"icons/haml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/hack.svg","path":"icons/hack.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/handlebars.svg","path":"icons/handlebars.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/haxe.svg","path":"icons/haxe.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/heroku.svg","path":"icons/heroku.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/hpp.svg","path":"icons/hpp.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/haskell.svg","path":"icons/haskell.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/html.svg","path":"icons/html.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/http.svg","path":"icons/http.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ionic.svg","path":"icons/ionic.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/image.svg","path":"icons/image.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/java.svg","path":"icons/java.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/javascript-map.svg","path":"icons/javascript-map.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/jenkins.svg","path":"icons/jenkins.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/javascript.svg","path":"icons/javascript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/jinja.svg","path":"icons/jinja.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/jinja_light.svg","path":"icons/jinja_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/julia.svg","path":"icons/julia.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/json.svg","path":"icons/json.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/karma.svg","path":"icons/karma.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/kl.svg","path":"icons/kl.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/key.svg","path":"icons/key.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/kivy.svg","path":"icons/kivy.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/kotlin.svg","path":"icons/kotlin.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/laravel.svg","path":"icons/laravel.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/less.svg","path":"icons/less.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/lib.svg","path":"icons/lib.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/livescript.svg","path":"icons/livescript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/lock.svg","path":"icons/lock.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/log.svg","path":"icons/log.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/lua.svg","path":"icons/lua.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/markdown.svg","path":"icons/markdown.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/markojs.svg","path":"icons/markojs.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/mathematica.svg","path":"icons/mathematica.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/matlab.svg","path":"icons/matlab.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/merlin.svg","path":"icons/merlin.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/mjml.svg","path":"icons/mjml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/mocha.svg","path":"icons/mocha.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/mxml.svg","path":"icons/mxml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ngrx-effects.svg","path":"icons/ngrx-effects.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ngrx-actions.svg","path":"icons/ngrx-actions.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ngrx-entity.svg","path":"icons/ngrx-entity.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ngrx-reducer.svg","path":"icons/ngrx-reducer.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ngrx-state.svg","path":"icons/ngrx-state.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/nim.svg","path":"icons/nim.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/nix.svg","path":"icons/nix.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/nodejs.svg","path":"icons/nodejs.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/nodemon.svg","path":"icons/nodemon.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/npm.svg","path":"icons/npm.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/nunjucks.svg","path":"icons/nunjucks.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ocaml.svg","path":"icons/ocaml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/pdf.svg","path":"icons/pdf.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/perl.svg","path":"icons/perl.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/php.svg","path":"icons/php.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/php_elephant.svg","path":"icons/php_elephant.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/postcss.svg","path":"icons/postcss.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/powerpoint.svg","path":"icons/powerpoint.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/powershell.svg","path":"icons/powershell.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/prettier.svg","path":"icons/prettier.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/protractor.svg","path":"icons/protractor.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/pug.svg","path":"icons/pug.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/puppet.svg","path":"icons/puppet.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/purescript.svg","path":"icons/purescript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/python.svg","path":"icons/python.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/r.svg","path":"icons/r.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/raml.svg","path":"icons/raml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/razor.svg","path":"icons/razor.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/react.svg","path":"icons/react.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/readme.svg","path":"icons/readme.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/reason.svg","path":"icons/reason.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/restql.svg","path":"icons/restql.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/riot.svg","path":"icons/riot.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/robot.svg","path":"icons/robot.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/rollup.svg","path":"icons/rollup.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ruby.svg","path":"icons/ruby.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/rust.svg","path":"icons/rust.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/sass.svg","path":"icons/sass.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/sbt.svg","path":"icons/sbt.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/scala.svg","path":"icons/scala.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/sequelize.svg","path":"icons/sequelize.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/settings.svg","path":"icons/settings.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/shaderlab.svg","path":"icons/shaderlab.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/slim.svg","path":"icons/slim.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/smarty.svg","path":"icons/smarty.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/snyk.svg","path":"icons/snyk.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/solidity.svg","path":"icons/solidity.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/sonar.svg","path":"icons/sonar.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/stylelint.svg","path":"icons/stylelint.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/stylelint_light.svg","path":"icons/stylelint_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/stylus.svg","path":"icons/stylus.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/sublime.svg","path":"icons/sublime.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/swc.svg","path":"icons/swc.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/swift.svg","path":"icons/swift.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/table.svg","path":"icons/table.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/terraform.svg","path":"icons/terraform.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/test-js.svg","path":"icons/test-js.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/test-jsx.svg","path":"icons/test-jsx.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/test-ts.svg","path":"icons/test-ts.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/tex.svg","path":"icons/tex.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/todo.svg","path":"icons/todo.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/travis.svg","path":"icons/travis.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/tune.svg","path":"icons/tune.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/twig.svg","path":"icons/twig.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/typescript-def.svg","path":"icons/typescript-def.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/typescript.svg","path":"icons/typescript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/url.svg","path":"icons/url.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/verilog.svg","path":"icons/verilog.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/vfl.svg","path":"icons/vfl.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/video.svg","path":"icons/video.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/virtual.svg","path":"icons/virtual.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/visualstudio.svg","path":"icons/visualstudio.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/vscode.svg","path":"icons/vscode.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/vue.svg","path":"icons/vue.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/wakatime.svg","path":"icons/wakatime.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/wakatime_light.svg","path":"icons/wakatime_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/watchman.svg","path":"icons/watchman.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/webpack.svg","path":"icons/webpack.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/wolframlanguage.svg","path":"icons/wolframlanguage.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/word.svg","path":"icons/word.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/xaml.svg","path":"icons/xaml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/xml.svg","path":"icons/xml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/yaml.svg","path":"icons/yaml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/yang.svg","path":"icons/yang.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/yarn.svg","path":"icons/yarn.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/zip.svg","path":"icons/zip.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/images/favicon.png","path":"images/favicon.png","modified":1,"renderable":1},{"_id":"themes/yvshare/source/images/livere2.png","path":"images/livere2.png","modified":1,"renderable":1},{"_id":"themes/yvshare/source/images/livere3.png","path":"images/livere3.png","modified":1,"renderable":1},{"_id":"themes/yvshare/source/images/localstorage.png","path":"images/localstorage.png","modified":1,"renderable":1},{"_id":"themes/yvshare/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/yvshare/source/images/logo@2x.png","path":"images/logo@2x.png","modified":1,"renderable":1},{"_id":"themes/yvshare/source/js/jquery-migrate-1.2.1.min.js","path":"js/jquery-migrate-1.2.1.min.js","modified":1,"renderable":1},{"_id":"themes/yvshare/source/js/jquery.appear.js","path":"js/jquery.appear.js","modified":1,"renderable":1},{"_id":"themes/yvshare/source/js/livere.js","path":"js/livere.js","modified":1,"renderable":1},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/yvshare/source/images/livere1.png","path":"images/livere1.png","modified":1,"renderable":1},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"themes/yvshare/source/images/livere.png","path":"images/livere.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yvshare/LICENSE","hash":"ee28de09fb00973dd131803ec3b30b6526c716d7","modified":1519979914795},{"_id":"themes/yvshare/README.md","hash":"b1560aeedb772e839b93e71cc872330008bf7171","modified":1519979914848},{"_id":"themes/yvshare/_config.sample.yml","hash":"7e1657b886a344a15a6da2c36f99f7269b4fb79b","modified":1519979914798},{"_id":"themes/yvshare/_config.yml","hash":"c73d21c5578da173053b04a8a95a1184db943ba8","modified":1519986442251},{"_id":"themes/yvshare/package.json","hash":"eb94a9d0487218419c726152189c1c915d0c4fa7","modified":1519979914845},{"_id":"source/_posts/0809000_hello-world.md","hash":"79579f888eb490866cb3625099843d7cfcb1b688","modified":1520231089291},{"_id":"source/_posts/0809001_hello.md","hash":"bb3bad3e7df80736c43f2ccd9d2b828f8de68a78","modified":1520220373869},{"_id":"source/_posts/0809002_CSS3-渐变.md","hash":"0f956e0893b3fd1cfb4c404d9d5916a1e82f07b3","modified":1520231380499},{"_id":"source/_posts/0809003_在hexo中部署livere评论系统.md","hash":"9683c91cff0cfebe4c2fc4f4f901ddc6a2ea531d","modified":1520241864269},{"_id":"source/_posts/0809004_HTML5存储webStorage.md","hash":"0b0ef963dd3f212a7ad8b1efa532fb18f6d06a36","modified":1520235117544},{"_id":"source/_posts/0809005_JSON序列化选项.md","hash":"4067e80309534d0f739e8085a5e7f0e2ab6de626","modified":1520235167614},{"_id":"source/_posts/0809007_记一次在公司中配置Babel的经历.md","hash":"b203b526032869772a1e1fe393cad9e1ddc4621e","modified":1520218999544},{"_id":"source/_posts/0809006_关于JavaScript数组的一些思考.md","hash":"8f7221a5378f8f02f48fb049d206563a50eaf21d","modified":1520218935370},{"_id":"source/_posts/0809008_JavaScript面向对象.md","hash":"319d4acba371294f53dc734c9bf6dfc12ab3d81d","modified":1520218897767},{"_id":"source/_posts/0809010_小窥Node.js服务端框架Express.md","hash":"fd87f390258f4414b095910bd87a25c731432844","modified":1520235192716},{"_id":"source/_posts/0809009_vue-cli快速构建vue-js项目.md","hash":"f8fac124f276e278f61162b5db20c1abf07f6e51","modified":1520218924084},{"_id":"source/_posts/0809011_常用的GIT命令.md","hash":"cad117ff6eaf49db0f3b601ab4a35568527f965d","modified":1520218962211},{"_id":"source/_posts/0809012_常用的Vim命令.md","hash":"4d17f5b4428659cfda6f176aaaf9cdbe8465c0c7","modified":1520219173132},{"_id":"source/_posts/0809013_常用的markdown语法.md","hash":"e3339d6e11acc26dc5085f77bf10f0da5fd77693","modified":1520219164691},{"_id":"source/_posts/0809014_JavaScript类型检测.md","hash":"af4d0335fddc948165af984b3c3b7587e3060ded","modified":1520232004930},{"_id":"source/_posts/0809015_实时监听文本域输入.md","hash":"220af769f7adddff09aef1f143e0a6b1b8cbcc4d","modified":1520231751105},{"_id":"source/_posts/0809016_获取JSON的key.md","hash":"6d5a74cb99dcb129db87fa39fd277a893661c8c9","modified":1520231636280},{"_id":"source/_posts/0809017_ajax请求之axios.md","hash":"bfec2896f124cda5cfdb26ddfaa9459a505ed81c","modified":1520219151503},{"_id":"source/_posts/0809018_在hexo中配置swiftype搜索平台.md","hash":"9d5509100d672966ab2345bfc1b32f5e7c7f5f0c","modified":1520242319350},{"_id":"source/_posts/0809019_搭建一个基于hexo的个人博客.md","hash":"fd173387d638069a5105a020f66fad7490db3856","modified":1520242336583},{"_id":"source/tags/index.md","hash":"4e5a63708cf4c6d561273edaeb06c990269a15f7","modified":1519717535259},{"_id":"source/about/index.md","hash":"04ba66073f092f19094c5e7bbb7c221ef4a7ebbd","modified":1519641398391},{"_id":"themes/yvshare/languages/pt-BR--.yml","hash":"765f275d7547779d67a1e83c55ef8850918e216e","modified":1519979914854},{"_id":"themes/yvshare/languages/zh-cn.yml","hash":"b6ad22bfb3448d0d54cea0bcbb431e28e253cff9","modified":1519979914857},{"_id":"themes/yvshare/layout/archive.pug","hash":"e5a7c55ff6402932dd6061b042c2695028814cfc","modified":1519979914839},{"_id":"themes/yvshare/layout/category.pug","hash":"75ac0c1284a307a72e7b2f6cbf90f83f853e57f4","modified":1519979914836},{"_id":"themes/yvshare/layout/index.pug","hash":"8c8d356abe40fc2465aa85c6904d9bc199458448","modified":1519979914827},{"_id":"themes/yvshare/layout/mixins.pug","hash":"eee85d29a63b4d57d79fa331aeb26b10c1e21d04","modified":1519979914833},{"_id":"themes/yvshare/layout/page.pug","hash":"4021d42128a2fccbb3a445f5a7d41dea93c8edff","modified":1519979914842},{"_id":"themes/yvshare/layout/tag.pug","hash":"fc386024d51ce6834ee287d9027460bdd4273882","modified":1519979914830},{"_id":"themes/yvshare/layout/post.pug","hash":"dedefc5a4bed9901f92680183af47c7ad94d95cb","modified":1519979914804},{"_id":"themes/yvshare/layout/partial/footer.pug","hash":"965539c08fe3d0d40142f1b3468d692c5fdce76a","modified":1519979914818},{"_id":"themes/yvshare/layout/partial/comments.pug","hash":"bce55420275c10c3052255110d22b808ceb3db3b","modified":1519979914809},{"_id":"themes/yvshare/layout/partial/layout.pug","hash":"5996b1b1645b31ba5be0f15c439f416fd3d2429e","modified":1519985169383},{"_id":"themes/yvshare/layout/partial/head.pug","hash":"d3f05774a866d2f60955eede5a19465320f67a9b","modified":1519985299670},{"_id":"themes/yvshare/layout/partial/nav.pug","hash":"71ff81556cefc1b4ac329d2cf5bc0eecfd180499","modified":1519985951878},{"_id":"themes/yvshare/layout/partial/sidebar.pug","hash":"f8ee2fac51d62a008d97f545b1ad35961d5e3efc","modified":1519979914815},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1519979914764},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1519979914772},{"_id":"themes/yvshare/source/css/blog_basic.css","hash":"a29ed959f16616515db3edb8c363d7dfaafe8f64","modified":1519979914792},{"_id":"themes/yvshare/source/css/font-awesome.min.css","hash":"63ab94ae803ede34930640aa39219866bddeab63","modified":1519979914786},{"_id":"themes/yvshare/source/css/style.css","hash":"ef1ceb1c25e9bc1caee4d9d8cdfea8af25bdc1a9","modified":1520241405277},{"_id":"themes/yvshare/source/css/style.scss","hash":"9d1df0a936aebfa25adc05d6b7304e75ef027fd4","modified":1519979914790},{"_id":"themes/yvshare/source/icons/actionscript.svg","hash":"7b1407b6f7987323d2f35a967f3e55fe32617dbb","modified":1520228940133},{"_id":"themes/yvshare/source/icons/angular-component.svg","hash":"9b229582472620ed8ebc6a404103fb21d069c157","modified":1520228940135},{"_id":"themes/yvshare/source/icons/android.svg","hash":"3a73d45ebdcad4e6e4426dab351ea2f51af0d44b","modified":1520228940134},{"_id":"themes/yvshare/source/icons/angular-directive.svg","hash":"54744c064e42c415bc83d3c9651f5f2b6770f7e6","modified":1520228940136},{"_id":"themes/yvshare/source/icons/angular-guard.svg","hash":"a45fa9b9689fa9c84d18ce30744826c8532203db","modified":1520228940137},{"_id":"themes/yvshare/source/icons/angular-pipe.svg","hash":"575d8fb3caf36daeb5046165289a10817ca75c6a","modified":1520228940139},{"_id":"themes/yvshare/source/icons/angular-resolver.svg","hash":"a45fa9b9689fa9c84d18ce30744826c8532203db","modified":1520228940140},{"_id":"themes/yvshare/source/icons/angular-routing.svg","hash":"897e75e30b556c6bc94a205fd7e0e480404d955d","modified":1520228940141},{"_id":"themes/yvshare/source/icons/angular-service.svg","hash":"637f6c0006ea07f9f43e175051de5e51b4e323a0","modified":1520228940142},{"_id":"themes/yvshare/source/icons/angular.svg","hash":"467742c46b80a6fb22fbc2e0e820a9355eea1943","modified":1520228940144},{"_id":"themes/yvshare/source/icons/apiblueprint.svg","hash":"888cc510916490d3fcde6ae25f884acf94098898","modified":1520228940145},{"_id":"themes/yvshare/source/icons/applescript.svg","hash":"0619e0207d4f1a5d0d68000ce5623c6fdfa7721e","modified":1520228940146},{"_id":"themes/yvshare/source/icons/appveyor.svg","hash":"2ab3f91d77d3e6eef3878282a6930aca1a98c17b","modified":1520228940148},{"_id":"themes/yvshare/source/icons/arduino.svg","hash":"5df8206ace5bd8fab216e7b2c19006617d55a0ec","modified":1520228940149},{"_id":"themes/yvshare/source/icons/audio.svg","hash":"8fb622b31054f3d8ea662fe311bc14913671e2d4","modified":1520228940151},{"_id":"themes/yvshare/source/icons/assembly.svg","hash":"2cfbf56cc28300758c1472549ddfcbeba5c8031c","modified":1520228940150},{"_id":"themes/yvshare/source/icons/aurelia.svg","hash":"0cab97bf541009093736c42f0d9c171f909fc78d","modified":1520228940153},{"_id":"themes/yvshare/source/icons/autohotkey.svg","hash":"0dd03be47873ba3b80a6393d418f8f10443ab15a","modified":1520228940154},{"_id":"themes/yvshare/source/icons/autoit.svg","hash":"fac181fdcaae7a8f4bb7781e721a0d526420d2f0","modified":1520228940155},{"_id":"themes/yvshare/source/icons/babel.svg","hash":"cf5e925be7c6de2a73136dd8185a710a7d33aa61","modified":1520228940156},{"_id":"themes/yvshare/source/icons/bithound.svg","hash":"a38cc9cec91d83abec44215d284bd76aea207d22","modified":1520228940158},{"_id":"themes/yvshare/source/icons/blink.svg","hash":"4d74809c3ae6717f5fdc44bc201e49ace763531f","modified":1520228940159},{"_id":"themes/yvshare/source/icons/blink_light.svg","hash":"8c11d4114e463bbaef43f6d3aa7443e2b47b02e4","modified":1520228940160},{"_id":"themes/yvshare/source/icons/bower.svg","hash":"3f9c9497b29540fc85e25eb61257637643db3c5d","modified":1520228940161},{"_id":"themes/yvshare/source/icons/browserlist.svg","hash":"a9f9b0fc1a30df198fad4090e28d17c54917771b","modified":1520228940162},{"_id":"themes/yvshare/source/icons/browserlist_light.svg","hash":"e36c273dd4c18d22c224d446d0dd9ff1bd2ee98e","modified":1520228940163},{"_id":"themes/yvshare/source/icons/bucklescript.svg","hash":"6b00bd9b2d6eecca0050812bf04c40209b848d2c","modified":1520228940164},{"_id":"themes/yvshare/source/icons/c.svg","hash":"94987b3663eaf0b1ddc71aaebf7746dcb68f1435","modified":1520228940165},{"_id":"themes/yvshare/source/icons/cabal.svg","hash":"d5a0667fabe9d98bb58b5dcb43a8f0e2aa4a9f7a","modified":1520228940167},{"_id":"themes/yvshare/source/icons/cake.svg","hash":"e5ab4c13e55e9d028ff5617251685691ae6e4af0","modified":1520228940168},{"_id":"themes/yvshare/source/icons/certificate.svg","hash":"077595e5e4000de319246327342a20cf53fd09d9","modified":1520228940170},{"_id":"themes/yvshare/source/icons/changelog.svg","hash":"69a47a1efdc9e1441ebcdba3c2e8a58469996fd8","modified":1520228940171},{"_id":"themes/yvshare/source/icons/circleci.svg","hash":"b154bd89fe45f54a2fcc74e62833a662f33cf3c9","modified":1520228940172},{"_id":"themes/yvshare/source/icons/circleci_light.svg","hash":"23484e923ace86adeb225364ed5e5d49a2270adb","modified":1520228940173},{"_id":"themes/yvshare/source/icons/cloudfoundry.svg","hash":"be9b3feb276a969ee0c23d93ad536d5a8d0ff34b","modified":1520228940176},{"_id":"themes/yvshare/source/icons/clojure.svg","hash":"ae47e295fab0638db745481f4d67f8cefeb9ca8b","modified":1520228940175},{"_id":"themes/yvshare/source/icons/cmake.svg","hash":"fc0600a9b10c71552e9f6acb709e00b36964a28b","modified":1520228940182},{"_id":"themes/yvshare/source/icons/code-climate.svg","hash":"9aa3a8551b98c0d1062d4227087333444188de1d","modified":1520228940183},{"_id":"themes/yvshare/source/icons/code-climate_light.svg","hash":"8eb4868531c048df07f7bd91f309d008760b84a5","modified":1520228940184},{"_id":"themes/yvshare/source/icons/coffee.svg","hash":"86d8f2b3a089e297dbf8f113f3f5650e4f36fabd","modified":1520228940185},{"_id":"themes/yvshare/source/icons/coldfusion.svg","hash":"1152068a43b18f6f834322ee1f7e8f3c67bb2c07","modified":1520228940187},{"_id":"themes/yvshare/source/icons/conduct.svg","hash":"e71415d943477a4f2e198d892d1bd61f5abc3468","modified":1520228940188},{"_id":"themes/yvshare/source/icons/console.svg","hash":"6645e385b8dbe9ad62f968586d4e309fa67d5387","modified":1520228940189},{"_id":"themes/yvshare/source/icons/contributing.svg","hash":"8804c9bd349afc06f56793208933ecc92874d8b6","modified":1520228940190},{"_id":"themes/yvshare/source/icons/cpp.svg","hash":"9834883aaac14a3cd7ad2b573a26e9aca8f3861b","modified":1520228940191},{"_id":"themes/yvshare/source/icons/credits.svg","hash":"e5ce114f82cbfaaca44fd05ae68cdaaa5b516fd0","modified":1520228940192},{"_id":"themes/yvshare/source/icons/crystal.svg","hash":"8515115ee10b4ed0247cd1da2eb8fc18c737490d","modified":1520228940194},{"_id":"themes/yvshare/source/icons/crystal_light.svg","hash":"2ce72f2267d259b95ffd1f11ccb6f41c4f061345","modified":1520228940195},{"_id":"themes/yvshare/source/icons/csharp.svg","hash":"308df795a92bb97ce6b3c9ecfae7ab537c67888d","modified":1520228940196},{"_id":"themes/yvshare/source/icons/css-map.svg","hash":"850231f29201875c968106fccbac08e8c07f5e1d","modified":1520228940198},{"_id":"themes/yvshare/source/icons/css.svg","hash":"b3a108ad97e4461995e1aacf227113a0220c63a0","modified":1520228940199},{"_id":"themes/yvshare/source/icons/cucumber.svg","hash":"87370a596979d33ace596ab973414cd7d59881c8","modified":1520228940201},{"_id":"themes/yvshare/source/icons/cuda.svg","hash":"0ad8351c672e8a611043e537bff9873ea954ac0c","modified":1520228940202},{"_id":"themes/yvshare/source/icons/dart.svg","hash":"cef221ca4a6933f86422a399d6ee9557a16227c7","modified":1520228940203},{"_id":"themes/yvshare/source/icons/database.svg","hash":"0f06038daa018d85b0a4b8baa2c80e895efb2518","modified":1520228940204},{"_id":"themes/yvshare/source/icons/diff.svg","hash":"7417074d3a91bb609f34f2e4324c2b05486bbc4f","modified":1520228940205},{"_id":"themes/yvshare/source/icons/docker.svg","hash":"20502f8e9f84d64b53d96ce91d6debe4d72fa4ee","modified":1520228940207},{"_id":"themes/yvshare/source/icons/document.svg","hash":"1887e7cb382a2af54422efca90aeca0572bd0276","modified":1520228940208},{"_id":"themes/yvshare/source/icons/dotjs.svg","hash":"70ad47a4bc600a5694770ffeab070dc6da132a94","modified":1520228940209},{"_id":"themes/yvshare/source/icons/drone.svg","hash":"d8f1aaacd3529054780e62ee4f5152d8a3512126","modified":1520228940210},{"_id":"themes/yvshare/source/icons/drone_light.svg","hash":"8f2c6054aaa89ff94623daf04869156d439f845d","modified":1520228940211},{"_id":"themes/yvshare/source/icons/ejs.svg","hash":"7ef7c0a855d573a3e93240f99be0f3cb02490765","modified":1520228940214},{"_id":"themes/yvshare/source/icons/elm.svg","hash":"b11d2a6cfcae95a11bce2b8552651826763137ae","modified":1520228940216},{"_id":"themes/yvshare/source/icons/email.svg","hash":"25f82c2aa9a6d7972ac2fc1bf53933206acc6e50","modified":1520228940217},{"_id":"themes/yvshare/source/icons/elixir.svg","hash":"6848e1c0c596396a476d6af14f9e8f5ea1bf7ea0","modified":1520228940215},{"_id":"themes/yvshare/source/icons/erlang.svg","hash":"49c5e59885d5e7e5bb8df5a3145fb916b0e74ff0","modified":1520228940218},{"_id":"themes/yvshare/source/icons/eslint.svg","hash":"039fd2bdd18a097b7639a78c8c483b0da98abdd3","modified":1520228940219},{"_id":"themes/yvshare/source/icons/editorconfig.svg","hash":"293dcca0cb82cf50e16f3968c4a6c9e5c19f59b7","modified":1520228940213},{"_id":"themes/yvshare/source/icons/exe.svg","hash":"bbea0ad0875b62d6affc677e2693d4e515d1926c","modified":1520228940221},{"_id":"themes/yvshare/source/icons/favicon.svg","hash":"1cc057acc2a3eb52273a17fa785844e8d13f3ba6","modified":1520228940221},{"_id":"themes/yvshare/source/icons/firebase.svg","hash":"556e8c07a6fde013a5a7f64edc30d8e35a20fb0a","modified":1520228940223},{"_id":"themes/yvshare/source/icons/file.svg","hash":"2633dc144263ca3c257516e694c8f54e637a29e9","modified":1520228940222},{"_id":"themes/yvshare/source/icons/flash.svg","hash":"9ba5c1a40a74ab059c9af3466b9200aca5667b34","modified":1520228940224},{"_id":"themes/yvshare/source/icons/folder-audio.svg","hash":"c1de77b83475d15395926f4d07585d9c1c455d50","modified":1520228940228},{"_id":"themes/yvshare/source/icons/folder-audio-open.svg","hash":"795be28cbecc93a32d63d76cd5a2b16936df71a1","modified":1520228940227},{"_id":"themes/yvshare/source/icons/flow.svg","hash":"36d0a5516fbb230173d3fe8a5f6b29944b46e997","modified":1520228940225},{"_id":"themes/yvshare/source/icons/folder-aurelia-open.svg","hash":"3f0390844f772b6dbcff8339e16242c511a635b5","modified":1520228940229},{"_id":"themes/yvshare/source/icons/folder-aurelia.svg","hash":"f2f14e8de5389f58259010fed3b6fb76a3267e90","modified":1520228940230},{"_id":"themes/yvshare/source/icons/folder-aws-open.svg","hash":"d94f51ce336136df74f1c29b8569b35d5fa33490","modified":1520228940232},{"_id":"themes/yvshare/source/icons/folder-aws.svg","hash":"35d73d7536ea24d2eacc42544a3d7c3de7a63612","modified":1520228940233},{"_id":"themes/yvshare/source/icons/folder-bower-open.svg","hash":"8f682d8419f922f6a7975df05a48c9fd2121adfe","modified":1520228940234},{"_id":"themes/yvshare/source/icons/folder-bower.svg","hash":"e81b45b7543c41dc0edfec9c6c4a66b910bc2490","modified":1520228940236},{"_id":"themes/yvshare/source/icons/folder-circleci-open.svg","hash":"e78c67b3f53b1a8ba6a096349cf1a4e354aa0f6c","modified":1520228940237},{"_id":"themes/yvshare/source/icons/folder-circleci.svg","hash":"e118349366fb51340e10c5f0747275abc0dbefbc","modified":1520228940238},{"_id":"themes/yvshare/source/icons/folder-components-open.svg","hash":"da72c0eb3fdeddaca3b09810570aecb0e6321d28","modified":1520228940239},{"_id":"themes/yvshare/source/icons/folder-components.svg","hash":"4f16f3bc63d1a6cbd578c6e8ae00c6baa8fedeee","modified":1520228940240},{"_id":"themes/yvshare/source/icons/folder-config-open.svg","hash":"a3945d1c2608f73cb06baf4ae2beb15022195445","modified":1520228940241},{"_id":"themes/yvshare/source/icons/folder-config.svg","hash":"68e5f9cafb5be3487f169d33a3de54173dfe63ca","modified":1520228940242},{"_id":"themes/yvshare/source/icons/folder-coverage-open.svg","hash":"a35b9edf74eda32f2c116b831bcfcc961407402d","modified":1520228940243},{"_id":"themes/yvshare/source/icons/folder-coverage.svg","hash":"164dcf85a7c100179c708454ddd5b465bf2cac3c","modified":1520228940245},{"_id":"themes/yvshare/source/icons/folder-css-open.svg","hash":"0d3a5fa3d7c646ae17ff42db22c7b39e742285ea","modified":1520228940246},{"_id":"themes/yvshare/source/icons/folder-css.svg","hash":"b25efc6046ea3fab87bcedc51d1f4a685c540802","modified":1520228940247},{"_id":"themes/yvshare/source/icons/folder-database.svg","hash":"21d64774270142ba256caf30a51933d922314aa8","modified":1520228940250},{"_id":"themes/yvshare/source/icons/folder-database-open.svg","hash":"1957baba51e9e5cf9a583acd783c8e3cd45b1481","modified":1520228940248},{"_id":"themes/yvshare/source/icons/folder-dist-open.svg","hash":"b0e02061b86bac15cdefc64075d3ade70b03d54f","modified":1520228940251},{"_id":"themes/yvshare/source/icons/folder-dist.svg","hash":"d2923966a56c80209b5c5fdac14694c1dcd154ed","modified":1520228940252},{"_id":"themes/yvshare/source/icons/folder-docker-open.svg","hash":"e0070e1fbb3bb498f800b366d5cf9b9f7e99d5b9","modified":1520228940253},{"_id":"themes/yvshare/source/icons/folder-docker.svg","hash":"5ade47f707d2bfcee8f35ca28094885eda8225f6","modified":1520228940254},{"_id":"themes/yvshare/source/icons/folder-docs-open.svg","hash":"7befbdf074d8b349f3e11a86e56a319a9422d762","modified":1520228940255},{"_id":"themes/yvshare/source/icons/folder-docs.svg","hash":"042c49d3c9c74cd656e965ecdcae605204b09a78","modified":1520228940256},{"_id":"themes/yvshare/source/icons/folder-expo-open.svg","hash":"04a1ccecbb84632c546ce7c4e8a2bf5b1beea7f1","modified":1520228940257},{"_id":"themes/yvshare/source/icons/folder-expo.svg","hash":"11936f95beec4c5e231245d2065b81f05a5068af","modified":1520228940258},{"_id":"themes/yvshare/source/icons/folder-export-open.svg","hash":"033d9016b17314d6670804bb6e7cb09edccacc2c","modified":1520228940260},{"_id":"themes/yvshare/source/icons/folder-export.svg","hash":"806291a03ddbe471f642c00e16f5dcb0f731914d","modified":1520228940260},{"_id":"themes/yvshare/source/icons/folder-font-open.svg","hash":"fb16046c405be54807c4d62f8ed12e161524cd5f","modified":1520228940261},{"_id":"themes/yvshare/source/icons/folder-font.svg","hash":"eac145f2c6486f6c86a32bd873c745cb07f7620d","modified":1520228940263},{"_id":"themes/yvshare/source/icons/folder-git-open.svg","hash":"28585f6dd2bc3b8c2a2841fd96381b902d35f875","modified":1520228940263},{"_id":"themes/yvshare/source/icons/folder-git.svg","hash":"4194ba7c8b408d84ab30f1fac055736bebb0b3ea","modified":1520228940265},{"_id":"themes/yvshare/source/icons/folder-github.svg","hash":"20172062c679e511a8c55959143c0e03a8c22774","modified":1520228940268},{"_id":"themes/yvshare/source/icons/folder-github-open.svg","hash":"47da43135e0f863980c3119d0561de6dffb8dc79","modified":1520228940267},{"_id":"themes/yvshare/source/icons/folder-gitlab-open.svg","hash":"400976e4975c95f0ee20392ca07a89f66f542783","modified":1520228940269},{"_id":"themes/yvshare/source/icons/folder-gitlab.svg","hash":"d2b9a3e0bc4a087c1f865cba829b1cd9d14bffd0","modified":1520228940271},{"_id":"themes/yvshare/source/icons/folder-global-open.svg","hash":"1749d21d855f987d6c1cddd423df3f6ac2c30969","modified":1520228940272},{"_id":"themes/yvshare/source/icons/folder-global.svg","hash":"ac9c22752188676452c678f4ebb50e4ebd63c031","modified":1520228940273},{"_id":"themes/yvshare/source/icons/folder-gradle-open.svg","hash":"1b690c9cd2472110f5f059e4aea35ea853594240","modified":1520228940274},{"_id":"themes/yvshare/source/icons/folder-gradle.svg","hash":"ca56a5a220300b8d2614f997677800e96b91ee3c","modified":1520228940275},{"_id":"themes/yvshare/source/icons/folder-i18n-open.svg","hash":"31b2fc7e431e1faf3bf0c5f93f7d8f66db8c6f6f","modified":1520228940276},{"_id":"themes/yvshare/source/icons/folder-images-open.svg","hash":"e6c1caacfe98801b53b7fa2573a5e30a7e60a1cd","modified":1520228940280},{"_id":"themes/yvshare/source/icons/folder-i18n.svg","hash":"2b85f45d01f6bbd649555a16d1cd576b8893adab","modified":1520228940278},{"_id":"themes/yvshare/source/icons/folder-images.svg","hash":"0306fc30f58d3b6945704e43d7a5a01bf452003e","modified":1520228940281},{"_id":"themes/yvshare/source/icons/folder-import-open.svg","hash":"d7630fcee21012cd36a8d208fec6c8213e92db11","modified":1520228940282},{"_id":"themes/yvshare/source/icons/folder-import.svg","hash":"14bf126895a2e3473c4680485a9a83d3664dd922","modified":1520228940283},{"_id":"themes/yvshare/source/icons/folder-include-open.svg","hash":"cb4aed4fb04e0e2d11f9f47efadfd557fe3961c6","modified":1520228940284},{"_id":"themes/yvshare/source/icons/folder-include.svg","hash":"7254c7525a1d35df6298fe9a6d48548aae0a4a99","modified":1520228940285},{"_id":"themes/yvshare/source/icons/folder-javascript-open.svg","hash":"e4e8aa5ebd0409aaf3b4eda6310cdd2494666dfc","modified":1520228940286},{"_id":"themes/yvshare/source/icons/folder-javascript.svg","hash":"c0886a1954b155355c11ee00124ad5afd5083522","modified":1520228940287},{"_id":"themes/yvshare/source/icons/folder-jinja-open.svg","hash":"f1cf4567b6d218d0aa774f4e40b35e42637d2340","modified":1520228940288},{"_id":"themes/yvshare/source/icons/folder-jinja-open_light.svg","hash":"c1074d28cfafd138e74c9cef841af1a286df367e","modified":1520228940289},{"_id":"themes/yvshare/source/icons/folder-jinja.svg","hash":"6dd1f1ded39dc8b99b5008d83e8fcef19fb7c641","modified":1520228940291},{"_id":"themes/yvshare/source/icons/folder-jinja_light.svg","hash":"dec745cc47504c1de4e7bdb643a621579af55bf3","modified":1520228940292},{"_id":"themes/yvshare/source/icons/folder-kubernetes-open.svg","hash":"4649cb96cefee7aa155a73e4c57898a539ef6d19","modified":1520228940293},{"_id":"themes/yvshare/source/icons/folder-kubernetes.svg","hash":"ae9c0807a659b8d36b10c1098d3cc812eb05d530","modified":1520228940294},{"_id":"themes/yvshare/source/icons/folder-lib-open.svg","hash":"c898b8d5201f3de4593f2295e34bfe5e36a616f2","modified":1520228940295},{"_id":"themes/yvshare/source/icons/folder-lib.svg","hash":"a5b7bc6a612f7a135572e13b95c09c8e9aa66da3","modified":1520228940297},{"_id":"themes/yvshare/source/icons/folder-log-open.svg","hash":"bf8caa5e35e2349680d74fcc799fa1a33cee9548","modified":1520228940298},{"_id":"themes/yvshare/source/icons/folder-log.svg","hash":"233ec8627fcb7b7d1856be410e3ac0e359fde01b","modified":1520228940299},{"_id":"themes/yvshare/source/icons/folder-markdown-open.svg","hash":"105472fe236f8a34a3a550d8b6eb2cb6325a05e5","modified":1520228940300},{"_id":"themes/yvshare/source/icons/folder-markdown.svg","hash":"20a50113d23bb12a7d1d05e61f2465f6b979c096","modified":1520228940301},{"_id":"themes/yvshare/source/icons/folder-ngrx-actions-open.svg","hash":"ce63c689f821b2f78774a5dbfe462ac704e7a6e5","modified":1520228940302},{"_id":"themes/yvshare/source/icons/folder-ngrx-actions.svg","hash":"b6483a546a82264acd7827947363aeb3049a47fc","modified":1520228940303},{"_id":"themes/yvshare/source/icons/folder-ngrx-effects-open.svg","hash":"a5b16365b0f8725fa2db238c4833a71be05e36d3","modified":1520228940305},{"_id":"themes/yvshare/source/icons/folder-ngrx-effects.svg","hash":"7bd5fcd81e9475f526b8bc0da224fe6bff94ae25","modified":1520228940305},{"_id":"themes/yvshare/source/icons/folder-ngrx-entities-open.svg","hash":"3d1b4b78459b3110223b8c822ff6362a068d7298","modified":1520228940307},{"_id":"themes/yvshare/source/icons/folder-ngrx-entities.svg","hash":"7c45f5aa333e853798812e5cb58ad899cbd09106","modified":1520228940307},{"_id":"themes/yvshare/source/icons/folder-ngrx-reducer-open.svg","hash":"460215cd445da321b279f7a932ad9c71b521c40d","modified":1520228940309},{"_id":"themes/yvshare/source/icons/folder-ngrx-reducer.svg","hash":"9ee4c1afb341565bbbb5464b67afe50306912bed","modified":1520228940310},{"_id":"themes/yvshare/source/icons/folder-ngrx-state-open.svg","hash":"31d7e877b863343fb07004cbc8c10b057ed7831b","modified":1520228940311},{"_id":"themes/yvshare/source/icons/folder-ngrx-state.svg","hash":"98dc2b7e3ce6b9dfedc2ffdd2b9a662fb46dab7b","modified":1520228940312},{"_id":"themes/yvshare/source/icons/folder-node-open.svg","hash":"517cc1930f6fec1c938dce1e1503c1d46009c610","modified":1520228940313},{"_id":"themes/yvshare/source/icons/folder-node.svg","hash":"f8e654f0bc3f3047355fcc9c1fc3a367ee5f1db7","modified":1520228940314},{"_id":"themes/yvshare/source/icons/folder-other-open.svg","hash":"8ed87567bca9539512ff1845d84cdf56e71af209","modified":1520228940315},{"_id":"themes/yvshare/source/icons/folder-php.svg","hash":"a7dabfea2051f2a9c7dabc438e8003c8d2d8ba84","modified":1520228940318},{"_id":"themes/yvshare/source/icons/folder-php-open.svg","hash":"74d0b07e3b93b20de63622a98cf4e7b92ed89e6e","modified":1520228940317},{"_id":"themes/yvshare/source/icons/folder-phpmailer-open.svg","hash":"008293b3b9f0f0fea0b180c3074a63018596631b","modified":1520228940319},{"_id":"themes/yvshare/source/icons/folder-other.svg","hash":"c79b4a165c7b0eb5d10ee8da0b7a97a3b08125e5","modified":1520228940316},{"_id":"themes/yvshare/source/icons/folder-phpmailer.svg","hash":"83ac202b1dbbd1d1ee38ada3174f44d30b4c4132","modified":1520228940320},{"_id":"themes/yvshare/source/icons/folder-public-open.svg","hash":"b935c11070ea0c24ee4c89e01fa9a627daa55824","modified":1520228940321},{"_id":"themes/yvshare/source/icons/folder-public.svg","hash":"99396b5a18632527794b33c25b0f9da804a81aeb","modified":1520228940322},{"_id":"themes/yvshare/source/icons/folder-react-components-open.svg","hash":"21c3e99e2a0ce5a81f2c280fcf5c384b88a708cf","modified":1520228940323},{"_id":"themes/yvshare/source/icons/folder-react-components.svg","hash":"ba2a7717fb7a923d3a08d1154d15c472d5025098","modified":1520228940323},{"_id":"themes/yvshare/source/icons/folder-redux-actions-open.svg","hash":"c2094203b21f9b5358d7723910cc0576eaaed7eb","modified":1520228940325},{"_id":"themes/yvshare/source/icons/folder-redux-actions.svg","hash":"cfb590d0940ad6c615d0e2c1d2d6dffac044b77d","modified":1520228940325},{"_id":"themes/yvshare/source/icons/folder-redux-reducer-open.svg","hash":"b1bdce9118b1fc4ba5377155406efd0aa5045a4d","modified":1520228940326},{"_id":"themes/yvshare/source/icons/folder-redux-reducer.svg","hash":"1f11ff94d1036617bb06fe866def45f2b9c500c9","modified":1520228940327},{"_id":"themes/yvshare/source/icons/folder-redux-store-open.svg","hash":"7c7087d306ef471760c60710454e77eee845ebbf","modified":1520228940329},{"_id":"themes/yvshare/source/icons/folder-redux-store.svg","hash":"a8d36f3034fe25b90e4cfda4fd0dd304a5a73333","modified":1520228940330},{"_id":"themes/yvshare/source/icons/folder-resource-open.svg","hash":"76eb7b92e74522b426c4c2c01fd58e7c7630d42a","modified":1520228940331},{"_id":"themes/yvshare/source/icons/folder-resource.svg","hash":"ef3f63ff8422d2a8ea222190f33493abb25910de","modified":1520228940332},{"_id":"themes/yvshare/source/icons/folder-scripts-open.svg","hash":"30b130992914ad2f8643bb73e80723de51ae67ad","modified":1520228940335},{"_id":"themes/yvshare/source/icons/folder-sass-open.svg","hash":"174dec7d6520f11696723499a1c7a2950eca069f","modified":1520228940333},{"_id":"themes/yvshare/source/icons/folder-sass.svg","hash":"1911ddb9dab4a67ecc7b8b83523f2ca255bb6087","modified":1520228940334},{"_id":"themes/yvshare/source/icons/folder-scripts.svg","hash":"555c5e32436a5f010faad23473056b6ece23219f","modified":1520228940336},{"_id":"themes/yvshare/source/icons/folder-src.svg","hash":"2a93f8e824549ff00425add2ae5a658bbcc95ea0","modified":1520228940338},{"_id":"themes/yvshare/source/icons/folder-src-open.svg","hash":"dae22865e4a7814829f4da6de62e273ee704dae0","modified":1520228940337},{"_id":"themes/yvshare/source/icons/folder-sublime-open.svg","hash":"326e82e240c24e902ad3c946e56dc4e2b71c6cac","modified":1520228940340},{"_id":"themes/yvshare/source/icons/folder-sublime.svg","hash":"3cd05cd28977c3e0294c08de1869cb4c78deaca0","modified":1520228940341},{"_id":"themes/yvshare/source/icons/folder-temp-open.svg","hash":"9c0805a2f440799f442295116e3044b5a23129a0","modified":1520228940342},{"_id":"themes/yvshare/source/icons/folder-temp.svg","hash":"2b9edae5ac7999483e55d9bb91907aacf8b45e68","modified":1520228940343},{"_id":"themes/yvshare/source/icons/folder-test-open.svg","hash":"14f4469d417c345d21cd7d9cfb7865615c46e6d3","modified":1520228940344},{"_id":"themes/yvshare/source/icons/folder-tools-open.svg","hash":"f4451e0975db12f92aedf03e2dcf6754c35ec4c8","modified":1520228940347},{"_id":"themes/yvshare/source/icons/folder-tools.svg","hash":"c32ba33ecdab36ea450913b099b57d78347cb37d","modified":1520228940348},{"_id":"themes/yvshare/source/icons/folder-typescript-open.svg","hash":"80d9956899f7b8a8e3d98b92d915b00c940872d8","modified":1520228940349},{"_id":"themes/yvshare/source/icons/folder-typescript.svg","hash":"2f770fb459d89c681ce0fccacdecd2d94d8356af","modified":1520228940350},{"_id":"themes/yvshare/source/icons/folder-video.svg","hash":"247f68c2dcce271a283beab41610e0764c05785e","modified":1520228940352},{"_id":"themes/yvshare/source/icons/folder-video-open.svg","hash":"11d1471e7a4783f6d5509af4b6d9d77025be093b","modified":1520228940351},{"_id":"themes/yvshare/source/icons/folder-views-open.svg","hash":"2b474de5528fc68fbcb91e649a636cfcd57acea0","modified":1520228940353},{"_id":"themes/yvshare/source/icons/folder-test.svg","hash":"c2642b4e0206e7982c8d317a2b48f50a27bb30ec","modified":1520228940345},{"_id":"themes/yvshare/source/icons/folder-views.svg","hash":"76388f7a8bcb5c99ebc276ad01f9c4ea240296e0","modified":1520228940353},{"_id":"themes/yvshare/source/icons/folder-vscode-open.svg","hash":"5a52607242297e4157c1bd67f65a0ed28d88c1f9","modified":1520228940355},{"_id":"themes/yvshare/source/icons/folder-vscode.svg","hash":"350fab8c8375b58149b1480c6168c057ca21d840","modified":1520228940355},{"_id":"themes/yvshare/source/icons/folder-vue-open.svg","hash":"fb07b71c9cabdf5c5fae3ac255f9f451e2de877a","modified":1520228940356},{"_id":"themes/yvshare/source/icons/folder-vue.svg","hash":"8bf016a4781342520224734fe6d133fd283de615","modified":1520228940357},{"_id":"themes/yvshare/source/icons/folder-wakatime-open.svg","hash":"f1090b3d34669fc4cadf7e4f32991e678f81fc0f","modified":1520228940358},{"_id":"themes/yvshare/source/icons/folder-wakatime.svg","hash":"11c739a49eed6dbb0347fd840a23449d371588b7","modified":1520228940359},{"_id":"themes/yvshare/source/icons/folder-webpack-open.svg","hash":"bc9713c8ffacd35b15690460b631c0581611877f","modified":1520228940360},{"_id":"themes/yvshare/source/icons/folder-webpack.svg","hash":"b2893137b1fa7e4de551c946c27eb4af99460776","modified":1520228940361},{"_id":"themes/yvshare/source/icons/folder-wordpress-open.svg","hash":"e285aea77c0bd2cc36bd3a6103590daaf80eb138","modified":1520228940363},{"_id":"themes/yvshare/source/icons/folder-wordpress.svg","hash":"5d94d02fce41024f951e3c3a938027bca237789f","modified":1520228940364},{"_id":"themes/yvshare/source/icons/font.svg","hash":"4e80656dcff10d2b645b6628de5f75d0db359973","modified":1520228940365},{"_id":"themes/yvshare/source/icons/gatsby.svg","hash":"2ee1152cc48eb66ebecd96ee8863a5c255708c8d","modified":1520228940368},{"_id":"themes/yvshare/source/icons/fsharp.svg","hash":"a78e3f361380e8bcea4ab32398c3dab08ba174ab","modified":1520228940366},{"_id":"themes/yvshare/source/icons/fusebox.svg","hash":"3eb9064ce66c077437b1af5f7e6b4249cc2ff42d","modified":1520228940366},{"_id":"themes/yvshare/source/icons/gitlab.svg","hash":"e120042986f2b7a490440cd22664a67a782bc77f","modified":1520228940369},{"_id":"themes/yvshare/source/icons/git.svg","hash":"8774a9f79138a9cd74821f9f14262ec053fa97d1","modified":1520228940369},{"_id":"themes/yvshare/source/icons/go.svg","hash":"93a701e4cfa8e240738fad2055099b03a6de3b8f","modified":1520228940371},{"_id":"themes/yvshare/source/icons/gradle.svg","hash":"e156c6b04bad896a908a8576aeed7630f46a0458","modified":1520228940372},{"_id":"themes/yvshare/source/icons/graphql.svg","hash":"d979ea761cb674989fb3be3e627c23ebdeeb7c69","modified":1520228940374},{"_id":"themes/yvshare/source/icons/gulp.svg","hash":"e6f707fe23083b47fd23f4ebf7df0b9d61f28a98","modified":1520228940376},{"_id":"themes/yvshare/source/icons/groovy.svg","hash":"b3513952d301b9091dea7037acaba5a838c41dc1","modified":1520228940375},{"_id":"themes/yvshare/source/icons/graphcool.svg","hash":"a0f5ff4b033bb338f6b093ba5aafbf7e6d9948f4","modified":1520228940373},{"_id":"themes/yvshare/source/icons/h.svg","hash":"c6c210e5f91eadf881ae6f6e525a4340ba476023","modified":1520228940377},{"_id":"themes/yvshare/source/icons/haml.svg","hash":"d01fd612a1d15889b8cdff107df8b370a3b70a02","modified":1520228940380},{"_id":"themes/yvshare/source/icons/hack.svg","hash":"dbcf936536598082dcdc1433da8a3625ce510244","modified":1520228940378},{"_id":"themes/yvshare/source/icons/handlebars.svg","hash":"4ad94da9ca20c0ecd5b82ef71bbe4327efc88781","modified":1520228940380},{"_id":"themes/yvshare/source/icons/haxe.svg","hash":"43629be0ce4a76da95c374cb15fd8d32845560e8","modified":1520228940382},{"_id":"themes/yvshare/source/icons/heroku.svg","hash":"b2412eb42a1d8ee3c07ecdde369e8edf002d7b56","modified":1520228940383},{"_id":"themes/yvshare/source/icons/hpp.svg","hash":"0d80e8cc3c5d12a84eddc19e485bfb7f06bfd817","modified":1520228940384},{"_id":"themes/yvshare/source/icons/haskell.svg","hash":"4d56f663bdc6c5181876d452b9f79576d55241f8","modified":1520228940381},{"_id":"themes/yvshare/source/icons/html.svg","hash":"2303284fe2ba694e528ac9673cf6a5996a12a181","modified":1520228940385},{"_id":"themes/yvshare/source/icons/http.svg","hash":"0ac82393e3349fad76ccd2b033114f75323ee1c2","modified":1520228940386},{"_id":"themes/yvshare/source/icons/ionic.svg","hash":"0b0c1a4fa1d04e3af8c98bd73639dd49cdee7c06","modified":1520228940389},{"_id":"themes/yvshare/source/icons/image.svg","hash":"7ee9d17849faf03b34a4aa02c2d09bdb6a1d06ef","modified":1520228940387},{"_id":"themes/yvshare/source/icons/java.svg","hash":"f0671b8f504f95ebb21b40b2191e8ee21d5eb183","modified":1520228940390},{"_id":"themes/yvshare/source/icons/javascript-map.svg","hash":"4c0cdb687e9c792ea2dffbf5ca682d9a3614b1d1","modified":1520228940391},{"_id":"themes/yvshare/source/icons/jenkins.svg","hash":"36203d063088e842c9853d4853585d8af3077060","modified":1520228940394},{"_id":"themes/yvshare/source/icons/javascript.svg","hash":"5dbbf043d47cd3cf9c503b5311b98295cdcbc989","modified":1520228940393},{"_id":"themes/yvshare/source/icons/jinja.svg","hash":"9323a3b2f0415518e42bf6282cf791452be91aeb","modified":1520228940395},{"_id":"themes/yvshare/source/icons/jinja_light.svg","hash":"6670772669d0e2581fc9f2258ea22930f316c18f","modified":1520228940396},{"_id":"themes/yvshare/source/icons/julia.svg","hash":"272f01cb66c95fd764ccc1f90e589a03d33619a5","modified":1520228940399},{"_id":"themes/yvshare/source/icons/json.svg","hash":"2a30b45026ce3d778d077421e5e838f460e0a2b7","modified":1520228940397},{"_id":"themes/yvshare/source/icons/karma.svg","hash":"21243e1c1addd8724f7e46b15c80b18554ceeb2d","modified":1520228940400},{"_id":"themes/yvshare/source/icons/kl.svg","hash":"e81d1b289ed9795199e2eb628cf9ccef9262404d","modified":1520228940404},{"_id":"themes/yvshare/source/icons/key.svg","hash":"c6a570985f4db3fa3de9074deabd10cd757a4ad4","modified":1520228940401},{"_id":"themes/yvshare/source/icons/kivy.svg","hash":"c406f90655f8e4c72e8e6a0d83a6610e20c79e0a","modified":1520228940403},{"_id":"themes/yvshare/source/icons/kotlin.svg","hash":"77573f16b463bdcf4d9cc3e8c3a0fc526d2c7932","modified":1520228940405},{"_id":"themes/yvshare/source/icons/laravel.svg","hash":"b7b318c82b80514585ccb37eb1a652d7e50625f1","modified":1520228940406},{"_id":"themes/yvshare/source/icons/less.svg","hash":"b992b5b341faa515282aefb32cb072fe233374ef","modified":1520228940408},{"_id":"themes/yvshare/source/icons/lib.svg","hash":"e424df86d032b8614c18a47ecf2caeb320025613","modified":1520228940409},{"_id":"themes/yvshare/source/icons/livescript.svg","hash":"95c2f0078cd8ae5b7a938701aec351e36e66e543","modified":1520228940410},{"_id":"themes/yvshare/source/icons/lock.svg","hash":"2e4d4200129a2ac0f3e33605b2c85c295d1cfef6","modified":1520228940411},{"_id":"themes/yvshare/source/icons/log.svg","hash":"1dc27ced353883c9d5d4d5564d000f087137fb52","modified":1520228940412},{"_id":"themes/yvshare/source/icons/lua.svg","hash":"1f63c93ea0421b8626d839bc08e73feab104b370","modified":1520228940413},{"_id":"themes/yvshare/source/icons/markdown.svg","hash":"53a263661f846f15f37ecd6a7b0c08d647bd4e6a","modified":1520228940414},{"_id":"themes/yvshare/source/icons/markojs.svg","hash":"adc401750ab7543e4dd619da467536f17ad1a580","modified":1520228940415},{"_id":"themes/yvshare/source/icons/mathematica.svg","hash":"0fcb5e3aa178390c8843c258cbbee6c8d9f042d4","modified":1520228940416},{"_id":"themes/yvshare/source/icons/matlab.svg","hash":"77851159d50833f4ffb57d539231b5ad55de8aa0","modified":1520228940417},{"_id":"themes/yvshare/source/icons/merlin.svg","hash":"3dc4c547a295222db03900ae63d527e31f8e1a78","modified":1520228940419},{"_id":"themes/yvshare/source/icons/mjml.svg","hash":"72d69be6e4ad92f253d3c9a5f9f2f4d2ff3a1818","modified":1520228940420},{"_id":"themes/yvshare/source/icons/mocha.svg","hash":"d2f97344abc3024281d525bfcbbe5d391dd53f48","modified":1520228940421},{"_id":"themes/yvshare/source/icons/mxml.svg","hash":"62721ea330b0e10dc1b02c6c5ba62bb36246af09","modified":1520228940422},{"_id":"themes/yvshare/source/icons/ngrx-effects.svg","hash":"1d92b0bf3458a8d56af5ba17594ac64d26e92e88","modified":1520228940424},{"_id":"themes/yvshare/source/icons/ngrx-actions.svg","hash":"c33801d1bf4cd6dfe48708fb14a02595bca89f31","modified":1520228940423},{"_id":"themes/yvshare/source/icons/ngrx-entity.svg","hash":"74ab73250b09b3b3499145a793daac8a16d574d1","modified":1520228940425},{"_id":"themes/yvshare/source/icons/ngrx-reducer.svg","hash":"f03b5b3d9e68f8cbcd316bf62e6374109316e33e","modified":1520228940427},{"_id":"themes/yvshare/source/icons/ngrx-state.svg","hash":"552c456b43581d0714ab70d79b62f4f10042da09","modified":1520228940428},{"_id":"themes/yvshare/source/icons/nim.svg","hash":"1c717112420880539572a202e623550790534fa0","modified":1520228940430},{"_id":"themes/yvshare/source/icons/nix.svg","hash":"dc447528b4d488a58d121c307b05dbaa3f9d1081","modified":1520228940432},{"_id":"themes/yvshare/source/icons/nodejs.svg","hash":"6da561e41764ad9a4001e1a414d2a8913cdb14b6","modified":1520228940433},{"_id":"themes/yvshare/source/icons/nodemon.svg","hash":"8479c125ca153afe683df9eb0b8eac7732c1b654","modified":1520228940434},{"_id":"themes/yvshare/source/icons/npm.svg","hash":"8a3e2cfea8323052ff9b038c61ff64b1959c5937","modified":1520228940435},{"_id":"themes/yvshare/source/icons/nunjucks.svg","hash":"2f849c2550855631d9bc46af113116d70becfc87","modified":1520228940436},{"_id":"themes/yvshare/source/icons/ocaml.svg","hash":"c0b151ebd9a5fe32bbdb484ef916e0a3a84e9833","modified":1520228940438},{"_id":"themes/yvshare/source/icons/pdf.svg","hash":"90d04d9c807d9653b87968549215520d78e99948","modified":1520228940439},{"_id":"themes/yvshare/source/icons/perl.svg","hash":"71efbe3afa0fe8d16ccffd2f06190819e6b4d05f","modified":1520228940440},{"_id":"themes/yvshare/source/icons/php.svg","hash":"8108dac317e0ddc0491f8253c59eb86c99e3bea9","modified":1520228940441},{"_id":"themes/yvshare/source/icons/php_elephant.svg","hash":"02e0e798882574e0c7f919c478053bae408090f9","modified":1520228940442},{"_id":"themes/yvshare/source/icons/postcss.svg","hash":"fdf1fe615ea8f0bee8eacd2d9af521f66b624cf6","modified":1520228940443},{"_id":"themes/yvshare/source/icons/powerpoint.svg","hash":"5ca15dbf52700d2abcf0046e560c1c6f5a31ea37","modified":1520228940445},{"_id":"themes/yvshare/source/icons/powershell.svg","hash":"163b279b91783cdab0b0f6c8451dc55da29ad72d","modified":1520228940446},{"_id":"themes/yvshare/source/icons/prettier.svg","hash":"70b2e3a796f26f223f888fa509648c20991b7ca0","modified":1520228940448},{"_id":"themes/yvshare/source/icons/protractor.svg","hash":"8adca9136e6765f02c26005d7de3fde2dad52233","modified":1520228940450},{"_id":"themes/yvshare/source/icons/pug.svg","hash":"bca098382ebc5bcecde35040165e7cc6374ed62f","modified":1520228940451},{"_id":"themes/yvshare/source/icons/puppet.svg","hash":"c0e61d8a4f12e418dff18c6b19fec156548a630c","modified":1520228940452},{"_id":"themes/yvshare/source/icons/purescript.svg","hash":"ccec333c1f07b48c156be7070da510d6fdd19122","modified":1520228940453},{"_id":"themes/yvshare/source/icons/python.svg","hash":"5d7aba2c891d5f0e9911849b944aa87943416a91","modified":1520228940455},{"_id":"themes/yvshare/source/icons/r.svg","hash":"ffd30ff268dd8c768613ed8746aa10e7b4660c4f","modified":1520228940456},{"_id":"themes/yvshare/source/icons/raml.svg","hash":"49b9851cde33b4e75872c161dbcf4a740fd936d8","modified":1520228940457},{"_id":"themes/yvshare/source/icons/razor.svg","hash":"ebf712733e51b65215e0e413cf7ca9749f0dc3ac","modified":1520228940458},{"_id":"themes/yvshare/source/icons/react.svg","hash":"de37bbf07486ce079ef4a10c15449bb3f8c9070c","modified":1520228940460},{"_id":"themes/yvshare/source/icons/readme.svg","hash":"6dfe78844f87be40abec651b5200646f91503896","modified":1520228940461},{"_id":"themes/yvshare/source/icons/reason.svg","hash":"104e5a838200413c752f009312392b99e49da5d0","modified":1520228940462},{"_id":"themes/yvshare/source/icons/restql.svg","hash":"17d6b91501a91c992341b22f3949ac61ee0ba4b3","modified":1520228940463},{"_id":"themes/yvshare/source/icons/riot.svg","hash":"37c1c6db9ccf84aaa0eda08ce8bb96c38983c3ad","modified":1520228940464},{"_id":"themes/yvshare/source/icons/robot.svg","hash":"cb4ed3b18386cfd2f39a60e41aebc6446fe20bf3","modified":1520228940465},{"_id":"themes/yvshare/source/icons/rollup.svg","hash":"ac8295b840f75962dc787e1d92f765fd88b7cb60","modified":1520228940466},{"_id":"themes/yvshare/source/icons/ruby.svg","hash":"8615dc15d1f6fbfab9afadd42c873212eee57084","modified":1520228940468},{"_id":"themes/yvshare/source/icons/rust.svg","hash":"959fd3f1cb3dcd61ce28b2fe21ca1092c9c7e21d","modified":1520228940469},{"_id":"themes/yvshare/source/icons/sass.svg","hash":"1fef17f6f2d487ba955e095e3f354938fd995b3d","modified":1520228940470},{"_id":"themes/yvshare/source/icons/sbt.svg","hash":"d4f876088b8a4672207492a0e4108dd7d64766cd","modified":1520228940471},{"_id":"themes/yvshare/source/icons/scala.svg","hash":"6ed2d2ebfe024a1245ebeb7b1f4a7aa1fb831269","modified":1520228940472},{"_id":"themes/yvshare/source/icons/sequelize.svg","hash":"eaeece2ea3bda2bfd488b1d05a70a0a92963d784","modified":1520228940473},{"_id":"themes/yvshare/source/icons/settings.svg","hash":"7c84dca376012576197ba919eb994e4f14b1eddb","modified":1520228940474},{"_id":"themes/yvshare/source/icons/shaderlab.svg","hash":"07bcc8eb19adbee67a0925244ef1c8da18e79840","modified":1520228940475},{"_id":"themes/yvshare/source/icons/slim.svg","hash":"abdeff96d03201032136b075193af09445e83ecb","modified":1520228940476},{"_id":"themes/yvshare/source/icons/smarty.svg","hash":"08a6b32de4898e2769325632b27ba860c5d44438","modified":1520228940477},{"_id":"themes/yvshare/source/icons/snyk.svg","hash":"5ebc9f15b0f8388ff21d26a7c3e9e04e706673f8","modified":1520228940478},{"_id":"themes/yvshare/source/icons/solidity.svg","hash":"49f032af05b4636f568ac87010a1b23af0db7bec","modified":1520228940479},{"_id":"themes/yvshare/source/icons/sonar.svg","hash":"15ccc9bc1b5b64d307e68a2ff9f443b9a50d006b","modified":1520228940480},{"_id":"themes/yvshare/source/icons/stylelint.svg","hash":"22953c0858bb421ba9b32cbf0705fdb74412b856","modified":1520228940482},{"_id":"themes/yvshare/source/icons/stylelint_light.svg","hash":"0554f94ea72f85cb3109dcc67b12c36c3813fd44","modified":1520228940483},{"_id":"themes/yvshare/source/icons/stylus.svg","hash":"27c9b416ce096e2b4ac2aaf54122a74b5339770e","modified":1520228940484},{"_id":"themes/yvshare/source/icons/sublime.svg","hash":"9f5bafd5fa1d26bc96d2b061aa6c8748bc12b505","modified":1520228940485},{"_id":"themes/yvshare/source/icons/swc.svg","hash":"d3a43a6ae9a597e7ed309e6ca3208d9e4607202f","modified":1520228940486},{"_id":"themes/yvshare/source/icons/swift.svg","hash":"b0f3b82e72651f39d40207eead1f19806f4561db","modified":1520228940487},{"_id":"themes/yvshare/source/icons/table.svg","hash":"2b8dddf087ed19568919c855a8e6a35989274d1f","modified":1520228940488},{"_id":"themes/yvshare/source/icons/terraform.svg","hash":"16ac5529e7faecfb3f3c47195b0d6de72cad96d7","modified":1520228940489},{"_id":"themes/yvshare/source/icons/test-js.svg","hash":"64aa785242c29ecf7d13e5d1b81247f07c15f8bd","modified":1520228940490},{"_id":"themes/yvshare/source/icons/test-jsx.svg","hash":"c0335313c0876d552f81090413682c88bed72f3e","modified":1520228940491},{"_id":"themes/yvshare/source/icons/test-ts.svg","hash":"62c7ba574f0db7f5e45ffdaa2ee501952306a9e1","modified":1520228940492},{"_id":"themes/yvshare/source/icons/tex.svg","hash":"208ff64379f5e367703567578d64f317babcd0f8","modified":1520228940493},{"_id":"themes/yvshare/source/icons/todo.svg","hash":"90cfb355349d019f3e688c812dd93e690339eb61","modified":1520228940494},{"_id":"themes/yvshare/source/icons/travis.svg","hash":"0693920710d2961a354f43c105cb7848379afbb8","modified":1520228940495},{"_id":"themes/yvshare/source/icons/tune.svg","hash":"e14079e5e99ca7d9ff58d3c687eccb5c59d6fc91","modified":1520228940496},{"_id":"themes/yvshare/source/icons/twig.svg","hash":"3f644f4b15440aea78a15cfc4e25cd1b5769aa57","modified":1520228940497},{"_id":"themes/yvshare/source/icons/typescript-def.svg","hash":"aa24a01402d0e6beed693252e61b447be4f5e045","modified":1520228940498},{"_id":"themes/yvshare/source/icons/typescript.svg","hash":"b16c00f2dcf4a329caf877056230d29b60634347","modified":1520228940500},{"_id":"themes/yvshare/source/icons/url.svg","hash":"7ec338dd6aaf899e1ba2aa2a0aa9dd29feced69b","modified":1520228940501},{"_id":"themes/yvshare/source/icons/verilog.svg","hash":"f229114a138bb3adaf2350038c13ccbd9570dd7c","modified":1520228940502},{"_id":"themes/yvshare/source/icons/vfl.svg","hash":"c4d25bad93efd6acd910c0e2f829fa6ae554777e","modified":1520228940503},{"_id":"themes/yvshare/source/icons/video.svg","hash":"7932449e012866ab5697069eec0f0274ec26671c","modified":1520228940504},{"_id":"themes/yvshare/source/icons/virtual.svg","hash":"7f6df603b1eef2e170c425cfeeaaca1acf8b9676","modified":1520228940504},{"_id":"themes/yvshare/source/icons/visualstudio.svg","hash":"969c98679b4f6c22e6a129cff5c7aa206d8e393e","modified":1520228940505},{"_id":"themes/yvshare/source/icons/vscode.svg","hash":"394adf25ea4ceedc77f1303431245dd8f6a359e1","modified":1520228940506},{"_id":"themes/yvshare/source/icons/vue.svg","hash":"c780292e4b19b6f5ab5772373283178ac647fe3c","modified":1520228940507},{"_id":"themes/yvshare/source/icons/wakatime.svg","hash":"20555500afb2e2a1a8148ebc547dc9e6e9ea4c18","modified":1520228940508},{"_id":"themes/yvshare/source/icons/wakatime_light.svg","hash":"90ef0f2f6d96a005a6dbb5c605026459961ba9c5","modified":1520228940509},{"_id":"themes/yvshare/source/icons/watchman.svg","hash":"7f389d900fb1ddfc52a11dea528bcb63ccaff31a","modified":1520228940510},{"_id":"themes/yvshare/source/icons/webpack.svg","hash":"c9ac33a42ed87984ecb0bc2bfdda3ff6575f7a73","modified":1520228940511},{"_id":"themes/yvshare/source/icons/wolframlanguage.svg","hash":"da723e37dd1eee9affbf97f0e13c3e6e9ffe87aa","modified":1520228940512},{"_id":"themes/yvshare/source/icons/word.svg","hash":"2ef2830f100a32955d2ee46cbbb89134e5847ee0","modified":1520228940513},{"_id":"themes/yvshare/source/icons/xaml.svg","hash":"ce38ce84b727e1d9dba477a9e91bbea2e2a4f5ba","modified":1520228940514},{"_id":"themes/yvshare/source/icons/xml.svg","hash":"3e622b6d43d85b4334fe82b6901fe221e9e555f1","modified":1520228940515},{"_id":"themes/yvshare/source/icons/yaml.svg","hash":"4ee94cfe2e626c9824ac2a699197c3602c52877b","modified":1520228940516},{"_id":"themes/yvshare/source/icons/yang.svg","hash":"c01d34df09b524c076949826d6206b3c7dd30cb3","modified":1520228940517},{"_id":"themes/yvshare/source/icons/yarn.svg","hash":"2f9e7f188fe409c7dc5b555f89313cc06f322df2","modified":1520228940518},{"_id":"themes/yvshare/source/icons/zip.svg","hash":"531f1caa0d213323dffdda050685165780920ee6","modified":1520228940519},{"_id":"themes/yvshare/source/images/favicon.png","hash":"86ddbf2c91296f911b92aee951da38e28d9ffc20","modified":1519979914743},{"_id":"themes/yvshare/source/images/livere2.png","hash":"073f0a0fbda42da7f273eb15dba0fda7840b5204","modified":1520233665640},{"_id":"themes/yvshare/source/images/livere3.png","hash":"56a3cd45228609ba7f7b718db838f00fcbe4f8fe","modified":1520233807667},{"_id":"themes/yvshare/source/images/localstorage.png","hash":"3f2ec9a9905ab8345eea5b54e5a370bee3e66e68","modified":1520234698121},{"_id":"themes/yvshare/source/images/logo.png","hash":"fcfff1033431ef67503991c81e267eaa1def9a23","modified":1519979914740},{"_id":"themes/yvshare/source/images/logo@2x.png","hash":"079514207e436af0a6ac2494595702a47c060eac","modified":1519979914737},{"_id":"themes/yvshare/source/js/jquery-migrate-1.2.1.min.js","hash":"875bce76a77590c3c438bbc6e014b39c23c8c88d","modified":1519979914753},{"_id":"themes/yvshare/source/js/jquery.appear.js","hash":"8e936fd0f45787309d917541e911c3440f7565b1","modified":1519979914755},{"_id":"themes/yvshare/source/js/livere.js","hash":"f74bd08bf5689275e5f64125a63a415d2cda1073","modified":1520230439430},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1519979914768},{"_id":"themes/yvshare/source/images/livere1.png","hash":"8ffceb875a5affb7a97bd40a92d9462603dc8315","modified":1520233461135},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.svg","hash":"e471023286b7dd1d2ccc72f670a471cfdfeafab7","modified":1519979914777},{"_id":"themes/yvshare/source/js/jquery.js","hash":"aa6ccf721c4e76921abda46c120772d364e5b285","modified":1519979914759},{"_id":"themes/yvshare/source/images/livere.png","hash":"e9c09aece44e1f814a2154e9709595b0e1ddc3d7","modified":1520232689959}],"Category":[],"Data":[],"Page":[{"_content":"[CSS](/tags/CSS/)","source":"tags/index.md","raw":"[CSS](/tags/CSS/)","date":"2018-02-27T07:45:35.259Z","updated":"2018-02-27T07:45:35.259Z","path":"tags/index.html","title":"","comments":1,"layout":"page","_id":"cjee12qau00016cc0t24h2j76","content":"<p><a href=\"/tags/CSS/\">CSS</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"/tags/CSS/\">CSS</a></p>\n"},{"title":"about","date":"2018-02-26T10:36:38.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-02-26 18:36:38\n---\n","updated":"2018-02-26T10:36:38.391Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjee12qee002c6cc0ntfdzefq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"id":"0809000","title":"Hello World","date":"2017-02-09T13:49:31.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/0809000_hello-world.md","raw":"---\nid: 0809000\ntitle: Hello World\ndate: 2017-02-09 21:49:31\ntags: \n    - HTML\ncategories: \n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"0809000_hello-world","published":1,"updated":"2018-03-05T06:24:49.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qao00006cc07m4ykz4b","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"id":"0809002","title":"CSS3 渐变","date":"2017-02-27T10:01:38.000Z","_content":"\n#### CSS3 定义了两种类型的渐变（gradients）：\n\n1. 线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向\n2. 径向渐变（Radial Gradients）- 由它们的中心定义\n#### 注意： IE 9 及之前的版本不支持渐变。\n### 线性渐变：\n- `background: linear-gradient(direction, color-stop1, color-stop2, ...);`\n#### 1. 线性渐变 - 从上到下（默认情况下）:\n```css\n.box {\n  background: -webkit-linear-gradient(red, blue);   /* Safari 5.1 - 6.0 */\n  background: -o-linear-gradient(red, blue);        /* Opera 11.1 - 12.0 */\n  background: -moz-linear-gradient(red, blue);      /* Firefox 3.6 - 15 */\n  background: linear-gradient(red, blue);           /* 标准的语法(必须放在最后) */\n}\n```\n效果图 ![效果图](/images/gradient/渐变1.png)\n#### 2. 线性渐变 - 从左到右\n```css\n.box {\n    height: 50px;\n    background: -webkit-linear-gradient(left, red , blue);\n    background: -o-linear-gradient(right, red, blue);\n    background: -moz-linear-gradient(right, red, blue);\n    background: linear-gradient(to right, red , blue);\n}\n```\n效果图 ![效果图](/images/gradient/渐变2.png)\n#### 3. 重复的线性渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-repeating-linear-gradient(red, yellow 10%, green 20%);  \n    background: -o-repeating-linear-gradient(red, yellow 10%, green 20%);       \n    background: -moz-repeating-linear-gradient(red, yellow 10%, green 20%);  \n    background: repeating-linear-gradient(red, yellow 10%, green 20%);    \n}\n```\n效果图 ![效果图](/images/gradient/渐变3.png)\n#### 4. 线性渐变进阶\n```css\n.box{\n    height: 100px;\n    width: 100px;\n    background: -webkit-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: -o-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: -moz-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n}\n```\n效果图 ![效果图](/images/gradient/0deg.png)\n\n没错，就是通过角度来空值渐变的起始位置：\n- 45deg 效果图 ![效果图](/images/gradient/45deg.png)\n- 90deg 效果图 ![效果图](/images/gradient/90deg.png)\n- 135deg 效果图 ![效果图](/images/gradient/135deg.png)\n\n*由此，我们知道了起始可以通过角度来获得我们想要的线性渐变的各种效果了，这基本能满足我们大多数的需求了。*\n径向渐变\n- `background: radial-gradient(center, shape size, start-color, ..., last-color);`\n1. 径向渐变由它的中心定义。\n2. 为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。\n#### 1. 普通的径向渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-radial-gradient(red, green, blue);  \n    background: -o-radial-gradient(red, green, blue);\n    background: -moz-radial-gradient(red, green, blue);  \n    background: radial-gradient(red, green, blue);    \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变1.png)\n#### 2. 不均匀的径向渐变\n```css\n.box {\n  background: -webkit-radial-gradient(red 5%, green 15%, blue 60%);     \n  background: -o-radial-gradient(red 5%, green 15%, blue 60%);\n  background: -moz-radial-gradient(red 5%, green 15%, blue 60%);     \n  background: radial-gradient(red 5%, green 15%, blue 60%);\n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变2.png)\n**径向渐变容器如果不为正方形，则渐变区域会默认呈现为椭圆，若为正方形，则会呈现为正方形。**\n#### 3.不同尺寸的径向渐变\n- closest-side\n- farthest-side\n- closest-corner\n- farthest-corner\n```css\n.box {\n    background: -webkit-radial-gradient(70% 50%, closest-side,red,green,blue);     \n    background: -o-radial-gradient(70% 50%, closest-side,red,green,blue);\n    background: -moz-radial-gradient(70% 50%, closest-side,red,green,blue);     \n    background: radial-gradient(70% 50%, closest-side,red,green,blue);       \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变3.png)\n1.  从上面的效果图中可以看出径向渐变的渐变原点的作用\n2. 通过设置尺寸属性可以改变其大小\n#### 4.重复的径向渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-repeating-radial-gradient(red, yellow 10%, green 15%);  \n    background: -o-repeating-radial-gradient(red, yellow 10%, green 15%);\n    background: -moz-repeating-radial-gradient(red, yellow 10%, green 15%);  \n    background: repeating-radial-gradient(red, yellow 10%, green 15%);    \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变4.png)\n","source":"_posts/0809002_CSS3-渐变.md","raw":"---\nid: 0809002\ntitle: CSS3 渐变\ndate: 2017-02-27 18:01:38\ntags:\n    - CSS3\ncategories:\n---\n\n#### CSS3 定义了两种类型的渐变（gradients）：\n\n1. 线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向\n2. 径向渐变（Radial Gradients）- 由它们的中心定义\n#### 注意： IE 9 及之前的版本不支持渐变。\n### 线性渐变：\n- `background: linear-gradient(direction, color-stop1, color-stop2, ...);`\n#### 1. 线性渐变 - 从上到下（默认情况下）:\n```css\n.box {\n  background: -webkit-linear-gradient(red, blue);   /* Safari 5.1 - 6.0 */\n  background: -o-linear-gradient(red, blue);        /* Opera 11.1 - 12.0 */\n  background: -moz-linear-gradient(red, blue);      /* Firefox 3.6 - 15 */\n  background: linear-gradient(red, blue);           /* 标准的语法(必须放在最后) */\n}\n```\n效果图 ![效果图](/images/gradient/渐变1.png)\n#### 2. 线性渐变 - 从左到右\n```css\n.box {\n    height: 50px;\n    background: -webkit-linear-gradient(left, red , blue);\n    background: -o-linear-gradient(right, red, blue);\n    background: -moz-linear-gradient(right, red, blue);\n    background: linear-gradient(to right, red , blue);\n}\n```\n效果图 ![效果图](/images/gradient/渐变2.png)\n#### 3. 重复的线性渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-repeating-linear-gradient(red, yellow 10%, green 20%);  \n    background: -o-repeating-linear-gradient(red, yellow 10%, green 20%);       \n    background: -moz-repeating-linear-gradient(red, yellow 10%, green 20%);  \n    background: repeating-linear-gradient(red, yellow 10%, green 20%);    \n}\n```\n效果图 ![效果图](/images/gradient/渐变3.png)\n#### 4. 线性渐变进阶\n```css\n.box{\n    height: 100px;\n    width: 100px;\n    background: -webkit-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: -o-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: -moz-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n}\n```\n效果图 ![效果图](/images/gradient/0deg.png)\n\n没错，就是通过角度来空值渐变的起始位置：\n- 45deg 效果图 ![效果图](/images/gradient/45deg.png)\n- 90deg 效果图 ![效果图](/images/gradient/90deg.png)\n- 135deg 效果图 ![效果图](/images/gradient/135deg.png)\n\n*由此，我们知道了起始可以通过角度来获得我们想要的线性渐变的各种效果了，这基本能满足我们大多数的需求了。*\n径向渐变\n- `background: radial-gradient(center, shape size, start-color, ..., last-color);`\n1. 径向渐变由它的中心定义。\n2. 为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。\n#### 1. 普通的径向渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-radial-gradient(red, green, blue);  \n    background: -o-radial-gradient(red, green, blue);\n    background: -moz-radial-gradient(red, green, blue);  \n    background: radial-gradient(red, green, blue);    \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变1.png)\n#### 2. 不均匀的径向渐变\n```css\n.box {\n  background: -webkit-radial-gradient(red 5%, green 15%, blue 60%);     \n  background: -o-radial-gradient(red 5%, green 15%, blue 60%);\n  background: -moz-radial-gradient(red 5%, green 15%, blue 60%);     \n  background: radial-gradient(red 5%, green 15%, blue 60%);\n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变2.png)\n**径向渐变容器如果不为正方形，则渐变区域会默认呈现为椭圆，若为正方形，则会呈现为正方形。**\n#### 3.不同尺寸的径向渐变\n- closest-side\n- farthest-side\n- closest-corner\n- farthest-corner\n```css\n.box {\n    background: -webkit-radial-gradient(70% 50%, closest-side,red,green,blue);     \n    background: -o-radial-gradient(70% 50%, closest-side,red,green,blue);\n    background: -moz-radial-gradient(70% 50%, closest-side,red,green,blue);     \n    background: radial-gradient(70% 50%, closest-side,red,green,blue);       \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变3.png)\n1.  从上面的效果图中可以看出径向渐变的渐变原点的作用\n2. 通过设置尺寸属性可以改变其大小\n#### 4.重复的径向渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-repeating-radial-gradient(red, yellow 10%, green 15%);  \n    background: -o-repeating-radial-gradient(red, yellow 10%, green 15%);\n    background: -moz-repeating-radial-gradient(red, yellow 10%, green 15%);  \n    background: repeating-radial-gradient(red, yellow 10%, green 15%);    \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变4.png)\n","slug":"0809002_CSS3-渐变","published":1,"updated":"2018-03-05T06:29:40.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qaw00026cc0uehmotwm","content":"<h4 id=\"CSS3-定义了两种类型的渐变（gradients）：\"><a href=\"#CSS3-定义了两种类型的渐变（gradients）：\" class=\"headerlink\" title=\"CSS3 定义了两种类型的渐变（gradients）：\"></a>CSS3 定义了两种类型的渐变（gradients）：</h4><ol>\n<li>线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向</li>\n<li>径向渐变（Radial Gradients）- 由它们的中心定义<h4 id=\"注意：-IE-9-及之前的版本不支持渐变。\"><a href=\"#注意：-IE-9-及之前的版本不支持渐变。\" class=\"headerlink\" title=\"注意： IE 9 及之前的版本不支持渐变。\"></a>注意： IE 9 及之前的版本不支持渐变。</h4><h3 id=\"线性渐变：\"><a href=\"#线性渐变：\" class=\"headerlink\" title=\"线性渐变：\"></a>线性渐变：</h3></li>\n</ol>\n<ul>\n<li><code>background: linear-gradient(direction, color-stop1, color-stop2, ...);</code><h4 id=\"1-线性渐变-从上到下（默认情况下）\"><a href=\"#1-线性渐变-从上到下（默认情况下）\" class=\"headerlink\" title=\"1. 线性渐变 - 从上到下（默认情况下）:\"></a>1. 线性渐变 - 从上到下（默认情况下）:</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(red, blue);   <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(red, blue);        <span class=\"comment\">/* Opera 11.1 - 12.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(red, blue);      <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(red, blue);           <span class=\"comment\">/* 标准的语法(必须放在最后) */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>效果图 <img src=\"/images/gradient/渐变1.png\" alt=\"效果图\"></p>\n<h4 id=\"2-线性渐变-从左到右\"><a href=\"#2-线性渐变-从左到右\" class=\"headerlink\" title=\"2. 线性渐变 - 从左到右\"></a>2. 线性渐变 - 从左到右</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(left, red , blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(right, red, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(right, red, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to right, red , blue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/渐变2.png\" alt=\"效果图\"></p>\n<h4 id=\"3-重复的线性渐变\"><a href=\"#3-重复的线性渐变\" class=\"headerlink\" title=\"3. 重复的线性渐变\"></a>3. 重复的线性渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-repeating-linear-gradient</span>(red, yellow 10%, green 20%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-repeating-linear-gradient</span>(red, yellow 10%, green 20%);       </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-repeating-linear-gradient</span>(red, yellow 10%, green 20%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-linear-gradient</span>(red, yellow 10%, green 20%);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/渐变3.png\" alt=\"效果图\"></p>\n<h4 id=\"4-线性渐变进阶\"><a href=\"#4-线性渐变进阶\" class=\"headerlink\" title=\"4. 线性渐变进阶\"></a>4. 线性渐变进阶</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/0deg.png\" alt=\"效果图\"></p>\n<p>没错，就是通过角度来空值渐变的起始位置：</p>\n<ul>\n<li>45deg 效果图 <img src=\"/images/gradient/45deg.png\" alt=\"效果图\"></li>\n<li>90deg 效果图 <img src=\"/images/gradient/90deg.png\" alt=\"效果图\"></li>\n<li>135deg 效果图 <img src=\"/images/gradient/135deg.png\" alt=\"效果图\"></li>\n</ul>\n<p><em>由此，我们知道了起始可以通过角度来获得我们想要的线性渐变的各种效果了，这基本能满足我们大多数的需求了。</em><br>径向渐变</p>\n<ul>\n<li><code>background: radial-gradient(center, shape size, start-color, ..., last-color);</code></li>\n</ul>\n<ol>\n<li>径向渐变由它的中心定义。</li>\n<li>为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。<h4 id=\"1-普通的径向渐变\"><a href=\"#1-普通的径向渐变\" class=\"headerlink\" title=\"1. 普通的径向渐变\"></a>1. 普通的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(red, green, blue);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(red, green, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(red, green, blue);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(red, green, blue);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变1.png\" alt=\"效果图\"></p>\n<h4 id=\"2-不均匀的径向渐变\"><a href=\"#2-不均匀的径向渐变\" class=\"headerlink\" title=\"2. 不均匀的径向渐变\"></a>2. 不均匀的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(red 5%, green 15%, blue 60%);     </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(red 5%, green 15%, blue 60%);</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(red 5%, green 15%, blue 60%);     </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(red 5%, green 15%, blue 60%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变2.png\" alt=\"效果图\"><br><strong>径向渐变容器如果不为正方形，则渐变区域会默认呈现为椭圆，若为正方形，则会呈现为正方形。</strong></p>\n<h4 id=\"3-不同尺寸的径向渐变\"><a href=\"#3-不同尺寸的径向渐变\" class=\"headerlink\" title=\"3.不同尺寸的径向渐变\"></a>3.不同尺寸的径向渐变</h4></li>\n<li>closest-side</li>\n<li>farthest-side</li>\n<li>closest-corner</li>\n<li><p>farthest-corner</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(70% 50%, closest-side,red,green,blue);     </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(70% 50%, closest-side,red,green,blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(70% 50%, closest-side,red,green,blue);     </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(70% 50%, closest-side,red,green,blue);       </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变3.png\" alt=\"效果图\"></p>\n</li>\n</ul>\n<ol>\n<li>从上面的效果图中可以看出径向渐变的渐变原点的作用</li>\n<li>通过设置尺寸属性可以改变其大小<h4 id=\"4-重复的径向渐变\"><a href=\"#4-重复的径向渐变\" class=\"headerlink\" title=\"4.重复的径向渐变\"></a>4.重复的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-repeating-radial-gradient</span>(red, yellow 10%, green 15%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-repeating-radial-gradient</span>(red, yellow 10%, green 15%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-repeating-radial-gradient</span>(red, yellow 10%, green 15%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-radial-gradient</span>(red, yellow 10%, green 15%);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>效果图 <img src=\"/images/gradient/径向渐变4.png\" alt=\"效果图\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"CSS3-定义了两种类型的渐变（gradients）：\"><a href=\"#CSS3-定义了两种类型的渐变（gradients）：\" class=\"headerlink\" title=\"CSS3 定义了两种类型的渐变（gradients）：\"></a>CSS3 定义了两种类型的渐变（gradients）：</h4><ol>\n<li>线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向</li>\n<li>径向渐变（Radial Gradients）- 由它们的中心定义<h4 id=\"注意：-IE-9-及之前的版本不支持渐变。\"><a href=\"#注意：-IE-9-及之前的版本不支持渐变。\" class=\"headerlink\" title=\"注意： IE 9 及之前的版本不支持渐变。\"></a>注意： IE 9 及之前的版本不支持渐变。</h4><h3 id=\"线性渐变：\"><a href=\"#线性渐变：\" class=\"headerlink\" title=\"线性渐变：\"></a>线性渐变：</h3></li>\n</ol>\n<ul>\n<li><code>background: linear-gradient(direction, color-stop1, color-stop2, ...);</code><h4 id=\"1-线性渐变-从上到下（默认情况下）\"><a href=\"#1-线性渐变-从上到下（默认情况下）\" class=\"headerlink\" title=\"1. 线性渐变 - 从上到下（默认情况下）:\"></a>1. 线性渐变 - 从上到下（默认情况下）:</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(red, blue);   <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(red, blue);        <span class=\"comment\">/* Opera 11.1 - 12.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(red, blue);      <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(red, blue);           <span class=\"comment\">/* 标准的语法(必须放在最后) */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>效果图 <img src=\"/images/gradient/渐变1.png\" alt=\"效果图\"></p>\n<h4 id=\"2-线性渐变-从左到右\"><a href=\"#2-线性渐变-从左到右\" class=\"headerlink\" title=\"2. 线性渐变 - 从左到右\"></a>2. 线性渐变 - 从左到右</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(left, red , blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(right, red, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(right, red, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to right, red , blue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/渐变2.png\" alt=\"效果图\"></p>\n<h4 id=\"3-重复的线性渐变\"><a href=\"#3-重复的线性渐变\" class=\"headerlink\" title=\"3. 重复的线性渐变\"></a>3. 重复的线性渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-repeating-linear-gradient</span>(red, yellow 10%, green 20%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-repeating-linear-gradient</span>(red, yellow 10%, green 20%);       </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-repeating-linear-gradient</span>(red, yellow 10%, green 20%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-linear-gradient</span>(red, yellow 10%, green 20%);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/渐变3.png\" alt=\"效果图\"></p>\n<h4 id=\"4-线性渐变进阶\"><a href=\"#4-线性渐变进阶\" class=\"headerlink\" title=\"4. 线性渐变进阶\"></a>4. 线性渐变进阶</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/0deg.png\" alt=\"效果图\"></p>\n<p>没错，就是通过角度来空值渐变的起始位置：</p>\n<ul>\n<li>45deg 效果图 <img src=\"/images/gradient/45deg.png\" alt=\"效果图\"></li>\n<li>90deg 效果图 <img src=\"/images/gradient/90deg.png\" alt=\"效果图\"></li>\n<li>135deg 效果图 <img src=\"/images/gradient/135deg.png\" alt=\"效果图\"></li>\n</ul>\n<p><em>由此，我们知道了起始可以通过角度来获得我们想要的线性渐变的各种效果了，这基本能满足我们大多数的需求了。</em><br>径向渐变</p>\n<ul>\n<li><code>background: radial-gradient(center, shape size, start-color, ..., last-color);</code></li>\n</ul>\n<ol>\n<li>径向渐变由它的中心定义。</li>\n<li>为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。<h4 id=\"1-普通的径向渐变\"><a href=\"#1-普通的径向渐变\" class=\"headerlink\" title=\"1. 普通的径向渐变\"></a>1. 普通的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(red, green, blue);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(red, green, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(red, green, blue);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(red, green, blue);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变1.png\" alt=\"效果图\"></p>\n<h4 id=\"2-不均匀的径向渐变\"><a href=\"#2-不均匀的径向渐变\" class=\"headerlink\" title=\"2. 不均匀的径向渐变\"></a>2. 不均匀的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(red 5%, green 15%, blue 60%);     </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(red 5%, green 15%, blue 60%);</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(red 5%, green 15%, blue 60%);     </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(red 5%, green 15%, blue 60%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变2.png\" alt=\"效果图\"><br><strong>径向渐变容器如果不为正方形，则渐变区域会默认呈现为椭圆，若为正方形，则会呈现为正方形。</strong></p>\n<h4 id=\"3-不同尺寸的径向渐变\"><a href=\"#3-不同尺寸的径向渐变\" class=\"headerlink\" title=\"3.不同尺寸的径向渐变\"></a>3.不同尺寸的径向渐变</h4></li>\n<li>closest-side</li>\n<li>farthest-side</li>\n<li>closest-corner</li>\n<li><p>farthest-corner</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(70% 50%, closest-side,red,green,blue);     </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(70% 50%, closest-side,red,green,blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(70% 50%, closest-side,red,green,blue);     </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(70% 50%, closest-side,red,green,blue);       </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变3.png\" alt=\"效果图\"></p>\n</li>\n</ul>\n<ol>\n<li>从上面的效果图中可以看出径向渐变的渐变原点的作用</li>\n<li>通过设置尺寸属性可以改变其大小<h4 id=\"4-重复的径向渐变\"><a href=\"#4-重复的径向渐变\" class=\"headerlink\" title=\"4.重复的径向渐变\"></a>4.重复的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-repeating-radial-gradient</span>(red, yellow 10%, green 15%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-repeating-radial-gradient</span>(red, yellow 10%, green 15%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-repeating-radial-gradient</span>(red, yellow 10%, green 15%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-radial-gradient</span>(red, yellow 10%, green 15%);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>效果图 <img src=\"/images/gradient/径向渐变4.png\" alt=\"效果图\"></li>\n</ul>\n"},{"id":"0809001","title":"hello","date":"2017-02-09T13:56:46.000Z","_content":"","source":"_posts/0809001_hello.md","raw":"---\nid: 0809001\ntitle: hello\ndate: 2017-02-09 21:56:46\ntags: \n    - test\n---\n","slug":"0809001_hello","published":1,"updated":"2018-03-05T03:26:13.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qb400046cc0iyqzsr68","content":"","site":{"data":{}},"excerpt":"","more":""},{"id":"0809003","title":"在hexo中部署livere评论系统","date":"2018-02-23T16:05:00.000Z","_content":"\n- 注册来必力账号\n\n这一步很简单，进去[官网](https://livere.com/)，注册账号：\n![注册](/images/livere.png)\n\n然后点击右上角图标进入到管理页面，点击左侧的代码管理，这里面就是部署livere需要的脚本了：\n![获取部署代码](/images/livere1.png)\n\n- 用户登录账号设置\n\nlivere 评论系统里支持非常多的第三方账号登录方式：\n![账号](/images/livere2.png)\n可以根据自己的需要选择适用的方式。\n\n- 主题设置\n\nlivere 同样提供多种颜色主题，供用户免费使用：\n![主题](/images/livere3.png)\n\n`来必力livere部署起来其实是非常简单的，更多细节可以去`[官网](https://livere.com/)`查看更多`","source":"_posts/0809003_在hexo中部署livere评论系统.md","raw":"---\nid: 0809003\ntitle: 在hexo中部署livere评论系统\ndate: 2018-02-24 00:05:00\ntags: \n    - JavaScript\n    - livere\ncategories:\n---\n\n- 注册来必力账号\n\n这一步很简单，进去[官网](https://livere.com/)，注册账号：\n![注册](/images/livere.png)\n\n然后点击右上角图标进入到管理页面，点击左侧的代码管理，这里面就是部署livere需要的脚本了：\n![获取部署代码](/images/livere1.png)\n\n- 用户登录账号设置\n\nlivere 评论系统里支持非常多的第三方账号登录方式：\n![账号](/images/livere2.png)\n可以根据自己的需要选择适用的方式。\n\n- 主题设置\n\nlivere 同样提供多种颜色主题，供用户免费使用：\n![主题](/images/livere3.png)\n\n`来必力livere部署起来其实是非常简单的，更多细节可以去`[官网](https://livere.com/)`查看更多`","slug":"0809003_在hexo中部署livere评论系统","published":1,"updated":"2018-03-05T09:24:24.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qb600056cc0wpr4w404","content":"<ul>\n<li>注册来必力账号</li>\n</ul>\n<p>这一步很简单，进去<a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">官网</a>，注册账号：<br><img src=\"/images/livere.png\" alt=\"注册\"></p>\n<p>然后点击右上角图标进入到管理页面，点击左侧的代码管理，这里面就是部署livere需要的脚本了：<br><img src=\"/images/livere1.png\" alt=\"获取部署代码\"></p>\n<ul>\n<li>用户登录账号设置</li>\n</ul>\n<p>livere 评论系统里支持非常多的第三方账号登录方式：<br><img src=\"/images/livere2.png\" alt=\"账号\"><br>可以根据自己的需要选择适用的方式。</p>\n<ul>\n<li>主题设置</li>\n</ul>\n<p>livere 同样提供多种颜色主题，供用户免费使用：<br><img src=\"/images/livere3.png\" alt=\"主题\"></p>\n<p><code>来必力livere部署起来其实是非常简单的，更多细节可以去</code><a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">官网</a><code>查看更多</code></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>注册来必力账号</li>\n</ul>\n<p>这一步很简单，进去<a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">官网</a>，注册账号：<br><img src=\"/images/livere.png\" alt=\"注册\"></p>\n<p>然后点击右上角图标进入到管理页面，点击左侧的代码管理，这里面就是部署livere需要的脚本了：<br><img src=\"/images/livere1.png\" alt=\"获取部署代码\"></p>\n<ul>\n<li>用户登录账号设置</li>\n</ul>\n<p>livere 评论系统里支持非常多的第三方账号登录方式：<br><img src=\"/images/livere2.png\" alt=\"账号\"><br>可以根据自己的需要选择适用的方式。</p>\n<ul>\n<li>主题设置</li>\n</ul>\n<p>livere 同样提供多种颜色主题，供用户免费使用：<br><img src=\"/images/livere3.png\" alt=\"主题\"></p>\n<p><code>来必力livere部署起来其实是非常简单的，更多细节可以去</code><a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">官网</a><code>查看更多</code></p>\n"},{"id":"0809004","title":"HTML5存储webStorage","date":"2018-02-27T09:56:48.000Z","_content":"\n`客户端存储数据的两个对象为：`\n- `localStorage` - 没有时间限制的数据存储\n- `sessionStorage` - 针对一个 session(会话) 的数据存储\n在使用 web 存储前，应检查浏览器是否支持 localStorage 和sessionStorage :\n```js\nif( typeof(Storage) !== \"undefined\" )\n{\n    // 是的! 支持 localStorage  sessionStorage 对象!\n    // your code\n} else {\n    // 抱歉! 不支持 web 存储。\n}\n```\n#### <a name=\"local\">1. localStorage 对象</a>\n- `localStorage` 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。\n实例：\n```js\n// 存储\n// {\"name\": \"yssuo\"}\nlocalStorage.name=\"yasuo\";\n\n// 获取\nconsole.log(localStorage.name); // yasuo\n\n// 移除\nlocalStorage.removeItem(\"name\");\n\n// 再次获取\nconsole.log(localStorage.name); // undefined\n```\n![localstorage](/images/localstorage.png)\n\n#### <a name=\"local\">2. sessionStorage 对象</a>\n\n- `sessionStorage` 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。\n\n不管是 `localStorage`，还是 `sessionStorage`，可使用的API都相同，常用的有如下几个（以localStorage为例）：\n```js\n// 保存数据\nlocalStorage.setItem(key,value);\n// 读取数据\nlocalStorage.getItem(key);\n// 删除单个数据\nlocalStorage.removeItem(key);\n// 删除所有数据\nlocalStorage.clear();\n// 得到某个索引的key\nlocalStorage.key(index);\n```","source":"_posts/0809004_HTML5存储webStorage.md","raw":"---\nid: 0809004\ntitle: HTML5存储webStorage\ndate: 2018-02-27 17:56:48\ntags: \n    - HTML5\n    - sessionStorage\n    - localStorage\ncategories:\n---\n\n`客户端存储数据的两个对象为：`\n- `localStorage` - 没有时间限制的数据存储\n- `sessionStorage` - 针对一个 session(会话) 的数据存储\n在使用 web 存储前，应检查浏览器是否支持 localStorage 和sessionStorage :\n```js\nif( typeof(Storage) !== \"undefined\" )\n{\n    // 是的! 支持 localStorage  sessionStorage 对象!\n    // your code\n} else {\n    // 抱歉! 不支持 web 存储。\n}\n```\n#### <a name=\"local\">1. localStorage 对象</a>\n- `localStorage` 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。\n实例：\n```js\n// 存储\n// {\"name\": \"yssuo\"}\nlocalStorage.name=\"yasuo\";\n\n// 获取\nconsole.log(localStorage.name); // yasuo\n\n// 移除\nlocalStorage.removeItem(\"name\");\n\n// 再次获取\nconsole.log(localStorage.name); // undefined\n```\n![localstorage](/images/localstorage.png)\n\n#### <a name=\"local\">2. sessionStorage 对象</a>\n\n- `sessionStorage` 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。\n\n不管是 `localStorage`，还是 `sessionStorage`，可使用的API都相同，常用的有如下几个（以localStorage为例）：\n```js\n// 保存数据\nlocalStorage.setItem(key,value);\n// 读取数据\nlocalStorage.getItem(key);\n// 删除单个数据\nlocalStorage.removeItem(key);\n// 删除所有数据\nlocalStorage.clear();\n// 得到某个索引的key\nlocalStorage.key(index);\n```","slug":"0809004_HTML5存储webStorage","published":1,"updated":"2018-03-05T07:31:57.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qb900066cc0uru35ej7","content":"<p><code>客户端存储数据的两个对象为：</code></p>\n<ul>\n<li><code>localStorage</code> - 没有时间限制的数据存储</li>\n<li><code>sessionStorage</code> - 针对一个 session(会话) 的数据存储<br>在使用 web 存储前，应检查浏览器是否支持 localStorage 和sessionStorage :<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>( <span class=\"keyword\">typeof</span>(Storage) !== <span class=\"string\">\"undefined\"</span> )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是的! 支持 localStorage  sessionStorage 对象!</span></span><br><span class=\"line\">    <span class=\"comment\">// your code</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 抱歉! 不支持 web 存储。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"1-localStorage-对象\"><a href=\"#1-localStorage-对象\" class=\"headerlink\" title=\"1. localStorage 对象\"></a><a name=\"local\">1. localStorage 对象</a></h4><ul>\n<li><code>localStorage</code> 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。<br>实例：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 存储</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;\"name\": \"yssuo\"&#125;</span></span><br><span class=\"line\">localStorage.name=<span class=\"string\">\"yasuo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(localStorage.name); <span class=\"comment\">// yasuo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除</span></span><br><span class=\"line\">localStorage.removeItem(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再次获取</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(localStorage.name); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/images/localstorage.png\" alt=\"localstorage\"></p>\n<h4 id=\"2-sessionStorage-对象\"><a href=\"#2-sessionStorage-对象\" class=\"headerlink\" title=\"2. sessionStorage 对象\"></a><a name=\"local\">2. sessionStorage 对象</a></h4><ul>\n<li><code>sessionStorage</code> 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。</li>\n</ul>\n<p>不管是 <code>localStorage</code>，还是 <code>sessionStorage</code>，可使用的API都相同，常用的有如下几个（以localStorage为例）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 保存数据</span></span><br><span class=\"line\">localStorage.setItem(key,value);</span><br><span class=\"line\"><span class=\"comment\">// 读取数据</span></span><br><span class=\"line\">localStorage.getItem(key);</span><br><span class=\"line\"><span class=\"comment\">// 删除单个数据</span></span><br><span class=\"line\">localStorage.removeItem(key);</span><br><span class=\"line\"><span class=\"comment\">// 删除所有数据</span></span><br><span class=\"line\">localStorage.clear();</span><br><span class=\"line\"><span class=\"comment\">// 得到某个索引的key</span></span><br><span class=\"line\">localStorage.key(index);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>客户端存储数据的两个对象为：</code></p>\n<ul>\n<li><code>localStorage</code> - 没有时间限制的数据存储</li>\n<li><code>sessionStorage</code> - 针对一个 session(会话) 的数据存储<br>在使用 web 存储前，应检查浏览器是否支持 localStorage 和sessionStorage :<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>( <span class=\"keyword\">typeof</span>(Storage) !== <span class=\"string\">\"undefined\"</span> )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是的! 支持 localStorage  sessionStorage 对象!</span></span><br><span class=\"line\">    <span class=\"comment\">// your code</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 抱歉! 不支持 web 存储。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"1-localStorage-对象\"><a href=\"#1-localStorage-对象\" class=\"headerlink\" title=\"1. localStorage 对象\"></a><a name=\"local\">1. localStorage 对象</a></h4><ul>\n<li><code>localStorage</code> 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。<br>实例：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 存储</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;\"name\": \"yssuo\"&#125;</span></span><br><span class=\"line\">localStorage.name=<span class=\"string\">\"yasuo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(localStorage.name); <span class=\"comment\">// yasuo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除</span></span><br><span class=\"line\">localStorage.removeItem(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再次获取</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(localStorage.name); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/images/localstorage.png\" alt=\"localstorage\"></p>\n<h4 id=\"2-sessionStorage-对象\"><a href=\"#2-sessionStorage-对象\" class=\"headerlink\" title=\"2. sessionStorage 对象\"></a><a name=\"local\">2. sessionStorage 对象</a></h4><ul>\n<li><code>sessionStorage</code> 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。</li>\n</ul>\n<p>不管是 <code>localStorage</code>，还是 <code>sessionStorage</code>，可使用的API都相同，常用的有如下几个（以localStorage为例）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 保存数据</span></span><br><span class=\"line\">localStorage.setItem(key,value);</span><br><span class=\"line\"><span class=\"comment\">// 读取数据</span></span><br><span class=\"line\">localStorage.getItem(key);</span><br><span class=\"line\"><span class=\"comment\">// 删除单个数据</span></span><br><span class=\"line\">localStorage.removeItem(key);</span><br><span class=\"line\"><span class=\"comment\">// 删除所有数据</span></span><br><span class=\"line\">localStorage.clear();</span><br><span class=\"line\"><span class=\"comment\">// 得到某个索引的key</span></span><br><span class=\"line\">localStorage.key(index);</span><br></pre></td></tr></table></figure></p>\n"},{"id":"0809005","title":"JSON序列化选项","date":"2018-02-27T10:46:18.000Z","_content":"\n实际上，JSON.stringify()除了要序列化JavaScript对象外，还可以接受另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。**第一个**参数是个过滤器，可以使一个数组，也可以是个函数；**第二个**参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用者两个参数，可以更全面深入地控制JSON的序列化。\n#### 1. 过滤器（第一个参数）\n1.数组\n```JavaScript\nvar hero = {\n    \"name\": \"MasterYi\",\n    \"skills\": [\n        \"AlphaStrike\"\n    ],\n    \"type\": \"Warrior\"\n}\n\nvar jsonTxt = JSON.stringify(hero, [\"name\", \"type\"]);\njsonTxt --> \"{\"name\":\"MasterYi\",\"type\":\"Warrior\"}\"\n```\n2.函数\n```JavaScript\nvar jsonTxt = JSON.stringify(hero, function(k, v){\n    switch(k){\n        case \"name\":\n            return \"Annie\";\n        case \"type\":\n            return \"Mage\";\n        default:\n            return v;\n    }\n});\njsonTxt --> \"{\"name\":\"Annie\",\"skills\":[\"AlphaStrike\"],\"type\":\"Mage\"}\"\n```\n*值得注意的是，如果函数返回了undefined，那么相应的属性会被忽略。另外请务必写上default，此时返回传入的值，以便其他值都能正常出现在结果中*\n#### 2. 选项（字符串缩进）\n```JavaScript\nvar jsonTxt1 = JSON.stringify(hero, null, 2);\njsonTxt1 -->\n\"{\n  \"name\": \"MasterYi\",\n  \"skills\": [\n    \"AlphaStrike\"\n  ],\n  \"type\": \"Warrior\"\n}\"\n\nvar jsonTxt2 = JSON.stringify(hero, null, 4);\njsonTxt2 -->\n\"{\n    \"name\": \"MasterYi\",\n    \"skills\": [\n        \"AlphaStrike\"\n    ],\n    \"type\": \"Warrior\"\n}\"\n```\n*如上，结果字符串中也插入了换行符，这样一来就提高了可读性。只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。最大缩进空格数为10，大于10会默认转换为10.*\n","source":"_posts/0809005_JSON序列化选项.md","raw":"---\nid: 0809005\ntitle: JSON序列化选项\ndate: 2018-02-27 18:46:18\ntags:\n    - JavaScript\n    - JSON\ncategories:\n---\n\n实际上，JSON.stringify()除了要序列化JavaScript对象外，还可以接受另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。**第一个**参数是个过滤器，可以使一个数组，也可以是个函数；**第二个**参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用者两个参数，可以更全面深入地控制JSON的序列化。\n#### 1. 过滤器（第一个参数）\n1.数组\n```JavaScript\nvar hero = {\n    \"name\": \"MasterYi\",\n    \"skills\": [\n        \"AlphaStrike\"\n    ],\n    \"type\": \"Warrior\"\n}\n\nvar jsonTxt = JSON.stringify(hero, [\"name\", \"type\"]);\njsonTxt --> \"{\"name\":\"MasterYi\",\"type\":\"Warrior\"}\"\n```\n2.函数\n```JavaScript\nvar jsonTxt = JSON.stringify(hero, function(k, v){\n    switch(k){\n        case \"name\":\n            return \"Annie\";\n        case \"type\":\n            return \"Mage\";\n        default:\n            return v;\n    }\n});\njsonTxt --> \"{\"name\":\"Annie\",\"skills\":[\"AlphaStrike\"],\"type\":\"Mage\"}\"\n```\n*值得注意的是，如果函数返回了undefined，那么相应的属性会被忽略。另外请务必写上default，此时返回传入的值，以便其他值都能正常出现在结果中*\n#### 2. 选项（字符串缩进）\n```JavaScript\nvar jsonTxt1 = JSON.stringify(hero, null, 2);\njsonTxt1 -->\n\"{\n  \"name\": \"MasterYi\",\n  \"skills\": [\n    \"AlphaStrike\"\n  ],\n  \"type\": \"Warrior\"\n}\"\n\nvar jsonTxt2 = JSON.stringify(hero, null, 4);\njsonTxt2 -->\n\"{\n    \"name\": \"MasterYi\",\n    \"skills\": [\n        \"AlphaStrike\"\n    ],\n    \"type\": \"Warrior\"\n}\"\n```\n*如上，结果字符串中也插入了换行符，这样一来就提高了可读性。只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。最大缩进空格数为10，大于10会默认转换为10.*\n","slug":"0809005_JSON序列化选项","published":1,"updated":"2018-03-05T07:32:47.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qbd00096cc0lhe7ql5c","content":"<p>实际上，JSON.stringify()除了要序列化JavaScript对象外，还可以接受另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。<strong>第一个</strong>参数是个过滤器，可以使一个数组，也可以是个函数；<strong>第二个</strong>参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用者两个参数，可以更全面深入地控制JSON的序列化。</p>\n<h4 id=\"1-过滤器（第一个参数）\"><a href=\"#1-过滤器（第一个参数）\" class=\"headerlink\" title=\"1. 过滤器（第一个参数）\"></a>1. 过滤器（第一个参数）</h4><p>1.数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"MasterYi\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"skills\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"AlphaStrike\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Warrior\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt = <span class=\"built_in\">JSON</span>.stringify(hero, [<span class=\"string\">\"name\"</span>, <span class=\"string\">\"type\"</span>]);</span><br><span class=\"line\">jsonTxt --&gt; <span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>MasterYi<span class=\"string\">\",\"</span>type<span class=\"string\">\":\"</span>Warrior<span class=\"string\">\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p>2.函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k, v</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"name\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Annie\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"type\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Mage\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">jsonTxt --&gt; <span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>Annie<span class=\"string\">\",\"</span>skills<span class=\"string\">\":[\"</span>AlphaStrike<span class=\"string\">\"],\"</span>type<span class=\"string\">\":\"</span>Mage<span class=\"string\">\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p><em>值得注意的是，如果函数返回了undefined，那么相应的属性会被忽略。另外请务必写上default，此时返回传入的值，以便其他值都能正常出现在结果中</em></p>\n<h4 id=\"2-选项（字符串缩进）\"><a href=\"#2-选项（字符串缩进）\" class=\"headerlink\" title=\"2. 选项（字符串缩进）\"></a>2. 选项（字符串缩进）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt1 = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"literal\">null</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">jsonTxt1 --&gt;</span><br><span class=\"line\"><span class=\"string\">\"&#123;</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>name<span class=\"string\">\": \"</span>MasterYi<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>skills<span class=\"string\">\": [</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>AlphaStrike<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>type<span class=\"string\">\": \"</span>Warrior<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt2 = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"literal\">null</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">jsonTxt2 --&gt;</span><br><span class=\"line\"><span class=\"string\">\"&#123;</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>name<span class=\"string\">\": \"</span>MasterYi<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>skills<span class=\"string\">\": [</span></span><br><span class=\"line\"><span class=\"string\">        \"</span>AlphaStrike<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">    ],</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>type<span class=\"string\">\": \"</span>Warrior<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span></span><br></pre></td></tr></table></figure>\n<p><em>如上，结果字符串中也插入了换行符，这样一来就提高了可读性。只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。最大缩进空格数为10，大于10会默认转换为10.</em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>实际上，JSON.stringify()除了要序列化JavaScript对象外，还可以接受另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。<strong>第一个</strong>参数是个过滤器，可以使一个数组，也可以是个函数；<strong>第二个</strong>参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用者两个参数，可以更全面深入地控制JSON的序列化。</p>\n<h4 id=\"1-过滤器（第一个参数）\"><a href=\"#1-过滤器（第一个参数）\" class=\"headerlink\" title=\"1. 过滤器（第一个参数）\"></a>1. 过滤器（第一个参数）</h4><p>1.数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"MasterYi\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"skills\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"AlphaStrike\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Warrior\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt = <span class=\"built_in\">JSON</span>.stringify(hero, [<span class=\"string\">\"name\"</span>, <span class=\"string\">\"type\"</span>]);</span><br><span class=\"line\">jsonTxt --&gt; <span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>MasterYi<span class=\"string\">\",\"</span>type<span class=\"string\">\":\"</span>Warrior<span class=\"string\">\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p>2.函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k, v</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"name\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Annie\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"type\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Mage\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">jsonTxt --&gt; <span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>Annie<span class=\"string\">\",\"</span>skills<span class=\"string\">\":[\"</span>AlphaStrike<span class=\"string\">\"],\"</span>type<span class=\"string\">\":\"</span>Mage<span class=\"string\">\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p><em>值得注意的是，如果函数返回了undefined，那么相应的属性会被忽略。另外请务必写上default，此时返回传入的值，以便其他值都能正常出现在结果中</em></p>\n<h4 id=\"2-选项（字符串缩进）\"><a href=\"#2-选项（字符串缩进）\" class=\"headerlink\" title=\"2. 选项（字符串缩进）\"></a>2. 选项（字符串缩进）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt1 = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"literal\">null</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">jsonTxt1 --&gt;</span><br><span class=\"line\"><span class=\"string\">\"&#123;</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>name<span class=\"string\">\": \"</span>MasterYi<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>skills<span class=\"string\">\": [</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>AlphaStrike<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>type<span class=\"string\">\": \"</span>Warrior<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt2 = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"literal\">null</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">jsonTxt2 --&gt;</span><br><span class=\"line\"><span class=\"string\">\"&#123;</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>name<span class=\"string\">\": \"</span>MasterYi<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>skills<span class=\"string\">\": [</span></span><br><span class=\"line\"><span class=\"string\">        \"</span>AlphaStrike<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">    ],</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>type<span class=\"string\">\": \"</span>Warrior<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span></span><br></pre></td></tr></table></figure>\n<p><em>如上，结果字符串中也插入了换行符，这样一来就提高了可读性。只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。最大缩进空格数为10，大于10会默认转换为10.</em></p>\n"},{"id":"0809007","title":"记一次在公司中配置Babel的经历","date":"2018-03-01T01:46:10.000Z","_content":"\n- <a href=\"#install\">安装</a>\n- <a href=\"#usage\">使用</a>\n- <a href=\"#babelrc\">创建.babelrc文件</a>\n- <a href=\"#polyfill\">Babel-Polyfill</a>\n- <a href=\"#register\">Babel-Register</a>\n\n&emsp;首先，为什么会写这样一篇文章呢？在进入公司几个月后，写业务代码都是使用es5语法，es6，于是想着使用Babel来构建一下。这样既可以愉快的使用ES6了，还能舒心的写代码，何乐而不为。\n\n- Babel的使用是基于Node.js环境的，所以必须先安装Node。\n- 我们将采用通过安装babel-cli的方式来使用babel。\n\n#### <a name=\"install\">1. 安装</a>\n&emsp;虽然你可以在你的机器上全局安装`Babel CLI`, 但根据单个项目进行本地安装会更好一些。这样做有两个主要的原因：\n* 同一机器上的不同的项目可以依赖不同版本的 Babel, 这允许你一次更新一个项目。\n* 这意味着在你的工作环境中没有隐含的依赖项。它将使你的项目更方便移植、更易于安装。\n\n> 首先我们需要生成一个package.json文件，进入到项目目录执行`npm init`命令，随后一顿选择回车。\n\n```bash\nYSY@SY-YU MINGW64 /d/START/webpack\n$ npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help json` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install <pkg>` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\npackage name: (webpack)\n```\n*最后，目录下会生成一个package.json文件，打开看一下*\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\"\n}\n```\n*里面都是刚才npm init时自己的配置*\n\n> 我们可以通过以下命令本地安装 Babel CLI:\n\n```bash\n// 全局安装\nnpm install babel-cli -g\n// 安装在当前项目中\nnpm install --save-dev babel-cli\n```\n我们在当前目录安装babel-cli，随后我们的package.json应该长这个样：\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.26.0\"\n  }\n}\n```\n\n#### <a name=\"usage\">2. 使用</a>\n- 我们将把我们的指令放在本地版本的 npm 脚本中，而不是直接通过命令行来运行 Babel.\n\n> 简单的在你的 package.json 中添加一个 \"scripts\" 属性并将 babel 命令放在它的 build 属性中：\n\n```json\n  {\n    \"name\": \"webpack\",\n    \"version\": \"1.0.0\",\n    \"scripts\": {\n      \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n+     \"build\": \"babel src -d lib\"  // 加入这一句命令\n    },\n    \"devDependencies\": {\n      \"babel-cli\": \"^6.26.0\"\n    }\n  }\n```\n现在从我们的终端可以运行以下命令：\n```bash\nnpm run build\n```\n*这会按照和之前一样的方式来运行 Babel 并将输出放在 lib 目录下，唯一不同在于我们现在使用了一个本地拷贝。*\n> 值得注意的是在babel的build命令是可以在build属性中自行配置的，上面是把src目录下的脚本打包到lib目录中，你也可以打包单个文件...\n\n#### <a name=\"babelrc\">3. 创建.babelrc配置文件</a>\n\n- 虽然已经配置好了 Babel ，但并没有让它真正生效。在项目的根目录中创建一个 .babelrc 文件并启用一些插件。 [详看](https://babeljs.cn/docs/setup/#installation)\n\n首先，你可以使用转换 ES2015+ 的 env preset：\n```bash\nnpm install babel-preset-env --save-dev\n```\n为了让 preset 生效，你需要像下面这样定义你的 .babelrc 文件：\n```json\n{\n  \"presets\": [\"env\"],\n  \"plugins\": []\n}\n```\n> .babelrc配置文件非常丰富：\n\n```bash\n# ES2015转码规则\n$ npm install --save-dev babel-preset-es2015\n\n# react转码规则\n$ npm install --save-dev babel-preset-react\n\n# ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个\n$ npm install --save-dev babel-preset-stage-0\n$ npm install --save-dev babel-preset-stage-1\n$ npm install --save-dev babel-preset-stage-2\n$ npm install --save-dev babel-preset-stage-3\n```\n最后，我们的 .babelrc 文件可以长这个样：\n``` json\n{\n  \"presets\": [\n    \"es2015\",\n    \"react\",\n    \"stage-2\"\n  ],\n  \"plugins\": []\n}\n```\n\n#### <a name=\"polyfill\">4. Babel-Polyfill</a>\n\nBabel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如`Object.assign`）都不会转码。\n\n举例来说，ES6在Array对象上新增了`Array.from`方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。\n\n安装命令如下：\n```bash\nnpm install --save babel-polyfill\n```\n然后，在脚本头部，加入如下一行代码：\n```js\nimport 'babel-polyfill';\n// 或者\nrequire('babel-polyfill');\n```\n\n#### <a name=\"register\">5. Babel-Register</a>\n\nbabel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。\n```bash\nnpm install --save-dev babel-register\n```\n使用时，必须首先加载babel-register：\n```js\nimport(\"babel-register\");\nimport(\"./index.js\");\n```\n然后，就不需要手动对index.js转码了。\n> 需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在`开发环境`使用。\n\n#### `后记`：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\n---\n> 参考文档： [babeljs.cn](https://babeljs.cn/) / [ruanyifeng.com](http://www.ruanyifeng.com/blog/2016/01/babel.html?20170213113809)","source":"_posts/0809007_记一次在公司中配置Babel的经历.md","raw":"---\nid: 0809007\ntitle: 记一次在公司中配置Babel的经历\ndate: 2018-03-01 09:46:10\ntags:\n    - Babel\n    - es6\n    - JavaScript\ncategories:\n---\n\n- <a href=\"#install\">安装</a>\n- <a href=\"#usage\">使用</a>\n- <a href=\"#babelrc\">创建.babelrc文件</a>\n- <a href=\"#polyfill\">Babel-Polyfill</a>\n- <a href=\"#register\">Babel-Register</a>\n\n&emsp;首先，为什么会写这样一篇文章呢？在进入公司几个月后，写业务代码都是使用es5语法，es6，于是想着使用Babel来构建一下。这样既可以愉快的使用ES6了，还能舒心的写代码，何乐而不为。\n\n- Babel的使用是基于Node.js环境的，所以必须先安装Node。\n- 我们将采用通过安装babel-cli的方式来使用babel。\n\n#### <a name=\"install\">1. 安装</a>\n&emsp;虽然你可以在你的机器上全局安装`Babel CLI`, 但根据单个项目进行本地安装会更好一些。这样做有两个主要的原因：\n* 同一机器上的不同的项目可以依赖不同版本的 Babel, 这允许你一次更新一个项目。\n* 这意味着在你的工作环境中没有隐含的依赖项。它将使你的项目更方便移植、更易于安装。\n\n> 首先我们需要生成一个package.json文件，进入到项目目录执行`npm init`命令，随后一顿选择回车。\n\n```bash\nYSY@SY-YU MINGW64 /d/START/webpack\n$ npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help json` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install <pkg>` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\npackage name: (webpack)\n```\n*最后，目录下会生成一个package.json文件，打开看一下*\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\"\n}\n```\n*里面都是刚才npm init时自己的配置*\n\n> 我们可以通过以下命令本地安装 Babel CLI:\n\n```bash\n// 全局安装\nnpm install babel-cli -g\n// 安装在当前项目中\nnpm install --save-dev babel-cli\n```\n我们在当前目录安装babel-cli，随后我们的package.json应该长这个样：\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.26.0\"\n  }\n}\n```\n\n#### <a name=\"usage\">2. 使用</a>\n- 我们将把我们的指令放在本地版本的 npm 脚本中，而不是直接通过命令行来运行 Babel.\n\n> 简单的在你的 package.json 中添加一个 \"scripts\" 属性并将 babel 命令放在它的 build 属性中：\n\n```json\n  {\n    \"name\": \"webpack\",\n    \"version\": \"1.0.0\",\n    \"scripts\": {\n      \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n+     \"build\": \"babel src -d lib\"  // 加入这一句命令\n    },\n    \"devDependencies\": {\n      \"babel-cli\": \"^6.26.0\"\n    }\n  }\n```\n现在从我们的终端可以运行以下命令：\n```bash\nnpm run build\n```\n*这会按照和之前一样的方式来运行 Babel 并将输出放在 lib 目录下，唯一不同在于我们现在使用了一个本地拷贝。*\n> 值得注意的是在babel的build命令是可以在build属性中自行配置的，上面是把src目录下的脚本打包到lib目录中，你也可以打包单个文件...\n\n#### <a name=\"babelrc\">3. 创建.babelrc配置文件</a>\n\n- 虽然已经配置好了 Babel ，但并没有让它真正生效。在项目的根目录中创建一个 .babelrc 文件并启用一些插件。 [详看](https://babeljs.cn/docs/setup/#installation)\n\n首先，你可以使用转换 ES2015+ 的 env preset：\n```bash\nnpm install babel-preset-env --save-dev\n```\n为了让 preset 生效，你需要像下面这样定义你的 .babelrc 文件：\n```json\n{\n  \"presets\": [\"env\"],\n  \"plugins\": []\n}\n```\n> .babelrc配置文件非常丰富：\n\n```bash\n# ES2015转码规则\n$ npm install --save-dev babel-preset-es2015\n\n# react转码规则\n$ npm install --save-dev babel-preset-react\n\n# ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个\n$ npm install --save-dev babel-preset-stage-0\n$ npm install --save-dev babel-preset-stage-1\n$ npm install --save-dev babel-preset-stage-2\n$ npm install --save-dev babel-preset-stage-3\n```\n最后，我们的 .babelrc 文件可以长这个样：\n``` json\n{\n  \"presets\": [\n    \"es2015\",\n    \"react\",\n    \"stage-2\"\n  ],\n  \"plugins\": []\n}\n```\n\n#### <a name=\"polyfill\">4. Babel-Polyfill</a>\n\nBabel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如`Object.assign`）都不会转码。\n\n举例来说，ES6在Array对象上新增了`Array.from`方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。\n\n安装命令如下：\n```bash\nnpm install --save babel-polyfill\n```\n然后，在脚本头部，加入如下一行代码：\n```js\nimport 'babel-polyfill';\n// 或者\nrequire('babel-polyfill');\n```\n\n#### <a name=\"register\">5. Babel-Register</a>\n\nbabel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。\n```bash\nnpm install --save-dev babel-register\n```\n使用时，必须首先加载babel-register：\n```js\nimport(\"babel-register\");\nimport(\"./index.js\");\n```\n然后，就不需要手动对index.js转码了。\n> 需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在`开发环境`使用。\n\n#### `后记`：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\n---\n> 参考文档： [babeljs.cn](https://babeljs.cn/) / [ruanyifeng.com](http://www.ruanyifeng.com/blog/2016/01/babel.html?20170213113809)","slug":"0809007_记一次在公司中配置Babel的经历","published":1,"updated":"2018-03-05T03:03:19.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qbf000a6cc0f19b03hs","content":"<ul>\n<li><a href=\"#install\">安装</a></li>\n<li><a href=\"#usage\">使用</a></li>\n<li><a href=\"#babelrc\">创建.babelrc文件</a></li>\n<li><a href=\"#polyfill\">Babel-Polyfill</a></li>\n<li><a href=\"#register\">Babel-Register</a></li>\n</ul>\n<p>&emsp;首先，为什么会写这样一篇文章呢？在进入公司几个月后，写业务代码都是使用es5语法，es6，于是想着使用Babel来构建一下。这样既可以愉快的使用ES6了，还能舒心的写代码，何乐而不为。</p>\n<ul>\n<li>Babel的使用是基于Node.js环境的，所以必须先安装Node。</li>\n<li>我们将采用通过安装babel-cli的方式来使用babel。</li>\n</ul>\n<h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a><a name=\"install\">1. 安装</a></h4><p>&emsp;虽然你可以在你的机器上全局安装<code>Babel CLI</code>, 但根据单个项目进行本地安装会更好一些。这样做有两个主要的原因：</p>\n<ul>\n<li>同一机器上的不同的项目可以依赖不同版本的 Babel, 这允许你一次更新一个项目。</li>\n<li>这意味着在你的工作环境中没有隐含的依赖项。它将使你的项目更方便移植、更易于安装。</li>\n</ul>\n<blockquote>\n<p>首先我们需要生成一个package.json文件，进入到项目目录执行<code>npm init</code>命令，随后一顿选择回车。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YSY@SY-YU MINGW64 /d/START/webpack</span><br><span class=\"line\">$ npm init</span><br><span class=\"line\">This utility will walk you through creating a package.json file.</span><br><span class=\"line\">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class=\"line\"></span><br><span class=\"line\">See `npm <span class=\"built_in\">help</span> json` <span class=\"keyword\">for</span> definitive documentation on these fields</span><br><span class=\"line\">and exactly what they <span class=\"keyword\">do</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class=\"line\">save it as a dependency <span class=\"keyword\">in</span> the package.json file.</span><br><span class=\"line\"></span><br><span class=\"line\">Press ^C at any time to quit.</span><br><span class=\"line\">package name: (webpack)</span><br></pre></td></tr></table></figure>\n<p><em>最后，目录下会生成一个package.json文件，打开看一下</em><br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>里面都是刚才npm init时自己的配置</em></p>\n<blockquote>\n<p>我们可以通过以下命令本地安装 Babel CLI:</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 全局安装</span><br><span class=\"line\">npm install babel-cli -g</span><br><span class=\"line\">// 安装在当前项目中</span><br><span class=\"line\">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure>\n<p>我们在当前目录安装babel-cli，随后我们的package.json应该长这个样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-cli\"</span>: <span class=\"string\">\"^6.26.0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a><a name=\"usage\">2. 使用</a></h4><ul>\n<li>我们将把我们的指令放在本地版本的 npm 脚本中，而不是直接通过命令行来运行 Babel.</li>\n</ul>\n<blockquote>\n<p>简单的在你的 package.json 中添加一个 “scripts” 属性并将 babel 命令放在它的 build 属性中：</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">+     \"build\": \"babel src -d lib\"  // 加入这一句命令</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"devDependencies\": &#123;</span><br><span class=\"line\">      \"babel-cli\": \"^6.26.0\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>现在从我们的终端可以运行以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure></p>\n<p><em>这会按照和之前一样的方式来运行 Babel 并将输出放在 lib 目录下，唯一不同在于我们现在使用了一个本地拷贝。</em></p>\n<blockquote>\n<p>值得注意的是在babel的build命令是可以在build属性中自行配置的，上面是把src目录下的脚本打包到lib目录中，你也可以打包单个文件…</p>\n</blockquote>\n<h4 id=\"3-创建-babelrc配置文件\"><a href=\"#3-创建-babelrc配置文件\" class=\"headerlink\" title=\"3. 创建.babelrc配置文件\"></a><a name=\"babelrc\">3. 创建.babelrc配置文件</a></h4><ul>\n<li>虽然已经配置好了 Babel ，但并没有让它真正生效。在项目的根目录中创建一个 .babelrc 文件并启用一些插件。 <a href=\"https://babeljs.cn/docs/setup/#installation\" target=\"_blank\" rel=\"noopener\">详看</a></li>\n</ul>\n<p>首先，你可以使用转换 ES2015+ 的 env preset：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-preset-env --save-dev</span><br></pre></td></tr></table></figure></p>\n<p>为了让 preset 生效，你需要像下面这样定义你的 .babelrc 文件：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"env\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>.babelrc配置文件非常丰富：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ES2015转码规则</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-es2015</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># react转码规则</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-react</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-0</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-1</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-2</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-3</span><br></pre></td></tr></table></figure>\n<p>最后，我们的 .babelrc 文件可以长这个样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"es2015\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"stage-2\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-Babel-Polyfill\"><a href=\"#4-Babel-Polyfill\" class=\"headerlink\" title=\"4. Babel-Polyfill\"></a><a name=\"polyfill\">4. Babel-Polyfill</a></h4><p>Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如<code>Object.assign</code>）都不会转码。</p>\n<p>举例来说，ES6在Array对象上新增了<code>Array.from</code>方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。</p>\n<p>安装命令如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure></p>\n<p>然后，在脚本头部，加入如下一行代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'babel-polyfill'</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-Babel-Register\"><a href=\"#5-Babel-Register\" class=\"headerlink\" title=\"5. Babel-Register\"></a><a name=\"register\">5. Babel-Register</a></h4><p>babel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-register</span><br></pre></td></tr></table></figure></p>\n<p>使用时，必须首先加载babel-register：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">\"babel-register\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">\"./index.js\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>然后，就不需要手动对index.js转码了。</p>\n<blockquote>\n<p>需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在<code>开发环境</code>使用。</p>\n</blockquote>\n<h4 id=\"后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\"><a href=\"#后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\" class=\"headerlink\" title=\"后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\"></a><code>后记</code>：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。</h4><hr>\n<blockquote>\n<p>参考文档： <a href=\"https://babeljs.cn/\" target=\"_blank\" rel=\"noopener\">babeljs.cn</a> / <a href=\"http://www.ruanyifeng.com/blog/2016/01/babel.html?20170213113809\" target=\"_blank\" rel=\"noopener\">ruanyifeng.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"#install\">安装</a></li>\n<li><a href=\"#usage\">使用</a></li>\n<li><a href=\"#babelrc\">创建.babelrc文件</a></li>\n<li><a href=\"#polyfill\">Babel-Polyfill</a></li>\n<li><a href=\"#register\">Babel-Register</a></li>\n</ul>\n<p>&emsp;首先，为什么会写这样一篇文章呢？在进入公司几个月后，写业务代码都是使用es5语法，es6，于是想着使用Babel来构建一下。这样既可以愉快的使用ES6了，还能舒心的写代码，何乐而不为。</p>\n<ul>\n<li>Babel的使用是基于Node.js环境的，所以必须先安装Node。</li>\n<li>我们将采用通过安装babel-cli的方式来使用babel。</li>\n</ul>\n<h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a><a name=\"install\">1. 安装</a></h4><p>&emsp;虽然你可以在你的机器上全局安装<code>Babel CLI</code>, 但根据单个项目进行本地安装会更好一些。这样做有两个主要的原因：</p>\n<ul>\n<li>同一机器上的不同的项目可以依赖不同版本的 Babel, 这允许你一次更新一个项目。</li>\n<li>这意味着在你的工作环境中没有隐含的依赖项。它将使你的项目更方便移植、更易于安装。</li>\n</ul>\n<blockquote>\n<p>首先我们需要生成一个package.json文件，进入到项目目录执行<code>npm init</code>命令，随后一顿选择回车。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YSY@SY-YU MINGW64 /d/START/webpack</span><br><span class=\"line\">$ npm init</span><br><span class=\"line\">This utility will walk you through creating a package.json file.</span><br><span class=\"line\">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class=\"line\"></span><br><span class=\"line\">See `npm <span class=\"built_in\">help</span> json` <span class=\"keyword\">for</span> definitive documentation on these fields</span><br><span class=\"line\">and exactly what they <span class=\"keyword\">do</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class=\"line\">save it as a dependency <span class=\"keyword\">in</span> the package.json file.</span><br><span class=\"line\"></span><br><span class=\"line\">Press ^C at any time to quit.</span><br><span class=\"line\">package name: (webpack)</span><br></pre></td></tr></table></figure>\n<p><em>最后，目录下会生成一个package.json文件，打开看一下</em><br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>里面都是刚才npm init时自己的配置</em></p>\n<blockquote>\n<p>我们可以通过以下命令本地安装 Babel CLI:</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 全局安装</span><br><span class=\"line\">npm install babel-cli -g</span><br><span class=\"line\">// 安装在当前项目中</span><br><span class=\"line\">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure>\n<p>我们在当前目录安装babel-cli，随后我们的package.json应该长这个样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-cli\"</span>: <span class=\"string\">\"^6.26.0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a><a name=\"usage\">2. 使用</a></h4><ul>\n<li>我们将把我们的指令放在本地版本的 npm 脚本中，而不是直接通过命令行来运行 Babel.</li>\n</ul>\n<blockquote>\n<p>简单的在你的 package.json 中添加一个 “scripts” 属性并将 babel 命令放在它的 build 属性中：</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">+     \"build\": \"babel src -d lib\"  // 加入这一句命令</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"devDependencies\": &#123;</span><br><span class=\"line\">      \"babel-cli\": \"^6.26.0\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>现在从我们的终端可以运行以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure></p>\n<p><em>这会按照和之前一样的方式来运行 Babel 并将输出放在 lib 目录下，唯一不同在于我们现在使用了一个本地拷贝。</em></p>\n<blockquote>\n<p>值得注意的是在babel的build命令是可以在build属性中自行配置的，上面是把src目录下的脚本打包到lib目录中，你也可以打包单个文件…</p>\n</blockquote>\n<h4 id=\"3-创建-babelrc配置文件\"><a href=\"#3-创建-babelrc配置文件\" class=\"headerlink\" title=\"3. 创建.babelrc配置文件\"></a><a name=\"babelrc\">3. 创建.babelrc配置文件</a></h4><ul>\n<li>虽然已经配置好了 Babel ，但并没有让它真正生效。在项目的根目录中创建一个 .babelrc 文件并启用一些插件。 <a href=\"https://babeljs.cn/docs/setup/#installation\" target=\"_blank\" rel=\"noopener\">详看</a></li>\n</ul>\n<p>首先，你可以使用转换 ES2015+ 的 env preset：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-preset-env --save-dev</span><br></pre></td></tr></table></figure></p>\n<p>为了让 preset 生效，你需要像下面这样定义你的 .babelrc 文件：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"env\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>.babelrc配置文件非常丰富：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ES2015转码规则</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-es2015</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># react转码规则</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-react</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-0</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-1</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-2</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-3</span><br></pre></td></tr></table></figure>\n<p>最后，我们的 .babelrc 文件可以长这个样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"es2015\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"stage-2\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-Babel-Polyfill\"><a href=\"#4-Babel-Polyfill\" class=\"headerlink\" title=\"4. Babel-Polyfill\"></a><a name=\"polyfill\">4. Babel-Polyfill</a></h4><p>Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如<code>Object.assign</code>）都不会转码。</p>\n<p>举例来说，ES6在Array对象上新增了<code>Array.from</code>方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。</p>\n<p>安装命令如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure></p>\n<p>然后，在脚本头部，加入如下一行代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'babel-polyfill'</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-Babel-Register\"><a href=\"#5-Babel-Register\" class=\"headerlink\" title=\"5. Babel-Register\"></a><a name=\"register\">5. Babel-Register</a></h4><p>babel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-register</span><br></pre></td></tr></table></figure></p>\n<p>使用时，必须首先加载babel-register：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">\"babel-register\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">\"./index.js\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>然后，就不需要手动对index.js转码了。</p>\n<blockquote>\n<p>需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在<code>开发环境</code>使用。</p>\n</blockquote>\n<h4 id=\"后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\"><a href=\"#后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\" class=\"headerlink\" title=\"后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\"></a><code>后记</code>：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。</h4><hr>\n<blockquote>\n<p>参考文档： <a href=\"https://babeljs.cn/\" target=\"_blank\" rel=\"noopener\">babeljs.cn</a> / <a href=\"http://www.ruanyifeng.com/blog/2016/01/babel.html?20170213113809\" target=\"_blank\" rel=\"noopener\">ruanyifeng.com</a></p>\n</blockquote>\n"},{"id":"0809006","title":"关于javascript数组的一些思考","date":"2018-02-27T07:48:26.000Z","_content":"\n#### 关于数组的一些认识\n1. 使用构造器函数创建数组时:\n```javascript\nlet ary = new Array();\n```\n- 若参数只有一个，且为数字，`let ary1 = new Array(3)`，这是其实我们是在指定数组的长度的，即 `ary1.length === 3`。`ary1[0]`则为`undefined`;\n- 当定义`let ary2 = new Array(1, 2, 3)`时，此时`ary2 === [1, 2, 3]`;\n2. JS中的数组定义非常的自由：\n 看下面的例子：\n```javascript\nlet ary = [1, 2, 3];\nary[5] = 5;\nconsole.log(ary);           // [1,2,3,undefined,undefined,5]\nconsole.log(ary.length);    // 6\n```\n 再看：\n```javascript\nlet ary2 = [1, 2, 3, 4, 5];\nary2.length = 3;\nconsole.log(ary2);      // [1, 2, 3]\n```\n#### 常用的数组API\n1. 万能方法 `splice()`\n-  splice()方法允许我们对数组进行插入、替换和删除的功能。**splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组**，简直完美呀！\n- `splice()`方法接受三个参数，**第一个**为开始索引，**第二个**为删除元素的位置，**第三个**为插入的元素，可以为第二个，当然也可省略（表示删除元素）。\n- `splice()`方法会修改原数组！\n- 通过以下三个demo了解一下具体的用法吧：\n插入:\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,0,\"add1\");\nconsole.log(ary1);      [ 'first', 'add1', 'second', 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [] 没有删除则放回一个空数组\n```\n替换：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,1,\"replace\");\nconsole.log(ary1);      [ 'first', \"replace, 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [\"second\"] 返回被删除(即替换)的数组\n```\n删除：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,3);\nconsole.log(ary1);      [\"second\", \"third\", \"forth\"]\nconsole.log(ary2);      [\"first\", \"fifth\"]\n```\n2. `slice()` 方法\n- `slice()` 方法可以接受两个参数(start, end)；\n- `slice()` 方法可从已有的数组中返回选定的元素；\n- `slice()` 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；\n- `slice()` 方法**不会改变原始数组**，而是返回一个新数组。\ndemo1:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log (ary.slice(1,2) );      // [\"second\"]\nlet ary1 = ary.slice(1,2);          // [\"second\"]\nlet ary2 = ary.slice(1,3);          // [\"second\", \"third\"]\nconsole.log(ary);                   // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo2:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log(ary.slice(1,2));    // [\"second\"]\nconsole.log(ary.slice(1,3));    // [\"second\", \"third\"]\nconsole.log(ary));              // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo3:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary1 = ary.slice();     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary.slice(0);     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n\nary === ary1;       // false\nary === ary2;       // false\nary1 === ary2;      // false\n```\n**看出来啥猫腻没，这不是深复制一个数据吗！**","source":"_posts/0809006_关于JavaScript数组的一些思考.md","raw":"---\nid: 0809006\ntitle: 关于javascript数组的一些思考\ndate: 2018-02-27 15:48:26\ntags: \n    - JavaScript\ncategories:\n---\n\n#### 关于数组的一些认识\n1. 使用构造器函数创建数组时:\n```javascript\nlet ary = new Array();\n```\n- 若参数只有一个，且为数字，`let ary1 = new Array(3)`，这是其实我们是在指定数组的长度的，即 `ary1.length === 3`。`ary1[0]`则为`undefined`;\n- 当定义`let ary2 = new Array(1, 2, 3)`时，此时`ary2 === [1, 2, 3]`;\n2. JS中的数组定义非常的自由：\n 看下面的例子：\n```javascript\nlet ary = [1, 2, 3];\nary[5] = 5;\nconsole.log(ary);           // [1,2,3,undefined,undefined,5]\nconsole.log(ary.length);    // 6\n```\n 再看：\n```javascript\nlet ary2 = [1, 2, 3, 4, 5];\nary2.length = 3;\nconsole.log(ary2);      // [1, 2, 3]\n```\n#### 常用的数组API\n1. 万能方法 `splice()`\n-  splice()方法允许我们对数组进行插入、替换和删除的功能。**splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组**，简直完美呀！\n- `splice()`方法接受三个参数，**第一个**为开始索引，**第二个**为删除元素的位置，**第三个**为插入的元素，可以为第二个，当然也可省略（表示删除元素）。\n- `splice()`方法会修改原数组！\n- 通过以下三个demo了解一下具体的用法吧：\n插入:\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,0,\"add1\");\nconsole.log(ary1);      [ 'first', 'add1', 'second', 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [] 没有删除则放回一个空数组\n```\n替换：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,1,\"replace\");\nconsole.log(ary1);      [ 'first', \"replace, 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [\"second\"] 返回被删除(即替换)的数组\n```\n删除：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,3);\nconsole.log(ary1);      [\"second\", \"third\", \"forth\"]\nconsole.log(ary2);      [\"first\", \"fifth\"]\n```\n2. `slice()` 方法\n- `slice()` 方法可以接受两个参数(start, end)；\n- `slice()` 方法可从已有的数组中返回选定的元素；\n- `slice()` 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；\n- `slice()` 方法**不会改变原始数组**，而是返回一个新数组。\ndemo1:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log (ary.slice(1,2) );      // [\"second\"]\nlet ary1 = ary.slice(1,2);          // [\"second\"]\nlet ary2 = ary.slice(1,3);          // [\"second\", \"third\"]\nconsole.log(ary);                   // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo2:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log(ary.slice(1,2));    // [\"second\"]\nconsole.log(ary.slice(1,3));    // [\"second\", \"third\"]\nconsole.log(ary));              // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo3:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary1 = ary.slice();     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary.slice(0);     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n\nary === ary1;       // false\nary === ary2;       // false\nary1 === ary2;      // false\n```\n**看出来啥猫腻没，这不是深复制一个数据吗！**","slug":"0809006_关于JavaScript数组的一些思考","published":1,"updated":"2018-03-05T03:02:15.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qbi000c6cc0vfv07avq","content":"<h4 id=\"关于数组的一些认识\"><a href=\"#关于数组的一些认识\" class=\"headerlink\" title=\"关于数组的一些认识\"></a>关于数组的一些认识</h4><ol>\n<li>使用构造器函数创建数组时:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>若参数只有一个，且为数字，<code>let ary1 = new Array(3)</code>，这是其实我们是在指定数组的长度的，即 <code>ary1.length === 3</code>。<code>ary1[0]</code>则为<code>undefined</code>;</li>\n<li>当定义<code>let ary2 = new Array(1, 2, 3)</code>时，此时<code>ary2 === [1, 2, 3]</code>;</li>\n</ul>\n<ol>\n<li><p>JS中的数组定义非常的自由：<br>看下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">ary[<span class=\"number\">5</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);           <span class=\"comment\">// [1,2,3,undefined,undefined,5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.length);    <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>再看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">ary2.length = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"常用的数组API\"><a href=\"#常用的数组API\" class=\"headerlink\" title=\"常用的数组API\"></a>常用的数组API</h4><ol>\n<li>万能方法 <code>splice()</code></li>\n</ol>\n<ul>\n<li>splice()方法允许我们对数组进行插入、替换和删除的功能。<strong>splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组</strong>，简直完美呀！</li>\n<li><code>splice()</code>方法接受三个参数，<strong>第一个</strong>为开始索引，<strong>第二个</strong>为删除元素的位置，<strong>第三个</strong>为插入的元素，可以为第二个，当然也可省略（表示删除元素）。</li>\n<li><code>splice()</code>方法会修改原数组！</li>\n<li>通过以下三个demo了解一下具体的用法吧：<br>插入:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">\"add1\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">'add1'</span>, <span class=\"string\">'second'</span>, <span class=\"string\">'third'</span>, <span class=\"string\">'forth'</span>, <span class=\"string\">'fifth'</span> ]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [] 没有删除则放回一个空数组</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>替换：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">\"replace\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">\"replace, 'third', 'forth', 'fifth' ]</span></span><br><span class=\"line\"><span class=\"string\">console.log(ary2);      [\"</span>second<span class=\"string\">\"] 返回被删除(即替换)的数组</span></span><br></pre></td></tr></table></figure></p>\n<p>删除：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [<span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"fifth\"</span>]</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><code>slice()</code> 方法</li>\n</ol>\n<ul>\n<li><code>slice()</code> 方法可以接受两个参数(start, end)；</li>\n<li><code>slice()</code> 方法可从已有的数组中返回选定的元素；</li>\n<li><code>slice()</code> 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；</li>\n<li><code>slice()</code> 方法<strong>不会改变原始数组</strong>，而是返回一个新数组。<br>demo1:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log (ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>) );      <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>);          <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);          <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);                   <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>demo2:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>));    <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>));    <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary));              <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure></p>\n<p>demo3:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice();     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">0</span>);     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"></span><br><span class=\"line\">ary === ary1;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary === ary2;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary1 === ary2;      <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>看出来啥猫腻没，这不是深复制一个数据吗！</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"关于数组的一些认识\"><a href=\"#关于数组的一些认识\" class=\"headerlink\" title=\"关于数组的一些认识\"></a>关于数组的一些认识</h4><ol>\n<li>使用构造器函数创建数组时:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>若参数只有一个，且为数字，<code>let ary1 = new Array(3)</code>，这是其实我们是在指定数组的长度的，即 <code>ary1.length === 3</code>。<code>ary1[0]</code>则为<code>undefined</code>;</li>\n<li>当定义<code>let ary2 = new Array(1, 2, 3)</code>时，此时<code>ary2 === [1, 2, 3]</code>;</li>\n</ul>\n<ol>\n<li><p>JS中的数组定义非常的自由：<br>看下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">ary[<span class=\"number\">5</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);           <span class=\"comment\">// [1,2,3,undefined,undefined,5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.length);    <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>再看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">ary2.length = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"常用的数组API\"><a href=\"#常用的数组API\" class=\"headerlink\" title=\"常用的数组API\"></a>常用的数组API</h4><ol>\n<li>万能方法 <code>splice()</code></li>\n</ol>\n<ul>\n<li>splice()方法允许我们对数组进行插入、替换和删除的功能。<strong>splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组</strong>，简直完美呀！</li>\n<li><code>splice()</code>方法接受三个参数，<strong>第一个</strong>为开始索引，<strong>第二个</strong>为删除元素的位置，<strong>第三个</strong>为插入的元素，可以为第二个，当然也可省略（表示删除元素）。</li>\n<li><code>splice()</code>方法会修改原数组！</li>\n<li>通过以下三个demo了解一下具体的用法吧：<br>插入:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">\"add1\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">'add1'</span>, <span class=\"string\">'second'</span>, <span class=\"string\">'third'</span>, <span class=\"string\">'forth'</span>, <span class=\"string\">'fifth'</span> ]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [] 没有删除则放回一个空数组</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>替换：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">\"replace\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">\"replace, 'third', 'forth', 'fifth' ]</span></span><br><span class=\"line\"><span class=\"string\">console.log(ary2);      [\"</span>second<span class=\"string\">\"] 返回被删除(即替换)的数组</span></span><br></pre></td></tr></table></figure></p>\n<p>删除：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [<span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"fifth\"</span>]</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><code>slice()</code> 方法</li>\n</ol>\n<ul>\n<li><code>slice()</code> 方法可以接受两个参数(start, end)；</li>\n<li><code>slice()</code> 方法可从已有的数组中返回选定的元素；</li>\n<li><code>slice()</code> 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；</li>\n<li><code>slice()</code> 方法<strong>不会改变原始数组</strong>，而是返回一个新数组。<br>demo1:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log (ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>) );      <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>);          <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);          <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);                   <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>demo2:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>));    <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>));    <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary));              <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure></p>\n<p>demo3:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice();     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">0</span>);     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"></span><br><span class=\"line\">ary === ary1;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary === ary2;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary1 === ary2;      <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>看出来啥猫腻没，这不是深复制一个数据吗！</strong></p>\n"},{"id":"0809008","title":"JavaScript面向对象","date":"2018-02-27T07:52:37.000Z","_content":"\n#### 1. 原始方式：\n* 对象字面量方式\n```javascript\nvar Hero = { \n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    todo: function () { alert(this.name); }\n};\n```\n* Object构造函数方式\n```javascript\nvar Hero = new Object();\n\nHero.name = 'MasterYi';\nHero.skill = 'Q';\nHero.do = function(){\n    return this.name + ' use ' + this.skill + ' kill ' + 'yasuo';\n}\n\nalert( Hero.skill );    // AlphaStrike\nalert( Hero.do() );     // MasterYi use AlphaStrike kill yasuo\n```\n如上，当我们要创建批量的Hero1、Hero2……时，\n每次都要敲很多代码，资深copypaster都吃不消！\n然后就有了下面批量生产的工厂模式。\n\n#### 2. 工厂模式\n```javascript\nfunction heroObj(name, skill){\n    var Hero = new Object();\n\n    Hero.name = name;\n    Hero.skill = skill;\n    Hero.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n    return Hero;\n}\nvar riven = heroObj('yasuo', 'R');\nvar ashe = heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\n工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。\n指定姓名年龄就可以造一堆小宝宝啦，解放双手。\n但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、\n是人还是狗傻傻分不清（instanceof 测试为 Object），\n另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？\n\n#### 3. 构造函数\n```javascript\nfunction HeroObj(name, skill){\n\n    this.name = name;\n    this.skill = skill;\n    this.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n}\n\nvar riven = new heroObj('yasuo', 'R');\nvar ashe = new heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\nECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。\n\n#### 4. 原型模式\n* 直接使用 prototype 属性\n```javascript\nfunction Hero () {}\nHero.prototype.name = 'MasterYi';\nHero.prototype.skill = 'AlphaStrike';\nHero.prototype.do = function () { alert(this.name); };\n```\n* 字面量定义方式\n```javascript\nfunction Hero () {}\nHero.prototype = {\n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    sayName: function () { alert(this.name); }\n};\nvar p1 = new Hero(); //name='MasterYi'\nvar p2 = new Hero(); //name='MasterYi'\n```\n这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。\n\n#### 5. 混合模式\n```javascript\nfunction Hero (name, skill) {\n    this.name = name;\n    this.skill = skill;\n}\nHero.prototype = {\n    skillLists: ['Q', 'W', 'E', 'R'];\n    sayName: function () {\n        alert(this.name);\n    },\n    do: function () {\n        alert(this.name + ' use ' + this.skill + ' kill ' + 'MasterYi');\n    }\n};\nvar p1 = new Hero('yasuo', 'R');\nvar p2 = new Hero('ashe', 'w');\np1.sayName();   // yasuo\np1.skillLists;  // ['Q', 'W', 'E', 'R']\np2.do();        // ashe use w kill MasterYi\n```\n\n#### 6. 使用`class`关键字\n```javascript\nclass Hero {\n    constructor(){\n        this.name = 'MasterYi';\n        this.skill = 'AlphaStrike';\n    }\n    do(enemy){\n        alert(this.name + ' use ' +  this.skill + ' kill ' + enemy)\n    }\n}\n\nlet ashe = new Hero();\nashe.do('ashe');       // MasterYi use AlphaStrike kill ashe\n\nclass Yasuo extends Hero {\n    constructor(){\n        super()\n        this.name = 'yasuo'\n    }\n}\nlet yasuo = new Yasuo();\nyasuo.do('timor');      // yasuo use AlphaStrike kill timor\n```\n这里涉及到 `ES6` 里的新特性，想了解 `ES6` 中更多的新特性，大家可以去看看 [阮一峰](http://es6.ruanyifeng.com/) 老师的博客。","source":"_posts/0809008_JavaScript面向对象.md","raw":"---\nid: 0809008\ntitle: JavaScript面向对象\ndate: 2018-02-27 15:52:37\ntags: \n    - JavaScript\ncategories:\n---\n\n#### 1. 原始方式：\n* 对象字面量方式\n```javascript\nvar Hero = { \n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    todo: function () { alert(this.name); }\n};\n```\n* Object构造函数方式\n```javascript\nvar Hero = new Object();\n\nHero.name = 'MasterYi';\nHero.skill = 'Q';\nHero.do = function(){\n    return this.name + ' use ' + this.skill + ' kill ' + 'yasuo';\n}\n\nalert( Hero.skill );    // AlphaStrike\nalert( Hero.do() );     // MasterYi use AlphaStrike kill yasuo\n```\n如上，当我们要创建批量的Hero1、Hero2……时，\n每次都要敲很多代码，资深copypaster都吃不消！\n然后就有了下面批量生产的工厂模式。\n\n#### 2. 工厂模式\n```javascript\nfunction heroObj(name, skill){\n    var Hero = new Object();\n\n    Hero.name = name;\n    Hero.skill = skill;\n    Hero.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n    return Hero;\n}\nvar riven = heroObj('yasuo', 'R');\nvar ashe = heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\n工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。\n指定姓名年龄就可以造一堆小宝宝啦，解放双手。\n但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、\n是人还是狗傻傻分不清（instanceof 测试为 Object），\n另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？\n\n#### 3. 构造函数\n```javascript\nfunction HeroObj(name, skill){\n\n    this.name = name;\n    this.skill = skill;\n    this.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n}\n\nvar riven = new heroObj('yasuo', 'R');\nvar ashe = new heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\nECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。\n\n#### 4. 原型模式\n* 直接使用 prototype 属性\n```javascript\nfunction Hero () {}\nHero.prototype.name = 'MasterYi';\nHero.prototype.skill = 'AlphaStrike';\nHero.prototype.do = function () { alert(this.name); };\n```\n* 字面量定义方式\n```javascript\nfunction Hero () {}\nHero.prototype = {\n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    sayName: function () { alert(this.name); }\n};\nvar p1 = new Hero(); //name='MasterYi'\nvar p2 = new Hero(); //name='MasterYi'\n```\n这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。\n\n#### 5. 混合模式\n```javascript\nfunction Hero (name, skill) {\n    this.name = name;\n    this.skill = skill;\n}\nHero.prototype = {\n    skillLists: ['Q', 'W', 'E', 'R'];\n    sayName: function () {\n        alert(this.name);\n    },\n    do: function () {\n        alert(this.name + ' use ' + this.skill + ' kill ' + 'MasterYi');\n    }\n};\nvar p1 = new Hero('yasuo', 'R');\nvar p2 = new Hero('ashe', 'w');\np1.sayName();   // yasuo\np1.skillLists;  // ['Q', 'W', 'E', 'R']\np2.do();        // ashe use w kill MasterYi\n```\n\n#### 6. 使用`class`关键字\n```javascript\nclass Hero {\n    constructor(){\n        this.name = 'MasterYi';\n        this.skill = 'AlphaStrike';\n    }\n    do(enemy){\n        alert(this.name + ' use ' +  this.skill + ' kill ' + enemy)\n    }\n}\n\nlet ashe = new Hero();\nashe.do('ashe');       // MasterYi use AlphaStrike kill ashe\n\nclass Yasuo extends Hero {\n    constructor(){\n        super()\n        this.name = 'yasuo'\n    }\n}\nlet yasuo = new Yasuo();\nyasuo.do('timor');      // yasuo use AlphaStrike kill timor\n```\n这里涉及到 `ES6` 里的新特性，想了解 `ES6` 中更多的新特性，大家可以去看看 [阮一峰](http://es6.ruanyifeng.com/) 老师的博客。","slug":"0809008_JavaScript面向对象","published":1,"updated":"2018-03-05T03:01:37.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qbn000e6cc0a7h1wmwa","content":"<h4 id=\"1-原始方式：\"><a href=\"#1-原始方式：\" class=\"headerlink\" title=\"1. 原始方式：\"></a>1. 原始方式：</h4><ul>\n<li><p>对象字面量方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = &#123; </span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    todo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object构造函数方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">Hero.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.skill = <span class=\"string\">'Q'</span>;</span><br><span class=\"line\">Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'yasuo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert( Hero.skill );    <span class=\"comment\">// AlphaStrike</span></span><br><span class=\"line\">alert( Hero.do() );     <span class=\"comment\">// MasterYi use AlphaStrike kill yasuo</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如上，当我们要创建批量的Hero1、Hero2……时，<br>每次都要敲很多代码，资深copypaster都吃不消！<br>然后就有了下面批量生产的工厂模式。</p>\n<h4 id=\"2-工厂模式\"><a href=\"#2-工厂模式\" class=\"headerlink\" title=\"2. 工厂模式\"></a>2. 工厂模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    Hero.name = name;</span><br><span class=\"line\">    Hero.skill = skill;</span><br><span class=\"line\">    Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Hero;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。<br>指定姓名年龄就可以造一堆小宝宝啦，解放双手。<br>但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、<br>是人还是狗傻傻分不清（instanceof 测试为 Object），<br>另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？</p>\n<h4 id=\"3-构造函数\"><a href=\"#3-构造函数\" class=\"headerlink\" title=\"3. 构造函数\"></a>3. 构造函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HeroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>ECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。</p>\n<h4 id=\"4-原型模式\"><a href=\"#4-原型模式\" class=\"headerlink\" title=\"4. 原型模式\"></a>4. 原型模式</h4><ul>\n<li><p>直接使用 prototype 属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.prototype.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">Hero.prototype.do = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字面量定义方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。</p>\n<h4 id=\"5-混合模式\"><a href=\"#5-混合模式\" class=\"headerlink\" title=\"5. 混合模式\"></a>5. 混合模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\">name, skill</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    skillLists: [<span class=\"string\">'Q'</span>, <span class=\"string\">'W'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'R'</span>];</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">do</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'ashe'</span>, <span class=\"string\">'w'</span>);</span><br><span class=\"line\">p1.sayName();   <span class=\"comment\">// yasuo</span></span><br><span class=\"line\">p1.skillLists;  <span class=\"comment\">// ['Q', 'W', 'E', 'R']</span></span><br><span class=\"line\">p2.do();        <span class=\"comment\">// ashe use w kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-使用class关键字\"><a href=\"#6-使用class关键字\" class=\"headerlink\" title=\"6. 使用class关键字\"></a>6. 使用<code>class</code>关键字</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>(enemy)&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> +  <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + enemy)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ashe = <span class=\"keyword\">new</span> Hero();</span><br><span class=\"line\">ashe.do(<span class=\"string\">'ashe'</span>);       <span class=\"comment\">// MasterYi use AlphaStrike kill ashe</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Yasuo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'yasuo'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> yasuo = <span class=\"keyword\">new</span> Yasuo();</span><br><span class=\"line\">yasuo.do(<span class=\"string\">'timor'</span>);      <span class=\"comment\">// yasuo use AlphaStrike kill timor</span></span><br></pre></td></tr></table></figure>\n<p>这里涉及到 <code>ES6</code> 里的新特性，想了解 <code>ES6</code> 中更多的新特性，大家可以去看看 <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰</a> 老师的博客。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-原始方式：\"><a href=\"#1-原始方式：\" class=\"headerlink\" title=\"1. 原始方式：\"></a>1. 原始方式：</h4><ul>\n<li><p>对象字面量方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = &#123; </span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    todo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object构造函数方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">Hero.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.skill = <span class=\"string\">'Q'</span>;</span><br><span class=\"line\">Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'yasuo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert( Hero.skill );    <span class=\"comment\">// AlphaStrike</span></span><br><span class=\"line\">alert( Hero.do() );     <span class=\"comment\">// MasterYi use AlphaStrike kill yasuo</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如上，当我们要创建批量的Hero1、Hero2……时，<br>每次都要敲很多代码，资深copypaster都吃不消！<br>然后就有了下面批量生产的工厂模式。</p>\n<h4 id=\"2-工厂模式\"><a href=\"#2-工厂模式\" class=\"headerlink\" title=\"2. 工厂模式\"></a>2. 工厂模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    Hero.name = name;</span><br><span class=\"line\">    Hero.skill = skill;</span><br><span class=\"line\">    Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Hero;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。<br>指定姓名年龄就可以造一堆小宝宝啦，解放双手。<br>但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、<br>是人还是狗傻傻分不清（instanceof 测试为 Object），<br>另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？</p>\n<h4 id=\"3-构造函数\"><a href=\"#3-构造函数\" class=\"headerlink\" title=\"3. 构造函数\"></a>3. 构造函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HeroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>ECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。</p>\n<h4 id=\"4-原型模式\"><a href=\"#4-原型模式\" class=\"headerlink\" title=\"4. 原型模式\"></a>4. 原型模式</h4><ul>\n<li><p>直接使用 prototype 属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.prototype.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">Hero.prototype.do = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字面量定义方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。</p>\n<h4 id=\"5-混合模式\"><a href=\"#5-混合模式\" class=\"headerlink\" title=\"5. 混合模式\"></a>5. 混合模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\">name, skill</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    skillLists: [<span class=\"string\">'Q'</span>, <span class=\"string\">'W'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'R'</span>];</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">do</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'ashe'</span>, <span class=\"string\">'w'</span>);</span><br><span class=\"line\">p1.sayName();   <span class=\"comment\">// yasuo</span></span><br><span class=\"line\">p1.skillLists;  <span class=\"comment\">// ['Q', 'W', 'E', 'R']</span></span><br><span class=\"line\">p2.do();        <span class=\"comment\">// ashe use w kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-使用class关键字\"><a href=\"#6-使用class关键字\" class=\"headerlink\" title=\"6. 使用class关键字\"></a>6. 使用<code>class</code>关键字</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>(enemy)&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> +  <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + enemy)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ashe = <span class=\"keyword\">new</span> Hero();</span><br><span class=\"line\">ashe.do(<span class=\"string\">'ashe'</span>);       <span class=\"comment\">// MasterYi use AlphaStrike kill ashe</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Yasuo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'yasuo'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> yasuo = <span class=\"keyword\">new</span> Yasuo();</span><br><span class=\"line\">yasuo.do(<span class=\"string\">'timor'</span>);      <span class=\"comment\">// yasuo use AlphaStrike kill timor</span></span><br></pre></td></tr></table></figure>\n<p>这里涉及到 <code>ES6</code> 里的新特性，想了解 <code>ES6</code> 中更多的新特性，大家可以去看看 <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰</a> 老师的博客。</p>\n"},{"id":"0809010","title":"小窥Node.js服务端框架Express","date":"2018-03-02T08:07:06.000Z","_content":"","source":"_posts/0809010_小窥Node.js服务端框架Express.md","raw":"---\nid: 0809010\ntitle: 小窥Node.js服务端框架Express\ndate: 2018-03-02 16:07:06\ntags:\n    - Node.js\n    - Express\ncategories:\n---\n","slug":"0809010_小窥Node.js服务端框架Express","published":1,"updated":"2018-03-05T07:33:12.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qbr000g6cc05gy9w0j7","content":"","site":{"data":{}},"excerpt":"","more":""},{"id":"0809009","title":"vue-cli快速构建vue.js项目","date":"2018-03-01T06:59:28.000Z","_content":"- <a href=\"#Quickstart\">快速上手</a>\n- <a href=\"#Commands\">构建命令</a>\n- <a href=\"#Babel\">配置Babel</a>\n\n#### <a name=\"Quickstart\">1. 快速上手</a>\n本文介绍如何使用vue-cli快速构建vus.js项目，主要用到`webpack`，以及`vue-loader`，所以确保你的环境中安装有webpack。\n\n```bash\n# 安装vue-cli脚手架工具\n$ npm install -g vue-cli\n\n# 在 my-project 目录中生成一个项目\n# 这一步中你还可以选择是否安装vue-router,ESLint,unit tests, e2e tests...\n$ vue init webpack my-project\n\n# 进入到项目\n$ cd my-project\n\n# 安装依赖\n$ npm install\n\n# 构建并启动项目\n$ npm run dev\n```\n如果你在 `vue init webpack my-project` 步骤中选择安装所有的工具，那么我们的项目目录结构应该是这样的：\n```\n.\n├── build/                      # webpack config files\n│   └── ...\n├── config/\n│   ├── index.js                # main project config\n│   └── ...\n├── src/\n│   ├── main.js                 # app entry file\n│   ├── App.vue                 # main app component\n│   ├── components/             # ui components\n│   │   └── ...\n│   └── assets/                 # module assets (processed by webpack)\n│       └── ...\n├── static/                     # pure static assets (directly copied)\n├── test/\n│   └── unit/                   # unit tests\n│   │   ├── specs/              # test spec files\n│   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests\n│   │   ├── index.js            # test build entry file\n│   │   ├── jest.conf.js        # Config file when using Jest for unit tests\n│   │   └── karma.conf.js       # test runner config file when using Karma for unit tests\n│   │   ├── setup.js            # file that runs before Jest runs your unit tests\n│   └── e2e/                    # e2e tests\n│   │   ├── specs/              # test spec files\n│   │   ├── custom-assertions/  # custom assertions for e2e tests\n│   │   ├── runner.js           # test runner script\n│   │   └── nightwatch.conf.js  # test runner config file\n├── .babelrc                    # babel config\n├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor\n├── .eslintrc.js                # eslint config\n├── .eslintignore               # eslint ignore rules\n├── .gitignore                  # sensible defaults for gitignore\n├── .postcssrc.js               # postcss config\n├── index.html                  # index.html template\n├── package.json                # build scripts and dependencies\n└── README.md                   # Default README file\n```\n> 目录/文件介绍：\n\n- `build/`：该目录保存的是开发和生产环境中的webpack配置，一般情况下是不需要进行修改的；当需要自定义webpack配置时，可以从webpack.base.conf.js开始研究。\n\n- `config/index.js`：这是项目构建时需要的一些最常用到的配置文件。\n\n- `src/`：这里存放的就是我们的业务代码了，我们可以根据项目需要自行配置。\n\n- `static/`：在这里，我们可以存放一些我们不希望webpack来处理的静态资源文件，在使用webpack来构建时，这里的文件将会直接复制到构建后的资源目录下。\n\n- `test/unit`：单元测试相关文件。\n\n- `test/e2e`：e2e测试相关文件。\n\n- `index.html`：基于vue.js的SPA单页应用的入口HTML模板，在开发、构建过程中，webpack将生成很多资源文件，文件之间的URL会被自动的注入到该index.html中。\n\n- `package.json`：npm包源文件，包含所有的构建依赖和构建命令。\n\n#### <a name=\"Commands\">2. 构建命令</a>\n\n<strong>所有的构建命令都是通过`npm`脚本执行的，见`package.json//scripts`。<strong>\n\n```\nnpm run dev\n```\n在本地开发环境启动一个node.js服务器。\n- `webpack` + `vue-loader` 作用于vue的单文件组件\n- 状态保存，热加载\n- 使用`ESLint`检查js\n- 生成资源文件的sourcemap\n- ......\n\n```\nnpm run build\n```\n在生产环境中构建资源\n- 使用`UglifyJS v3`压缩JavaScript\n- 使用`html-minifier`压缩HTML\n- 使用`cssnano`将所有组件的CSS提取到一个文件中\n- 使用版本哈希编译所有的静态文件，以实现资源的持久缓存。为所有的资源自定生成合适的URL，最后注入到`index.html`中，完成整个工程的构建。\n\n```\nnpm run unit\n```\n- 使用Jest在JSDOM中运行单元测试\n\n```\nnpm run lint\n```\n- 运行ESLint并报告任何linting错误。\n\n> 更多构建命令请查阅相关资料\n\n#### <a name=\"Babel\">3. 配置Babel</a>\n\n> 详见我的[另外一篇文章](/2018/03/01/0809007/)\n\n`至此，通过vue-cli构建vue工程的基本过程已经结束，查看更多详细配置，`[请转](https://vuejs-templates.github.io/webpack/)","source":"_posts/0809009_vue-cli快速构建vue-js项目.md","raw":"---\nid: 0809009\ntitle: vue-cli快速构建vue.js项目\ndate: 2018-03-01 14:59:28\ntags:\n    - vue.js\n    - webpack\n    - JavaScript\n    - es6\ncategories:\n---\n- <a href=\"#Quickstart\">快速上手</a>\n- <a href=\"#Commands\">构建命令</a>\n- <a href=\"#Babel\">配置Babel</a>\n\n#### <a name=\"Quickstart\">1. 快速上手</a>\n本文介绍如何使用vue-cli快速构建vus.js项目，主要用到`webpack`，以及`vue-loader`，所以确保你的环境中安装有webpack。\n\n```bash\n# 安装vue-cli脚手架工具\n$ npm install -g vue-cli\n\n# 在 my-project 目录中生成一个项目\n# 这一步中你还可以选择是否安装vue-router,ESLint,unit tests, e2e tests...\n$ vue init webpack my-project\n\n# 进入到项目\n$ cd my-project\n\n# 安装依赖\n$ npm install\n\n# 构建并启动项目\n$ npm run dev\n```\n如果你在 `vue init webpack my-project` 步骤中选择安装所有的工具，那么我们的项目目录结构应该是这样的：\n```\n.\n├── build/                      # webpack config files\n│   └── ...\n├── config/\n│   ├── index.js                # main project config\n│   └── ...\n├── src/\n│   ├── main.js                 # app entry file\n│   ├── App.vue                 # main app component\n│   ├── components/             # ui components\n│   │   └── ...\n│   └── assets/                 # module assets (processed by webpack)\n│       └── ...\n├── static/                     # pure static assets (directly copied)\n├── test/\n│   └── unit/                   # unit tests\n│   │   ├── specs/              # test spec files\n│   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests\n│   │   ├── index.js            # test build entry file\n│   │   ├── jest.conf.js        # Config file when using Jest for unit tests\n│   │   └── karma.conf.js       # test runner config file when using Karma for unit tests\n│   │   ├── setup.js            # file that runs before Jest runs your unit tests\n│   └── e2e/                    # e2e tests\n│   │   ├── specs/              # test spec files\n│   │   ├── custom-assertions/  # custom assertions for e2e tests\n│   │   ├── runner.js           # test runner script\n│   │   └── nightwatch.conf.js  # test runner config file\n├── .babelrc                    # babel config\n├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor\n├── .eslintrc.js                # eslint config\n├── .eslintignore               # eslint ignore rules\n├── .gitignore                  # sensible defaults for gitignore\n├── .postcssrc.js               # postcss config\n├── index.html                  # index.html template\n├── package.json                # build scripts and dependencies\n└── README.md                   # Default README file\n```\n> 目录/文件介绍：\n\n- `build/`：该目录保存的是开发和生产环境中的webpack配置，一般情况下是不需要进行修改的；当需要自定义webpack配置时，可以从webpack.base.conf.js开始研究。\n\n- `config/index.js`：这是项目构建时需要的一些最常用到的配置文件。\n\n- `src/`：这里存放的就是我们的业务代码了，我们可以根据项目需要自行配置。\n\n- `static/`：在这里，我们可以存放一些我们不希望webpack来处理的静态资源文件，在使用webpack来构建时，这里的文件将会直接复制到构建后的资源目录下。\n\n- `test/unit`：单元测试相关文件。\n\n- `test/e2e`：e2e测试相关文件。\n\n- `index.html`：基于vue.js的SPA单页应用的入口HTML模板，在开发、构建过程中，webpack将生成很多资源文件，文件之间的URL会被自动的注入到该index.html中。\n\n- `package.json`：npm包源文件，包含所有的构建依赖和构建命令。\n\n#### <a name=\"Commands\">2. 构建命令</a>\n\n<strong>所有的构建命令都是通过`npm`脚本执行的，见`package.json//scripts`。<strong>\n\n```\nnpm run dev\n```\n在本地开发环境启动一个node.js服务器。\n- `webpack` + `vue-loader` 作用于vue的单文件组件\n- 状态保存，热加载\n- 使用`ESLint`检查js\n- 生成资源文件的sourcemap\n- ......\n\n```\nnpm run build\n```\n在生产环境中构建资源\n- 使用`UglifyJS v3`压缩JavaScript\n- 使用`html-minifier`压缩HTML\n- 使用`cssnano`将所有组件的CSS提取到一个文件中\n- 使用版本哈希编译所有的静态文件，以实现资源的持久缓存。为所有的资源自定生成合适的URL，最后注入到`index.html`中，完成整个工程的构建。\n\n```\nnpm run unit\n```\n- 使用Jest在JSDOM中运行单元测试\n\n```\nnpm run lint\n```\n- 运行ESLint并报告任何linting错误。\n\n> 更多构建命令请查阅相关资料\n\n#### <a name=\"Babel\">3. 配置Babel</a>\n\n> 详见我的[另外一篇文章](/2018/03/01/0809007/)\n\n`至此，通过vue-cli构建vue工程的基本过程已经结束，查看更多详细配置，`[请转](https://vuejs-templates.github.io/webpack/)","slug":"0809009_vue-cli快速构建vue-js项目","published":1,"updated":"2018-03-05T03:02:04.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qbt000i6cc0mors9g0l","content":"<ul>\n<li><a href=\"#Quickstart\">快速上手</a></li>\n<li><a href=\"#Commands\">构建命令</a></li>\n<li><a href=\"#Babel\">配置Babel</a></li>\n</ul>\n<h4 id=\"1-快速上手\"><a href=\"#1-快速上手\" class=\"headerlink\" title=\"1. 快速上手\"></a><a name=\"Quickstart\">1. 快速上手</a></h4><p>本文介绍如何使用vue-cli快速构建vus.js项目，主要用到<code>webpack</code>，以及<code>vue-loader</code>，所以确保你的环境中安装有webpack。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装vue-cli脚手架工具</span></span><br><span class=\"line\">$ npm install -g vue-cli</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 my-project 目录中生成一个项目</span></span><br><span class=\"line\"><span class=\"comment\"># 这一步中你还可以选择是否安装vue-router,ESLint,unit tests, e2e tests...</span></span><br><span class=\"line\">$ vue init webpack my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入到项目</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">$ npm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建并启动项目</span></span><br><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n<p>如果你在 <code>vue init webpack my-project</code> 步骤中选择安装所有的工具，那么我们的项目目录结构应该是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── build/                      # webpack config files</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── config/</span><br><span class=\"line\">│   ├── index.js                # main project config</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── src/</span><br><span class=\"line\">│   ├── main.js                 # app entry file</span><br><span class=\"line\">│   ├── App.vue                 # main app component</span><br><span class=\"line\">│   ├── components/             # ui components</span><br><span class=\"line\">│   │   └── ...</span><br><span class=\"line\">│   └── assets/                 # module assets (processed by webpack)</span><br><span class=\"line\">│       └── ...</span><br><span class=\"line\">├── static/                     # pure static assets (directly copied)</span><br><span class=\"line\">├── test/</span><br><span class=\"line\">│   └── unit/                   # unit tests</span><br><span class=\"line\">│   │   ├── specs/              # test spec files</span><br><span class=\"line\">│   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests</span><br><span class=\"line\">│   │   ├── index.js            # test build entry file</span><br><span class=\"line\">│   │   ├── jest.conf.js        # Config file when using Jest for unit tests</span><br><span class=\"line\">│   │   └── karma.conf.js       # test runner config file when using Karma for unit tests</span><br><span class=\"line\">│   │   ├── setup.js            # file that runs before Jest runs your unit tests</span><br><span class=\"line\">│   └── e2e/                    # e2e tests</span><br><span class=\"line\">│   │   ├── specs/              # test spec files</span><br><span class=\"line\">│   │   ├── custom-assertions/  # custom assertions for e2e tests</span><br><span class=\"line\">│   │   ├── runner.js           # test runner script</span><br><span class=\"line\">│   │   └── nightwatch.conf.js  # test runner config file</span><br><span class=\"line\">├── .babelrc                    # babel config</span><br><span class=\"line\">├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor</span><br><span class=\"line\">├── .eslintrc.js                # eslint config</span><br><span class=\"line\">├── .eslintignore               # eslint ignore rules</span><br><span class=\"line\">├── .gitignore                  # sensible defaults for gitignore</span><br><span class=\"line\">├── .postcssrc.js               # postcss config</span><br><span class=\"line\">├── index.html                  # index.html template</span><br><span class=\"line\">├── package.json                # build scripts and dependencies</span><br><span class=\"line\">└── README.md                   # Default README file</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>目录/文件介绍：</p>\n</blockquote>\n<ul>\n<li><p><code>build/</code>：该目录保存的是开发和生产环境中的webpack配置，一般情况下是不需要进行修改的；当需要自定义webpack配置时，可以从webpack.base.conf.js开始研究。</p>\n</li>\n<li><p><code>config/index.js</code>：这是项目构建时需要的一些最常用到的配置文件。</p>\n</li>\n<li><p><code>src/</code>：这里存放的就是我们的业务代码了，我们可以根据项目需要自行配置。</p>\n</li>\n<li><p><code>static/</code>：在这里，我们可以存放一些我们不希望webpack来处理的静态资源文件，在使用webpack来构建时，这里的文件将会直接复制到构建后的资源目录下。</p>\n</li>\n<li><p><code>test/unit</code>：单元测试相关文件。</p>\n</li>\n<li><p><code>test/e2e</code>：e2e测试相关文件。</p>\n</li>\n<li><p><code>index.html</code>：基于vue.js的SPA单页应用的入口HTML模板，在开发、构建过程中，webpack将生成很多资源文件，文件之间的URL会被自动的注入到该index.html中。</p>\n</li>\n<li><p><code>package.json</code>：npm包源文件，包含所有的构建依赖和构建命令。</p>\n</li>\n</ul>\n<h4 id=\"2-构建命令\"><a href=\"#2-构建命令\" class=\"headerlink\" title=\"2. 构建命令\"></a><a name=\"Commands\">2. 构建命令</a></h4><p><strong>所有的构建命令都是通过<code>npm</code>脚本执行的，见<code>package.json//scripts</code>。<strong></strong></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<p>在本地开发环境启动一个node.js服务器。</p>\n<ul>\n<li><code>webpack</code> + <code>vue-loader</code> 作用于vue的单文件组件</li>\n<li>状态保存，热加载</li>\n<li>使用<code>ESLint</code>检查js</li>\n<li>生成资源文件的sourcemap</li>\n<li>……</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p>在生产环境中构建资源</p>\n<ul>\n<li>使用<code>UglifyJS v3</code>压缩JavaScript</li>\n<li>使用<code>html-minifier</code>压缩HTML</li>\n<li>使用<code>cssnano</code>将所有组件的CSS提取到一个文件中</li>\n<li>使用版本哈希编译所有的静态文件，以实现资源的持久缓存。为所有的资源自定生成合适的URL，最后注入到<code>index.html</code>中，完成整个工程的构建。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run unit</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用Jest在JSDOM中运行单元测试</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run lint</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行ESLint并报告任何linting错误。</li>\n</ul>\n<blockquote>\n<p>更多构建命令请查阅相关资料</p>\n</blockquote>\n<h4 id=\"3-配置Babel\"><a href=\"#3-配置Babel\" class=\"headerlink\" title=\"3. 配置Babel\"></a><a name=\"Babel\">3. 配置Babel</a></h4><blockquote>\n<p>详见我的<a href=\"/2018/03/01/0809007/\">另外一篇文章</a></p>\n</blockquote>\n<p><code>至此，通过vue-cli构建vue工程的基本过程已经结束，查看更多详细配置，</code><a href=\"https://vuejs-templates.github.io/webpack/\" target=\"_blank\" rel=\"noopener\">请转</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"#Quickstart\">快速上手</a></li>\n<li><a href=\"#Commands\">构建命令</a></li>\n<li><a href=\"#Babel\">配置Babel</a></li>\n</ul>\n<h4 id=\"1-快速上手\"><a href=\"#1-快速上手\" class=\"headerlink\" title=\"1. 快速上手\"></a><a name=\"Quickstart\">1. 快速上手</a></h4><p>本文介绍如何使用vue-cli快速构建vus.js项目，主要用到<code>webpack</code>，以及<code>vue-loader</code>，所以确保你的环境中安装有webpack。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装vue-cli脚手架工具</span></span><br><span class=\"line\">$ npm install -g vue-cli</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 my-project 目录中生成一个项目</span></span><br><span class=\"line\"><span class=\"comment\"># 这一步中你还可以选择是否安装vue-router,ESLint,unit tests, e2e tests...</span></span><br><span class=\"line\">$ vue init webpack my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入到项目</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">$ npm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建并启动项目</span></span><br><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n<p>如果你在 <code>vue init webpack my-project</code> 步骤中选择安装所有的工具，那么我们的项目目录结构应该是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── build/                      # webpack config files</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── config/</span><br><span class=\"line\">│   ├── index.js                # main project config</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── src/</span><br><span class=\"line\">│   ├── main.js                 # app entry file</span><br><span class=\"line\">│   ├── App.vue                 # main app component</span><br><span class=\"line\">│   ├── components/             # ui components</span><br><span class=\"line\">│   │   └── ...</span><br><span class=\"line\">│   └── assets/                 # module assets (processed by webpack)</span><br><span class=\"line\">│       └── ...</span><br><span class=\"line\">├── static/                     # pure static assets (directly copied)</span><br><span class=\"line\">├── test/</span><br><span class=\"line\">│   └── unit/                   # unit tests</span><br><span class=\"line\">│   │   ├── specs/              # test spec files</span><br><span class=\"line\">│   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests</span><br><span class=\"line\">│   │   ├── index.js            # test build entry file</span><br><span class=\"line\">│   │   ├── jest.conf.js        # Config file when using Jest for unit tests</span><br><span class=\"line\">│   │   └── karma.conf.js       # test runner config file when using Karma for unit tests</span><br><span class=\"line\">│   │   ├── setup.js            # file that runs before Jest runs your unit tests</span><br><span class=\"line\">│   └── e2e/                    # e2e tests</span><br><span class=\"line\">│   │   ├── specs/              # test spec files</span><br><span class=\"line\">│   │   ├── custom-assertions/  # custom assertions for e2e tests</span><br><span class=\"line\">│   │   ├── runner.js           # test runner script</span><br><span class=\"line\">│   │   └── nightwatch.conf.js  # test runner config file</span><br><span class=\"line\">├── .babelrc                    # babel config</span><br><span class=\"line\">├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor</span><br><span class=\"line\">├── .eslintrc.js                # eslint config</span><br><span class=\"line\">├── .eslintignore               # eslint ignore rules</span><br><span class=\"line\">├── .gitignore                  # sensible defaults for gitignore</span><br><span class=\"line\">├── .postcssrc.js               # postcss config</span><br><span class=\"line\">├── index.html                  # index.html template</span><br><span class=\"line\">├── package.json                # build scripts and dependencies</span><br><span class=\"line\">└── README.md                   # Default README file</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>目录/文件介绍：</p>\n</blockquote>\n<ul>\n<li><p><code>build/</code>：该目录保存的是开发和生产环境中的webpack配置，一般情况下是不需要进行修改的；当需要自定义webpack配置时，可以从webpack.base.conf.js开始研究。</p>\n</li>\n<li><p><code>config/index.js</code>：这是项目构建时需要的一些最常用到的配置文件。</p>\n</li>\n<li><p><code>src/</code>：这里存放的就是我们的业务代码了，我们可以根据项目需要自行配置。</p>\n</li>\n<li><p><code>static/</code>：在这里，我们可以存放一些我们不希望webpack来处理的静态资源文件，在使用webpack来构建时，这里的文件将会直接复制到构建后的资源目录下。</p>\n</li>\n<li><p><code>test/unit</code>：单元测试相关文件。</p>\n</li>\n<li><p><code>test/e2e</code>：e2e测试相关文件。</p>\n</li>\n<li><p><code>index.html</code>：基于vue.js的SPA单页应用的入口HTML模板，在开发、构建过程中，webpack将生成很多资源文件，文件之间的URL会被自动的注入到该index.html中。</p>\n</li>\n<li><p><code>package.json</code>：npm包源文件，包含所有的构建依赖和构建命令。</p>\n</li>\n</ul>\n<h4 id=\"2-构建命令\"><a href=\"#2-构建命令\" class=\"headerlink\" title=\"2. 构建命令\"></a><a name=\"Commands\">2. 构建命令</a></h4><p><strong>所有的构建命令都是通过<code>npm</code>脚本执行的，见<code>package.json//scripts</code>。<strong></strong></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<p>在本地开发环境启动一个node.js服务器。</p>\n<ul>\n<li><code>webpack</code> + <code>vue-loader</code> 作用于vue的单文件组件</li>\n<li>状态保存，热加载</li>\n<li>使用<code>ESLint</code>检查js</li>\n<li>生成资源文件的sourcemap</li>\n<li>……</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p>在生产环境中构建资源</p>\n<ul>\n<li>使用<code>UglifyJS v3</code>压缩JavaScript</li>\n<li>使用<code>html-minifier</code>压缩HTML</li>\n<li>使用<code>cssnano</code>将所有组件的CSS提取到一个文件中</li>\n<li>使用版本哈希编译所有的静态文件，以实现资源的持久缓存。为所有的资源自定生成合适的URL，最后注入到<code>index.html</code>中，完成整个工程的构建。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run unit</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用Jest在JSDOM中运行单元测试</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run lint</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行ESLint并报告任何linting错误。</li>\n</ul>\n<blockquote>\n<p>更多构建命令请查阅相关资料</p>\n</blockquote>\n<h4 id=\"3-配置Babel\"><a href=\"#3-配置Babel\" class=\"headerlink\" title=\"3. 配置Babel\"></a><a name=\"Babel\">3. 配置Babel</a></h4><blockquote>\n<p>详见我的<a href=\"/2018/03/01/0809007/\">另外一篇文章</a></p>\n</blockquote>\n<p><code>至此，通过vue-cli构建vue工程的基本过程已经结束，查看更多详细配置，</code><a href=\"https://vuejs-templates.github.io/webpack/\" target=\"_blank\" rel=\"noopener\">请转</a></p>\n"},{"id":"0809011","title":"常用的GIT命令","date":"2018-03-02T08:08:25.000Z","_content":"","source":"_posts/0809011_常用的GIT命令.md","raw":"---\nid: 0809011\ntitle: 常用的GIT命令\ndate: 2018-03-02 16:08:25\ntags:\n    - GIT\ncategories:\n---\n","slug":"0809011_常用的GIT命令","published":1,"updated":"2018-03-05T03:02:42.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qbv000k6cc0zjk2u1i8","content":"","site":{"data":{}},"excerpt":"","more":""},{"id":"0809012","title":"常用的Vim命令","date":"2018-03-02T08:09:18.000Z","_content":"","source":"_posts/0809012_常用的Vim命令.md","raw":"---\nid: 0809012\ntitle: 常用的Vim命令\ndate: 2018-03-02 16:09:18\ntags:\n    - vim\ncategories:\n---\n","slug":"0809012_常用的Vim命令","published":1,"updated":"2018-03-05T03:06:13.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qbx000l6cc0w8udcbcw","content":"","site":{"data":{}},"excerpt":"","more":""},{"id":"0809014","title":"JavaScript类型检测","date":"2018-03-05T02:58:37.000Z","_content":"\n一个简单有用的js类型检测的方法：\n\n```javascript\nfunction checkType(sth) {\n    return Object.prototype.toString.call(o)\n    .match(/(\\w+)\\]$/)[1]\n    .toLowerCase();\n}\n\ncheckType({})               // object\ncheckType([])               // array\ncheckType(function(){})     // function\ncheckType(1)                // number\ncheckType(+'3')             // number\ncheckType(3+'')             // string\n```","source":"_posts/0809014_JavaScript类型检测.md","raw":"---\nid: 0809014\ntitle: JavaScript类型检测\ndate: 2018-03-05 10:58:37\ntags:\n    - JavaScript\ncategories:\n---\n\n一个简单有用的js类型检测的方法：\n\n```javascript\nfunction checkType(sth) {\n    return Object.prototype.toString.call(o)\n    .match(/(\\w+)\\]$/)[1]\n    .toLowerCase();\n}\n\ncheckType({})               // object\ncheckType([])               // array\ncheckType(function(){})     // function\ncheckType(1)                // number\ncheckType(+'3')             // number\ncheckType(3+'')             // string\n```","slug":"0809014_JavaScript类型检测","published":1,"updated":"2018-03-05T06:40:04.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qc0000m6cc0ff6rg11c","content":"<p>一个简单有用的js类型检测的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkType</span>(<span class=\"params\">sth</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o)</span><br><span class=\"line\">    .match(<span class=\"regexp\">/(\\w+)\\]$/</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    .toLowerCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkType(&#123;&#125;)               <span class=\"comment\">// object</span></span><br><span class=\"line\">checkType([])               <span class=\"comment\">// array</span></span><br><span class=\"line\">checkType(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)     <span class=\"comment\">// function</span></span><br><span class=\"line\">checkType(<span class=\"number\">1</span>)                <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(+<span class=\"string\">'3'</span>)             <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(<span class=\"number\">3</span>+<span class=\"string\">''</span>)             <span class=\"comment\">// string</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>一个简单有用的js类型检测的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkType</span>(<span class=\"params\">sth</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o)</span><br><span class=\"line\">    .match(<span class=\"regexp\">/(\\w+)\\]$/</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    .toLowerCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkType(&#123;&#125;)               <span class=\"comment\">// object</span></span><br><span class=\"line\">checkType([])               <span class=\"comment\">// array</span></span><br><span class=\"line\">checkType(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)     <span class=\"comment\">// function</span></span><br><span class=\"line\">checkType(<span class=\"number\">1</span>)                <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(+<span class=\"string\">'3'</span>)             <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(<span class=\"number\">3</span>+<span class=\"string\">''</span>)             <span class=\"comment\">// string</span></span><br></pre></td></tr></table></figure>"},{"id":"0809013","title":"常用的markdown语法","date":"2018-03-02T08:12:08.000Z","_content":"","source":"_posts/0809013_常用的markdown语法.md","raw":"---\nid: 0809013\ntitle: 常用的markdown语法\ndate: 2018-03-02 16:12:08\ntags:\n    - markdown\ncategories:\n---\n","slug":"0809013_常用的markdown语法","published":1,"updated":"2018-03-05T03:06:04.691Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qc3000p6cc009pgzt6p","content":"","site":{"data":{}},"excerpt":"","more":""},{"id":"0809015","title":"实时监听文本域输入","date":"2018-03-05T02:57:50.000Z","_content":"\n众所周知，使用 `onchange` 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， `onchange` 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用`keydown`和`keyup`外，我们还可以:\n- 使用 `onpropertychange`：\n\n```javascript\n<input type=\"text\" id=\"txt\">\n\n$(\"#ysy\").bind('input propertychange', function() {  \n    console.log(new Date().getTime()); \n});\n```\n- 使用 `oninput`：\n\n```javascript\ndocument.getElementById('txt').oninput = function(){\n    console.log(this.value);\n}\n```\n最后，总结一下`onchange, onpropertychange`和`oninput`之间的异同：\n1. `onchange`事件与`onpropertychange`事件的区别：`onchange`事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；`onpropertychange`事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。\n2. `oninput`事件与`onpropertychange`事件的区别：`oninput`事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；`onpropertychange`事件是任何属性改变都会触发的，而`oninput`却只在value改变时触发，`oninput`要通过`addEventListener()`来注册，`onpropertychange`注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）>\n3. `oninput`与`onpropertychange`失效的情况：  （1）`oninput`事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）`onpropertychange`事件：当input设置为`disable=true`后，onpropertychange不会触发。\n---","source":"_posts/0809015_实时监听文本域输入.md","raw":"---\nid: 0809015\ntitle: 实时监听文本域输入\ndate: 2018-03-05 10:57:50\ntags:\n    - JavaScript\ncategories:\n---\n\n众所周知，使用 `onchange` 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， `onchange` 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用`keydown`和`keyup`外，我们还可以:\n- 使用 `onpropertychange`：\n\n```javascript\n<input type=\"text\" id=\"txt\">\n\n$(\"#ysy\").bind('input propertychange', function() {  \n    console.log(new Date().getTime()); \n});\n```\n- 使用 `oninput`：\n\n```javascript\ndocument.getElementById('txt').oninput = function(){\n    console.log(this.value);\n}\n```\n最后，总结一下`onchange, onpropertychange`和`oninput`之间的异同：\n1. `onchange`事件与`onpropertychange`事件的区别：`onchange`事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；`onpropertychange`事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。\n2. `oninput`事件与`onpropertychange`事件的区别：`oninput`事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；`onpropertychange`事件是任何属性改变都会触发的，而`oninput`却只在value改变时触发，`oninput`要通过`addEventListener()`来注册，`onpropertychange`注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）>\n3. `oninput`与`onpropertychange`失效的情况：  （1）`oninput`事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）`onpropertychange`事件：当input设置为`disable=true`后，onpropertychange不会触发。\n---","slug":"0809015_实时监听文本域输入","published":1,"updated":"2018-03-05T06:35:51.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qc5000r6cc03jo0wayk","content":"<p>众所周知，使用 <code>onchange</code> 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， <code>onchange</code> 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用<code>keydown</code>和<code>keyup</code>外，我们还可以:</p>\n<ul>\n<li>使用 <code>onpropertychange</code>：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"txt\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">\"#ysy\"</span>).bind(<span class=\"string\">'input propertychange'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 <code>oninput</code>：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'txt'</span>).oninput = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，总结一下<code>onchange, onpropertychange</code>和<code>oninput</code>之间的异同：</p>\n<ol>\n<li><code>onchange</code>事件与<code>onpropertychange</code>事件的区别：<code>onchange</code>事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；<code>onpropertychange</code>事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。</li>\n<li><code>oninput</code>事件与<code>onpropertychange</code>事件的区别：<code>oninput</code>事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；<code>onpropertychange</code>事件是任何属性改变都会触发的，而<code>oninput</code>却只在value改变时触发，<code>oninput</code>要通过<code>addEventListener()</code>来注册，<code>onpropertychange</code>注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）&gt;</li>\n<li><code>oninput</code>与<code>onpropertychange</code>失效的情况：  （1）<code>oninput</code>事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）<code>onpropertychange</code>事件：当input设置为<code>disable=true</code>后，onpropertychange不会触发。</li>\n</ol>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p>众所周知，使用 <code>onchange</code> 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， <code>onchange</code> 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用<code>keydown</code>和<code>keyup</code>外，我们还可以:</p>\n<ul>\n<li>使用 <code>onpropertychange</code>：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"txt\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">\"#ysy\"</span>).bind(<span class=\"string\">'input propertychange'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 <code>oninput</code>：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'txt'</span>).oninput = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，总结一下<code>onchange, onpropertychange</code>和<code>oninput</code>之间的异同：</p>\n<ol>\n<li><code>onchange</code>事件与<code>onpropertychange</code>事件的区别：<code>onchange</code>事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；<code>onpropertychange</code>事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。</li>\n<li><code>oninput</code>事件与<code>onpropertychange</code>事件的区别：<code>oninput</code>事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；<code>onpropertychange</code>事件是任何属性改变都会触发的，而<code>oninput</code>却只在value改变时触发，<code>oninput</code>要通过<code>addEventListener()</code>来注册，<code>onpropertychange</code>注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）&gt;</li>\n<li><code>oninput</code>与<code>onpropertychange</code>失效的情况：  （1）<code>oninput</code>事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）<code>onpropertychange</code>事件：当input设置为<code>disable=true</code>后，onpropertychange不会触发。</li>\n</ol>\n<hr>\n"},{"id":"0809016","title":"获取JSON的key","date":"2018-03-05T02:56:54.000Z","_content":"\n```javascript\nvar obj = { name: \"naruto\", age: 23, dad: \"minato\"}\n\n```\n- 使用 `for in` 来循环：\n\n```javascript\nfor (var key in obj){\n    console.log(key) // 依次输出 \"name\", \"age\", \"dad\"\n}\n```\n这种方法比较常见，相信大家看到这个问题时第一时间都会想到吧，但是我要介绍的是下面这个更简单的方法。\n- 使用 `Object.keys()` 来获取 :\n\n```javascript\n- console.log( Object.keys(obj) ) // 输出一个数组 [\"name\", \"age\", \"dad\"]\n// 所以, 当我们需要某个key值时可以从当前数组中取得。\n```\n","source":"_posts/0809016_获取JSON的key.md","raw":"---\nid: 0809016\ntitle: 获取JSON的key\ndate: 2018-03-05 10:56:54\ntags:\n    - json\n    - JavaScript\ncategories:\n---\n\n```javascript\nvar obj = { name: \"naruto\", age: 23, dad: \"minato\"}\n\n```\n- 使用 `for in` 来循环：\n\n```javascript\nfor (var key in obj){\n    console.log(key) // 依次输出 \"name\", \"age\", \"dad\"\n}\n```\n这种方法比较常见，相信大家看到这个问题时第一时间都会想到吧，但是我要介绍的是下面这个更简单的方法。\n- 使用 `Object.keys()` 来获取 :\n\n```javascript\n- console.log( Object.keys(obj) ) // 输出一个数组 [\"name\", \"age\", \"dad\"]\n// 所以, 当我们需要某个key值时可以从当前数组中取得。\n```\n","slug":"0809016_获取JSON的key","published":1,"updated":"2018-03-05T06:33:56.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qc8000u6cc0tzbb7728","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"naruto\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">23</span>, <span class=\"attr\">dad</span>: <span class=\"string\">\"minato\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 <code>for in</code> 来循环：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key) <span class=\"comment\">// 依次输出 \"name\", \"age\", \"dad\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法比较常见，相信大家看到这个问题时第一时间都会想到吧，但是我要介绍的是下面这个更简单的方法。</p>\n<ul>\n<li>使用 <code>Object.keys()</code> 来获取 :</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"built_in\">console</span>.log( <span class=\"built_in\">Object</span>.keys(obj) ) <span class=\"comment\">// 输出一个数组 [\"name\", \"age\", \"dad\"]</span></span><br><span class=\"line\"><span class=\"comment\">// 所以, 当我们需要某个key值时可以从当前数组中取得。</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"naruto\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">23</span>, <span class=\"attr\">dad</span>: <span class=\"string\">\"minato\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 <code>for in</code> 来循环：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key) <span class=\"comment\">// 依次输出 \"name\", \"age\", \"dad\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法比较常见，相信大家看到这个问题时第一时间都会想到吧，但是我要介绍的是下面这个更简单的方法。</p>\n<ul>\n<li>使用 <code>Object.keys()</code> 来获取 :</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"built_in\">console</span>.log( <span class=\"built_in\">Object</span>.keys(obj) ) <span class=\"comment\">// 输出一个数组 [\"name\", \"age\", \"dad\"]</span></span><br><span class=\"line\"><span class=\"comment\">// 所以, 当我们需要某个key值时可以从当前数组中取得。</span></span><br></pre></td></tr></table></figure>\n"},{"id":"0809018","title":"在hexo中配置swiftype搜索平台","date":"2018-03-05T09:23:37.000Z","_content":"\n","source":"_posts/0809018_在hexo中配置swiftype搜索平台.md","raw":"---\nid: 0809018\ntitle: 在hexo中配置swiftype搜索平台\ndate: 2018-03-05 17:23:37\ntags:\n    - swiftype\n    - JavaScript\ncategories:\n---\n\n","slug":"0809018_在hexo中配置swiftype搜索平台","published":1,"updated":"2018-03-05T09:31:59.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qcb000w6cc0s3uyeytj","content":"","site":{"data":{}},"excerpt":"","more":""},{"id":"0809017","title":"ajax请求之axios","date":"2018-03-05T02:23:18.000Z","_content":"","source":"_posts/0809017_ajax请求之axios.md","raw":"---\nid: 0809017\ntitle: ajax请求之axios\ndate: 2018-03-05 10:23:18\ntags:\n    - ES6\n    - ajax\n    - Promise\ncategories:\n---\n","slug":"0809017_ajax请求之axios","published":1,"updated":"2018-03-05T03:05:51.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qch000y6cc0zc9czdc5","content":"","site":{"data":{}},"excerpt":"","more":""},{"id":"0809019","title":"搭建一个基于hexo的个人博客","date":"2018-03-05T09:26:49.000Z","_content":"","source":"_posts/0809019_搭建一个基于hexo的个人博客.md","raw":"---\nid: 0809019\ntitle: 搭建一个基于hexo的个人博客\ndate: 2018-03-05 17:26:49\ntags:\n    - hexo\ncategories:\n---\n","slug":"0809019_搭建一个基于hexo的个人博客","published":1,"updated":"2018-03-05T09:32:16.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qcj000z6cc014e792rb","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjee12qao00006cc07m4ykz4b","tag_id":"cjee12qb000036cc0c9bn38p3","_id":"cjee12qbc00086cc0c0q79hkl"},{"post_id":"cjee12qaw00026cc0uehmotwm","tag_id":"cjee12qba00076cc0cg02pvgw","_id":"cjee12qbm000d6cc06db9a3q9"},{"post_id":"cjee12qb400046cc0iyqzsr68","tag_id":"cjee12qbh000b6cc0q9ddpnj4","_id":"cjee12qbs000h6cc06kd05mb6"},{"post_id":"cjee12qb600056cc0wpr4w404","tag_id":"cjee12qbq000f6cc0ie0vla0k","_id":"cjee12qc2000o6cc0ja5pjhpn"},{"post_id":"cjee12qb600056cc0wpr4w404","tag_id":"cjee12qbu000j6cc05ew5op7v","_id":"cjee12qc5000q6cc0m2ytret1"},{"post_id":"cjee12qc0000m6cc0ff6rg11c","tag_id":"cjee12qbq000f6cc0ie0vla0k","_id":"cjee12qc8000t6cc0dfdl0ad9"},{"post_id":"cjee12qc5000r6cc03jo0wayk","tag_id":"cjee12qbq000f6cc0ie0vla0k","_id":"cjee12qca000v6cc01k4kj1nm"},{"post_id":"cjee12qb900066cc0uru35ej7","tag_id":"cjee12qc2000n6cc0737bwd0w","_id":"cjee12qd100116cc0l597yogt"},{"post_id":"cjee12qb900066cc0uru35ej7","tag_id":"cjee12qc7000s6cc0nxsh3ui1","_id":"cjee12qd200126cc0io1bz5vz"},{"post_id":"cjee12qb900066cc0uru35ej7","tag_id":"cjee12qcf000x6cc003sw0a37","_id":"cjee12qd400146cc020mqcudi"},{"post_id":"cjee12qbd00096cc0lhe7ql5c","tag_id":"cjee12qbq000f6cc0ie0vla0k","_id":"cjee12qd700166cc0gm7gah98"},{"post_id":"cjee12qbd00096cc0lhe7ql5c","tag_id":"cjee12qd300136cc0vgdwkiwe","_id":"cjee12qd700176cc0iriadbd9"},{"post_id":"cjee12qbf000a6cc0f19b03hs","tag_id":"cjee12qd500156cc08w0jpd7d","_id":"cjee12qdb001b6cc06ut2wka6"},{"post_id":"cjee12qbf000a6cc0f19b03hs","tag_id":"cjee12qd800186cc0gktta0xu","_id":"cjee12qdb001c6cc07g0v8ya5"},{"post_id":"cjee12qbf000a6cc0f19b03hs","tag_id":"cjee12qbq000f6cc0ie0vla0k","_id":"cjee12qdd001e6cc0cew3u8g7"},{"post_id":"cjee12qbi000c6cc0vfv07avq","tag_id":"cjee12qbq000f6cc0ie0vla0k","_id":"cjee12qde001f6cc018y3vf2n"},{"post_id":"cjee12qbn000e6cc0a7h1wmwa","tag_id":"cjee12qbq000f6cc0ie0vla0k","_id":"cjee12qdf001h6cc0brjciz7y"},{"post_id":"cjee12qbr000g6cc05gy9w0j7","tag_id":"cjee12qde001g6cc0530fw8j4","_id":"cjee12qdh001k6cc0qgfcmx8k"},{"post_id":"cjee12qbr000g6cc05gy9w0j7","tag_id":"cjee12qdg001i6cc0frxbygp7","_id":"cjee12qdi001l6cc090deoy8f"},{"post_id":"cjee12qbt000i6cc0mors9g0l","tag_id":"cjee12qdh001j6cc0wp74h16z","_id":"cjee12qdm001p6cc044lgi5bq"},{"post_id":"cjee12qbt000i6cc0mors9g0l","tag_id":"cjee12qdi001m6cc0ogxmtixx","_id":"cjee12qdn001q6cc00770ondh"},{"post_id":"cjee12qbt000i6cc0mors9g0l","tag_id":"cjee12qbq000f6cc0ie0vla0k","_id":"cjee12qdo001s6cc0xt2egpma"},{"post_id":"cjee12qbt000i6cc0mors9g0l","tag_id":"cjee12qd800186cc0gktta0xu","_id":"cjee12qdp001t6cc00653ycdv"},{"post_id":"cjee12qbv000k6cc0zjk2u1i8","tag_id":"cjee12qdk001o6cc0d0rrm6j3","_id":"cjee12qdr001v6cc0q0orzbt7"},{"post_id":"cjee12qbx000l6cc0w8udcbcw","tag_id":"cjee12qdo001r6cc0meauxd1m","_id":"cjee12qdr001w6cc0xhjk1gxc"},{"post_id":"cjee12qc3000p6cc009pgzt6p","tag_id":"cjee12qdq001u6cc0j3u1moll","_id":"cjee12qdt001y6cc0gqocu41h"},{"post_id":"cjee12qc8000u6cc0tzbb7728","tag_id":"cjee12qds001x6cc08hdaeame","_id":"cjee12qdw00206cc00g1qej0y"},{"post_id":"cjee12qc8000u6cc0tzbb7728","tag_id":"cjee12qbq000f6cc0ie0vla0k","_id":"cjee12qdx00216cc0r6j7ndzc"},{"post_id":"cjee12qcb000w6cc0s3uyeytj","tag_id":"cjee12qdv001z6cc0zr2ud9s8","_id":"cjee12qdz00236cc00pse4sjf"},{"post_id":"cjee12qcb000w6cc0s3uyeytj","tag_id":"cjee12qbq000f6cc0ie0vla0k","_id":"cjee12qdz00246cc0gpvkdetv"},{"post_id":"cjee12qch000y6cc0zc9czdc5","tag_id":"cjee12qdx00226cc04yrrwf4x","_id":"cjee12qe300286cc00iupvp22"},{"post_id":"cjee12qch000y6cc0zc9czdc5","tag_id":"cjee12qe000256cc0e9awjrpt","_id":"cjee12qe500296cc0ysqd579p"},{"post_id":"cjee12qch000y6cc0zc9czdc5","tag_id":"cjee12qe100266cc0c9qnoktd","_id":"cjee12qe6002a6cc0gyha54oy"},{"post_id":"cjee12qcj000z6cc014e792rb","tag_id":"cjee12qe200276cc0pysbuf20","_id":"cjee12qe7002b6cc0m6l0m08l"}],"Tag":[{"name":"HTML","_id":"cjee12qb000036cc0c9bn38p3"},{"name":"CSS3","_id":"cjee12qba00076cc0cg02pvgw"},{"name":"test","_id":"cjee12qbh000b6cc0q9ddpnj4"},{"name":"JavaScript","_id":"cjee12qbq000f6cc0ie0vla0k"},{"name":"livere","_id":"cjee12qbu000j6cc05ew5op7v"},{"name":"HTML5","_id":"cjee12qc2000n6cc0737bwd0w"},{"name":"sessionStorage","_id":"cjee12qc7000s6cc0nxsh3ui1"},{"name":"localStorage","_id":"cjee12qcf000x6cc003sw0a37"},{"name":"JSON","_id":"cjee12qd300136cc0vgdwkiwe"},{"name":"Babel","_id":"cjee12qd500156cc08w0jpd7d"},{"name":"es6","_id":"cjee12qd800186cc0gktta0xu"},{"name":"Node.js","_id":"cjee12qde001g6cc0530fw8j4"},{"name":"Express","_id":"cjee12qdg001i6cc0frxbygp7"},{"name":"vue.js","_id":"cjee12qdh001j6cc0wp74h16z"},{"name":"webpack","_id":"cjee12qdi001m6cc0ogxmtixx"},{"name":"GIT","_id":"cjee12qdk001o6cc0d0rrm6j3"},{"name":"vim","_id":"cjee12qdo001r6cc0meauxd1m"},{"name":"markdown","_id":"cjee12qdq001u6cc0j3u1moll"},{"name":"json","_id":"cjee12qds001x6cc08hdaeame"},{"name":"swiftype","_id":"cjee12qdv001z6cc0zr2ud9s8"},{"name":"ES6","_id":"cjee12qdx00226cc04yrrwf4x"},{"name":"ajax","_id":"cjee12qe000256cc0e9awjrpt"},{"name":"Promise","_id":"cjee12qe100266cc0c9qnoktd"},{"name":"hexo","_id":"cjee12qe200276cc0pysbuf20"}]}}