{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yvshare/source/css/viewer.min.css","path":"css/viewer.min.css","modified":0,"renderable":1},{"_id":"themes/yvshare/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/yvshare/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/css3media.gif","path":"images/css3media.gif","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/github4.png","path":"images/github4.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/yvshare/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/livere2.png","path":"images/livere2.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/localstorage.png","path":"images/localstorage.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/livere3.png","path":"images/livere3.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/logo@2x.png","path":"images/logo@2x.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/css/blog_basic.css","path":"css/blog_basic.css","modified":1,"renderable":1},{"_id":"themes/yvshare/source/js/jquery.appear.js","path":"js/jquery.appear.js","modified":0,"renderable":1},{"_id":"themes/yvshare/source/js/livere.js","path":"js/livere.js","modified":0,"renderable":1},{"_id":"themes/yvshare/source/js/jquery-migrate-1.2.1.min.js","path":"js/jquery-migrate-1.2.1.min.js","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/actionscript.svg","path":"icons/actionscript.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/android.svg","path":"icons/android.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-component.svg","path":"icons/angular-component.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-guard.svg","path":"icons/angular-guard.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-directive.svg","path":"icons/angular-directive.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-pipe.svg","path":"icons/angular-pipe.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-resolver.svg","path":"icons/angular-resolver.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-routing.svg","path":"icons/angular-routing.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-service.svg","path":"icons/angular-service.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/angular.svg","path":"icons/angular.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/js/viewer.min.js","path":"js/viewer.min.js","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/apiblueprint.svg","path":"icons/apiblueprint.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/appveyor.svg","path":"icons/appveyor.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/applescript.svg","path":"icons/applescript.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/arduino.svg","path":"icons/arduino.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/audio.svg","path":"icons/audio.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/autohotkey.svg","path":"icons/autohotkey.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/assembly.svg","path":"icons/assembly.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/aurelia.svg","path":"icons/aurelia.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/autoit.svg","path":"icons/autoit.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/babel.svg","path":"icons/babel.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/bithound.svg","path":"icons/bithound.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/vim.png","path":"images/vim.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/blink.svg","path":"icons/blink.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/blink_light.svg","path":"icons/blink_light.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/browserlist_light.svg","path":"icons/browserlist_light.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/bucklescript.svg","path":"icons/bucklescript.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/c.svg","path":"icons/c.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/bower.svg","path":"icons/bower.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/browserlist.svg","path":"icons/browserlist.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/certificate.svg","path":"icons/certificate.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/cabal.svg","path":"icons/cabal.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/changelog.svg","path":"icons/changelog.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/cake.svg","path":"icons/cake.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/cmake.svg","path":"icons/cmake.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/clojure.svg","path":"icons/clojure.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/code-climate_light.svg","path":"icons/code-climate_light.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/code-climate.svg","path":"icons/code-climate.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/coffee.svg","path":"icons/coffee.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/conduct.svg","path":"icons/conduct.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/circleci.svg","path":"icons/circleci.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/console.svg","path":"icons/console.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/circleci_light.svg","path":"icons/circleci_light.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/contributing.svg","path":"icons/contributing.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/credits.svg","path":"icons/credits.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/cloudfoundry.svg","path":"icons/cloudfoundry.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/crystal_light.svg","path":"icons/crystal_light.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/cpp.svg","path":"icons/cpp.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/coldfusion.svg","path":"icons/coldfusion.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/csharp.svg","path":"icons/csharp.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/crystal.svg","path":"icons/crystal.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/css.svg","path":"icons/css.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/css-map.svg","path":"icons/css-map.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/cucumber.svg","path":"icons/cucumber.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/cuda.svg","path":"icons/cuda.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/dart.svg","path":"icons/dart.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/database.svg","path":"icons/database.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/dotjs.svg","path":"icons/dotjs.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/document.svg","path":"icons/document.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/drone_light.svg","path":"icons/drone_light.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/drone.svg","path":"icons/drone.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/docker.svg","path":"icons/docker.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/diff.svg","path":"icons/diff.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/elixir.svg","path":"icons/elixir.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/ejs.svg","path":"icons/ejs.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/editorconfig.svg","path":"icons/editorconfig.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/elm.svg","path":"icons/elm.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/exe.svg","path":"icons/exe.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/favicon.svg","path":"icons/favicon.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/email.svg","path":"icons/email.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/file.svg","path":"icons/file.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/firebase.svg","path":"icons/firebase.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/eslint.svg","path":"icons/eslint.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/erlang.svg","path":"icons/erlang.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/flash.svg","path":"icons/flash.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/flow.svg","path":"icons/flow.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-audio-open.svg","path":"icons/folder-audio-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-aws.svg","path":"icons/folder-aws.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-aws-open.svg","path":"icons/folder-aws-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-aurelia-open.svg","path":"icons/folder-aurelia-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-audio.svg","path":"icons/folder-audio.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-aurelia.svg","path":"icons/folder-aurelia.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-circleci-open.svg","path":"icons/folder-circleci-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-components.svg","path":"icons/folder-components.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-bower-open.svg","path":"icons/folder-bower-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-circleci.svg","path":"icons/folder-circleci.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-coverage-open.svg","path":"icons/folder-coverage-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-components-open.svg","path":"icons/folder-components-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-coverage.svg","path":"icons/folder-coverage.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-css-open.svg","path":"icons/folder-css-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-bower.svg","path":"icons/folder-bower.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-css.svg","path":"icons/folder-css.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-config-open.svg","path":"icons/folder-config-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-config.svg","path":"icons/folder-config.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-database-open.svg","path":"icons/folder-database-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-database.svg","path":"icons/folder-database.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-dist-open.svg","path":"icons/folder-dist-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-docs-open.svg","path":"icons/folder-docs-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-dist.svg","path":"icons/folder-dist.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-docker-open.svg","path":"icons/folder-docker-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-docker.svg","path":"icons/folder-docker.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-expo-open.svg","path":"icons/folder-expo-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-docs.svg","path":"icons/folder-docs.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-export-open.svg","path":"icons/folder-export-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-export.svg","path":"icons/folder-export.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-font.svg","path":"icons/folder-font.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-expo.svg","path":"icons/folder-expo.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-git.svg","path":"icons/folder-git.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-font-open.svg","path":"icons/folder-font-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-git-open.svg","path":"icons/folder-git-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-gitlab.svg","path":"icons/folder-gitlab.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-github.svg","path":"icons/folder-github.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-gitlab-open.svg","path":"icons/folder-gitlab-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-global-open.svg","path":"icons/folder-global-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-github-open.svg","path":"icons/folder-github-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-gradle-open.svg","path":"icons/folder-gradle-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-global.svg","path":"icons/folder-global.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-images.svg","path":"icons/folder-images.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-import-open.svg","path":"icons/folder-import-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-import.svg","path":"icons/folder-import.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-include-open.svg","path":"icons/folder-include-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-include.svg","path":"icons/folder-include.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-gradle.svg","path":"icons/folder-gradle.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-i18n.svg","path":"icons/folder-i18n.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-i18n-open.svg","path":"icons/folder-i18n-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-javascript-open.svg","path":"icons/folder-javascript-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-javascript.svg","path":"icons/folder-javascript.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-jinja-open.svg","path":"icons/folder-jinja-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-jinja-open_light.svg","path":"icons/folder-jinja-open_light.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-jinja_light.svg","path":"icons/folder-jinja_light.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-jinja.svg","path":"icons/folder-jinja.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-kubernetes-open.svg","path":"icons/folder-kubernetes-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-kubernetes.svg","path":"icons/folder-kubernetes.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-lib-open.svg","path":"icons/folder-lib-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-lib.svg","path":"icons/folder-lib.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-markdown.svg","path":"icons/folder-markdown.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-log-open.svg","path":"icons/folder-log-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-markdown-open.svg","path":"icons/folder-markdown-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-log.svg","path":"icons/folder-log.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-actions-open.svg","path":"icons/folder-ngrx-actions-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-effects-open.svg","path":"icons/folder-ngrx-effects-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-actions.svg","path":"icons/folder-ngrx-actions.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-effects.svg","path":"icons/folder-ngrx-effects.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-entities-open.svg","path":"icons/folder-ngrx-entities-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-entities.svg","path":"icons/folder-ngrx-entities.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-reducer-open.svg","path":"icons/folder-ngrx-reducer-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-reducer.svg","path":"icons/folder-ngrx-reducer.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-state-open.svg","path":"icons/folder-ngrx-state-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-images-open.svg","path":"icons/folder-images-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-state.svg","path":"icons/folder-ngrx-state.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-node.svg","path":"icons/folder-node.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-node-open.svg","path":"icons/folder-node-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-other-open.svg","path":"icons/folder-other-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-other.svg","path":"icons/folder-other.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-php-open.svg","path":"icons/folder-php-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-php.svg","path":"icons/folder-php.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-phpmailer.svg","path":"icons/folder-phpmailer.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-phpmailer-open.svg","path":"icons/folder-phpmailer-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-public-open.svg","path":"icons/folder-public-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-public.svg","path":"icons/folder-public.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-actions-open.svg","path":"icons/folder-redux-actions-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-react-components.svg","path":"icons/folder-react-components.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-react-components-open.svg","path":"icons/folder-react-components-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-reducer.svg","path":"icons/folder-redux-reducer.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-actions.svg","path":"icons/folder-redux-actions.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-store-open.svg","path":"icons/folder-redux-store-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-reducer-open.svg","path":"icons/folder-redux-reducer-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-store.svg","path":"icons/folder-redux-store.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-resource-open.svg","path":"icons/folder-resource-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-resource.svg","path":"icons/folder-resource.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-sass.svg","path":"icons/folder-sass.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-scripts-open.svg","path":"icons/folder-scripts-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-scripts.svg","path":"icons/folder-scripts.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-sass-open.svg","path":"icons/folder-sass-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-src-open.svg","path":"icons/folder-src-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-sublime.svg","path":"icons/folder-sublime.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-src.svg","path":"icons/folder-src.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-sublime-open.svg","path":"icons/folder-sublime-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-temp.svg","path":"icons/folder-temp.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-temp-open.svg","path":"icons/folder-temp-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-tools-open.svg","path":"icons/folder-tools-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-test-open.svg","path":"icons/folder-test-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-test.svg","path":"icons/folder-test.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-tools.svg","path":"icons/folder-tools.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-typescript.svg","path":"icons/folder-typescript.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-typescript-open.svg","path":"icons/folder-typescript-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-video.svg","path":"icons/folder-video.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-video-open.svg","path":"icons/folder-video-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-views-open.svg","path":"icons/folder-views-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-views.svg","path":"icons/folder-views.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-vscode.svg","path":"icons/folder-vscode.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-vue.svg","path":"icons/folder-vue.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-vue-open.svg","path":"icons/folder-vue-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-vscode-open.svg","path":"icons/folder-vscode-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-wakatime-open.svg","path":"icons/folder-wakatime-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-webpack-open.svg","path":"icons/folder-webpack-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-wakatime.svg","path":"icons/folder-wakatime.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-webpack.svg","path":"icons/folder-webpack.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/font.svg","path":"icons/font.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/fsharp.svg","path":"icons/fsharp.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/fusebox.svg","path":"icons/fusebox.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-wordpress-open.svg","path":"icons/folder-wordpress-open.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-wordpress.svg","path":"icons/folder-wordpress.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/git.svg","path":"icons/git.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/gatsby.svg","path":"icons/gatsby.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/go.svg","path":"icons/go.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/gradle.svg","path":"icons/gradle.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/gitlab.svg","path":"icons/gitlab.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/h.svg","path":"icons/h.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/graphcool.svg","path":"icons/graphcool.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/gulp.svg","path":"icons/gulp.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/haml.svg","path":"icons/haml.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/hack.svg","path":"icons/hack.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/groovy.svg","path":"icons/groovy.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/graphql.svg","path":"icons/graphql.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/haskell.svg","path":"icons/haskell.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/hpp.svg","path":"icons/hpp.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/heroku.svg","path":"icons/heroku.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/http.svg","path":"icons/http.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/haxe.svg","path":"icons/haxe.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/handlebars.svg","path":"icons/handlebars.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/image.svg","path":"icons/image.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/html.svg","path":"icons/html.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/javascript.svg","path":"icons/javascript.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/java.svg","path":"icons/java.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/ionic.svg","path":"icons/ionic.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/javascript-map.svg","path":"icons/javascript-map.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/jinja.svg","path":"icons/jinja.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/jinja_light.svg","path":"icons/jinja_light.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/julia.svg","path":"icons/julia.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/karma.svg","path":"icons/karma.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/key.svg","path":"icons/key.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/json.svg","path":"icons/json.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/jenkins.svg","path":"icons/jenkins.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/kl.svg","path":"icons/kl.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/kotlin.svg","path":"icons/kotlin.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/lib.svg","path":"icons/lib.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/kivy.svg","path":"icons/kivy.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/lock.svg","path":"icons/lock.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/log.svg","path":"icons/log.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/markdown.svg","path":"icons/markdown.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/laravel.svg","path":"icons/laravel.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/lua.svg","path":"icons/lua.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/less.svg","path":"icons/less.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/livescript.svg","path":"icons/livescript.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/markojs.svg","path":"icons/markojs.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/merlin.svg","path":"icons/merlin.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/mocha.svg","path":"icons/mocha.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/ngrx-actions.svg","path":"icons/ngrx-actions.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/ngrx-entity.svg","path":"icons/ngrx-entity.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/mxml.svg","path":"icons/mxml.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/mathematica.svg","path":"icons/mathematica.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/matlab.svg","path":"icons/matlab.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/ngrx-effects.svg","path":"icons/ngrx-effects.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/ngrx-reducer.svg","path":"icons/ngrx-reducer.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/mjml.svg","path":"icons/mjml.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/ngrx-state.svg","path":"icons/ngrx-state.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/nodejs.svg","path":"icons/nodejs.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/nix.svg","path":"icons/nix.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/nodemon.svg","path":"icons/nodemon.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/nunjucks.svg","path":"icons/nunjucks.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/nim.svg","path":"icons/nim.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/perl.svg","path":"icons/perl.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/ocaml.svg","path":"icons/ocaml.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/php.svg","path":"icons/php.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/pdf.svg","path":"icons/pdf.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/powerpoint.svg","path":"icons/powerpoint.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/php_elephant.svg","path":"icons/php_elephant.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/protractor.svg","path":"icons/protractor.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/prettier.svg","path":"icons/prettier.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/npm.svg","path":"icons/npm.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/postcss.svg","path":"icons/postcss.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/puppet.svg","path":"icons/puppet.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/powershell.svg","path":"icons/powershell.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/pug.svg","path":"icons/pug.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/python.svg","path":"icons/python.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/purescript.svg","path":"icons/purescript.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/r.svg","path":"icons/r.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/readme.svg","path":"icons/readme.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/razor.svg","path":"icons/razor.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/restql.svg","path":"icons/restql.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/rollup.svg","path":"icons/rollup.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/raml.svg","path":"icons/raml.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/reason.svg","path":"icons/reason.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/react.svg","path":"icons/react.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/riot.svg","path":"icons/riot.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/ruby.svg","path":"icons/ruby.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/rust.svg","path":"icons/rust.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/scala.svg","path":"icons/scala.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/settings.svg","path":"icons/settings.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/sequelize.svg","path":"icons/sequelize.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/robot.svg","path":"icons/robot.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/shaderlab.svg","path":"icons/shaderlab.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/slim.svg","path":"icons/slim.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/solidity.svg","path":"icons/solidity.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/sass.svg","path":"icons/sass.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/sbt.svg","path":"icons/sbt.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/smarty.svg","path":"icons/smarty.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/snyk.svg","path":"icons/snyk.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/sonar.svg","path":"icons/sonar.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/stylelint.svg","path":"icons/stylelint.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/table.svg","path":"icons/table.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/sublime.svg","path":"icons/sublime.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/stylelint_light.svg","path":"icons/stylelint_light.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/stylus.svg","path":"icons/stylus.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/test-jsx.svg","path":"icons/test-jsx.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/terraform.svg","path":"icons/terraform.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/test-js.svg","path":"icons/test-js.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/todo.svg","path":"icons/todo.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/swc.svg","path":"icons/swc.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/swift.svg","path":"icons/swift.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/test-ts.svg","path":"icons/test-ts.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/tex.svg","path":"icons/tex.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/tune.svg","path":"icons/tune.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/twig.svg","path":"icons/twig.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/verilog.svg","path":"icons/verilog.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/url.svg","path":"icons/url.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/typescript-def.svg","path":"icons/typescript-def.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/typescript.svg","path":"icons/typescript.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/video.svg","path":"icons/video.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/visualstudio.svg","path":"icons/visualstudio.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/virtual.svg","path":"icons/virtual.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/vscode.svg","path":"icons/vscode.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/vue.svg","path":"icons/vue.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/travis.svg","path":"icons/travis.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/wakatime.svg","path":"icons/wakatime.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/vfl.svg","path":"icons/vfl.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/wakatime_light.svg","path":"icons/wakatime_light.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/xaml.svg","path":"icons/xaml.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/word.svg","path":"icons/word.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/watchman.svg","path":"icons/watchman.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/xml.svg","path":"icons/xml.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/webpack.svg","path":"icons/webpack.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/wolframlanguage.svg","path":"icons/wolframlanguage.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/yaml.svg","path":"icons/yaml.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/zip.svg","path":"icons/zip.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/yang.svg","path":"icons/yang.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/github2.png","path":"images/github2.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/github3.png","path":"images/github3.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/livere1.png","path":"images/livere1.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/swiftype2.png","path":"images/swiftype2.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/swiftype3.png","path":"images/swiftype3.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/yarn.svg","path":"icons/yarn.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/github1.png","path":"images/github1.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/livere.png","path":"images/livere.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/swiftype1.png","path":"images/swiftype1.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/swiftype.png","path":"images/swiftype.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"themes/yvshare/source/fonts/browser/chrome.png","path":"fonts/browser/chrome.png","modified":1,"renderable":1},{"_id":"themes/yvshare/source/fonts/browser/firefox.png","path":"fonts/browser/firefox.png","modified":1,"renderable":1},{"_id":"themes/yvshare/source/fonts/browser/ie.png","path":"fonts/browser/ie.png","modified":1,"renderable":1},{"_id":"themes/yvshare/source/fonts/browser/opera.png","path":"fonts/browser/opera.png","modified":1,"renderable":1},{"_id":"themes/yvshare/source/fonts/browser/safari.png","path":"fonts/browser/safari.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yvshare/LICENSE","hash":"ee28de09fb00973dd131803ec3b30b6526c716d7","modified":1519979914795},{"_id":"themes/yvshare/_config.sample.yml","hash":"7e1657b886a344a15a6da2c36f99f7269b4fb79b","modified":1519979914798},{"_id":"themes/yvshare/README.md","hash":"b1560aeedb772e839b93e71cc872330008bf7171","modified":1519979914848},{"_id":"themes/yvshare/_config.yml","hash":"c73d21c5578da173053b04a8a95a1184db943ba8","modified":1519986442251},{"_id":"source/_posts/0809001_hello.md","hash":"e3078e81c68b95b7720a8fed68518a78215688d9","modified":1520392694718},{"_id":"source/_posts/0809000_hello-world.md","hash":"79579f888eb490866cb3625099843d7cfcb1b688","modified":1520231089291},{"_id":"source/_posts/0809004_HTML5存储webStorage.md","hash":"1c4a8db798ec7f7a3dc67b7442c23a9096e64f02","modified":1520583634969},{"_id":"themes/yvshare/package.json","hash":"eb94a9d0487218419c726152189c1c915d0c4fa7","modified":1519979914845},{"_id":"source/_posts/0809006_有趣JavaScript数组.md","hash":"fc966dca8fb4a7cfa1f09d072a34d031ffb0f6d0","modified":1520924653798},{"_id":"source/_posts/0809002_CSS3 渐变.md","hash":"0f956e0893b3fd1cfb4c404d9d5916a1e82f07b3","modified":1520583654932},{"_id":"source/_posts/0809005_JSON序列化选项.md","hash":"3d26c94253c981b69a4a68e14b546e4831abd722","modified":1520583629511},{"_id":"source/_posts/0809008_JavaScript面向对象.md","hash":"eca04df1ba83ef9d6b0cea262602a956329fb677","modified":1520583568512},{"_id":"source/_posts/0809007_记一次在公司中配置Babel的经历.md","hash":"c8a8e6068bfb86dccefc3c963479ac1d0023b8e8","modified":1520583578162},{"_id":"source/_posts/0809009_vue-cli快速构建vue-js项目.md","hash":"9df9609ed6feea380eaf8c6d82254b19c2c7b987","modified":1520583565580},{"_id":"source/_posts/0809013_HTML5代码规范.md","hash":"b0db5b093968295204278646bfbbc5a8976fc6c4","modified":1521109367260},{"_id":"source/_posts/0809010_小窥Nodejs服务端框架Express.md","hash":"35efc3c2d82eb0a0caa78be9fa18283604e0d185","modified":1520584104528},{"_id":"source/_posts/0809014_JavaScript类型检测.md","hash":"d75d862c12035cf3fcd33c603cd3e51302fba179","modified":1520583529549},{"_id":"source/_posts/0809011_代码托管与常用的git命令.md","hash":"767877f4400becb7ffb89ecbc6492ccaf1310e34","modified":1521023323706},{"_id":"source/_posts/0809015_实时监听文本域输入.md","hash":"220af769f7adddff09aef1f143e0a6b1b8cbcc4d","modified":1520231751105},{"_id":"source/_posts/0809019_CSS3媒体查询.md","hash":"a044389506cb714397baef7ceb941c075fe76e0a","modified":1521172521124},{"_id":"source/_posts/0809017_axios简易上手.md","hash":"76344fff7a13616b387d9586838f3bf3269e63d7","modified":1521102040140},{"_id":"source/_posts/0809020_ES6中数组和对象的方法.md","hash":"72c8b6a359058fe9e35e3c763ddd13d6c0499033","modified":1520925930103},{"_id":"source/_posts/0809018_在hexo中配置swiftype搜索系统.md","hash":"36c97b20f89f0798850fa261e105fe2ada70c687","modified":1520584351410},{"_id":"source/_posts/0809021_理解this之call-apply-bind.md","hash":"c3089478d1832b0aaffde2be1216498141094937","modified":1520826560100},{"_id":"source/_posts/0809022_JavaScript闭包-Closure.md","hash":"98ccacfad0942be1cce5d5220cb54d0e8b9adc66","modified":1520826571098},{"_id":"source/_posts/0809023_什么是JavaScript严格模式.md","hash":"07f8e333c2c634c1686afc8ef61a54d5e2d4165e","modified":1521104950134},{"_id":"source/_posts/0809016_获取JSON的key.md","hash":"2c146cc60b2232e88bb2f3d88bd1af79863ebcc4","modified":1520583524639},{"_id":"source/about/index.md","hash":"04ba66073f092f19094c5e7bbb7c221ef4a7ebbd","modified":1519641398391},{"_id":"source/tags/index.md","hash":"4e5a63708cf4c6d561273edaeb06c990269a15f7","modified":1519717535259},{"_id":"themes/yvshare/languages/zh-cn.yml","hash":"b6ad22bfb3448d0d54cea0bcbb431e28e253cff9","modified":1519979914857},{"_id":"themes/yvshare/languages/pt-BR--.yml","hash":"765f275d7547779d67a1e83c55ef8850918e216e","modified":1519979914854},{"_id":"themes/yvshare/layout/archive.pug","hash":"e5a7c55ff6402932dd6061b042c2695028814cfc","modified":1519979914839},{"_id":"themes/yvshare/layout/category.pug","hash":"75ac0c1284a307a72e7b2f6cbf90f83f853e57f4","modified":1519979914836},{"_id":"themes/yvshare/layout/index.pug","hash":"8c8d356abe40fc2465aa85c6904d9bc199458448","modified":1519979914827},{"_id":"themes/yvshare/layout/mixins.pug","hash":"93cc8b2b11735f5eb8be5e2a2b308d499236c6da","modified":1520588386478},{"_id":"themes/yvshare/layout/page.pug","hash":"c1e53b2609d3ae580fb352ebed01283111abec35","modified":1520588320203},{"_id":"source/_posts/0809012_常用的Vim命令.md","hash":"392cbe0ca1e40c963bef919b23a79d1bb5d6ab53","modified":1520583543920},{"_id":"themes/yvshare/layout/tag.pug","hash":"fc386024d51ce6834ee287d9027460bdd4273882","modified":1519979914830},{"_id":"source/_posts/0809024_JavaScript异步编程.md","hash":"578fc0fdb5f431331443a2e86ad636b478adcf3e","modified":1521023336562},{"_id":"source/_posts/0809003_在hexo中部署livere评论系统.md","hash":"025ef93af34ecae33c2cc553ffce5b80c1d113e9","modified":1520583641918},{"_id":"themes/yvshare/layout/post.pug","hash":"b4b2d5e5c903d66dae5cb7b026a6ed48fed47897","modified":1520588341086},{"_id":"themes/yvshare/layout/partial/footer.pug","hash":"965539c08fe3d0d40142f1b3468d692c5fdce76a","modified":1519979914818},{"_id":"themes/yvshare/layout/partial/layout.pug","hash":"ae179191017d5709219294d1695ac61ce584041b","modified":1520244466727},{"_id":"themes/yvshare/layout/partial/comments.pug","hash":"bce55420275c10c3052255110d22b808ceb3db3b","modified":1519979914809},{"_id":"themes/yvshare/layout/partial/head.pug","hash":"f12dbda0ffcd07f3a46d2986920de175f598bcb1","modified":1520317611461},{"_id":"themes/yvshare/layout/partial/nav.pug","hash":"71ff81556cefc1b4ac329d2cf5bc0eecfd180499","modified":1520242534573},{"_id":"themes/yvshare/source/css/viewer.min.css","hash":"90cda5e3f631f39c2af16537e1e1fb39292c943b","modified":1520243513703},{"_id":"themes/yvshare/layout/partial/sidebar.pug","hash":"f8ee2fac51d62a008d97f545b1ad35961d5e3efc","modified":1519979914815},{"_id":"themes/yvshare/source/css/font-awesome.min.css","hash":"63ab94ae803ede34930640aa39219866bddeab63","modified":1519979914786},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1519979914764},{"_id":"themes/yvshare/source/css/style.css","hash":"3aa1b92f8bbf11ad5a5bd46a2dd15bbbea0d923d","modified":1520931438073},{"_id":"themes/yvshare/source/images/favicon.png","hash":"86ddbf2c91296f911b92aee951da38e28d9ffc20","modified":1519979914743},{"_id":"themes/yvshare/source/images/css3media.gif","hash":"b33db9ad34abf931732e635256c2e91879b5ced0","modified":1521110114936},{"_id":"themes/yvshare/source/images/github4.png","hash":"c17b6bd5989f7a7f566f45163072a98ee99b1a8b","modified":1520927093677},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1519979914772},{"_id":"themes/yvshare/source/css/style.scss","hash":"9d1df0a936aebfa25adc05d6b7304e75ef027fd4","modified":1519979914790},{"_id":"themes/yvshare/source/images/livere2.png","hash":"073f0a0fbda42da7f273eb15dba0fda7840b5204","modified":1520233665640},{"_id":"themes/yvshare/source/images/localstorage.png","hash":"3f2ec9a9905ab8345eea5b54e5a370bee3e66e68","modified":1520234698121},{"_id":"themes/yvshare/source/images/livere3.png","hash":"56a3cd45228609ba7f7b718db838f00fcbe4f8fe","modified":1520233807667},{"_id":"themes/yvshare/source/images/logo.png","hash":"fcfff1033431ef67503991c81e267eaa1def9a23","modified":1519979914740},{"_id":"themes/yvshare/source/images/logo@2x.png","hash":"079514207e436af0a6ac2494595702a47c060eac","modified":1519979914737},{"_id":"themes/yvshare/source/css/blog_basic.css","hash":"af18645e2f7697009a93efb758a652a253fa3934","modified":1521169215533},{"_id":"themes/yvshare/source/js/jquery.appear.js","hash":"8e936fd0f45787309d917541e911c3440f7565b1","modified":1519979914755},{"_id":"themes/yvshare/source/js/livere.js","hash":"bac704a2b1ea8aeeb6b22a82721a5be4be0dd0f2","modified":1520317600969},{"_id":"themes/yvshare/source/js/jquery-migrate-1.2.1.min.js","hash":"875bce76a77590c3c438bbc6e014b39c23c8c88d","modified":1519979914753},{"_id":"themes/yvshare/source/icons/actionscript.svg","hash":"7b1407b6f7987323d2f35a967f3e55fe32617dbb","modified":1520228940133},{"_id":"themes/yvshare/source/icons/android.svg","hash":"3a73d45ebdcad4e6e4426dab351ea2f51af0d44b","modified":1520228940134},{"_id":"themes/yvshare/source/icons/angular-component.svg","hash":"9b229582472620ed8ebc6a404103fb21d069c157","modified":1520228940135},{"_id":"themes/yvshare/source/icons/angular-guard.svg","hash":"a45fa9b9689fa9c84d18ce30744826c8532203db","modified":1520228940137},{"_id":"themes/yvshare/source/icons/angular-directive.svg","hash":"54744c064e42c415bc83d3c9651f5f2b6770f7e6","modified":1520228940136},{"_id":"themes/yvshare/source/icons/angular-pipe.svg","hash":"575d8fb3caf36daeb5046165289a10817ca75c6a","modified":1520228940139},{"_id":"themes/yvshare/source/icons/angular-resolver.svg","hash":"a45fa9b9689fa9c84d18ce30744826c8532203db","modified":1520228940140},{"_id":"themes/yvshare/source/icons/angular-routing.svg","hash":"897e75e30b556c6bc94a205fd7e0e480404d955d","modified":1520228940141},{"_id":"themes/yvshare/source/icons/angular-service.svg","hash":"637f6c0006ea07f9f43e175051de5e51b4e323a0","modified":1520228940142},{"_id":"themes/yvshare/source/icons/angular.svg","hash":"467742c46b80a6fb22fbc2e0e820a9355eea1943","modified":1520228940144},{"_id":"themes/yvshare/source/js/viewer.min.js","hash":"e5be237abd0204c6a3d1fa20936d6da10ffe542b","modified":1520243521312},{"_id":"themes/yvshare/source/icons/apiblueprint.svg","hash":"888cc510916490d3fcde6ae25f884acf94098898","modified":1520228940145},{"_id":"themes/yvshare/source/icons/appveyor.svg","hash":"2ab3f91d77d3e6eef3878282a6930aca1a98c17b","modified":1520228940148},{"_id":"themes/yvshare/source/icons/applescript.svg","hash":"0619e0207d4f1a5d0d68000ce5623c6fdfa7721e","modified":1520228940146},{"_id":"themes/yvshare/source/icons/arduino.svg","hash":"5df8206ace5bd8fab216e7b2c19006617d55a0ec","modified":1520228940149},{"_id":"themes/yvshare/source/icons/audio.svg","hash":"8fb622b31054f3d8ea662fe311bc14913671e2d4","modified":1520228940151},{"_id":"themes/yvshare/source/icons/autohotkey.svg","hash":"0dd03be47873ba3b80a6393d418f8f10443ab15a","modified":1520228940154},{"_id":"themes/yvshare/source/icons/assembly.svg","hash":"2cfbf56cc28300758c1472549ddfcbeba5c8031c","modified":1520228940150},{"_id":"themes/yvshare/source/icons/aurelia.svg","hash":"0cab97bf541009093736c42f0d9c171f909fc78d","modified":1520228940153},{"_id":"themes/yvshare/source/icons/autoit.svg","hash":"fac181fdcaae7a8f4bb7781e721a0d526420d2f0","modified":1520228940155},{"_id":"themes/yvshare/source/icons/babel.svg","hash":"cf5e925be7c6de2a73136dd8185a710a7d33aa61","modified":1520228940156},{"_id":"themes/yvshare/source/icons/bithound.svg","hash":"a38cc9cec91d83abec44215d284bd76aea207d22","modified":1520228940158},{"_id":"themes/yvshare/source/images/vim.png","hash":"bfe47f2595be5e1031a5b43b673916ad90f27678","modified":1520417830585},{"_id":"themes/yvshare/source/icons/blink.svg","hash":"4d74809c3ae6717f5fdc44bc201e49ace763531f","modified":1520228940159},{"_id":"themes/yvshare/source/icons/blink_light.svg","hash":"8c11d4114e463bbaef43f6d3aa7443e2b47b02e4","modified":1520228940160},{"_id":"themes/yvshare/source/icons/browserlist_light.svg","hash":"e36c273dd4c18d22c224d446d0dd9ff1bd2ee98e","modified":1520228940163},{"_id":"themes/yvshare/source/icons/bucklescript.svg","hash":"6b00bd9b2d6eecca0050812bf04c40209b848d2c","modified":1520228940164},{"_id":"themes/yvshare/source/icons/c.svg","hash":"94987b3663eaf0b1ddc71aaebf7746dcb68f1435","modified":1520228940165},{"_id":"themes/yvshare/source/icons/bower.svg","hash":"3f9c9497b29540fc85e25eb61257637643db3c5d","modified":1520228940161},{"_id":"themes/yvshare/source/icons/browserlist.svg","hash":"a9f9b0fc1a30df198fad4090e28d17c54917771b","modified":1520228940162},{"_id":"themes/yvshare/source/icons/certificate.svg","hash":"077595e5e4000de319246327342a20cf53fd09d9","modified":1520228940170},{"_id":"themes/yvshare/source/icons/cabal.svg","hash":"d5a0667fabe9d98bb58b5dcb43a8f0e2aa4a9f7a","modified":1520228940167},{"_id":"themes/yvshare/source/icons/changelog.svg","hash":"69a47a1efdc9e1441ebcdba3c2e8a58469996fd8","modified":1520228940171},{"_id":"themes/yvshare/source/icons/cake.svg","hash":"e5ab4c13e55e9d028ff5617251685691ae6e4af0","modified":1520228940168},{"_id":"themes/yvshare/source/icons/cmake.svg","hash":"fc0600a9b10c71552e9f6acb709e00b36964a28b","modified":1520228940182},{"_id":"themes/yvshare/source/icons/clojure.svg","hash":"ae47e295fab0638db745481f4d67f8cefeb9ca8b","modified":1520228940175},{"_id":"themes/yvshare/source/icons/code-climate_light.svg","hash":"8eb4868531c048df07f7bd91f309d008760b84a5","modified":1520228940184},{"_id":"themes/yvshare/source/icons/code-climate.svg","hash":"9aa3a8551b98c0d1062d4227087333444188de1d","modified":1520228940183},{"_id":"themes/yvshare/source/icons/coffee.svg","hash":"86d8f2b3a089e297dbf8f113f3f5650e4f36fabd","modified":1520228940185},{"_id":"themes/yvshare/source/icons/conduct.svg","hash":"e71415d943477a4f2e198d892d1bd61f5abc3468","modified":1520228940188},{"_id":"themes/yvshare/source/icons/circleci.svg","hash":"b154bd89fe45f54a2fcc74e62833a662f33cf3c9","modified":1520228940172},{"_id":"themes/yvshare/source/icons/console.svg","hash":"6645e385b8dbe9ad62f968586d4e309fa67d5387","modified":1520228940189},{"_id":"themes/yvshare/source/icons/circleci_light.svg","hash":"23484e923ace86adeb225364ed5e5d49a2270adb","modified":1520228940173},{"_id":"themes/yvshare/source/icons/contributing.svg","hash":"8804c9bd349afc06f56793208933ecc92874d8b6","modified":1520228940190},{"_id":"themes/yvshare/source/icons/credits.svg","hash":"e5ce114f82cbfaaca44fd05ae68cdaaa5b516fd0","modified":1520228940192},{"_id":"themes/yvshare/source/icons/cloudfoundry.svg","hash":"be9b3feb276a969ee0c23d93ad536d5a8d0ff34b","modified":1520228940176},{"_id":"themes/yvshare/source/icons/crystal_light.svg","hash":"2ce72f2267d259b95ffd1f11ccb6f41c4f061345","modified":1520228940195},{"_id":"themes/yvshare/source/icons/cpp.svg","hash":"9834883aaac14a3cd7ad2b573a26e9aca8f3861b","modified":1520228940191},{"_id":"themes/yvshare/source/icons/coldfusion.svg","hash":"1152068a43b18f6f834322ee1f7e8f3c67bb2c07","modified":1520228940187},{"_id":"themes/yvshare/source/icons/csharp.svg","hash":"308df795a92bb97ce6b3c9ecfae7ab537c67888d","modified":1520228940196},{"_id":"themes/yvshare/source/icons/crystal.svg","hash":"8515115ee10b4ed0247cd1da2eb8fc18c737490d","modified":1520228940194},{"_id":"themes/yvshare/source/icons/css.svg","hash":"b3a108ad97e4461995e1aacf227113a0220c63a0","modified":1520228940199},{"_id":"themes/yvshare/source/icons/css-map.svg","hash":"850231f29201875c968106fccbac08e8c07f5e1d","modified":1520228940198},{"_id":"themes/yvshare/source/icons/cucumber.svg","hash":"87370a596979d33ace596ab973414cd7d59881c8","modified":1520228940201},{"_id":"themes/yvshare/source/icons/cuda.svg","hash":"0ad8351c672e8a611043e537bff9873ea954ac0c","modified":1520228940202},{"_id":"themes/yvshare/source/icons/dart.svg","hash":"cef221ca4a6933f86422a399d6ee9557a16227c7","modified":1520228940203},{"_id":"themes/yvshare/source/icons/database.svg","hash":"0f06038daa018d85b0a4b8baa2c80e895efb2518","modified":1520228940204},{"_id":"themes/yvshare/source/icons/dotjs.svg","hash":"70ad47a4bc600a5694770ffeab070dc6da132a94","modified":1520228940209},{"_id":"themes/yvshare/source/icons/document.svg","hash":"1887e7cb382a2af54422efca90aeca0572bd0276","modified":1520228940208},{"_id":"themes/yvshare/source/icons/drone_light.svg","hash":"8f2c6054aaa89ff94623daf04869156d439f845d","modified":1520228940211},{"_id":"themes/yvshare/source/icons/drone.svg","hash":"d8f1aaacd3529054780e62ee4f5152d8a3512126","modified":1520228940210},{"_id":"themes/yvshare/source/icons/docker.svg","hash":"20502f8e9f84d64b53d96ce91d6debe4d72fa4ee","modified":1520228940207},{"_id":"themes/yvshare/source/icons/diff.svg","hash":"7417074d3a91bb609f34f2e4324c2b05486bbc4f","modified":1520228940205},{"_id":"themes/yvshare/source/icons/elixir.svg","hash":"6848e1c0c596396a476d6af14f9e8f5ea1bf7ea0","modified":1520228940215},{"_id":"themes/yvshare/source/icons/ejs.svg","hash":"7ef7c0a855d573a3e93240f99be0f3cb02490765","modified":1520228940214},{"_id":"themes/yvshare/source/icons/editorconfig.svg","hash":"293dcca0cb82cf50e16f3968c4a6c9e5c19f59b7","modified":1520228940213},{"_id":"themes/yvshare/source/icons/elm.svg","hash":"b11d2a6cfcae95a11bce2b8552651826763137ae","modified":1520228940216},{"_id":"themes/yvshare/source/icons/exe.svg","hash":"bbea0ad0875b62d6affc677e2693d4e515d1926c","modified":1520228940221},{"_id":"themes/yvshare/source/icons/favicon.svg","hash":"1cc057acc2a3eb52273a17fa785844e8d13f3ba6","modified":1520228940221},{"_id":"themes/yvshare/source/icons/email.svg","hash":"25f82c2aa9a6d7972ac2fc1bf53933206acc6e50","modified":1520228940217},{"_id":"themes/yvshare/source/icons/file.svg","hash":"2633dc144263ca3c257516e694c8f54e637a29e9","modified":1520228940222},{"_id":"themes/yvshare/source/icons/firebase.svg","hash":"556e8c07a6fde013a5a7f64edc30d8e35a20fb0a","modified":1520228940223},{"_id":"themes/yvshare/source/icons/eslint.svg","hash":"039fd2bdd18a097b7639a78c8c483b0da98abdd3","modified":1520228940219},{"_id":"themes/yvshare/source/icons/erlang.svg","hash":"49c5e59885d5e7e5bb8df5a3145fb916b0e74ff0","modified":1520228940218},{"_id":"themes/yvshare/source/icons/flash.svg","hash":"9ba5c1a40a74ab059c9af3466b9200aca5667b34","modified":1520228940224},{"_id":"themes/yvshare/source/icons/flow.svg","hash":"36d0a5516fbb230173d3fe8a5f6b29944b46e997","modified":1520228940225},{"_id":"themes/yvshare/source/icons/folder-audio-open.svg","hash":"795be28cbecc93a32d63d76cd5a2b16936df71a1","modified":1520228940227},{"_id":"themes/yvshare/source/icons/folder-aws.svg","hash":"35d73d7536ea24d2eacc42544a3d7c3de7a63612","modified":1520228940233},{"_id":"themes/yvshare/source/icons/folder-aws-open.svg","hash":"d94f51ce336136df74f1c29b8569b35d5fa33490","modified":1520228940232},{"_id":"themes/yvshare/source/icons/folder-aurelia-open.svg","hash":"3f0390844f772b6dbcff8339e16242c511a635b5","modified":1520228940229},{"_id":"themes/yvshare/source/icons/folder-audio.svg","hash":"c1de77b83475d15395926f4d07585d9c1c455d50","modified":1520228940228},{"_id":"themes/yvshare/source/icons/folder-aurelia.svg","hash":"f2f14e8de5389f58259010fed3b6fb76a3267e90","modified":1520228940230},{"_id":"themes/yvshare/source/icons/folder-circleci-open.svg","hash":"e78c67b3f53b1a8ba6a096349cf1a4e354aa0f6c","modified":1520228940237},{"_id":"themes/yvshare/source/icons/folder-components.svg","hash":"4f16f3bc63d1a6cbd578c6e8ae00c6baa8fedeee","modified":1520228940240},{"_id":"themes/yvshare/source/icons/folder-bower-open.svg","hash":"8f682d8419f922f6a7975df05a48c9fd2121adfe","modified":1520228940234},{"_id":"themes/yvshare/source/icons/folder-circleci.svg","hash":"e118349366fb51340e10c5f0747275abc0dbefbc","modified":1520228940238},{"_id":"themes/yvshare/source/icons/folder-coverage-open.svg","hash":"a35b9edf74eda32f2c116b831bcfcc961407402d","modified":1520228940243},{"_id":"themes/yvshare/source/icons/folder-components-open.svg","hash":"da72c0eb3fdeddaca3b09810570aecb0e6321d28","modified":1520228940239},{"_id":"themes/yvshare/source/icons/folder-coverage.svg","hash":"164dcf85a7c100179c708454ddd5b465bf2cac3c","modified":1520228940245},{"_id":"themes/yvshare/source/icons/folder-css-open.svg","hash":"0d3a5fa3d7c646ae17ff42db22c7b39e742285ea","modified":1520228940246},{"_id":"themes/yvshare/source/icons/folder-bower.svg","hash":"e81b45b7543c41dc0edfec9c6c4a66b910bc2490","modified":1520228940236},{"_id":"themes/yvshare/source/icons/folder-css.svg","hash":"b25efc6046ea3fab87bcedc51d1f4a685c540802","modified":1520228940247},{"_id":"themes/yvshare/source/icons/folder-config-open.svg","hash":"a3945d1c2608f73cb06baf4ae2beb15022195445","modified":1520228940241},{"_id":"themes/yvshare/source/icons/folder-config.svg","hash":"68e5f9cafb5be3487f169d33a3de54173dfe63ca","modified":1520228940242},{"_id":"themes/yvshare/source/icons/folder-database-open.svg","hash":"1957baba51e9e5cf9a583acd783c8e3cd45b1481","modified":1520228940248},{"_id":"themes/yvshare/source/icons/folder-database.svg","hash":"21d64774270142ba256caf30a51933d922314aa8","modified":1520228940250},{"_id":"themes/yvshare/source/icons/folder-dist-open.svg","hash":"b0e02061b86bac15cdefc64075d3ade70b03d54f","modified":1520228940251},{"_id":"themes/yvshare/source/icons/folder-docs-open.svg","hash":"7befbdf074d8b349f3e11a86e56a319a9422d762","modified":1520228940255},{"_id":"themes/yvshare/source/icons/folder-dist.svg","hash":"d2923966a56c80209b5c5fdac14694c1dcd154ed","modified":1520228940252},{"_id":"themes/yvshare/source/icons/folder-docker-open.svg","hash":"e0070e1fbb3bb498f800b366d5cf9b9f7e99d5b9","modified":1520228940253},{"_id":"themes/yvshare/source/icons/folder-docker.svg","hash":"5ade47f707d2bfcee8f35ca28094885eda8225f6","modified":1520228940254},{"_id":"themes/yvshare/source/icons/folder-expo-open.svg","hash":"04a1ccecbb84632c546ce7c4e8a2bf5b1beea7f1","modified":1520228940257},{"_id":"themes/yvshare/source/icons/folder-docs.svg","hash":"042c49d3c9c74cd656e965ecdcae605204b09a78","modified":1520228940256},{"_id":"themes/yvshare/source/icons/folder-export-open.svg","hash":"033d9016b17314d6670804bb6e7cb09edccacc2c","modified":1520228940260},{"_id":"themes/yvshare/source/icons/folder-export.svg","hash":"806291a03ddbe471f642c00e16f5dcb0f731914d","modified":1520228940260},{"_id":"themes/yvshare/source/icons/folder-font.svg","hash":"eac145f2c6486f6c86a32bd873c745cb07f7620d","modified":1520228940263},{"_id":"themes/yvshare/source/icons/folder-expo.svg","hash":"11936f95beec4c5e231245d2065b81f05a5068af","modified":1520228940258},{"_id":"themes/yvshare/source/icons/folder-git.svg","hash":"4194ba7c8b408d84ab30f1fac055736bebb0b3ea","modified":1520228940265},{"_id":"themes/yvshare/source/icons/folder-font-open.svg","hash":"fb16046c405be54807c4d62f8ed12e161524cd5f","modified":1520228940261},{"_id":"themes/yvshare/source/icons/folder-git-open.svg","hash":"28585f6dd2bc3b8c2a2841fd96381b902d35f875","modified":1520228940263},{"_id":"themes/yvshare/source/icons/folder-gitlab.svg","hash":"d2b9a3e0bc4a087c1f865cba829b1cd9d14bffd0","modified":1520228940271},{"_id":"themes/yvshare/source/icons/folder-github.svg","hash":"20172062c679e511a8c55959143c0e03a8c22774","modified":1520228940268},{"_id":"themes/yvshare/source/icons/folder-gitlab-open.svg","hash":"400976e4975c95f0ee20392ca07a89f66f542783","modified":1520228940269},{"_id":"themes/yvshare/source/icons/folder-global-open.svg","hash":"1749d21d855f987d6c1cddd423df3f6ac2c30969","modified":1520228940272},{"_id":"themes/yvshare/source/icons/folder-github-open.svg","hash":"47da43135e0f863980c3119d0561de6dffb8dc79","modified":1520228940267},{"_id":"themes/yvshare/source/icons/folder-gradle-open.svg","hash":"1b690c9cd2472110f5f059e4aea35ea853594240","modified":1520228940274},{"_id":"themes/yvshare/source/icons/folder-global.svg","hash":"ac9c22752188676452c678f4ebb50e4ebd63c031","modified":1520228940273},{"_id":"themes/yvshare/source/icons/folder-images.svg","hash":"0306fc30f58d3b6945704e43d7a5a01bf452003e","modified":1520228940281},{"_id":"themes/yvshare/source/icons/folder-import-open.svg","hash":"d7630fcee21012cd36a8d208fec6c8213e92db11","modified":1520228940282},{"_id":"themes/yvshare/source/icons/folder-import.svg","hash":"14bf126895a2e3473c4680485a9a83d3664dd922","modified":1520228940283},{"_id":"themes/yvshare/source/icons/folder-include-open.svg","hash":"cb4aed4fb04e0e2d11f9f47efadfd557fe3961c6","modified":1520228940284},{"_id":"themes/yvshare/source/icons/folder-include.svg","hash":"7254c7525a1d35df6298fe9a6d48548aae0a4a99","modified":1520228940285},{"_id":"themes/yvshare/source/icons/folder-gradle.svg","hash":"ca56a5a220300b8d2614f997677800e96b91ee3c","modified":1520228940275},{"_id":"themes/yvshare/source/icons/folder-i18n.svg","hash":"2b85f45d01f6bbd649555a16d1cd576b8893adab","modified":1520228940278},{"_id":"themes/yvshare/source/icons/folder-i18n-open.svg","hash":"31b2fc7e431e1faf3bf0c5f93f7d8f66db8c6f6f","modified":1520228940276},{"_id":"themes/yvshare/source/icons/folder-javascript-open.svg","hash":"e4e8aa5ebd0409aaf3b4eda6310cdd2494666dfc","modified":1520228940286},{"_id":"themes/yvshare/source/icons/folder-javascript.svg","hash":"c0886a1954b155355c11ee00124ad5afd5083522","modified":1520228940287},{"_id":"themes/yvshare/source/icons/folder-jinja-open.svg","hash":"f1cf4567b6d218d0aa774f4e40b35e42637d2340","modified":1520228940288},{"_id":"themes/yvshare/source/icons/folder-jinja-open_light.svg","hash":"c1074d28cfafd138e74c9cef841af1a286df367e","modified":1520228940289},{"_id":"themes/yvshare/source/icons/folder-jinja_light.svg","hash":"dec745cc47504c1de4e7bdb643a621579af55bf3","modified":1520228940292},{"_id":"themes/yvshare/source/icons/folder-jinja.svg","hash":"6dd1f1ded39dc8b99b5008d83e8fcef19fb7c641","modified":1520228940291},{"_id":"themes/yvshare/source/icons/folder-kubernetes-open.svg","hash":"4649cb96cefee7aa155a73e4c57898a539ef6d19","modified":1520228940293},{"_id":"themes/yvshare/source/icons/folder-kubernetes.svg","hash":"ae9c0807a659b8d36b10c1098d3cc812eb05d530","modified":1520228940294},{"_id":"themes/yvshare/source/icons/folder-lib-open.svg","hash":"c898b8d5201f3de4593f2295e34bfe5e36a616f2","modified":1520228940295},{"_id":"themes/yvshare/source/icons/folder-lib.svg","hash":"a5b7bc6a612f7a135572e13b95c09c8e9aa66da3","modified":1520228940297},{"_id":"themes/yvshare/source/icons/folder-markdown.svg","hash":"20a50113d23bb12a7d1d05e61f2465f6b979c096","modified":1520228940301},{"_id":"themes/yvshare/source/icons/folder-log-open.svg","hash":"bf8caa5e35e2349680d74fcc799fa1a33cee9548","modified":1520228940298},{"_id":"themes/yvshare/source/icons/folder-markdown-open.svg","hash":"105472fe236f8a34a3a550d8b6eb2cb6325a05e5","modified":1520228940300},{"_id":"themes/yvshare/source/icons/folder-log.svg","hash":"233ec8627fcb7b7d1856be410e3ac0e359fde01b","modified":1520228940299},{"_id":"themes/yvshare/source/icons/folder-ngrx-actions-open.svg","hash":"ce63c689f821b2f78774a5dbfe462ac704e7a6e5","modified":1520228940302},{"_id":"themes/yvshare/source/icons/folder-ngrx-effects-open.svg","hash":"a5b16365b0f8725fa2db238c4833a71be05e36d3","modified":1520228940305},{"_id":"themes/yvshare/source/icons/folder-ngrx-actions.svg","hash":"b6483a546a82264acd7827947363aeb3049a47fc","modified":1520228940303},{"_id":"themes/yvshare/source/icons/folder-ngrx-effects.svg","hash":"7bd5fcd81e9475f526b8bc0da224fe6bff94ae25","modified":1520228940305},{"_id":"themes/yvshare/source/icons/folder-ngrx-entities-open.svg","hash":"3d1b4b78459b3110223b8c822ff6362a068d7298","modified":1520228940307},{"_id":"themes/yvshare/source/icons/folder-ngrx-entities.svg","hash":"7c45f5aa333e853798812e5cb58ad899cbd09106","modified":1520228940307},{"_id":"themes/yvshare/source/icons/folder-ngrx-reducer-open.svg","hash":"460215cd445da321b279f7a932ad9c71b521c40d","modified":1520228940309},{"_id":"themes/yvshare/source/icons/folder-ngrx-reducer.svg","hash":"9ee4c1afb341565bbbb5464b67afe50306912bed","modified":1520228940310},{"_id":"themes/yvshare/source/icons/folder-ngrx-state-open.svg","hash":"31d7e877b863343fb07004cbc8c10b057ed7831b","modified":1520228940311},{"_id":"themes/yvshare/source/icons/folder-images-open.svg","hash":"e6c1caacfe98801b53b7fa2573a5e30a7e60a1cd","modified":1520228940280},{"_id":"themes/yvshare/source/icons/folder-ngrx-state.svg","hash":"98dc2b7e3ce6b9dfedc2ffdd2b9a662fb46dab7b","modified":1520228940312},{"_id":"themes/yvshare/source/icons/folder-node.svg","hash":"f8e654f0bc3f3047355fcc9c1fc3a367ee5f1db7","modified":1520228940314},{"_id":"themes/yvshare/source/icons/folder-node-open.svg","hash":"517cc1930f6fec1c938dce1e1503c1d46009c610","modified":1520228940313},{"_id":"themes/yvshare/source/icons/folder-other-open.svg","hash":"8ed87567bca9539512ff1845d84cdf56e71af209","modified":1520228940315},{"_id":"themes/yvshare/source/icons/folder-other.svg","hash":"c79b4a165c7b0eb5d10ee8da0b7a97a3b08125e5","modified":1520228940316},{"_id":"themes/yvshare/source/icons/folder-php-open.svg","hash":"74d0b07e3b93b20de63622a98cf4e7b92ed89e6e","modified":1520228940317},{"_id":"themes/yvshare/source/icons/folder-php.svg","hash":"a7dabfea2051f2a9c7dabc438e8003c8d2d8ba84","modified":1520228940318},{"_id":"themes/yvshare/source/icons/folder-phpmailer.svg","hash":"83ac202b1dbbd1d1ee38ada3174f44d30b4c4132","modified":1520228940320},{"_id":"themes/yvshare/source/icons/folder-phpmailer-open.svg","hash":"008293b3b9f0f0fea0b180c3074a63018596631b","modified":1520228940319},{"_id":"themes/yvshare/source/icons/folder-public-open.svg","hash":"b935c11070ea0c24ee4c89e01fa9a627daa55824","modified":1520228940321},{"_id":"themes/yvshare/source/icons/folder-public.svg","hash":"99396b5a18632527794b33c25b0f9da804a81aeb","modified":1520228940322},{"_id":"themes/yvshare/source/icons/folder-redux-actions-open.svg","hash":"c2094203b21f9b5358d7723910cc0576eaaed7eb","modified":1520228940325},{"_id":"themes/yvshare/source/icons/folder-react-components.svg","hash":"ba2a7717fb7a923d3a08d1154d15c472d5025098","modified":1520228940323},{"_id":"themes/yvshare/source/icons/folder-react-components-open.svg","hash":"21c3e99e2a0ce5a81f2c280fcf5c384b88a708cf","modified":1520228940323},{"_id":"themes/yvshare/source/icons/folder-redux-reducer.svg","hash":"1f11ff94d1036617bb06fe866def45f2b9c500c9","modified":1520228940327},{"_id":"themes/yvshare/source/icons/folder-redux-actions.svg","hash":"cfb590d0940ad6c615d0e2c1d2d6dffac044b77d","modified":1520228940325},{"_id":"themes/yvshare/source/icons/folder-redux-store-open.svg","hash":"7c7087d306ef471760c60710454e77eee845ebbf","modified":1520228940329},{"_id":"themes/yvshare/source/icons/folder-redux-reducer-open.svg","hash":"b1bdce9118b1fc4ba5377155406efd0aa5045a4d","modified":1520228940326},{"_id":"themes/yvshare/source/icons/folder-redux-store.svg","hash":"a8d36f3034fe25b90e4cfda4fd0dd304a5a73333","modified":1520228940330},{"_id":"themes/yvshare/source/icons/folder-resource-open.svg","hash":"76eb7b92e74522b426c4c2c01fd58e7c7630d42a","modified":1520228940331},{"_id":"themes/yvshare/source/icons/folder-resource.svg","hash":"ef3f63ff8422d2a8ea222190f33493abb25910de","modified":1520228940332},{"_id":"themes/yvshare/source/icons/folder-sass.svg","hash":"1911ddb9dab4a67ecc7b8b83523f2ca255bb6087","modified":1520228940334},{"_id":"themes/yvshare/source/icons/folder-scripts-open.svg","hash":"30b130992914ad2f8643bb73e80723de51ae67ad","modified":1520228940335},{"_id":"themes/yvshare/source/icons/folder-scripts.svg","hash":"555c5e32436a5f010faad23473056b6ece23219f","modified":1520228940336},{"_id":"themes/yvshare/source/icons/folder-sass-open.svg","hash":"174dec7d6520f11696723499a1c7a2950eca069f","modified":1520228940333},{"_id":"themes/yvshare/source/icons/folder-src-open.svg","hash":"dae22865e4a7814829f4da6de62e273ee704dae0","modified":1520228940337},{"_id":"themes/yvshare/source/icons/folder-sublime.svg","hash":"3cd05cd28977c3e0294c08de1869cb4c78deaca0","modified":1520228940341},{"_id":"themes/yvshare/source/icons/folder-src.svg","hash":"2a93f8e824549ff00425add2ae5a658bbcc95ea0","modified":1520228940338},{"_id":"themes/yvshare/source/icons/folder-sublime-open.svg","hash":"326e82e240c24e902ad3c946e56dc4e2b71c6cac","modified":1520228940340},{"_id":"themes/yvshare/source/icons/folder-temp.svg","hash":"2b9edae5ac7999483e55d9bb91907aacf8b45e68","modified":1520228940343},{"_id":"themes/yvshare/source/icons/folder-temp-open.svg","hash":"9c0805a2f440799f442295116e3044b5a23129a0","modified":1520228940342},{"_id":"themes/yvshare/source/icons/folder-tools-open.svg","hash":"f4451e0975db12f92aedf03e2dcf6754c35ec4c8","modified":1520228940347},{"_id":"themes/yvshare/source/icons/folder-test-open.svg","hash":"14f4469d417c345d21cd7d9cfb7865615c46e6d3","modified":1520228940344},{"_id":"themes/yvshare/source/icons/folder-test.svg","hash":"c2642b4e0206e7982c8d317a2b48f50a27bb30ec","modified":1520228940345},{"_id":"themes/yvshare/source/icons/folder-tools.svg","hash":"c32ba33ecdab36ea450913b099b57d78347cb37d","modified":1520228940348},{"_id":"themes/yvshare/source/icons/folder-typescript.svg","hash":"2f770fb459d89c681ce0fccacdecd2d94d8356af","modified":1520228940350},{"_id":"themes/yvshare/source/icons/folder-typescript-open.svg","hash":"80d9956899f7b8a8e3d98b92d915b00c940872d8","modified":1520228940349},{"_id":"themes/yvshare/source/icons/folder-video.svg","hash":"247f68c2dcce271a283beab41610e0764c05785e","modified":1520228940352},{"_id":"themes/yvshare/source/icons/folder-video-open.svg","hash":"11d1471e7a4783f6d5509af4b6d9d77025be093b","modified":1520228940351},{"_id":"themes/yvshare/source/icons/folder-views-open.svg","hash":"2b474de5528fc68fbcb91e649a636cfcd57acea0","modified":1520228940353},{"_id":"themes/yvshare/source/icons/folder-views.svg","hash":"76388f7a8bcb5c99ebc276ad01f9c4ea240296e0","modified":1520228940353},{"_id":"themes/yvshare/source/icons/folder-vscode.svg","hash":"350fab8c8375b58149b1480c6168c057ca21d840","modified":1520228940355},{"_id":"themes/yvshare/source/icons/folder-vue.svg","hash":"8bf016a4781342520224734fe6d133fd283de615","modified":1520228940357},{"_id":"themes/yvshare/source/icons/folder-vue-open.svg","hash":"fb07b71c9cabdf5c5fae3ac255f9f451e2de877a","modified":1520228940356},{"_id":"themes/yvshare/source/icons/folder-vscode-open.svg","hash":"5a52607242297e4157c1bd67f65a0ed28d88c1f9","modified":1520228940355},{"_id":"themes/yvshare/source/icons/folder-wakatime-open.svg","hash":"f1090b3d34669fc4cadf7e4f32991e678f81fc0f","modified":1520228940358},{"_id":"themes/yvshare/source/icons/folder-webpack-open.svg","hash":"bc9713c8ffacd35b15690460b631c0581611877f","modified":1520228940360},{"_id":"themes/yvshare/source/icons/folder-wakatime.svg","hash":"11c739a49eed6dbb0347fd840a23449d371588b7","modified":1520228940359},{"_id":"themes/yvshare/source/icons/folder-webpack.svg","hash":"b2893137b1fa7e4de551c946c27eb4af99460776","modified":1520228940361},{"_id":"themes/yvshare/source/icons/font.svg","hash":"4e80656dcff10d2b645b6628de5f75d0db359973","modified":1520228940365},{"_id":"themes/yvshare/source/icons/fsharp.svg","hash":"a78e3f361380e8bcea4ab32398c3dab08ba174ab","modified":1520228940366},{"_id":"themes/yvshare/source/icons/fusebox.svg","hash":"3eb9064ce66c077437b1af5f7e6b4249cc2ff42d","modified":1520228940366},{"_id":"themes/yvshare/source/icons/folder-wordpress-open.svg","hash":"e285aea77c0bd2cc36bd3a6103590daaf80eb138","modified":1520228940363},{"_id":"themes/yvshare/source/icons/folder-wordpress.svg","hash":"5d94d02fce41024f951e3c3a938027bca237789f","modified":1520228940364},{"_id":"themes/yvshare/source/icons/git.svg","hash":"8774a9f79138a9cd74821f9f14262ec053fa97d1","modified":1520228940369},{"_id":"themes/yvshare/source/icons/gatsby.svg","hash":"2ee1152cc48eb66ebecd96ee8863a5c255708c8d","modified":1520228940368},{"_id":"themes/yvshare/source/icons/go.svg","hash":"93a701e4cfa8e240738fad2055099b03a6de3b8f","modified":1520228940371},{"_id":"themes/yvshare/source/icons/gradle.svg","hash":"e156c6b04bad896a908a8576aeed7630f46a0458","modified":1520228940372},{"_id":"themes/yvshare/source/icons/gitlab.svg","hash":"e120042986f2b7a490440cd22664a67a782bc77f","modified":1520228940369},{"_id":"themes/yvshare/source/icons/h.svg","hash":"c6c210e5f91eadf881ae6f6e525a4340ba476023","modified":1520228940377},{"_id":"themes/yvshare/source/icons/graphcool.svg","hash":"a0f5ff4b033bb338f6b093ba5aafbf7e6d9948f4","modified":1520228940373},{"_id":"themes/yvshare/source/icons/gulp.svg","hash":"e6f707fe23083b47fd23f4ebf7df0b9d61f28a98","modified":1520228940376},{"_id":"themes/yvshare/source/icons/haml.svg","hash":"d01fd612a1d15889b8cdff107df8b370a3b70a02","modified":1520228940380},{"_id":"themes/yvshare/source/icons/hack.svg","hash":"dbcf936536598082dcdc1433da8a3625ce510244","modified":1520228940378},{"_id":"themes/yvshare/source/icons/groovy.svg","hash":"b3513952d301b9091dea7037acaba5a838c41dc1","modified":1520228940375},{"_id":"themes/yvshare/source/icons/graphql.svg","hash":"d979ea761cb674989fb3be3e627c23ebdeeb7c69","modified":1520228940374},{"_id":"themes/yvshare/source/icons/haskell.svg","hash":"4d56f663bdc6c5181876d452b9f79576d55241f8","modified":1520228940381},{"_id":"themes/yvshare/source/icons/hpp.svg","hash":"0d80e8cc3c5d12a84eddc19e485bfb7f06bfd817","modified":1520228940384},{"_id":"themes/yvshare/source/icons/heroku.svg","hash":"b2412eb42a1d8ee3c07ecdde369e8edf002d7b56","modified":1520228940383},{"_id":"themes/yvshare/source/icons/http.svg","hash":"0ac82393e3349fad76ccd2b033114f75323ee1c2","modified":1520228940386},{"_id":"themes/yvshare/source/icons/haxe.svg","hash":"43629be0ce4a76da95c374cb15fd8d32845560e8","modified":1520228940382},{"_id":"themes/yvshare/source/icons/handlebars.svg","hash":"4ad94da9ca20c0ecd5b82ef71bbe4327efc88781","modified":1520228940380},{"_id":"themes/yvshare/source/icons/image.svg","hash":"7ee9d17849faf03b34a4aa02c2d09bdb6a1d06ef","modified":1520228940387},{"_id":"themes/yvshare/source/icons/html.svg","hash":"2303284fe2ba694e528ac9673cf6a5996a12a181","modified":1520228940385},{"_id":"themes/yvshare/source/icons/javascript.svg","hash":"5dbbf043d47cd3cf9c503b5311b98295cdcbc989","modified":1520228940393},{"_id":"themes/yvshare/source/icons/java.svg","hash":"f0671b8f504f95ebb21b40b2191e8ee21d5eb183","modified":1520228940390},{"_id":"themes/yvshare/source/icons/ionic.svg","hash":"0b0c1a4fa1d04e3af8c98bd73639dd49cdee7c06","modified":1520228940389},{"_id":"themes/yvshare/source/icons/javascript-map.svg","hash":"4c0cdb687e9c792ea2dffbf5ca682d9a3614b1d1","modified":1520228940391},{"_id":"themes/yvshare/source/icons/jinja.svg","hash":"9323a3b2f0415518e42bf6282cf791452be91aeb","modified":1520228940395},{"_id":"themes/yvshare/source/icons/jinja_light.svg","hash":"6670772669d0e2581fc9f2258ea22930f316c18f","modified":1520228940396},{"_id":"themes/yvshare/source/icons/julia.svg","hash":"272f01cb66c95fd764ccc1f90e589a03d33619a5","modified":1520228940399},{"_id":"themes/yvshare/source/icons/karma.svg","hash":"21243e1c1addd8724f7e46b15c80b18554ceeb2d","modified":1520228940400},{"_id":"themes/yvshare/source/icons/key.svg","hash":"c6a570985f4db3fa3de9074deabd10cd757a4ad4","modified":1520228940401},{"_id":"themes/yvshare/source/icons/json.svg","hash":"2a30b45026ce3d778d077421e5e838f460e0a2b7","modified":1520228940397},{"_id":"themes/yvshare/source/icons/jenkins.svg","hash":"36203d063088e842c9853d4853585d8af3077060","modified":1520228940394},{"_id":"themes/yvshare/source/icons/kl.svg","hash":"e81d1b289ed9795199e2eb628cf9ccef9262404d","modified":1520228940404},{"_id":"themes/yvshare/source/icons/kotlin.svg","hash":"77573f16b463bdcf4d9cc3e8c3a0fc526d2c7932","modified":1520228940405},{"_id":"themes/yvshare/source/icons/lib.svg","hash":"e424df86d032b8614c18a47ecf2caeb320025613","modified":1520228940409},{"_id":"themes/yvshare/source/icons/kivy.svg","hash":"c406f90655f8e4c72e8e6a0d83a6610e20c79e0a","modified":1520228940403},{"_id":"themes/yvshare/source/icons/lock.svg","hash":"2e4d4200129a2ac0f3e33605b2c85c295d1cfef6","modified":1520228940411},{"_id":"themes/yvshare/source/icons/log.svg","hash":"1dc27ced353883c9d5d4d5564d000f087137fb52","modified":1520228940412},{"_id":"themes/yvshare/source/icons/markdown.svg","hash":"53a263661f846f15f37ecd6a7b0c08d647bd4e6a","modified":1520228940414},{"_id":"themes/yvshare/source/icons/laravel.svg","hash":"b7b318c82b80514585ccb37eb1a652d7e50625f1","modified":1520228940406},{"_id":"themes/yvshare/source/icons/lua.svg","hash":"1f63c93ea0421b8626d839bc08e73feab104b370","modified":1520228940413},{"_id":"themes/yvshare/source/icons/less.svg","hash":"b992b5b341faa515282aefb32cb072fe233374ef","modified":1520228940408},{"_id":"themes/yvshare/source/icons/livescript.svg","hash":"95c2f0078cd8ae5b7a938701aec351e36e66e543","modified":1520228940410},{"_id":"themes/yvshare/source/icons/markojs.svg","hash":"adc401750ab7543e4dd619da467536f17ad1a580","modified":1520228940415},{"_id":"themes/yvshare/source/icons/merlin.svg","hash":"3dc4c547a295222db03900ae63d527e31f8e1a78","modified":1520228940419},{"_id":"themes/yvshare/source/icons/mocha.svg","hash":"d2f97344abc3024281d525bfcbbe5d391dd53f48","modified":1520228940421},{"_id":"themes/yvshare/source/icons/ngrx-actions.svg","hash":"c33801d1bf4cd6dfe48708fb14a02595bca89f31","modified":1520228940423},{"_id":"themes/yvshare/source/icons/ngrx-entity.svg","hash":"74ab73250b09b3b3499145a793daac8a16d574d1","modified":1520228940425},{"_id":"themes/yvshare/source/icons/mxml.svg","hash":"62721ea330b0e10dc1b02c6c5ba62bb36246af09","modified":1520228940422},{"_id":"themes/yvshare/source/icons/mathematica.svg","hash":"0fcb5e3aa178390c8843c258cbbee6c8d9f042d4","modified":1520228940416},{"_id":"themes/yvshare/source/icons/matlab.svg","hash":"77851159d50833f4ffb57d539231b5ad55de8aa0","modified":1520228940417},{"_id":"themes/yvshare/source/icons/ngrx-effects.svg","hash":"1d92b0bf3458a8d56af5ba17594ac64d26e92e88","modified":1520228940424},{"_id":"themes/yvshare/source/icons/ngrx-reducer.svg","hash":"f03b5b3d9e68f8cbcd316bf62e6374109316e33e","modified":1520228940427},{"_id":"themes/yvshare/source/icons/mjml.svg","hash":"72d69be6e4ad92f253d3c9a5f9f2f4d2ff3a1818","modified":1520228940420},{"_id":"themes/yvshare/source/icons/ngrx-state.svg","hash":"552c456b43581d0714ab70d79b62f4f10042da09","modified":1520228940428},{"_id":"themes/yvshare/source/icons/nodejs.svg","hash":"6da561e41764ad9a4001e1a414d2a8913cdb14b6","modified":1520228940433},{"_id":"themes/yvshare/source/icons/nix.svg","hash":"dc447528b4d488a58d121c307b05dbaa3f9d1081","modified":1520228940432},{"_id":"themes/yvshare/source/icons/nodemon.svg","hash":"8479c125ca153afe683df9eb0b8eac7732c1b654","modified":1520228940434},{"_id":"themes/yvshare/source/icons/nunjucks.svg","hash":"2f849c2550855631d9bc46af113116d70becfc87","modified":1520228940436},{"_id":"themes/yvshare/source/icons/nim.svg","hash":"1c717112420880539572a202e623550790534fa0","modified":1520228940430},{"_id":"themes/yvshare/source/icons/perl.svg","hash":"71efbe3afa0fe8d16ccffd2f06190819e6b4d05f","modified":1520228940440},{"_id":"themes/yvshare/source/icons/ocaml.svg","hash":"c0b151ebd9a5fe32bbdb484ef916e0a3a84e9833","modified":1520228940438},{"_id":"themes/yvshare/source/icons/php.svg","hash":"8108dac317e0ddc0491f8253c59eb86c99e3bea9","modified":1520228940441},{"_id":"themes/yvshare/source/icons/pdf.svg","hash":"90d04d9c807d9653b87968549215520d78e99948","modified":1520228940439},{"_id":"themes/yvshare/source/icons/powerpoint.svg","hash":"5ca15dbf52700d2abcf0046e560c1c6f5a31ea37","modified":1520228940445},{"_id":"themes/yvshare/source/icons/php_elephant.svg","hash":"02e0e798882574e0c7f919c478053bae408090f9","modified":1520228940442},{"_id":"themes/yvshare/source/icons/protractor.svg","hash":"8adca9136e6765f02c26005d7de3fde2dad52233","modified":1520228940450},{"_id":"themes/yvshare/source/icons/prettier.svg","hash":"70b2e3a796f26f223f888fa509648c20991b7ca0","modified":1520228940448},{"_id":"themes/yvshare/source/icons/npm.svg","hash":"8a3e2cfea8323052ff9b038c61ff64b1959c5937","modified":1520228940435},{"_id":"themes/yvshare/source/icons/postcss.svg","hash":"fdf1fe615ea8f0bee8eacd2d9af521f66b624cf6","modified":1520228940443},{"_id":"themes/yvshare/source/icons/puppet.svg","hash":"c0e61d8a4f12e418dff18c6b19fec156548a630c","modified":1520228940452},{"_id":"themes/yvshare/source/icons/powershell.svg","hash":"163b279b91783cdab0b0f6c8451dc55da29ad72d","modified":1520228940446},{"_id":"themes/yvshare/source/icons/pug.svg","hash":"bca098382ebc5bcecde35040165e7cc6374ed62f","modified":1520228940451},{"_id":"themes/yvshare/source/icons/python.svg","hash":"5d7aba2c891d5f0e9911849b944aa87943416a91","modified":1520228940455},{"_id":"themes/yvshare/source/icons/purescript.svg","hash":"ccec333c1f07b48c156be7070da510d6fdd19122","modified":1520228940453},{"_id":"themes/yvshare/source/icons/r.svg","hash":"ffd30ff268dd8c768613ed8746aa10e7b4660c4f","modified":1520228940456},{"_id":"themes/yvshare/source/icons/readme.svg","hash":"6dfe78844f87be40abec651b5200646f91503896","modified":1520228940461},{"_id":"themes/yvshare/source/icons/razor.svg","hash":"ebf712733e51b65215e0e413cf7ca9749f0dc3ac","modified":1520228940458},{"_id":"themes/yvshare/source/icons/restql.svg","hash":"17d6b91501a91c992341b22f3949ac61ee0ba4b3","modified":1520228940463},{"_id":"themes/yvshare/source/icons/rollup.svg","hash":"ac8295b840f75962dc787e1d92f765fd88b7cb60","modified":1520228940466},{"_id":"themes/yvshare/source/icons/raml.svg","hash":"49b9851cde33b4e75872c161dbcf4a740fd936d8","modified":1520228940457},{"_id":"themes/yvshare/source/icons/reason.svg","hash":"104e5a838200413c752f009312392b99e49da5d0","modified":1520228940462},{"_id":"themes/yvshare/source/icons/react.svg","hash":"de37bbf07486ce079ef4a10c15449bb3f8c9070c","modified":1520228940460},{"_id":"themes/yvshare/source/icons/riot.svg","hash":"37c1c6db9ccf84aaa0eda08ce8bb96c38983c3ad","modified":1520228940464},{"_id":"themes/yvshare/source/icons/ruby.svg","hash":"8615dc15d1f6fbfab9afadd42c873212eee57084","modified":1520228940468},{"_id":"themes/yvshare/source/icons/rust.svg","hash":"959fd3f1cb3dcd61ce28b2fe21ca1092c9c7e21d","modified":1520228940469},{"_id":"themes/yvshare/source/icons/scala.svg","hash":"6ed2d2ebfe024a1245ebeb7b1f4a7aa1fb831269","modified":1520228940472},{"_id":"themes/yvshare/source/icons/settings.svg","hash":"7c84dca376012576197ba919eb994e4f14b1eddb","modified":1520228940474},{"_id":"themes/yvshare/source/icons/sequelize.svg","hash":"eaeece2ea3bda2bfd488b1d05a70a0a92963d784","modified":1520228940473},{"_id":"themes/yvshare/source/icons/robot.svg","hash":"cb4ed3b18386cfd2f39a60e41aebc6446fe20bf3","modified":1520228940465},{"_id":"themes/yvshare/source/icons/shaderlab.svg","hash":"07bcc8eb19adbee67a0925244ef1c8da18e79840","modified":1520228940475},{"_id":"themes/yvshare/source/icons/slim.svg","hash":"abdeff96d03201032136b075193af09445e83ecb","modified":1520228940476},{"_id":"themes/yvshare/source/icons/solidity.svg","hash":"49f032af05b4636f568ac87010a1b23af0db7bec","modified":1520228940479},{"_id":"themes/yvshare/source/icons/sass.svg","hash":"1fef17f6f2d487ba955e095e3f354938fd995b3d","modified":1520228940470},{"_id":"themes/yvshare/source/icons/sbt.svg","hash":"d4f876088b8a4672207492a0e4108dd7d64766cd","modified":1520228940471},{"_id":"themes/yvshare/source/icons/smarty.svg","hash":"08a6b32de4898e2769325632b27ba860c5d44438","modified":1520228940477},{"_id":"themes/yvshare/source/icons/snyk.svg","hash":"5ebc9f15b0f8388ff21d26a7c3e9e04e706673f8","modified":1520228940478},{"_id":"themes/yvshare/source/icons/sonar.svg","hash":"15ccc9bc1b5b64d307e68a2ff9f443b9a50d006b","modified":1520228940480},{"_id":"themes/yvshare/source/icons/stylelint.svg","hash":"22953c0858bb421ba9b32cbf0705fdb74412b856","modified":1520228940482},{"_id":"themes/yvshare/source/icons/table.svg","hash":"2b8dddf087ed19568919c855a8e6a35989274d1f","modified":1520228940488},{"_id":"themes/yvshare/source/icons/sublime.svg","hash":"9f5bafd5fa1d26bc96d2b061aa6c8748bc12b505","modified":1520228940485},{"_id":"themes/yvshare/source/icons/stylelint_light.svg","hash":"0554f94ea72f85cb3109dcc67b12c36c3813fd44","modified":1520228940483},{"_id":"themes/yvshare/source/icons/stylus.svg","hash":"27c9b416ce096e2b4ac2aaf54122a74b5339770e","modified":1520228940484},{"_id":"themes/yvshare/source/icons/test-jsx.svg","hash":"c0335313c0876d552f81090413682c88bed72f3e","modified":1520228940491},{"_id":"themes/yvshare/source/icons/terraform.svg","hash":"16ac5529e7faecfb3f3c47195b0d6de72cad96d7","modified":1520228940489},{"_id":"themes/yvshare/source/icons/test-js.svg","hash":"64aa785242c29ecf7d13e5d1b81247f07c15f8bd","modified":1520228940490},{"_id":"themes/yvshare/source/icons/todo.svg","hash":"90cfb355349d019f3e688c812dd93e690339eb61","modified":1520228940494},{"_id":"themes/yvshare/source/icons/swc.svg","hash":"d3a43a6ae9a597e7ed309e6ca3208d9e4607202f","modified":1520228940486},{"_id":"themes/yvshare/source/icons/swift.svg","hash":"b0f3b82e72651f39d40207eead1f19806f4561db","modified":1520228940487},{"_id":"themes/yvshare/source/icons/test-ts.svg","hash":"62c7ba574f0db7f5e45ffdaa2ee501952306a9e1","modified":1520228940492},{"_id":"themes/yvshare/source/icons/tex.svg","hash":"208ff64379f5e367703567578d64f317babcd0f8","modified":1520228940493},{"_id":"themes/yvshare/source/icons/tune.svg","hash":"e14079e5e99ca7d9ff58d3c687eccb5c59d6fc91","modified":1520228940496},{"_id":"themes/yvshare/source/icons/twig.svg","hash":"3f644f4b15440aea78a15cfc4e25cd1b5769aa57","modified":1520228940497},{"_id":"themes/yvshare/source/icons/verilog.svg","hash":"f229114a138bb3adaf2350038c13ccbd9570dd7c","modified":1520228940502},{"_id":"themes/yvshare/source/icons/url.svg","hash":"7ec338dd6aaf899e1ba2aa2a0aa9dd29feced69b","modified":1520228940501},{"_id":"themes/yvshare/source/icons/typescript-def.svg","hash":"aa24a01402d0e6beed693252e61b447be4f5e045","modified":1520228940498},{"_id":"themes/yvshare/source/icons/typescript.svg","hash":"b16c00f2dcf4a329caf877056230d29b60634347","modified":1520228940500},{"_id":"themes/yvshare/source/icons/video.svg","hash":"7932449e012866ab5697069eec0f0274ec26671c","modified":1520228940504},{"_id":"themes/yvshare/source/icons/visualstudio.svg","hash":"969c98679b4f6c22e6a129cff5c7aa206d8e393e","modified":1520228940505},{"_id":"themes/yvshare/source/icons/virtual.svg","hash":"7f6df603b1eef2e170c425cfeeaaca1acf8b9676","modified":1520228940504},{"_id":"themes/yvshare/source/icons/vscode.svg","hash":"394adf25ea4ceedc77f1303431245dd8f6a359e1","modified":1520228940506},{"_id":"themes/yvshare/source/icons/vue.svg","hash":"c780292e4b19b6f5ab5772373283178ac647fe3c","modified":1520228940507},{"_id":"themes/yvshare/source/icons/travis.svg","hash":"0693920710d2961a354f43c105cb7848379afbb8","modified":1520228940495},{"_id":"themes/yvshare/source/icons/wakatime.svg","hash":"20555500afb2e2a1a8148ebc547dc9e6e9ea4c18","modified":1520228940508},{"_id":"themes/yvshare/source/icons/vfl.svg","hash":"c4d25bad93efd6acd910c0e2f829fa6ae554777e","modified":1520228940503},{"_id":"themes/yvshare/source/icons/wakatime_light.svg","hash":"90ef0f2f6d96a005a6dbb5c605026459961ba9c5","modified":1520228940509},{"_id":"themes/yvshare/source/icons/xaml.svg","hash":"ce38ce84b727e1d9dba477a9e91bbea2e2a4f5ba","modified":1520228940514},{"_id":"themes/yvshare/source/icons/word.svg","hash":"2ef2830f100a32955d2ee46cbbb89134e5847ee0","modified":1520228940513},{"_id":"themes/yvshare/source/icons/watchman.svg","hash":"7f389d900fb1ddfc52a11dea528bcb63ccaff31a","modified":1520228940510},{"_id":"themes/yvshare/source/icons/xml.svg","hash":"3e622b6d43d85b4334fe82b6901fe221e9e555f1","modified":1520228940515},{"_id":"themes/yvshare/source/icons/webpack.svg","hash":"c9ac33a42ed87984ecb0bc2bfdda3ff6575f7a73","modified":1520228940511},{"_id":"themes/yvshare/source/icons/wolframlanguage.svg","hash":"da723e37dd1eee9affbf97f0e13c3e6e9ffe87aa","modified":1520228940512},{"_id":"themes/yvshare/source/icons/yaml.svg","hash":"4ee94cfe2e626c9824ac2a699197c3602c52877b","modified":1520228940516},{"_id":"themes/yvshare/source/icons/zip.svg","hash":"531f1caa0d213323dffdda050685165780920ee6","modified":1520228940519},{"_id":"themes/yvshare/source/icons/yang.svg","hash":"c01d34df09b524c076949826d6206b3c7dd30cb3","modified":1520228940517},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1519979914768},{"_id":"themes/yvshare/source/images/github2.png","hash":"4b121309981d2800d62b53aac386889d37f77c5d","modified":1520925820088},{"_id":"themes/yvshare/source/images/github3.png","hash":"644d28cf76679814032d598ef99c8fca16c7281a","modified":1520926285303},{"_id":"themes/yvshare/source/images/livere1.png","hash":"8ffceb875a5affb7a97bd40a92d9462603dc8315","modified":1520233461135},{"_id":"themes/yvshare/source/images/swiftype2.png","hash":"aa88b67d3e925b5a5e5b35be29c6e7bccd17e42a","modified":1520339667041},{"_id":"themes/yvshare/source/images/swiftype3.png","hash":"c9444a170ccb8e1c5e3154f82fcae79b5575b05a","modified":1520339703458},{"_id":"themes/yvshare/source/icons/yarn.svg","hash":"2f9e7f188fe409c7dc5b555f89313cc06f322df2","modified":1520228940518},{"_id":"themes/yvshare/source/images/github1.png","hash":"47993d99af31999c0b11dafe8839b8d4de9d9779","modified":1520925345900},{"_id":"themes/yvshare/source/images/livere.png","hash":"bd4f5ca11137c1af00764cceb5b452793b9b4642","modified":1520584783022},{"_id":"themes/yvshare/source/images/swiftype1.png","hash":"9d9d482d95103897c5a2dfa4e55d47b52bda3c6e","modified":1520339540460},{"_id":"themes/yvshare/source/images/swiftype.png","hash":"e8888cc7032282bb640ddf1a5fa1b3548feca904","modified":1520584906744},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.svg","hash":"e471023286b7dd1d2ccc72f670a471cfdfeafab7","modified":1519979914777},{"_id":"themes/yvshare/source/js/jquery.js","hash":"aa6ccf721c4e76921abda46c120772d364e5b285","modified":1519979914759},{"_id":"source/_posts/0809020_总结 You-Dont-Need-Lodash-Underscore.md","hash":"aaff61b089a7ea306386ff255f1d7b6e87e69009","modified":1521187707243},{"_id":"themes/yvshare/source/fonts/browser/firefox.png","hash":"232fe3dd8c7027fc5b976dbf728d9107b055012d","modified":1521187627389},{"_id":"themes/yvshare/source/fonts/browser/chrome.png","hash":"e90c5e49b48e78a4a0579fb01ff1620d3f2348d8","modified":1521187567974},{"_id":"themes/yvshare/source/fonts/browser/ie.png","hash":"ea710c897b93ce4a0577bc973b8709c0de33c96b","modified":1521187639227},{"_id":"themes/yvshare/source/fonts/browser/safari.png","hash":"55519676b8fef69510dd241e8afac72785754983","modified":1521187659146},{"_id":"themes/yvshare/source/fonts/browser/opera.png","hash":"9a901ad06924edeeb27d811620de6451219eb229","modified":1521187648262}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2018-02-26T10:36:38.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-02-26 18:36:38\n---\n","updated":"2018-02-26T10:36:38.391Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjetacc0500019oc0pnyancj6","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"[CSS](/tags/CSS/)","source":"tags/index.md","raw":"[CSS](/tags/CSS/)","date":"2018-02-27T07:45:35.259Z","updated":"2018-02-27T07:45:35.259Z","path":"tags/index.html","title":"","comments":1,"layout":"page","_id":"cjetacc0500039oc0z6nezwup","content":"<p><a href=\"/tags/CSS/\">CSS</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"/tags/CSS/\">CSS</a></p>\n"}],"Post":[{"id":"0809000","title":"Hello World","date":"2017-02-09T13:49:31.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/0809000_hello-world.md","raw":"---\nid: 0809000\ntitle: Hello World\ndate: 2017-02-09 21:49:31\ntags: \n    - HTML\ncategories: \n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"0809000_hello-world","published":1,"updated":"2018-03-05T06:24:49.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc0500009oc059zhtojv","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"id":"0809001","title":"hello","date":"2017-02-09T13:56:46.000Z","_content":"\n- test","source":"_posts/0809001_hello.md","raw":"---\nid: 0809001\ntitle: hello\ndate: 2017-02-09 21:56:46\ntags: \n    - test\n---\n\n- test","slug":"0809001_hello","published":1,"updated":"2018-03-07T03:18:14.718Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc0500029oc0afde1b01","content":"<ul>\n<li>test</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>test</li>\n</ul>\n"},{"id":"0809004","title":"HTML5 存储 webStorage","date":"2018-02-27T09:56:48.000Z","_content":"\n`客户端存储数据的两个对象为：`\n- `localStorage` - 没有时间限制的数据存储\n- `sessionStorage` - 针对一个 session(会话) 的数据存储\n在使用 web 存储前，应检查浏览器是否支持 localStorage 和sessionStorage :\n```js\nif( typeof(Storage) !== \"undefined\" )\n{\n    // 是的! 支持 localStorage  sessionStorage 对象!\n    // your code\n} else {\n    // 抱歉! 不支持 web 存储。\n}\n```\n#### <a name=\"local\">1. localStorage 对象</a>\n- `localStorage` 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。\n实例：\n```js\n// 存储\n// {\"name\": \"yssuo\"}\nlocalStorage.name=\"yasuo\";\n\n// 获取\nconsole.log(localStorage.name); // yasuo\n\n// 移除\nlocalStorage.removeItem(\"name\");\n\n// 再次获取\nconsole.log(localStorage.name); // undefined\n```\n![localstorage](/images/localstorage.png)\n\n#### <a name=\"local\">2. sessionStorage 对象</a>\n\n- `sessionStorage` 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。\n\n不管是 `localStorage`，还是 `sessionStorage`，可使用的API都相同，常用的有如下几个（以localStorage为例）：\n```js\n// 保存数据\nlocalStorage.setItem(key,value);\n// 读取数据\nlocalStorage.getItem(key);\n// 删除单个数据\nlocalStorage.removeItem(key);\n// 删除所有数据\nlocalStorage.clear();\n// 得到某个索引的key\nlocalStorage.key(index);\n```","source":"_posts/0809004_HTML5存储webStorage.md","raw":"---\nid: 0809004\ntitle: HTML5 存储 webStorage\ndate: 2018-02-27 17:56:48\ntags: \n    - HTML5\n    - sessionStorage\n    - localStorage\ncategories:\n---\n\n`客户端存储数据的两个对象为：`\n- `localStorage` - 没有时间限制的数据存储\n- `sessionStorage` - 针对一个 session(会话) 的数据存储\n在使用 web 存储前，应检查浏览器是否支持 localStorage 和sessionStorage :\n```js\nif( typeof(Storage) !== \"undefined\" )\n{\n    // 是的! 支持 localStorage  sessionStorage 对象!\n    // your code\n} else {\n    // 抱歉! 不支持 web 存储。\n}\n```\n#### <a name=\"local\">1. localStorage 对象</a>\n- `localStorage` 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。\n实例：\n```js\n// 存储\n// {\"name\": \"yssuo\"}\nlocalStorage.name=\"yasuo\";\n\n// 获取\nconsole.log(localStorage.name); // yasuo\n\n// 移除\nlocalStorage.removeItem(\"name\");\n\n// 再次获取\nconsole.log(localStorage.name); // undefined\n```\n![localstorage](/images/localstorage.png)\n\n#### <a name=\"local\">2. sessionStorage 对象</a>\n\n- `sessionStorage` 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。\n\n不管是 `localStorage`，还是 `sessionStorage`，可使用的API都相同，常用的有如下几个（以localStorage为例）：\n```js\n// 保存数据\nlocalStorage.setItem(key,value);\n// 读取数据\nlocalStorage.getItem(key);\n// 删除单个数据\nlocalStorage.removeItem(key);\n// 删除所有数据\nlocalStorage.clear();\n// 得到某个索引的key\nlocalStorage.key(index);\n```","slug":"0809004_HTML5存储webStorage","published":1,"updated":"2018-03-09T08:20:34.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc0500059oc0sju7aqu2","content":"<p><code>客户端存储数据的两个对象为：</code></p>\n<ul>\n<li><code>localStorage</code> - 没有时间限制的数据存储</li>\n<li><code>sessionStorage</code> - 针对一个 session(会话) 的数据存储<br>在使用 web 存储前，应检查浏览器是否支持 localStorage 和sessionStorage :<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>( <span class=\"keyword\">typeof</span>(Storage) !== <span class=\"string\">\"undefined\"</span> )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是的! 支持 localStorage  sessionStorage 对象!</span></span><br><span class=\"line\">    <span class=\"comment\">// your code</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 抱歉! 不支持 web 存储。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"1-localStorage-对象\"><a href=\"#1-localStorage-对象\" class=\"headerlink\" title=\"1. localStorage 对象\"></a><a name=\"local\">1. localStorage 对象</a></h4><ul>\n<li><code>localStorage</code> 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。<br>实例：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 存储</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;\"name\": \"yssuo\"&#125;</span></span><br><span class=\"line\">localStorage.name=<span class=\"string\">\"yasuo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(localStorage.name); <span class=\"comment\">// yasuo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除</span></span><br><span class=\"line\">localStorage.removeItem(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再次获取</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(localStorage.name); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/images/localstorage.png\" alt=\"localstorage\"></p>\n<h4 id=\"2-sessionStorage-对象\"><a href=\"#2-sessionStorage-对象\" class=\"headerlink\" title=\"2. sessionStorage 对象\"></a><a name=\"local\">2. sessionStorage 对象</a></h4><ul>\n<li><code>sessionStorage</code> 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。</li>\n</ul>\n<p>不管是 <code>localStorage</code>，还是 <code>sessionStorage</code>，可使用的API都相同，常用的有如下几个（以localStorage为例）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 保存数据</span></span><br><span class=\"line\">localStorage.setItem(key,value);</span><br><span class=\"line\"><span class=\"comment\">// 读取数据</span></span><br><span class=\"line\">localStorage.getItem(key);</span><br><span class=\"line\"><span class=\"comment\">// 删除单个数据</span></span><br><span class=\"line\">localStorage.removeItem(key);</span><br><span class=\"line\"><span class=\"comment\">// 删除所有数据</span></span><br><span class=\"line\">localStorage.clear();</span><br><span class=\"line\"><span class=\"comment\">// 得到某个索引的key</span></span><br><span class=\"line\">localStorage.key(index);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>客户端存储数据的两个对象为：</code></p>\n<ul>\n<li><code>localStorage</code> - 没有时间限制的数据存储</li>\n<li><code>sessionStorage</code> - 针对一个 session(会话) 的数据存储<br>在使用 web 存储前，应检查浏览器是否支持 localStorage 和sessionStorage :<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>( <span class=\"keyword\">typeof</span>(Storage) !== <span class=\"string\">\"undefined\"</span> )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是的! 支持 localStorage  sessionStorage 对象!</span></span><br><span class=\"line\">    <span class=\"comment\">// your code</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 抱歉! 不支持 web 存储。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"1-localStorage-对象\"><a href=\"#1-localStorage-对象\" class=\"headerlink\" title=\"1. localStorage 对象\"></a><a name=\"local\">1. localStorage 对象</a></h4><ul>\n<li><code>localStorage</code> 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。<br>实例：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 存储</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;\"name\": \"yssuo\"&#125;</span></span><br><span class=\"line\">localStorage.name=<span class=\"string\">\"yasuo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(localStorage.name); <span class=\"comment\">// yasuo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除</span></span><br><span class=\"line\">localStorage.removeItem(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再次获取</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(localStorage.name); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/images/localstorage.png\" alt=\"localstorage\"></p>\n<h4 id=\"2-sessionStorage-对象\"><a href=\"#2-sessionStorage-对象\" class=\"headerlink\" title=\"2. sessionStorage 对象\"></a><a name=\"local\">2. sessionStorage 对象</a></h4><ul>\n<li><code>sessionStorage</code> 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。</li>\n</ul>\n<p>不管是 <code>localStorage</code>，还是 <code>sessionStorage</code>，可使用的API都相同，常用的有如下几个（以localStorage为例）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 保存数据</span></span><br><span class=\"line\">localStorage.setItem(key,value);</span><br><span class=\"line\"><span class=\"comment\">// 读取数据</span></span><br><span class=\"line\">localStorage.getItem(key);</span><br><span class=\"line\"><span class=\"comment\">// 删除单个数据</span></span><br><span class=\"line\">localStorage.removeItem(key);</span><br><span class=\"line\"><span class=\"comment\">// 删除所有数据</span></span><br><span class=\"line\">localStorage.clear();</span><br><span class=\"line\"><span class=\"comment\">// 得到某个索引的key</span></span><br><span class=\"line\">localStorage.key(index);</span><br></pre></td></tr></table></figure></p>\n"},{"id":"0809006","title":"有趣的 javascript 数组","date":"2018-02-27T07:48:26.000Z","_content":"\n#### 关于数组的一些认识\n1. 使用构造器函数创建数组时:\n```javascript\nlet ary = new Array();\n```\n- 若参数只有一个，且为数字，`let ary1 = new Array(3)`，这是其实我们是在指定数组的长度的，即 `ary1.length === 3`。`ary1[0]`则为`undefined`;\n- 当定义`let ary2 = new Array(1, 2, 3)`时，此时`ary2 === [1, 2, 3]`;\n2. JS中的数组定义非常的自由：\n 看下面的例子：\n```javascript\nlet ary = [1, 2, 3];\nary[5] = 5;\nconsole.log(ary);           // [1,2,3,undefined,undefined,5]\nconsole.log(ary.length);    // 6\n```\n 再看：\n```javascript\nlet ary2 = [1, 2, 3, 4, 5];\nary2.length = 3;\nconsole.log(ary2);      // [1, 2, 3]\n```\n#### 常用的数组API\n1. 万能方法 `splice()`\n-  splice()方法允许我们对数组进行插入、替换和删除的功能。**splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组**，简直完美呀！\n- `splice()`方法接受三个参数，**第一个**为开始索引，**第二个**为删除元素的位置，**第三个**为插入的元素，可以为第二个，当然也可省略（表示删除元素）。\n- `splice()`方法会修改原数组！\n- 通过以下三个demo了解一下具体的用法吧：\n插入:\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,0,\"add1\");\nconsole.log(ary1);      [ 'first', 'add1', 'second', 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [] 没有删除则放回一个空数组\n```\n替换：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,1,\"replace\");\nconsole.log(ary1);      [ 'first', \"replace, 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [\"second\"] 返回被删除(即替换)的数组\n```\n删除：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,3);\nconsole.log(ary1);      [\"second\", \"third\", \"forth\"]\nconsole.log(ary2);      [\"first\", \"fifth\"]\n```\n2. `slice()` 方法\n- `slice()` 方法可以接受两个参数(start, end)；\n- `slice()` 方法可从已有的数组中返回选定的元素；\n- `slice()` 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；\n- `slice()` 方法**不会改变原始数组**，而是返回一个新数组。\ndemo1:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log (ary.slice(1,2) );      // [\"second\"]\nlet ary1 = ary.slice(1,2);          // [\"second\"]\nlet ary2 = ary.slice(1,3);          // [\"second\", \"third\"]\nconsole.log(ary);                   // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo2:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log(ary.slice(1,2));    // [\"second\"]\nconsole.log(ary.slice(1,3));    // [\"second\", \"third\"]\nconsole.log(ary));              // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo3:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary1 = ary.slice();     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary.slice(0);     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n\nary === ary1;       // false\nary === ary2;       // false\nary1 === ary2;      // false\n```\n**看出来啥猫腻没，这不是深复制一个数据吗！**","source":"_posts/0809006_有趣JavaScript数组.md","raw":"---\nid: 0809006\ntitle: 有趣的 javascript 数组\ndate: 2018-02-27 15:48:26\ntags: \n    - JavaScript\ncategories:\n---\n\n#### 关于数组的一些认识\n1. 使用构造器函数创建数组时:\n```javascript\nlet ary = new Array();\n```\n- 若参数只有一个，且为数字，`let ary1 = new Array(3)`，这是其实我们是在指定数组的长度的，即 `ary1.length === 3`。`ary1[0]`则为`undefined`;\n- 当定义`let ary2 = new Array(1, 2, 3)`时，此时`ary2 === [1, 2, 3]`;\n2. JS中的数组定义非常的自由：\n 看下面的例子：\n```javascript\nlet ary = [1, 2, 3];\nary[5] = 5;\nconsole.log(ary);           // [1,2,3,undefined,undefined,5]\nconsole.log(ary.length);    // 6\n```\n 再看：\n```javascript\nlet ary2 = [1, 2, 3, 4, 5];\nary2.length = 3;\nconsole.log(ary2);      // [1, 2, 3]\n```\n#### 常用的数组API\n1. 万能方法 `splice()`\n-  splice()方法允许我们对数组进行插入、替换和删除的功能。**splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组**，简直完美呀！\n- `splice()`方法接受三个参数，**第一个**为开始索引，**第二个**为删除元素的位置，**第三个**为插入的元素，可以为第二个，当然也可省略（表示删除元素）。\n- `splice()`方法会修改原数组！\n- 通过以下三个demo了解一下具体的用法吧：\n插入:\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,0,\"add1\");\nconsole.log(ary1);      [ 'first', 'add1', 'second', 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [] 没有删除则放回一个空数组\n```\n替换：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,1,\"replace\");\nconsole.log(ary1);      [ 'first', \"replace, 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [\"second\"] 返回被删除(即替换)的数组\n```\n删除：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,3);\nconsole.log(ary1);      [\"second\", \"third\", \"forth\"]\nconsole.log(ary2);      [\"first\", \"fifth\"]\n```\n2. `slice()` 方法\n- `slice()` 方法可以接受两个参数(start, end)；\n- `slice()` 方法可从已有的数组中返回选定的元素；\n- `slice()` 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；\n- `slice()` 方法**不会改变原始数组**，而是返回一个新数组。\ndemo1:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log (ary.slice(1,2) );      // [\"second\"]\nlet ary1 = ary.slice(1,2);          // [\"second\"]\nlet ary2 = ary.slice(1,3);          // [\"second\", \"third\"]\nconsole.log(ary);                   // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo2:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log(ary.slice(1,2));    // [\"second\"]\nconsole.log(ary.slice(1,3));    // [\"second\", \"third\"]\nconsole.log(ary));              // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo3:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary1 = ary.slice();     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary.slice(0);     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n\nary === ary1;       // false\nary === ary2;       // false\nary1 === ary2;      // false\n```\n**看出来啥猫腻没，这不是深复制一个数据吗！**","slug":"0809006_有趣JavaScript数组","published":1,"updated":"2018-03-13T07:04:13.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc0k00069oc0qa02kj51","content":"<h4 id=\"关于数组的一些认识\"><a href=\"#关于数组的一些认识\" class=\"headerlink\" title=\"关于数组的一些认识\"></a>关于数组的一些认识</h4><ol>\n<li>使用构造器函数创建数组时:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>若参数只有一个，且为数字，<code>let ary1 = new Array(3)</code>，这是其实我们是在指定数组的长度的，即 <code>ary1.length === 3</code>。<code>ary1[0]</code>则为<code>undefined</code>;</li>\n<li>当定义<code>let ary2 = new Array(1, 2, 3)</code>时，此时<code>ary2 === [1, 2, 3]</code>;</li>\n</ul>\n<ol>\n<li><p>JS中的数组定义非常的自由：<br>看下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">ary[<span class=\"number\">5</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);           <span class=\"comment\">// [1,2,3,undefined,undefined,5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.length);    <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>再看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">ary2.length = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"常用的数组API\"><a href=\"#常用的数组API\" class=\"headerlink\" title=\"常用的数组API\"></a>常用的数组API</h4><ol>\n<li>万能方法 <code>splice()</code></li>\n</ol>\n<ul>\n<li>splice()方法允许我们对数组进行插入、替换和删除的功能。<strong>splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组</strong>，简直完美呀！</li>\n<li><code>splice()</code>方法接受三个参数，<strong>第一个</strong>为开始索引，<strong>第二个</strong>为删除元素的位置，<strong>第三个</strong>为插入的元素，可以为第二个，当然也可省略（表示删除元素）。</li>\n<li><code>splice()</code>方法会修改原数组！</li>\n<li>通过以下三个demo了解一下具体的用法吧：<br>插入:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">\"add1\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">'add1'</span>, <span class=\"string\">'second'</span>, <span class=\"string\">'third'</span>, <span class=\"string\">'forth'</span>, <span class=\"string\">'fifth'</span> ]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [] 没有删除则放回一个空数组</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>替换：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">\"replace\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">\"replace, 'third', 'forth', 'fifth' ]</span></span><br><span class=\"line\"><span class=\"string\">console.log(ary2);      [\"</span>second<span class=\"string\">\"] 返回被删除(即替换)的数组</span></span><br></pre></td></tr></table></figure></p>\n<p>删除：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [<span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"fifth\"</span>]</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><code>slice()</code> 方法</li>\n</ol>\n<ul>\n<li><code>slice()</code> 方法可以接受两个参数(start, end)；</li>\n<li><code>slice()</code> 方法可从已有的数组中返回选定的元素；</li>\n<li><code>slice()</code> 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；</li>\n<li><code>slice()</code> 方法<strong>不会改变原始数组</strong>，而是返回一个新数组。<br>demo1:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log (ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>) );      <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>);          <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);          <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);                   <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>demo2:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>));    <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>));    <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary));              <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure></p>\n<p>demo3:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice();     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">0</span>);     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"></span><br><span class=\"line\">ary === ary1;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary === ary2;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary1 === ary2;      <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>看出来啥猫腻没，这不是深复制一个数据吗！</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"关于数组的一些认识\"><a href=\"#关于数组的一些认识\" class=\"headerlink\" title=\"关于数组的一些认识\"></a>关于数组的一些认识</h4><ol>\n<li>使用构造器函数创建数组时:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>若参数只有一个，且为数字，<code>let ary1 = new Array(3)</code>，这是其实我们是在指定数组的长度的，即 <code>ary1.length === 3</code>。<code>ary1[0]</code>则为<code>undefined</code>;</li>\n<li>当定义<code>let ary2 = new Array(1, 2, 3)</code>时，此时<code>ary2 === [1, 2, 3]</code>;</li>\n</ul>\n<ol>\n<li><p>JS中的数组定义非常的自由：<br>看下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">ary[<span class=\"number\">5</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);           <span class=\"comment\">// [1,2,3,undefined,undefined,5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.length);    <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>再看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">ary2.length = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"常用的数组API\"><a href=\"#常用的数组API\" class=\"headerlink\" title=\"常用的数组API\"></a>常用的数组API</h4><ol>\n<li>万能方法 <code>splice()</code></li>\n</ol>\n<ul>\n<li>splice()方法允许我们对数组进行插入、替换和删除的功能。<strong>splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组</strong>，简直完美呀！</li>\n<li><code>splice()</code>方法接受三个参数，<strong>第一个</strong>为开始索引，<strong>第二个</strong>为删除元素的位置，<strong>第三个</strong>为插入的元素，可以为第二个，当然也可省略（表示删除元素）。</li>\n<li><code>splice()</code>方法会修改原数组！</li>\n<li>通过以下三个demo了解一下具体的用法吧：<br>插入:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">\"add1\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">'add1'</span>, <span class=\"string\">'second'</span>, <span class=\"string\">'third'</span>, <span class=\"string\">'forth'</span>, <span class=\"string\">'fifth'</span> ]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [] 没有删除则放回一个空数组</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>替换：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">\"replace\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">\"replace, 'third', 'forth', 'fifth' ]</span></span><br><span class=\"line\"><span class=\"string\">console.log(ary2);      [\"</span>second<span class=\"string\">\"] 返回被删除(即替换)的数组</span></span><br></pre></td></tr></table></figure></p>\n<p>删除：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [<span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"fifth\"</span>]</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><code>slice()</code> 方法</li>\n</ol>\n<ul>\n<li><code>slice()</code> 方法可以接受两个参数(start, end)；</li>\n<li><code>slice()</code> 方法可从已有的数组中返回选定的元素；</li>\n<li><code>slice()</code> 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；</li>\n<li><code>slice()</code> 方法<strong>不会改变原始数组</strong>，而是返回一个新数组。<br>demo1:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log (ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>) );      <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>);          <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);          <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);                   <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>demo2:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>));    <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>));    <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary));              <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure></p>\n<p>demo3:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice();     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">0</span>);     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"></span><br><span class=\"line\">ary === ary1;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary === ary2;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary1 === ary2;      <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>看出来啥猫腻没，这不是深复制一个数据吗！</strong></p>\n"},{"id":"0809002","title":"CSS3 渐变","date":"2017-02-27T10:01:38.000Z","_content":"\n#### CSS3 定义了两种类型的渐变（gradients）：\n\n1. 线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向\n2. 径向渐变（Radial Gradients）- 由它们的中心定义\n#### 注意： IE 9 及之前的版本不支持渐变。\n### 线性渐变：\n- `background: linear-gradient(direction, color-stop1, color-stop2, ...);`\n#### 1. 线性渐变 - 从上到下（默认情况下）:\n```css\n.box {\n  background: -webkit-linear-gradient(red, blue);   /* Safari 5.1 - 6.0 */\n  background: -o-linear-gradient(red, blue);        /* Opera 11.1 - 12.0 */\n  background: -moz-linear-gradient(red, blue);      /* Firefox 3.6 - 15 */\n  background: linear-gradient(red, blue);           /* 标准的语法(必须放在最后) */\n}\n```\n效果图 ![效果图](/images/gradient/渐变1.png)\n#### 2. 线性渐变 - 从左到右\n```css\n.box {\n    height: 50px;\n    background: -webkit-linear-gradient(left, red , blue);\n    background: -o-linear-gradient(right, red, blue);\n    background: -moz-linear-gradient(right, red, blue);\n    background: linear-gradient(to right, red , blue);\n}\n```\n效果图 ![效果图](/images/gradient/渐变2.png)\n#### 3. 重复的线性渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-repeating-linear-gradient(red, yellow 10%, green 20%);  \n    background: -o-repeating-linear-gradient(red, yellow 10%, green 20%);       \n    background: -moz-repeating-linear-gradient(red, yellow 10%, green 20%);  \n    background: repeating-linear-gradient(red, yellow 10%, green 20%);    \n}\n```\n效果图 ![效果图](/images/gradient/渐变3.png)\n#### 4. 线性渐变进阶\n```css\n.box{\n    height: 100px;\n    width: 100px;\n    background: -webkit-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: -o-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: -moz-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n}\n```\n效果图 ![效果图](/images/gradient/0deg.png)\n\n没错，就是通过角度来空值渐变的起始位置：\n- 45deg 效果图 ![效果图](/images/gradient/45deg.png)\n- 90deg 效果图 ![效果图](/images/gradient/90deg.png)\n- 135deg 效果图 ![效果图](/images/gradient/135deg.png)\n\n*由此，我们知道了起始可以通过角度来获得我们想要的线性渐变的各种效果了，这基本能满足我们大多数的需求了。*\n径向渐变\n- `background: radial-gradient(center, shape size, start-color, ..., last-color);`\n1. 径向渐变由它的中心定义。\n2. 为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。\n#### 1. 普通的径向渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-radial-gradient(red, green, blue);  \n    background: -o-radial-gradient(red, green, blue);\n    background: -moz-radial-gradient(red, green, blue);  \n    background: radial-gradient(red, green, blue);    \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变1.png)\n#### 2. 不均匀的径向渐变\n```css\n.box {\n  background: -webkit-radial-gradient(red 5%, green 15%, blue 60%);     \n  background: -o-radial-gradient(red 5%, green 15%, blue 60%);\n  background: -moz-radial-gradient(red 5%, green 15%, blue 60%);     \n  background: radial-gradient(red 5%, green 15%, blue 60%);\n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变2.png)\n**径向渐变容器如果不为正方形，则渐变区域会默认呈现为椭圆，若为正方形，则会呈现为正方形。**\n#### 3.不同尺寸的径向渐变\n- closest-side\n- farthest-side\n- closest-corner\n- farthest-corner\n```css\n.box {\n    background: -webkit-radial-gradient(70% 50%, closest-side,red,green,blue);     \n    background: -o-radial-gradient(70% 50%, closest-side,red,green,blue);\n    background: -moz-radial-gradient(70% 50%, closest-side,red,green,blue);     \n    background: radial-gradient(70% 50%, closest-side,red,green,blue);       \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变3.png)\n1.  从上面的效果图中可以看出径向渐变的渐变原点的作用\n2. 通过设置尺寸属性可以改变其大小\n#### 4.重复的径向渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-repeating-radial-gradient(red, yellow 10%, green 15%);  \n    background: -o-repeating-radial-gradient(red, yellow 10%, green 15%);\n    background: -moz-repeating-radial-gradient(red, yellow 10%, green 15%);  \n    background: repeating-radial-gradient(red, yellow 10%, green 15%);    \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变4.png)\n","source":"_posts/0809002_CSS3 渐变.md","raw":"---\nid: 0809002\ntitle: CSS3 渐变\ndate: 2017-02-27 18:01:38\ntags:\n    - CSS3\ncategories:\n---\n\n#### CSS3 定义了两种类型的渐变（gradients）：\n\n1. 线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向\n2. 径向渐变（Radial Gradients）- 由它们的中心定义\n#### 注意： IE 9 及之前的版本不支持渐变。\n### 线性渐变：\n- `background: linear-gradient(direction, color-stop1, color-stop2, ...);`\n#### 1. 线性渐变 - 从上到下（默认情况下）:\n```css\n.box {\n  background: -webkit-linear-gradient(red, blue);   /* Safari 5.1 - 6.0 */\n  background: -o-linear-gradient(red, blue);        /* Opera 11.1 - 12.0 */\n  background: -moz-linear-gradient(red, blue);      /* Firefox 3.6 - 15 */\n  background: linear-gradient(red, blue);           /* 标准的语法(必须放在最后) */\n}\n```\n效果图 ![效果图](/images/gradient/渐变1.png)\n#### 2. 线性渐变 - 从左到右\n```css\n.box {\n    height: 50px;\n    background: -webkit-linear-gradient(left, red , blue);\n    background: -o-linear-gradient(right, red, blue);\n    background: -moz-linear-gradient(right, red, blue);\n    background: linear-gradient(to right, red , blue);\n}\n```\n效果图 ![效果图](/images/gradient/渐变2.png)\n#### 3. 重复的线性渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-repeating-linear-gradient(red, yellow 10%, green 20%);  \n    background: -o-repeating-linear-gradient(red, yellow 10%, green 20%);       \n    background: -moz-repeating-linear-gradient(red, yellow 10%, green 20%);  \n    background: repeating-linear-gradient(red, yellow 10%, green 20%);    \n}\n```\n效果图 ![效果图](/images/gradient/渐变3.png)\n#### 4. 线性渐变进阶\n```css\n.box{\n    height: 100px;\n    width: 100px;\n    background: -webkit-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: -o-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: -moz-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n}\n```\n效果图 ![效果图](/images/gradient/0deg.png)\n\n没错，就是通过角度来空值渐变的起始位置：\n- 45deg 效果图 ![效果图](/images/gradient/45deg.png)\n- 90deg 效果图 ![效果图](/images/gradient/90deg.png)\n- 135deg 效果图 ![效果图](/images/gradient/135deg.png)\n\n*由此，我们知道了起始可以通过角度来获得我们想要的线性渐变的各种效果了，这基本能满足我们大多数的需求了。*\n径向渐变\n- `background: radial-gradient(center, shape size, start-color, ..., last-color);`\n1. 径向渐变由它的中心定义。\n2. 为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。\n#### 1. 普通的径向渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-radial-gradient(red, green, blue);  \n    background: -o-radial-gradient(red, green, blue);\n    background: -moz-radial-gradient(red, green, blue);  \n    background: radial-gradient(red, green, blue);    \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变1.png)\n#### 2. 不均匀的径向渐变\n```css\n.box {\n  background: -webkit-radial-gradient(red 5%, green 15%, blue 60%);     \n  background: -o-radial-gradient(red 5%, green 15%, blue 60%);\n  background: -moz-radial-gradient(red 5%, green 15%, blue 60%);     \n  background: radial-gradient(red 5%, green 15%, blue 60%);\n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变2.png)\n**径向渐变容器如果不为正方形，则渐变区域会默认呈现为椭圆，若为正方形，则会呈现为正方形。**\n#### 3.不同尺寸的径向渐变\n- closest-side\n- farthest-side\n- closest-corner\n- farthest-corner\n```css\n.box {\n    background: -webkit-radial-gradient(70% 50%, closest-side,red,green,blue);     \n    background: -o-radial-gradient(70% 50%, closest-side,red,green,blue);\n    background: -moz-radial-gradient(70% 50%, closest-side,red,green,blue);     \n    background: radial-gradient(70% 50%, closest-side,red,green,blue);       \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变3.png)\n1.  从上面的效果图中可以看出径向渐变的渐变原点的作用\n2. 通过设置尺寸属性可以改变其大小\n#### 4.重复的径向渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-repeating-radial-gradient(red, yellow 10%, green 15%);  \n    background: -o-repeating-radial-gradient(red, yellow 10%, green 15%);\n    background: -moz-repeating-radial-gradient(red, yellow 10%, green 15%);  \n    background: repeating-radial-gradient(red, yellow 10%, green 15%);    \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变4.png)\n","slug":"0809002_CSS3 渐变","published":1,"updated":"2018-03-09T08:20:54.932Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc1000079oc09zq2xuco","content":"<h4 id=\"CSS3-定义了两种类型的渐变（gradients）：\"><a href=\"#CSS3-定义了两种类型的渐变（gradients）：\" class=\"headerlink\" title=\"CSS3 定义了两种类型的渐变（gradients）：\"></a>CSS3 定义了两种类型的渐变（gradients）：</h4><ol>\n<li>线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向</li>\n<li>径向渐变（Radial Gradients）- 由它们的中心定义<h4 id=\"注意：-IE-9-及之前的版本不支持渐变。\"><a href=\"#注意：-IE-9-及之前的版本不支持渐变。\" class=\"headerlink\" title=\"注意： IE 9 及之前的版本不支持渐变。\"></a>注意： IE 9 及之前的版本不支持渐变。</h4><h3 id=\"线性渐变：\"><a href=\"#线性渐变：\" class=\"headerlink\" title=\"线性渐变：\"></a>线性渐变：</h3></li>\n</ol>\n<ul>\n<li><code>background: linear-gradient(direction, color-stop1, color-stop2, ...);</code><h4 id=\"1-线性渐变-从上到下（默认情况下）\"><a href=\"#1-线性渐变-从上到下（默认情况下）\" class=\"headerlink\" title=\"1. 线性渐变 - 从上到下（默认情况下）:\"></a>1. 线性渐变 - 从上到下（默认情况下）:</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(red, blue);   <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(red, blue);        <span class=\"comment\">/* Opera 11.1 - 12.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(red, blue);      <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(red, blue);           <span class=\"comment\">/* 标准的语法(必须放在最后) */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>效果图 <img src=\"/images/gradient/渐变1.png\" alt=\"效果图\"></p>\n<h4 id=\"2-线性渐变-从左到右\"><a href=\"#2-线性渐变-从左到右\" class=\"headerlink\" title=\"2. 线性渐变 - 从左到右\"></a>2. 线性渐变 - 从左到右</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(left, red , blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(right, red, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(right, red, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to right, red , blue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/渐变2.png\" alt=\"效果图\"></p>\n<h4 id=\"3-重复的线性渐变\"><a href=\"#3-重复的线性渐变\" class=\"headerlink\" title=\"3. 重复的线性渐变\"></a>3. 重复的线性渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-repeating-linear-gradient</span>(red, yellow 10%, green 20%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-repeating-linear-gradient</span>(red, yellow 10%, green 20%);       </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-repeating-linear-gradient</span>(red, yellow 10%, green 20%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-linear-gradient</span>(red, yellow 10%, green 20%);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/渐变3.png\" alt=\"效果图\"></p>\n<h4 id=\"4-线性渐变进阶\"><a href=\"#4-线性渐变进阶\" class=\"headerlink\" title=\"4. 线性渐变进阶\"></a>4. 线性渐变进阶</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/0deg.png\" alt=\"效果图\"></p>\n<p>没错，就是通过角度来空值渐变的起始位置：</p>\n<ul>\n<li>45deg 效果图 <img src=\"/images/gradient/45deg.png\" alt=\"效果图\"></li>\n<li>90deg 效果图 <img src=\"/images/gradient/90deg.png\" alt=\"效果图\"></li>\n<li>135deg 效果图 <img src=\"/images/gradient/135deg.png\" alt=\"效果图\"></li>\n</ul>\n<p><em>由此，我们知道了起始可以通过角度来获得我们想要的线性渐变的各种效果了，这基本能满足我们大多数的需求了。</em><br>径向渐变</p>\n<ul>\n<li><code>background: radial-gradient(center, shape size, start-color, ..., last-color);</code></li>\n</ul>\n<ol>\n<li>径向渐变由它的中心定义。</li>\n<li>为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。<h4 id=\"1-普通的径向渐变\"><a href=\"#1-普通的径向渐变\" class=\"headerlink\" title=\"1. 普通的径向渐变\"></a>1. 普通的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(red, green, blue);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(red, green, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(red, green, blue);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(red, green, blue);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变1.png\" alt=\"效果图\"></p>\n<h4 id=\"2-不均匀的径向渐变\"><a href=\"#2-不均匀的径向渐变\" class=\"headerlink\" title=\"2. 不均匀的径向渐变\"></a>2. 不均匀的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(red 5%, green 15%, blue 60%);     </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(red 5%, green 15%, blue 60%);</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(red 5%, green 15%, blue 60%);     </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(red 5%, green 15%, blue 60%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变2.png\" alt=\"效果图\"><br><strong>径向渐变容器如果不为正方形，则渐变区域会默认呈现为椭圆，若为正方形，则会呈现为正方形。</strong></p>\n<h4 id=\"3-不同尺寸的径向渐变\"><a href=\"#3-不同尺寸的径向渐变\" class=\"headerlink\" title=\"3.不同尺寸的径向渐变\"></a>3.不同尺寸的径向渐变</h4></li>\n<li>closest-side</li>\n<li>farthest-side</li>\n<li>closest-corner</li>\n<li><p>farthest-corner</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(70% 50%, closest-side,red,green,blue);     </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(70% 50%, closest-side,red,green,blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(70% 50%, closest-side,red,green,blue);     </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(70% 50%, closest-side,red,green,blue);       </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变3.png\" alt=\"效果图\"></p>\n</li>\n</ul>\n<ol>\n<li>从上面的效果图中可以看出径向渐变的渐变原点的作用</li>\n<li>通过设置尺寸属性可以改变其大小<h4 id=\"4-重复的径向渐变\"><a href=\"#4-重复的径向渐变\" class=\"headerlink\" title=\"4.重复的径向渐变\"></a>4.重复的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-repeating-radial-gradient</span>(red, yellow 10%, green 15%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-repeating-radial-gradient</span>(red, yellow 10%, green 15%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-repeating-radial-gradient</span>(red, yellow 10%, green 15%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-radial-gradient</span>(red, yellow 10%, green 15%);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>效果图 <img src=\"/images/gradient/径向渐变4.png\" alt=\"效果图\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"CSS3-定义了两种类型的渐变（gradients）：\"><a href=\"#CSS3-定义了两种类型的渐变（gradients）：\" class=\"headerlink\" title=\"CSS3 定义了两种类型的渐变（gradients）：\"></a>CSS3 定义了两种类型的渐变（gradients）：</h4><ol>\n<li>线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向</li>\n<li>径向渐变（Radial Gradients）- 由它们的中心定义<h4 id=\"注意：-IE-9-及之前的版本不支持渐变。\"><a href=\"#注意：-IE-9-及之前的版本不支持渐变。\" class=\"headerlink\" title=\"注意： IE 9 及之前的版本不支持渐变。\"></a>注意： IE 9 及之前的版本不支持渐变。</h4><h3 id=\"线性渐变：\"><a href=\"#线性渐变：\" class=\"headerlink\" title=\"线性渐变：\"></a>线性渐变：</h3></li>\n</ol>\n<ul>\n<li><code>background: linear-gradient(direction, color-stop1, color-stop2, ...);</code><h4 id=\"1-线性渐变-从上到下（默认情况下）\"><a href=\"#1-线性渐变-从上到下（默认情况下）\" class=\"headerlink\" title=\"1. 线性渐变 - 从上到下（默认情况下）:\"></a>1. 线性渐变 - 从上到下（默认情况下）:</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(red, blue);   <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(red, blue);        <span class=\"comment\">/* Opera 11.1 - 12.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(red, blue);      <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(red, blue);           <span class=\"comment\">/* 标准的语法(必须放在最后) */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>效果图 <img src=\"/images/gradient/渐变1.png\" alt=\"效果图\"></p>\n<h4 id=\"2-线性渐变-从左到右\"><a href=\"#2-线性渐变-从左到右\" class=\"headerlink\" title=\"2. 线性渐变 - 从左到右\"></a>2. 线性渐变 - 从左到右</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(left, red , blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(right, red, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(right, red, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to right, red , blue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/渐变2.png\" alt=\"效果图\"></p>\n<h4 id=\"3-重复的线性渐变\"><a href=\"#3-重复的线性渐变\" class=\"headerlink\" title=\"3. 重复的线性渐变\"></a>3. 重复的线性渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-repeating-linear-gradient</span>(red, yellow 10%, green 20%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-repeating-linear-gradient</span>(red, yellow 10%, green 20%);       </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-repeating-linear-gradient</span>(red, yellow 10%, green 20%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-linear-gradient</span>(red, yellow 10%, green 20%);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/渐变3.png\" alt=\"效果图\"></p>\n<h4 id=\"4-线性渐变进阶\"><a href=\"#4-线性渐变进阶\" class=\"headerlink\" title=\"4. 线性渐变进阶\"></a>4. 线性渐变进阶</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/0deg.png\" alt=\"效果图\"></p>\n<p>没错，就是通过角度来空值渐变的起始位置：</p>\n<ul>\n<li>45deg 效果图 <img src=\"/images/gradient/45deg.png\" alt=\"效果图\"></li>\n<li>90deg 效果图 <img src=\"/images/gradient/90deg.png\" alt=\"效果图\"></li>\n<li>135deg 效果图 <img src=\"/images/gradient/135deg.png\" alt=\"效果图\"></li>\n</ul>\n<p><em>由此，我们知道了起始可以通过角度来获得我们想要的线性渐变的各种效果了，这基本能满足我们大多数的需求了。</em><br>径向渐变</p>\n<ul>\n<li><code>background: radial-gradient(center, shape size, start-color, ..., last-color);</code></li>\n</ul>\n<ol>\n<li>径向渐变由它的中心定义。</li>\n<li>为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。<h4 id=\"1-普通的径向渐变\"><a href=\"#1-普通的径向渐变\" class=\"headerlink\" title=\"1. 普通的径向渐变\"></a>1. 普通的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(red, green, blue);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(red, green, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(red, green, blue);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(red, green, blue);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变1.png\" alt=\"效果图\"></p>\n<h4 id=\"2-不均匀的径向渐变\"><a href=\"#2-不均匀的径向渐变\" class=\"headerlink\" title=\"2. 不均匀的径向渐变\"></a>2. 不均匀的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(red 5%, green 15%, blue 60%);     </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(red 5%, green 15%, blue 60%);</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(red 5%, green 15%, blue 60%);     </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(red 5%, green 15%, blue 60%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变2.png\" alt=\"效果图\"><br><strong>径向渐变容器如果不为正方形，则渐变区域会默认呈现为椭圆，若为正方形，则会呈现为正方形。</strong></p>\n<h4 id=\"3-不同尺寸的径向渐变\"><a href=\"#3-不同尺寸的径向渐变\" class=\"headerlink\" title=\"3.不同尺寸的径向渐变\"></a>3.不同尺寸的径向渐变</h4></li>\n<li>closest-side</li>\n<li>farthest-side</li>\n<li>closest-corner</li>\n<li><p>farthest-corner</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(70% 50%, closest-side,red,green,blue);     </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(70% 50%, closest-side,red,green,blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(70% 50%, closest-side,red,green,blue);     </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(70% 50%, closest-side,red,green,blue);       </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变3.png\" alt=\"效果图\"></p>\n</li>\n</ul>\n<ol>\n<li>从上面的效果图中可以看出径向渐变的渐变原点的作用</li>\n<li>通过设置尺寸属性可以改变其大小<h4 id=\"4-重复的径向渐变\"><a href=\"#4-重复的径向渐变\" class=\"headerlink\" title=\"4.重复的径向渐变\"></a>4.重复的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-repeating-radial-gradient</span>(red, yellow 10%, green 15%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-repeating-radial-gradient</span>(red, yellow 10%, green 15%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-repeating-radial-gradient</span>(red, yellow 10%, green 15%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-radial-gradient</span>(red, yellow 10%, green 15%);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>效果图 <img src=\"/images/gradient/径向渐变4.png\" alt=\"效果图\"></li>\n</ul>\n"},{"id":"0809007","title":"记一次在公司中配置 Babel 的经历","date":"2018-03-01T01:46:10.000Z","_content":"\n- <a href=\"#install\">安装</a>\n- <a href=\"#usage\">使用</a>\n- <a href=\"#babelrc\">创建.babelrc文件</a>\n- <a href=\"#polyfill\">Babel-Polyfill</a>\n- <a href=\"#register\">Babel-Register</a>\n\n&emsp;首先，为什么会写这样一篇文章呢？在进入公司几个月后，写业务代码都是使用es5语法，es6，于是想着使用Babel来构建一下。这样既可以愉快的使用ES6了，还能舒心的写代码，何乐而不为。\n\n- Babel的使用是基于Node.js环境的，所以必须先安装Node。\n- 我们将采用通过安装babel-cli的方式来使用babel。\n\n#### <a name=\"install\">1. 安装</a>\n&emsp;虽然你可以在你的机器上全局安装`Babel CLI`, 但根据单个项目进行本地安装会更好一些。这样做有两个主要的原因：\n* 同一机器上的不同的项目可以依赖不同版本的 Babel, 这允许你一次更新一个项目。\n* 这意味着在你的工作环境中没有隐含的依赖项。它将使你的项目更方便移植、更易于安装。\n\n> 首先我们需要生成一个package.json文件，进入到项目目录执行`npm init`命令，随后一顿选择回车。\n\n```bash\nYSY@SY-YU MINGW64 /d/START/webpack\n$ npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help json` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install <pkg>` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\npackage name: (webpack)\n```\n*最后，目录下会生成一个package.json文件，打开看一下*\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\"\n}\n```\n*里面都是刚才npm init时自己的配置*\n\n> 我们可以通过以下命令本地安装 Babel CLI:\n\n```bash\n// 全局安装\nnpm install babel-cli -g\n// 安装在当前项目中\nnpm install --save-dev babel-cli\n```\n我们在当前目录安装babel-cli，随后我们的package.json应该长这个样：\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.26.0\"\n  }\n}\n```\n\n#### <a name=\"usage\">2. 使用</a>\n- 我们将把我们的指令放在本地版本的 npm 脚本中，而不是直接通过命令行来运行 Babel.\n\n> 简单的在你的 package.json 中添加一个 \"scripts\" 属性并将 babel 命令放在它的 build 属性中：\n\n```json\n  {\n    \"name\": \"webpack\",\n    \"version\": \"1.0.0\",\n    \"scripts\": {\n      \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n+     \"build\": \"babel src -d lib\"  // 加入这一句命令\n    },\n    \"devDependencies\": {\n      \"babel-cli\": \"^6.26.0\"\n    }\n  }\n```\n现在从我们的终端可以运行以下命令：\n```bash\nnpm run build\n```\n*这会按照和之前一样的方式来运行 Babel 并将输出放在 lib 目录下，唯一不同在于我们现在使用了一个本地拷贝。*\n> 值得注意的是在babel的build命令是可以在build属性中自行配置的，上面是把src目录下的脚本打包到lib目录中，你也可以打包单个文件...\n\n#### <a name=\"babelrc\">3. 创建.babelrc配置文件</a>\n\n- 虽然已经配置好了 Babel ，但并没有让它真正生效。在项目的根目录中创建一个 .babelrc 文件并启用一些插件。 [详看](https://babeljs.cn/docs/setup/#installation)\n\n首先，你可以使用转换 ES2015+ 的 env preset：\n```bash\nnpm install babel-preset-env --save-dev\n```\n为了让 preset 生效，你需要像下面这样定义你的 .babelrc 文件：\n```json\n{\n  \"presets\": [\"env\"],\n  \"plugins\": []\n}\n```\n> .babelrc配置文件非常丰富：\n\n```bash\n# ES2015转码规则\n$ npm install --save-dev babel-preset-es2015\n\n# react转码规则\n$ npm install --save-dev babel-preset-react\n\n# ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个\n$ npm install --save-dev babel-preset-stage-0\n$ npm install --save-dev babel-preset-stage-1\n$ npm install --save-dev babel-preset-stage-2\n$ npm install --save-dev babel-preset-stage-3\n```\n最后，我们的 .babelrc 文件可以长这个样：\n``` json\n{\n  \"presets\": [\n    \"es2015\",\n    \"react\",\n    \"stage-2\"\n  ],\n  \"plugins\": []\n}\n```\n\n#### <a name=\"polyfill\">4. Babel-Polyfill</a>\n\nBabel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如`Object.assign`）都不会转码。\n\n举例来说，ES6在Array对象上新增了`Array.from`方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。\n\n安装命令如下：\n```bash\nnpm install --save babel-polyfill\n```\n然后，在脚本头部，加入如下一行代码：\n```js\nimport 'babel-polyfill';\n// 或者\nrequire('babel-polyfill');\n```\n\n#### <a name=\"register\">5. Babel-Register</a>\n\nbabel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。\n```bash\nnpm install --save-dev babel-register\n```\n使用时，必须首先加载babel-register：\n```js\nimport(\"babel-register\");\nimport(\"./index.js\");\n```\n然后，就不需要手动对index.js转码了。\n> 需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在`开发环境`使用。\n\n#### `后记`：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\n---\n> 参考文档： [babeljs.cn](https://babeljs.cn/) / [ruanyifeng.com](http://www.ruanyifeng.com/blog/2016/01/babel.html?20170213113809)","source":"_posts/0809007_记一次在公司中配置Babel的经历.md","raw":"---\nid: 0809007\ntitle: 记一次在公司中配置 Babel 的经历\ndate: 2018-03-01 09:46:10\ntags:\n    - Babel\n    - es6\n    - JavaScript\ncategories:\n---\n\n- <a href=\"#install\">安装</a>\n- <a href=\"#usage\">使用</a>\n- <a href=\"#babelrc\">创建.babelrc文件</a>\n- <a href=\"#polyfill\">Babel-Polyfill</a>\n- <a href=\"#register\">Babel-Register</a>\n\n&emsp;首先，为什么会写这样一篇文章呢？在进入公司几个月后，写业务代码都是使用es5语法，es6，于是想着使用Babel来构建一下。这样既可以愉快的使用ES6了，还能舒心的写代码，何乐而不为。\n\n- Babel的使用是基于Node.js环境的，所以必须先安装Node。\n- 我们将采用通过安装babel-cli的方式来使用babel。\n\n#### <a name=\"install\">1. 安装</a>\n&emsp;虽然你可以在你的机器上全局安装`Babel CLI`, 但根据单个项目进行本地安装会更好一些。这样做有两个主要的原因：\n* 同一机器上的不同的项目可以依赖不同版本的 Babel, 这允许你一次更新一个项目。\n* 这意味着在你的工作环境中没有隐含的依赖项。它将使你的项目更方便移植、更易于安装。\n\n> 首先我们需要生成一个package.json文件，进入到项目目录执行`npm init`命令，随后一顿选择回车。\n\n```bash\nYSY@SY-YU MINGW64 /d/START/webpack\n$ npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help json` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install <pkg>` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\npackage name: (webpack)\n```\n*最后，目录下会生成一个package.json文件，打开看一下*\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\"\n}\n```\n*里面都是刚才npm init时自己的配置*\n\n> 我们可以通过以下命令本地安装 Babel CLI:\n\n```bash\n// 全局安装\nnpm install babel-cli -g\n// 安装在当前项目中\nnpm install --save-dev babel-cli\n```\n我们在当前目录安装babel-cli，随后我们的package.json应该长这个样：\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.26.0\"\n  }\n}\n```\n\n#### <a name=\"usage\">2. 使用</a>\n- 我们将把我们的指令放在本地版本的 npm 脚本中，而不是直接通过命令行来运行 Babel.\n\n> 简单的在你的 package.json 中添加一个 \"scripts\" 属性并将 babel 命令放在它的 build 属性中：\n\n```json\n  {\n    \"name\": \"webpack\",\n    \"version\": \"1.0.0\",\n    \"scripts\": {\n      \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n+     \"build\": \"babel src -d lib\"  // 加入这一句命令\n    },\n    \"devDependencies\": {\n      \"babel-cli\": \"^6.26.0\"\n    }\n  }\n```\n现在从我们的终端可以运行以下命令：\n```bash\nnpm run build\n```\n*这会按照和之前一样的方式来运行 Babel 并将输出放在 lib 目录下，唯一不同在于我们现在使用了一个本地拷贝。*\n> 值得注意的是在babel的build命令是可以在build属性中自行配置的，上面是把src目录下的脚本打包到lib目录中，你也可以打包单个文件...\n\n#### <a name=\"babelrc\">3. 创建.babelrc配置文件</a>\n\n- 虽然已经配置好了 Babel ，但并没有让它真正生效。在项目的根目录中创建一个 .babelrc 文件并启用一些插件。 [详看](https://babeljs.cn/docs/setup/#installation)\n\n首先，你可以使用转换 ES2015+ 的 env preset：\n```bash\nnpm install babel-preset-env --save-dev\n```\n为了让 preset 生效，你需要像下面这样定义你的 .babelrc 文件：\n```json\n{\n  \"presets\": [\"env\"],\n  \"plugins\": []\n}\n```\n> .babelrc配置文件非常丰富：\n\n```bash\n# ES2015转码规则\n$ npm install --save-dev babel-preset-es2015\n\n# react转码规则\n$ npm install --save-dev babel-preset-react\n\n# ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个\n$ npm install --save-dev babel-preset-stage-0\n$ npm install --save-dev babel-preset-stage-1\n$ npm install --save-dev babel-preset-stage-2\n$ npm install --save-dev babel-preset-stage-3\n```\n最后，我们的 .babelrc 文件可以长这个样：\n``` json\n{\n  \"presets\": [\n    \"es2015\",\n    \"react\",\n    \"stage-2\"\n  ],\n  \"plugins\": []\n}\n```\n\n#### <a name=\"polyfill\">4. Babel-Polyfill</a>\n\nBabel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如`Object.assign`）都不会转码。\n\n举例来说，ES6在Array对象上新增了`Array.from`方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。\n\n安装命令如下：\n```bash\nnpm install --save babel-polyfill\n```\n然后，在脚本头部，加入如下一行代码：\n```js\nimport 'babel-polyfill';\n// 或者\nrequire('babel-polyfill');\n```\n\n#### <a name=\"register\">5. Babel-Register</a>\n\nbabel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。\n```bash\nnpm install --save-dev babel-register\n```\n使用时，必须首先加载babel-register：\n```js\nimport(\"babel-register\");\nimport(\"./index.js\");\n```\n然后，就不需要手动对index.js转码了。\n> 需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在`开发环境`使用。\n\n#### `后记`：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\n---\n> 参考文档： [babeljs.cn](https://babeljs.cn/) / [ruanyifeng.com](http://www.ruanyifeng.com/blog/2016/01/babel.html?20170213113809)","slug":"0809007_记一次在公司中配置Babel的经历","published":1,"updated":"2018-03-09T08:19:38.162Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc10000a9oc03lzez3fr","content":"<ul>\n<li><a href=\"#install\">安装</a></li>\n<li><a href=\"#usage\">使用</a></li>\n<li><a href=\"#babelrc\">创建.babelrc文件</a></li>\n<li><a href=\"#polyfill\">Babel-Polyfill</a></li>\n<li><a href=\"#register\">Babel-Register</a></li>\n</ul>\n<p>&emsp;首先，为什么会写这样一篇文章呢？在进入公司几个月后，写业务代码都是使用es5语法，es6，于是想着使用Babel来构建一下。这样既可以愉快的使用ES6了，还能舒心的写代码，何乐而不为。</p>\n<ul>\n<li>Babel的使用是基于Node.js环境的，所以必须先安装Node。</li>\n<li>我们将采用通过安装babel-cli的方式来使用babel。</li>\n</ul>\n<h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a><a name=\"install\">1. 安装</a></h4><p>&emsp;虽然你可以在你的机器上全局安装<code>Babel CLI</code>, 但根据单个项目进行本地安装会更好一些。这样做有两个主要的原因：</p>\n<ul>\n<li>同一机器上的不同的项目可以依赖不同版本的 Babel, 这允许你一次更新一个项目。</li>\n<li>这意味着在你的工作环境中没有隐含的依赖项。它将使你的项目更方便移植、更易于安装。</li>\n</ul>\n<blockquote>\n<p>首先我们需要生成一个package.json文件，进入到项目目录执行<code>npm init</code>命令，随后一顿选择回车。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YSY@SY-YU MINGW64 /d/START/webpack</span><br><span class=\"line\">$ npm init</span><br><span class=\"line\">This utility will walk you through creating a package.json file.</span><br><span class=\"line\">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class=\"line\"></span><br><span class=\"line\">See `npm <span class=\"built_in\">help</span> json` <span class=\"keyword\">for</span> definitive documentation on these fields</span><br><span class=\"line\">and exactly what they <span class=\"keyword\">do</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class=\"line\">save it as a dependency <span class=\"keyword\">in</span> the package.json file.</span><br><span class=\"line\"></span><br><span class=\"line\">Press ^C at any time to quit.</span><br><span class=\"line\">package name: (webpack)</span><br></pre></td></tr></table></figure>\n<p><em>最后，目录下会生成一个package.json文件，打开看一下</em><br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>里面都是刚才npm init时自己的配置</em></p>\n<blockquote>\n<p>我们可以通过以下命令本地安装 Babel CLI:</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 全局安装</span><br><span class=\"line\">npm install babel-cli -g</span><br><span class=\"line\">// 安装在当前项目中</span><br><span class=\"line\">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure>\n<p>我们在当前目录安装babel-cli，随后我们的package.json应该长这个样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-cli\"</span>: <span class=\"string\">\"^6.26.0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a><a name=\"usage\">2. 使用</a></h4><ul>\n<li>我们将把我们的指令放在本地版本的 npm 脚本中，而不是直接通过命令行来运行 Babel.</li>\n</ul>\n<blockquote>\n<p>简单的在你的 package.json 中添加一个 “scripts” 属性并将 babel 命令放在它的 build 属性中：</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">+     \"build\": \"babel src -d lib\"  // 加入这一句命令</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"devDependencies\": &#123;</span><br><span class=\"line\">      \"babel-cli\": \"^6.26.0\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>现在从我们的终端可以运行以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure></p>\n<p><em>这会按照和之前一样的方式来运行 Babel 并将输出放在 lib 目录下，唯一不同在于我们现在使用了一个本地拷贝。</em></p>\n<blockquote>\n<p>值得注意的是在babel的build命令是可以在build属性中自行配置的，上面是把src目录下的脚本打包到lib目录中，你也可以打包单个文件…</p>\n</blockquote>\n<h4 id=\"3-创建-babelrc配置文件\"><a href=\"#3-创建-babelrc配置文件\" class=\"headerlink\" title=\"3. 创建.babelrc配置文件\"></a><a name=\"babelrc\">3. 创建.babelrc配置文件</a></h4><ul>\n<li>虽然已经配置好了 Babel ，但并没有让它真正生效。在项目的根目录中创建一个 .babelrc 文件并启用一些插件。 <a href=\"https://babeljs.cn/docs/setup/#installation\" target=\"_blank\" rel=\"noopener\">详看</a></li>\n</ul>\n<p>首先，你可以使用转换 ES2015+ 的 env preset：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-preset-env --save-dev</span><br></pre></td></tr></table></figure></p>\n<p>为了让 preset 生效，你需要像下面这样定义你的 .babelrc 文件：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"env\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>.babelrc配置文件非常丰富：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ES2015转码规则</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-es2015</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># react转码规则</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-react</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-0</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-1</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-2</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-3</span><br></pre></td></tr></table></figure>\n<p>最后，我们的 .babelrc 文件可以长这个样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"es2015\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"stage-2\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-Babel-Polyfill\"><a href=\"#4-Babel-Polyfill\" class=\"headerlink\" title=\"4. Babel-Polyfill\"></a><a name=\"polyfill\">4. Babel-Polyfill</a></h4><p>Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如<code>Object.assign</code>）都不会转码。</p>\n<p>举例来说，ES6在Array对象上新增了<code>Array.from</code>方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。</p>\n<p>安装命令如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure></p>\n<p>然后，在脚本头部，加入如下一行代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'babel-polyfill'</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-Babel-Register\"><a href=\"#5-Babel-Register\" class=\"headerlink\" title=\"5. Babel-Register\"></a><a name=\"register\">5. Babel-Register</a></h4><p>babel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-register</span><br></pre></td></tr></table></figure></p>\n<p>使用时，必须首先加载babel-register：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">\"babel-register\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">\"./index.js\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>然后，就不需要手动对index.js转码了。</p>\n<blockquote>\n<p>需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在<code>开发环境</code>使用。</p>\n</blockquote>\n<h4 id=\"后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\"><a href=\"#后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\" class=\"headerlink\" title=\"后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\"></a><code>后记</code>：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。</h4><hr>\n<blockquote>\n<p>参考文档： <a href=\"https://babeljs.cn/\" target=\"_blank\" rel=\"noopener\">babeljs.cn</a> / <a href=\"http://www.ruanyifeng.com/blog/2016/01/babel.html?20170213113809\" target=\"_blank\" rel=\"noopener\">ruanyifeng.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"#install\">安装</a></li>\n<li><a href=\"#usage\">使用</a></li>\n<li><a href=\"#babelrc\">创建.babelrc文件</a></li>\n<li><a href=\"#polyfill\">Babel-Polyfill</a></li>\n<li><a href=\"#register\">Babel-Register</a></li>\n</ul>\n<p>&emsp;首先，为什么会写这样一篇文章呢？在进入公司几个月后，写业务代码都是使用es5语法，es6，于是想着使用Babel来构建一下。这样既可以愉快的使用ES6了，还能舒心的写代码，何乐而不为。</p>\n<ul>\n<li>Babel的使用是基于Node.js环境的，所以必须先安装Node。</li>\n<li>我们将采用通过安装babel-cli的方式来使用babel。</li>\n</ul>\n<h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a><a name=\"install\">1. 安装</a></h4><p>&emsp;虽然你可以在你的机器上全局安装<code>Babel CLI</code>, 但根据单个项目进行本地安装会更好一些。这样做有两个主要的原因：</p>\n<ul>\n<li>同一机器上的不同的项目可以依赖不同版本的 Babel, 这允许你一次更新一个项目。</li>\n<li>这意味着在你的工作环境中没有隐含的依赖项。它将使你的项目更方便移植、更易于安装。</li>\n</ul>\n<blockquote>\n<p>首先我们需要生成一个package.json文件，进入到项目目录执行<code>npm init</code>命令，随后一顿选择回车。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YSY@SY-YU MINGW64 /d/START/webpack</span><br><span class=\"line\">$ npm init</span><br><span class=\"line\">This utility will walk you through creating a package.json file.</span><br><span class=\"line\">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class=\"line\"></span><br><span class=\"line\">See `npm <span class=\"built_in\">help</span> json` <span class=\"keyword\">for</span> definitive documentation on these fields</span><br><span class=\"line\">and exactly what they <span class=\"keyword\">do</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class=\"line\">save it as a dependency <span class=\"keyword\">in</span> the package.json file.</span><br><span class=\"line\"></span><br><span class=\"line\">Press ^C at any time to quit.</span><br><span class=\"line\">package name: (webpack)</span><br></pre></td></tr></table></figure>\n<p><em>最后，目录下会生成一个package.json文件，打开看一下</em><br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>里面都是刚才npm init时自己的配置</em></p>\n<blockquote>\n<p>我们可以通过以下命令本地安装 Babel CLI:</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 全局安装</span><br><span class=\"line\">npm install babel-cli -g</span><br><span class=\"line\">// 安装在当前项目中</span><br><span class=\"line\">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure>\n<p>我们在当前目录安装babel-cli，随后我们的package.json应该长这个样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-cli\"</span>: <span class=\"string\">\"^6.26.0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a><a name=\"usage\">2. 使用</a></h4><ul>\n<li>我们将把我们的指令放在本地版本的 npm 脚本中，而不是直接通过命令行来运行 Babel.</li>\n</ul>\n<blockquote>\n<p>简单的在你的 package.json 中添加一个 “scripts” 属性并将 babel 命令放在它的 build 属性中：</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">+     \"build\": \"babel src -d lib\"  // 加入这一句命令</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"devDependencies\": &#123;</span><br><span class=\"line\">      \"babel-cli\": \"^6.26.0\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>现在从我们的终端可以运行以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure></p>\n<p><em>这会按照和之前一样的方式来运行 Babel 并将输出放在 lib 目录下，唯一不同在于我们现在使用了一个本地拷贝。</em></p>\n<blockquote>\n<p>值得注意的是在babel的build命令是可以在build属性中自行配置的，上面是把src目录下的脚本打包到lib目录中，你也可以打包单个文件…</p>\n</blockquote>\n<h4 id=\"3-创建-babelrc配置文件\"><a href=\"#3-创建-babelrc配置文件\" class=\"headerlink\" title=\"3. 创建.babelrc配置文件\"></a><a name=\"babelrc\">3. 创建.babelrc配置文件</a></h4><ul>\n<li>虽然已经配置好了 Babel ，但并没有让它真正生效。在项目的根目录中创建一个 .babelrc 文件并启用一些插件。 <a href=\"https://babeljs.cn/docs/setup/#installation\" target=\"_blank\" rel=\"noopener\">详看</a></li>\n</ul>\n<p>首先，你可以使用转换 ES2015+ 的 env preset：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-preset-env --save-dev</span><br></pre></td></tr></table></figure></p>\n<p>为了让 preset 生效，你需要像下面这样定义你的 .babelrc 文件：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"env\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>.babelrc配置文件非常丰富：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ES2015转码规则</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-es2015</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># react转码规则</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-react</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-0</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-1</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-2</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-3</span><br></pre></td></tr></table></figure>\n<p>最后，我们的 .babelrc 文件可以长这个样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"es2015\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"stage-2\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-Babel-Polyfill\"><a href=\"#4-Babel-Polyfill\" class=\"headerlink\" title=\"4. Babel-Polyfill\"></a><a name=\"polyfill\">4. Babel-Polyfill</a></h4><p>Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如<code>Object.assign</code>）都不会转码。</p>\n<p>举例来说，ES6在Array对象上新增了<code>Array.from</code>方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。</p>\n<p>安装命令如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure></p>\n<p>然后，在脚本头部，加入如下一行代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'babel-polyfill'</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-Babel-Register\"><a href=\"#5-Babel-Register\" class=\"headerlink\" title=\"5. Babel-Register\"></a><a name=\"register\">5. Babel-Register</a></h4><p>babel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-register</span><br></pre></td></tr></table></figure></p>\n<p>使用时，必须首先加载babel-register：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">\"babel-register\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">\"./index.js\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>然后，就不需要手动对index.js转码了。</p>\n<blockquote>\n<p>需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在<code>开发环境</code>使用。</p>\n</blockquote>\n<h4 id=\"后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\"><a href=\"#后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\" class=\"headerlink\" title=\"后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\"></a><code>后记</code>：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。</h4><hr>\n<blockquote>\n<p>参考文档： <a href=\"https://babeljs.cn/\" target=\"_blank\" rel=\"noopener\">babeljs.cn</a> / <a href=\"http://www.ruanyifeng.com/blog/2016/01/babel.html?20170213113809\" target=\"_blank\" rel=\"noopener\">ruanyifeng.com</a></p>\n</blockquote>\n"},{"id":"0809005","title":"JSON 序列化选项","date":"2018-02-27T10:46:18.000Z","_content":"\n实际上，JSON.stringify()除了要序列化JavaScript对象外，还可以接受另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。**第一个**参数是个过滤器，可以使一个数组，也可以是个函数；**第二个**参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用者两个参数，可以更全面深入地控制JSON的序列化。\n#### 1. 过滤器（第一个参数）\n1.数组\n```JavaScript\nvar hero = {\n    \"name\": \"MasterYi\",\n    \"skills\": [\n        \"AlphaStrike\"\n    ],\n    \"type\": \"Warrior\"\n}\n\nvar jsonTxt = JSON.stringify(hero, [\"name\", \"type\"]);\njsonTxt --> \"{\"name\":\"MasterYi\",\"type\":\"Warrior\"}\"\n```\n2.函数\n```JavaScript\nvar jsonTxt = JSON.stringify(hero, function(k, v){\n    switch(k){\n        case \"name\":\n            return \"Annie\";\n        case \"type\":\n            return \"Mage\";\n        default:\n            return v;\n    }\n});\njsonTxt --> \"{\"name\":\"Annie\",\"skills\":[\"AlphaStrike\"],\"type\":\"Mage\"}\"\n```\n*值得注意的是，如果函数返回了undefined，那么相应的属性会被忽略。另外请务必写上default，此时返回传入的值，以便其他值都能正常出现在结果中*\n#### 2. 选项（字符串缩进）\n```JavaScript\nvar jsonTxt1 = JSON.stringify(hero, null, 2);\njsonTxt1 -->\n\"{\n  \"name\": \"MasterYi\",\n  \"skills\": [\n    \"AlphaStrike\"\n  ],\n  \"type\": \"Warrior\"\n}\"\n\nvar jsonTxt2 = JSON.stringify(hero, null, 4);\njsonTxt2 -->\n\"{\n    \"name\": \"MasterYi\",\n    \"skills\": [\n        \"AlphaStrike\"\n    ],\n    \"type\": \"Warrior\"\n}\"\n```\n*如上，结果字符串中也插入了换行符，这样一来就提高了可读性。只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。最大缩进空格数为10，大于10会默认转换为10.*\n","source":"_posts/0809005_JSON序列化选项.md","raw":"---\nid: 0809005\ntitle: JSON 序列化选项\ndate: 2018-02-27 18:46:18\ntags:\n    - JavaScript\n    - JSON\ncategories:\n---\n\n实际上，JSON.stringify()除了要序列化JavaScript对象外，还可以接受另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。**第一个**参数是个过滤器，可以使一个数组，也可以是个函数；**第二个**参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用者两个参数，可以更全面深入地控制JSON的序列化。\n#### 1. 过滤器（第一个参数）\n1.数组\n```JavaScript\nvar hero = {\n    \"name\": \"MasterYi\",\n    \"skills\": [\n        \"AlphaStrike\"\n    ],\n    \"type\": \"Warrior\"\n}\n\nvar jsonTxt = JSON.stringify(hero, [\"name\", \"type\"]);\njsonTxt --> \"{\"name\":\"MasterYi\",\"type\":\"Warrior\"}\"\n```\n2.函数\n```JavaScript\nvar jsonTxt = JSON.stringify(hero, function(k, v){\n    switch(k){\n        case \"name\":\n            return \"Annie\";\n        case \"type\":\n            return \"Mage\";\n        default:\n            return v;\n    }\n});\njsonTxt --> \"{\"name\":\"Annie\",\"skills\":[\"AlphaStrike\"],\"type\":\"Mage\"}\"\n```\n*值得注意的是，如果函数返回了undefined，那么相应的属性会被忽略。另外请务必写上default，此时返回传入的值，以便其他值都能正常出现在结果中*\n#### 2. 选项（字符串缩进）\n```JavaScript\nvar jsonTxt1 = JSON.stringify(hero, null, 2);\njsonTxt1 -->\n\"{\n  \"name\": \"MasterYi\",\n  \"skills\": [\n    \"AlphaStrike\"\n  ],\n  \"type\": \"Warrior\"\n}\"\n\nvar jsonTxt2 = JSON.stringify(hero, null, 4);\njsonTxt2 -->\n\"{\n    \"name\": \"MasterYi\",\n    \"skills\": [\n        \"AlphaStrike\"\n    ],\n    \"type\": \"Warrior\"\n}\"\n```\n*如上，结果字符串中也插入了换行符，这样一来就提高了可读性。只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。最大缩进空格数为10，大于10会默认转换为10.*\n","slug":"0809005_JSON序列化选项","published":1,"updated":"2018-03-09T08:20:29.511Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc10000b9oc07izn0bb9","content":"<p>实际上，JSON.stringify()除了要序列化JavaScript对象外，还可以接受另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。<strong>第一个</strong>参数是个过滤器，可以使一个数组，也可以是个函数；<strong>第二个</strong>参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用者两个参数，可以更全面深入地控制JSON的序列化。</p>\n<h4 id=\"1-过滤器（第一个参数）\"><a href=\"#1-过滤器（第一个参数）\" class=\"headerlink\" title=\"1. 过滤器（第一个参数）\"></a>1. 过滤器（第一个参数）</h4><p>1.数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"MasterYi\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"skills\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"AlphaStrike\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Warrior\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt = <span class=\"built_in\">JSON</span>.stringify(hero, [<span class=\"string\">\"name\"</span>, <span class=\"string\">\"type\"</span>]);</span><br><span class=\"line\">jsonTxt --&gt; <span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>MasterYi<span class=\"string\">\",\"</span>type<span class=\"string\">\":\"</span>Warrior<span class=\"string\">\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p>2.函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k, v</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"name\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Annie\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"type\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Mage\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">jsonTxt --&gt; <span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>Annie<span class=\"string\">\",\"</span>skills<span class=\"string\">\":[\"</span>AlphaStrike<span class=\"string\">\"],\"</span>type<span class=\"string\">\":\"</span>Mage<span class=\"string\">\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p><em>值得注意的是，如果函数返回了undefined，那么相应的属性会被忽略。另外请务必写上default，此时返回传入的值，以便其他值都能正常出现在结果中</em></p>\n<h4 id=\"2-选项（字符串缩进）\"><a href=\"#2-选项（字符串缩进）\" class=\"headerlink\" title=\"2. 选项（字符串缩进）\"></a>2. 选项（字符串缩进）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt1 = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"literal\">null</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">jsonTxt1 --&gt;</span><br><span class=\"line\"><span class=\"string\">\"&#123;</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>name<span class=\"string\">\": \"</span>MasterYi<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>skills<span class=\"string\">\": [</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>AlphaStrike<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>type<span class=\"string\">\": \"</span>Warrior<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt2 = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"literal\">null</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">jsonTxt2 --&gt;</span><br><span class=\"line\"><span class=\"string\">\"&#123;</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>name<span class=\"string\">\": \"</span>MasterYi<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>skills<span class=\"string\">\": [</span></span><br><span class=\"line\"><span class=\"string\">        \"</span>AlphaStrike<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">    ],</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>type<span class=\"string\">\": \"</span>Warrior<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span></span><br></pre></td></tr></table></figure>\n<p><em>如上，结果字符串中也插入了换行符，这样一来就提高了可读性。只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。最大缩进空格数为10，大于10会默认转换为10.</em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>实际上，JSON.stringify()除了要序列化JavaScript对象外，还可以接受另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。<strong>第一个</strong>参数是个过滤器，可以使一个数组，也可以是个函数；<strong>第二个</strong>参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用者两个参数，可以更全面深入地控制JSON的序列化。</p>\n<h4 id=\"1-过滤器（第一个参数）\"><a href=\"#1-过滤器（第一个参数）\" class=\"headerlink\" title=\"1. 过滤器（第一个参数）\"></a>1. 过滤器（第一个参数）</h4><p>1.数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"MasterYi\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"skills\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"AlphaStrike\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Warrior\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt = <span class=\"built_in\">JSON</span>.stringify(hero, [<span class=\"string\">\"name\"</span>, <span class=\"string\">\"type\"</span>]);</span><br><span class=\"line\">jsonTxt --&gt; <span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>MasterYi<span class=\"string\">\",\"</span>type<span class=\"string\">\":\"</span>Warrior<span class=\"string\">\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p>2.函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k, v</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"name\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Annie\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"type\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Mage\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">jsonTxt --&gt; <span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>Annie<span class=\"string\">\",\"</span>skills<span class=\"string\">\":[\"</span>AlphaStrike<span class=\"string\">\"],\"</span>type<span class=\"string\">\":\"</span>Mage<span class=\"string\">\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p><em>值得注意的是，如果函数返回了undefined，那么相应的属性会被忽略。另外请务必写上default，此时返回传入的值，以便其他值都能正常出现在结果中</em></p>\n<h4 id=\"2-选项（字符串缩进）\"><a href=\"#2-选项（字符串缩进）\" class=\"headerlink\" title=\"2. 选项（字符串缩进）\"></a>2. 选项（字符串缩进）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt1 = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"literal\">null</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">jsonTxt1 --&gt;</span><br><span class=\"line\"><span class=\"string\">\"&#123;</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>name<span class=\"string\">\": \"</span>MasterYi<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>skills<span class=\"string\">\": [</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>AlphaStrike<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>type<span class=\"string\">\": \"</span>Warrior<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt2 = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"literal\">null</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">jsonTxt2 --&gt;</span><br><span class=\"line\"><span class=\"string\">\"&#123;</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>name<span class=\"string\">\": \"</span>MasterYi<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>skills<span class=\"string\">\": [</span></span><br><span class=\"line\"><span class=\"string\">        \"</span>AlphaStrike<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">    ],</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>type<span class=\"string\">\": \"</span>Warrior<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span></span><br></pre></td></tr></table></figure>\n<p><em>如上，结果字符串中也插入了换行符，这样一来就提高了可读性。只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。最大缩进空格数为10，大于10会默认转换为10.</em></p>\n"},{"id":"0809008","title":"JavaScript 面向对象","date":"2018-02-27T07:52:37.000Z","_content":"\n#### 1. 原始方式：\n* 对象字面量方式\n```javascript\nvar Hero = { \n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    todo: function () { alert(this.name); }\n};\n```\n* Object构造函数方式\n```javascript\nvar Hero = new Object();\n\nHero.name = 'MasterYi';\nHero.skill = 'Q';\nHero.do = function(){\n    return this.name + ' use ' + this.skill + ' kill ' + 'yasuo';\n}\n\nalert( Hero.skill );    // AlphaStrike\nalert( Hero.do() );     // MasterYi use AlphaStrike kill yasuo\n```\n如上，当我们要创建批量的Hero1、Hero2……时，\n每次都要敲很多代码，资深copypaster都吃不消！\n然后就有了下面批量生产的工厂模式。\n\n#### 2. 工厂模式\n```javascript\nfunction heroObj(name, skill){\n    var Hero = new Object();\n\n    Hero.name = name;\n    Hero.skill = skill;\n    Hero.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n    return Hero;\n}\nvar riven = heroObj('yasuo', 'R');\nvar ashe = heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\n工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。\n指定姓名年龄就可以造一堆小宝宝啦，解放双手。\n但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、\n是人还是狗傻傻分不清（instanceof 测试为 Object），\n另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？\n\n#### 3. 构造函数\n```javascript\nfunction HeroObj(name, skill){\n\n    this.name = name;\n    this.skill = skill;\n    this.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n}\n\nvar riven = new heroObj('yasuo', 'R');\nvar ashe = new heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\nECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。\n\n#### 4. 原型模式\n* 直接使用 prototype 属性\n```javascript\nfunction Hero () {}\nHero.prototype.name = 'MasterYi';\nHero.prototype.skill = 'AlphaStrike';\nHero.prototype.do = function () { alert(this.name); };\n```\n* 字面量定义方式\n```javascript\nfunction Hero () {}\nHero.prototype = {\n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    sayName: function () { alert(this.name); }\n};\nvar p1 = new Hero(); //name='MasterYi'\nvar p2 = new Hero(); //name='MasterYi'\n```\n这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。\n\n#### 5. 混合模式\n```javascript\nfunction Hero (name, skill) {\n    this.name = name;\n    this.skill = skill;\n}\nHero.prototype = {\n    skillLists: ['Q', 'W', 'E', 'R'];\n    sayName: function () {\n        alert(this.name);\n    },\n    do: function () {\n        alert(this.name + ' use ' + this.skill + ' kill ' + 'MasterYi');\n    }\n};\nvar p1 = new Hero('yasuo', 'R');\nvar p2 = new Hero('ashe', 'w');\np1.sayName();   // yasuo\np1.skillLists;  // ['Q', 'W', 'E', 'R']\np2.do();        // ashe use w kill MasterYi\n```\n\n#### 6. 使用`class`关键字\n```javascript\nclass Hero {\n    constructor(){\n        this.name = 'MasterYi';\n        this.skill = 'AlphaStrike';\n    }\n    do(enemy){\n        alert(this.name + ' use ' +  this.skill + ' kill ' + enemy)\n    }\n}\n\nlet ashe = new Hero();\nashe.do('ashe');       // MasterYi use AlphaStrike kill ashe\n\nclass Yasuo extends Hero {\n    constructor(){\n        super()\n        this.name = 'yasuo'\n    }\n}\nlet yasuo = new Yasuo();\nyasuo.do('timor');      // yasuo use AlphaStrike kill timor\n```\n这里涉及到 `ES6` 里的新特性，想了解 `ES6` 中更多的新特性，大家可以去看看 [阮一峰](http://es6.ruanyifeng.com/) 老师的博客。","source":"_posts/0809008_JavaScript面向对象.md","raw":"---\nid: 0809008\ntitle: JavaScript 面向对象\ndate: 2018-02-27 15:52:37\ntags: \n    - JavaScript\ncategories:\n---\n\n#### 1. 原始方式：\n* 对象字面量方式\n```javascript\nvar Hero = { \n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    todo: function () { alert(this.name); }\n};\n```\n* Object构造函数方式\n```javascript\nvar Hero = new Object();\n\nHero.name = 'MasterYi';\nHero.skill = 'Q';\nHero.do = function(){\n    return this.name + ' use ' + this.skill + ' kill ' + 'yasuo';\n}\n\nalert( Hero.skill );    // AlphaStrike\nalert( Hero.do() );     // MasterYi use AlphaStrike kill yasuo\n```\n如上，当我们要创建批量的Hero1、Hero2……时，\n每次都要敲很多代码，资深copypaster都吃不消！\n然后就有了下面批量生产的工厂模式。\n\n#### 2. 工厂模式\n```javascript\nfunction heroObj(name, skill){\n    var Hero = new Object();\n\n    Hero.name = name;\n    Hero.skill = skill;\n    Hero.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n    return Hero;\n}\nvar riven = heroObj('yasuo', 'R');\nvar ashe = heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\n工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。\n指定姓名年龄就可以造一堆小宝宝啦，解放双手。\n但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、\n是人还是狗傻傻分不清（instanceof 测试为 Object），\n另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？\n\n#### 3. 构造函数\n```javascript\nfunction HeroObj(name, skill){\n\n    this.name = name;\n    this.skill = skill;\n    this.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n}\n\nvar riven = new heroObj('yasuo', 'R');\nvar ashe = new heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\nECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。\n\n#### 4. 原型模式\n* 直接使用 prototype 属性\n```javascript\nfunction Hero () {}\nHero.prototype.name = 'MasterYi';\nHero.prototype.skill = 'AlphaStrike';\nHero.prototype.do = function () { alert(this.name); };\n```\n* 字面量定义方式\n```javascript\nfunction Hero () {}\nHero.prototype = {\n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    sayName: function () { alert(this.name); }\n};\nvar p1 = new Hero(); //name='MasterYi'\nvar p2 = new Hero(); //name='MasterYi'\n```\n这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。\n\n#### 5. 混合模式\n```javascript\nfunction Hero (name, skill) {\n    this.name = name;\n    this.skill = skill;\n}\nHero.prototype = {\n    skillLists: ['Q', 'W', 'E', 'R'];\n    sayName: function () {\n        alert(this.name);\n    },\n    do: function () {\n        alert(this.name + ' use ' + this.skill + ' kill ' + 'MasterYi');\n    }\n};\nvar p1 = new Hero('yasuo', 'R');\nvar p2 = new Hero('ashe', 'w');\np1.sayName();   // yasuo\np1.skillLists;  // ['Q', 'W', 'E', 'R']\np2.do();        // ashe use w kill MasterYi\n```\n\n#### 6. 使用`class`关键字\n```javascript\nclass Hero {\n    constructor(){\n        this.name = 'MasterYi';\n        this.skill = 'AlphaStrike';\n    }\n    do(enemy){\n        alert(this.name + ' use ' +  this.skill + ' kill ' + enemy)\n    }\n}\n\nlet ashe = new Hero();\nashe.do('ashe');       // MasterYi use AlphaStrike kill ashe\n\nclass Yasuo extends Hero {\n    constructor(){\n        super()\n        this.name = 'yasuo'\n    }\n}\nlet yasuo = new Yasuo();\nyasuo.do('timor');      // yasuo use AlphaStrike kill timor\n```\n这里涉及到 `ES6` 里的新特性，想了解 `ES6` 中更多的新特性，大家可以去看看 [阮一峰](http://es6.ruanyifeng.com/) 老师的博客。","slug":"0809008_JavaScript面向对象","published":1,"updated":"2018-03-09T08:19:28.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc10000d9oc07uu23xgk","content":"<h4 id=\"1-原始方式：\"><a href=\"#1-原始方式：\" class=\"headerlink\" title=\"1. 原始方式：\"></a>1. 原始方式：</h4><ul>\n<li><p>对象字面量方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = &#123; </span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    todo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object构造函数方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">Hero.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.skill = <span class=\"string\">'Q'</span>;</span><br><span class=\"line\">Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'yasuo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert( Hero.skill );    <span class=\"comment\">// AlphaStrike</span></span><br><span class=\"line\">alert( Hero.do() );     <span class=\"comment\">// MasterYi use AlphaStrike kill yasuo</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如上，当我们要创建批量的Hero1、Hero2……时，<br>每次都要敲很多代码，资深copypaster都吃不消！<br>然后就有了下面批量生产的工厂模式。</p>\n<h4 id=\"2-工厂模式\"><a href=\"#2-工厂模式\" class=\"headerlink\" title=\"2. 工厂模式\"></a>2. 工厂模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    Hero.name = name;</span><br><span class=\"line\">    Hero.skill = skill;</span><br><span class=\"line\">    Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Hero;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。<br>指定姓名年龄就可以造一堆小宝宝啦，解放双手。<br>但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、<br>是人还是狗傻傻分不清（instanceof 测试为 Object），<br>另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？</p>\n<h4 id=\"3-构造函数\"><a href=\"#3-构造函数\" class=\"headerlink\" title=\"3. 构造函数\"></a>3. 构造函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HeroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>ECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。</p>\n<h4 id=\"4-原型模式\"><a href=\"#4-原型模式\" class=\"headerlink\" title=\"4. 原型模式\"></a>4. 原型模式</h4><ul>\n<li><p>直接使用 prototype 属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.prototype.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">Hero.prototype.do = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字面量定义方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。</p>\n<h4 id=\"5-混合模式\"><a href=\"#5-混合模式\" class=\"headerlink\" title=\"5. 混合模式\"></a>5. 混合模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\">name, skill</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    skillLists: [<span class=\"string\">'Q'</span>, <span class=\"string\">'W'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'R'</span>];</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">do</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'ashe'</span>, <span class=\"string\">'w'</span>);</span><br><span class=\"line\">p1.sayName();   <span class=\"comment\">// yasuo</span></span><br><span class=\"line\">p1.skillLists;  <span class=\"comment\">// ['Q', 'W', 'E', 'R']</span></span><br><span class=\"line\">p2.do();        <span class=\"comment\">// ashe use w kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-使用class关键字\"><a href=\"#6-使用class关键字\" class=\"headerlink\" title=\"6. 使用class关键字\"></a>6. 使用<code>class</code>关键字</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>(enemy)&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> +  <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + enemy)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ashe = <span class=\"keyword\">new</span> Hero();</span><br><span class=\"line\">ashe.do(<span class=\"string\">'ashe'</span>);       <span class=\"comment\">// MasterYi use AlphaStrike kill ashe</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Yasuo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'yasuo'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> yasuo = <span class=\"keyword\">new</span> Yasuo();</span><br><span class=\"line\">yasuo.do(<span class=\"string\">'timor'</span>);      <span class=\"comment\">// yasuo use AlphaStrike kill timor</span></span><br></pre></td></tr></table></figure>\n<p>这里涉及到 <code>ES6</code> 里的新特性，想了解 <code>ES6</code> 中更多的新特性，大家可以去看看 <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰</a> 老师的博客。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-原始方式：\"><a href=\"#1-原始方式：\" class=\"headerlink\" title=\"1. 原始方式：\"></a>1. 原始方式：</h4><ul>\n<li><p>对象字面量方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = &#123; </span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    todo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object构造函数方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">Hero.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.skill = <span class=\"string\">'Q'</span>;</span><br><span class=\"line\">Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'yasuo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert( Hero.skill );    <span class=\"comment\">// AlphaStrike</span></span><br><span class=\"line\">alert( Hero.do() );     <span class=\"comment\">// MasterYi use AlphaStrike kill yasuo</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如上，当我们要创建批量的Hero1、Hero2……时，<br>每次都要敲很多代码，资深copypaster都吃不消！<br>然后就有了下面批量生产的工厂模式。</p>\n<h4 id=\"2-工厂模式\"><a href=\"#2-工厂模式\" class=\"headerlink\" title=\"2. 工厂模式\"></a>2. 工厂模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    Hero.name = name;</span><br><span class=\"line\">    Hero.skill = skill;</span><br><span class=\"line\">    Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Hero;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。<br>指定姓名年龄就可以造一堆小宝宝啦，解放双手。<br>但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、<br>是人还是狗傻傻分不清（instanceof 测试为 Object），<br>另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？</p>\n<h4 id=\"3-构造函数\"><a href=\"#3-构造函数\" class=\"headerlink\" title=\"3. 构造函数\"></a>3. 构造函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HeroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>ECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。</p>\n<h4 id=\"4-原型模式\"><a href=\"#4-原型模式\" class=\"headerlink\" title=\"4. 原型模式\"></a>4. 原型模式</h4><ul>\n<li><p>直接使用 prototype 属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.prototype.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">Hero.prototype.do = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字面量定义方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。</p>\n<h4 id=\"5-混合模式\"><a href=\"#5-混合模式\" class=\"headerlink\" title=\"5. 混合模式\"></a>5. 混合模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\">name, skill</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    skillLists: [<span class=\"string\">'Q'</span>, <span class=\"string\">'W'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'R'</span>];</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">do</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'ashe'</span>, <span class=\"string\">'w'</span>);</span><br><span class=\"line\">p1.sayName();   <span class=\"comment\">// yasuo</span></span><br><span class=\"line\">p1.skillLists;  <span class=\"comment\">// ['Q', 'W', 'E', 'R']</span></span><br><span class=\"line\">p2.do();        <span class=\"comment\">// ashe use w kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-使用class关键字\"><a href=\"#6-使用class关键字\" class=\"headerlink\" title=\"6. 使用class关键字\"></a>6. 使用<code>class</code>关键字</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>(enemy)&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> +  <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + enemy)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ashe = <span class=\"keyword\">new</span> Hero();</span><br><span class=\"line\">ashe.do(<span class=\"string\">'ashe'</span>);       <span class=\"comment\">// MasterYi use AlphaStrike kill ashe</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Yasuo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'yasuo'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> yasuo = <span class=\"keyword\">new</span> Yasuo();</span><br><span class=\"line\">yasuo.do(<span class=\"string\">'timor'</span>);      <span class=\"comment\">// yasuo use AlphaStrike kill timor</span></span><br></pre></td></tr></table></figure>\n<p>这里涉及到 <code>ES6</code> 里的新特性，想了解 <code>ES6</code> 中更多的新特性，大家可以去看看 <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰</a> 老师的博客。</p>\n"},{"id":"0809013","title":"HTML5 代码规范","date":"2018-03-02T08:12:08.000Z","_content":"\n#### <a>1、使用正确的文档类型</a>\n\n- 文档类型声明位于HTML文档的第一行：\n  ```html\n  <!DOCTYPE html>\n\n  <!-- 小写也是被允许的 -->\n  <!doctype html>\n  ```\n\n#### <a>2、使用小写标签名</a>\n\n- HTML5 标签名可以使用大写和小写字母，`推荐使用小写字母：`\n  - 混合了大小写的风格是非常糟糕的。\n  - 开发人员通常使用小写 (类似 XHTML)。\n  - 小写风格看起来更加清爽。\n  - 小写字母容易编写。\n\n  **不推荐：**\n  ```html\n  <SECTION> \n    <p>这是一个段落。</p>\n  </SECTION>\n  ```\n  **非常糟糕：**\n  ```html\n  <Section> \n    <p>这是一个段落。</p>\n  </SECTION>\n  ```\n  **推荐：**\n  ```html\n  <section> \n    <p>这是一个段落。</p>\n  </section>\n  ```\n\n#### <a>3、关闭HTML标签</a>\n\n- `双标签：` 在 HTML5 中, 你不一定要关闭所有标签 (例如 `<p>` 标签)，但建议每个标签都要添加关闭标签。\n  **不推荐：**\n  ```html\n  <section>\n    <p>这是一个段落。\n    <p>这是一个段落。\n  </section>\n  ```\n  **推荐：**\n  ```html\n  <section>\n    <p>这是一个段落。</p>\n    <p>这是一个段落。</p>\n  </section>\n  ```\n- `单标签：` 在 HTML5 中, 空的 HTML 标签也不一定要关闭：\n  ```html\n  <!-- 1、可以这么写： -->\n  <meta charset=\"utf-8\">\n\n  <!-- 2、也可以这么写： -->\n  <meta charset=\"utf-8\" />\n  ```\n  在 `XHTML` 和 `XML` 中斜线 (/) 是必须的。如果你期望 XML 软件使用你的页面，使用这种风格是非常好的。\n\n#### <a>4、标签的属性名和属性值</a>\n\n**HTML5 属性名允许使用大写和小写字母。**\n\n- `推荐` 使用小写字母属性名:\n  - 同时使用大小写是非常不好的习惯。\n  - 开发人员通常使用小写 (类似 XHTML)。\n  - 小写风格看起来更加清爽。\n  - 小写字母容易编写。\n\n  ```html\n  <!-- 不推荐 -->\n  <div CLASS=\"menu\">\n\n  <!-- 推荐 -->\n  <div class=\"menu\">\n  ```\n\n**HTML5 属性值可以不用引号**\n\n- 属性值我们 `推荐` 使用引号：\n  - 如果属性值含有空格需要使用引号。\n  - 混合风格不推荐的，建议统一风格。\n  - 属性值使用引号易于阅读。\n\n  ```html\n  <!-- 以下实例属性值包含空格，没有使用引号，所以不能起作用: -->\n  <table class=table striped>\n  \n  <!-- 以下使用了双引号，是正确的： -->\n  <table class=\"table striped\">\n  ```\n\n#### <a>5、图片属性</a>\n\n- 图片通常使用 `alt` 属性。 在图片不能显示时，它能替代图片显示：\n  ```html\n  <img src=\"html5.gif\" alt=\"HTML5\" style=\"width:128px;height:128px\">\n  ```\n\n- 定义好图片的尺寸，在加载时可以预留指定空间，减少闪烁：\n  ```html\n  <img src=\"html5.gif\" alt=\"HTML5\" style=\"width:128px;height:128px\">\n  ```\n\n#### <a>6、空格和等号</a>\n    \n  - 等号前后可以使用空格\n  ```html  \n  <link rel = \"stylesheet\" href = \"styles.css\">\n  ```\n\n  - `推荐` 少用空格\n  ```html  \n  <link rel=\"stylesheet\" href=\"styles.css\">\n  ```\n\n#### <a>7、避免一行代码过长</a>\n\n- 使用 HTML 编辑器，左右滚动代码是不方便的。\n\n- 每行代码尽量少于 `80` 个字符。\n\n#### <a>8、空行和缩进</a>\n\n- 不要无缘无故添加空行。\n- 为每个逻辑功能块添加空行，这样更易于阅读。\n- 缩进使用两个空格，`不建议`使用 `TAB`。\n- 比较短的代码间不要使用不必要的空行和缩进。\n\n#### <a>9、省略 `<html>` `<body>` `<head>` ?</a>\n\n**在 `标准HTML5` 中， `<html>` `<body>` 和 `<head>` 标签是可以省略的，但我们都 `不推荐`。**\n\n- 以下写法是正确的：\n  ```html\n  <!DOCTYPE html>\n  <head>\n    <title>页面标题</title>\n  </head>\n\n  <h1>这是一个标题</h1>\n  <p>这是一个段落。</p>\n  ```\n\n- 为什么不推荐省略呢？\n  - `<html>` 标签是文档的根标签，用于描述页面的语言：\n  ```html\n  <!DOCTYPE html>\n  <html lang=\"zh\">\n  ```\n  - 声明语言是为了方便屏幕阅读器及搜索引擎。\n  - 省略 `<html>` 或 `<body>` 在 `DOM` 和 `XML` 软件中会崩溃。\n  - 省略 `<body>` 在旧版浏览器 `IE9`会发生错误。\n\n- 如果省略 `<head>` 标签，浏览器会将 `<body>` 之前的内容添加到一个默认的 `<head>` 标签上。\n\n#### <a>10、元标签</a>\n\n- `HTML5` 中 `<title>` 标签是必须的，标题名描述了页面的主题：\n  ```html\n  <title>菜鸟教程</title>\n  ```\n- 标题和语言可以让搜索引擎很快了解你页面的主题：\n  ```html\n  <!DOCTYPE html>\n  <html lang=\"zh\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>菜鸟教程</title>\n  </head>\n  ```\n\n#### <a>11、注释</a>\n\n- 注释可以写在 <!-- 和 --> 中:\n  ```html\n  <!-- 这是注释 -->\n  ```\n- 比较长的评论可以在 <!-- 和 --> 中分行写：\n  ```html\n  <!-- \n    这是一个较长评论。 这是 一个较长评论。这是一个较长评论。\n    这是 一个较长评论 这是一个较长评论。 这是 一个较长评论。\n  -->\n  ```\n- 长评论第一个字符缩进两个空格，更易于阅读。\n\n#### <a>12、样式表</a>\n\n- 样式表使用简洁的语法格式 ( `type` 属性不是必须的，在在加载 `js` 脚本时也可省去)：\n  ```html\n  <link rel=\"stylesheet\" href=\"styles.css\">\n  ```\n- 短的规则可以写成一行:\n  ```css\n  p.into {font-family: Verdana; font-size: 16em;}\n  ```\n- 长的规则可以写成多行:\n  ```css\n  body {\n    background-color: lightgrey;\n    font-family: \"Arial Black\", Helvetica, sans-serif;\n    font-size: 16em;\n    color: black;\n  }\n  ```\n  - 将左花括号与选择器放在同一行。\n  - 左花括号与选择器间添加一个空格。\n  - 使用两个空格来缩进。\n  - 冒号与属性值之间添加一个空格。\n  - 逗号和符号之后使用一个空格。\n  - 每个属性与值结尾都要使用分号。\n  - 只有属性值包含空格时才使用引号。\n  - 右花括号放在新的一行。\n  - 每行最多 80 个字符。\n  - 在逗号和冒号后添加空格是常用的一个规则。\n\n#### <a>13、使用小写文件名</a>\n\n- 大多 Web 服务器 (`Apache`, `Unix`) 对大小写敏感： `london.jpg` 不能通过 `London.jpg` 访问。\n- 其他 Web 服务器 (`Microsoft`, `IIS`) 对大小写不敏感： `london.jpg` 可以通过 `London.jpg` 或 `london.jpg` 访问。\n- 你必须保持统一的风格，我们 `建议统一使用小写` 的文件名。\n\n#### <a>14、`.htm` 和 `.html` 的区别</a>\n\n**`.htm` 和 `.html` 的扩展名文件本质上是没有区别的。浏览器和 Web 服务器都会把它们当作 `HTML` 文件来处理。**\n\n- `区别在于：`\n  - `.htm` 应用在早期 `DOS` 系统，系统现在或者只能有三个字符。\n  - 在 `Unix` 系统中后缀没有特别限制，一般用 `.html`。\n\n- `技术上的区别：`\n  - 如果一个 `URL` 没有指定文件名 (如 http://www.runoob.com/css/), 服务器会返回默认的文件名。通常默认文件名为 `index.html`, `index.htm`, `default.html`, 和 `default.htm`。\n  - 如果服务器只配置了 `index.html` 作为默认文件，你必须将文件命名为 `index.html`, 而不是 `index.htm`。\n  - 但是，通常服务器可以设置多个默认文件，你可以根据需要设置默认文件名。\n  - `无论如何`，`HTML` 完整的后缀是 `.html`。\n\n<p style=\"text-align: right\">参考文档 [runoob](http://www.runoob.com/html/html5-syntax.html)</p>","source":"_posts/0809013_HTML5代码规范.md","raw":"---\nid: 0809013\ntitle: HTML5 代码规范\ndate: 2018-03-02 16:12:08\ntags:\n  - HTML5\ncategories:\n---\n\n#### <a>1、使用正确的文档类型</a>\n\n- 文档类型声明位于HTML文档的第一行：\n  ```html\n  <!DOCTYPE html>\n\n  <!-- 小写也是被允许的 -->\n  <!doctype html>\n  ```\n\n#### <a>2、使用小写标签名</a>\n\n- HTML5 标签名可以使用大写和小写字母，`推荐使用小写字母：`\n  - 混合了大小写的风格是非常糟糕的。\n  - 开发人员通常使用小写 (类似 XHTML)。\n  - 小写风格看起来更加清爽。\n  - 小写字母容易编写。\n\n  **不推荐：**\n  ```html\n  <SECTION> \n    <p>这是一个段落。</p>\n  </SECTION>\n  ```\n  **非常糟糕：**\n  ```html\n  <Section> \n    <p>这是一个段落。</p>\n  </SECTION>\n  ```\n  **推荐：**\n  ```html\n  <section> \n    <p>这是一个段落。</p>\n  </section>\n  ```\n\n#### <a>3、关闭HTML标签</a>\n\n- `双标签：` 在 HTML5 中, 你不一定要关闭所有标签 (例如 `<p>` 标签)，但建议每个标签都要添加关闭标签。\n  **不推荐：**\n  ```html\n  <section>\n    <p>这是一个段落。\n    <p>这是一个段落。\n  </section>\n  ```\n  **推荐：**\n  ```html\n  <section>\n    <p>这是一个段落。</p>\n    <p>这是一个段落。</p>\n  </section>\n  ```\n- `单标签：` 在 HTML5 中, 空的 HTML 标签也不一定要关闭：\n  ```html\n  <!-- 1、可以这么写： -->\n  <meta charset=\"utf-8\">\n\n  <!-- 2、也可以这么写： -->\n  <meta charset=\"utf-8\" />\n  ```\n  在 `XHTML` 和 `XML` 中斜线 (/) 是必须的。如果你期望 XML 软件使用你的页面，使用这种风格是非常好的。\n\n#### <a>4、标签的属性名和属性值</a>\n\n**HTML5 属性名允许使用大写和小写字母。**\n\n- `推荐` 使用小写字母属性名:\n  - 同时使用大小写是非常不好的习惯。\n  - 开发人员通常使用小写 (类似 XHTML)。\n  - 小写风格看起来更加清爽。\n  - 小写字母容易编写。\n\n  ```html\n  <!-- 不推荐 -->\n  <div CLASS=\"menu\">\n\n  <!-- 推荐 -->\n  <div class=\"menu\">\n  ```\n\n**HTML5 属性值可以不用引号**\n\n- 属性值我们 `推荐` 使用引号：\n  - 如果属性值含有空格需要使用引号。\n  - 混合风格不推荐的，建议统一风格。\n  - 属性值使用引号易于阅读。\n\n  ```html\n  <!-- 以下实例属性值包含空格，没有使用引号，所以不能起作用: -->\n  <table class=table striped>\n  \n  <!-- 以下使用了双引号，是正确的： -->\n  <table class=\"table striped\">\n  ```\n\n#### <a>5、图片属性</a>\n\n- 图片通常使用 `alt` 属性。 在图片不能显示时，它能替代图片显示：\n  ```html\n  <img src=\"html5.gif\" alt=\"HTML5\" style=\"width:128px;height:128px\">\n  ```\n\n- 定义好图片的尺寸，在加载时可以预留指定空间，减少闪烁：\n  ```html\n  <img src=\"html5.gif\" alt=\"HTML5\" style=\"width:128px;height:128px\">\n  ```\n\n#### <a>6、空格和等号</a>\n    \n  - 等号前后可以使用空格\n  ```html  \n  <link rel = \"stylesheet\" href = \"styles.css\">\n  ```\n\n  - `推荐` 少用空格\n  ```html  \n  <link rel=\"stylesheet\" href=\"styles.css\">\n  ```\n\n#### <a>7、避免一行代码过长</a>\n\n- 使用 HTML 编辑器，左右滚动代码是不方便的。\n\n- 每行代码尽量少于 `80` 个字符。\n\n#### <a>8、空行和缩进</a>\n\n- 不要无缘无故添加空行。\n- 为每个逻辑功能块添加空行，这样更易于阅读。\n- 缩进使用两个空格，`不建议`使用 `TAB`。\n- 比较短的代码间不要使用不必要的空行和缩进。\n\n#### <a>9、省略 `<html>` `<body>` `<head>` ?</a>\n\n**在 `标准HTML5` 中， `<html>` `<body>` 和 `<head>` 标签是可以省略的，但我们都 `不推荐`。**\n\n- 以下写法是正确的：\n  ```html\n  <!DOCTYPE html>\n  <head>\n    <title>页面标题</title>\n  </head>\n\n  <h1>这是一个标题</h1>\n  <p>这是一个段落。</p>\n  ```\n\n- 为什么不推荐省略呢？\n  - `<html>` 标签是文档的根标签，用于描述页面的语言：\n  ```html\n  <!DOCTYPE html>\n  <html lang=\"zh\">\n  ```\n  - 声明语言是为了方便屏幕阅读器及搜索引擎。\n  - 省略 `<html>` 或 `<body>` 在 `DOM` 和 `XML` 软件中会崩溃。\n  - 省略 `<body>` 在旧版浏览器 `IE9`会发生错误。\n\n- 如果省略 `<head>` 标签，浏览器会将 `<body>` 之前的内容添加到一个默认的 `<head>` 标签上。\n\n#### <a>10、元标签</a>\n\n- `HTML5` 中 `<title>` 标签是必须的，标题名描述了页面的主题：\n  ```html\n  <title>菜鸟教程</title>\n  ```\n- 标题和语言可以让搜索引擎很快了解你页面的主题：\n  ```html\n  <!DOCTYPE html>\n  <html lang=\"zh\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>菜鸟教程</title>\n  </head>\n  ```\n\n#### <a>11、注释</a>\n\n- 注释可以写在 <!-- 和 --> 中:\n  ```html\n  <!-- 这是注释 -->\n  ```\n- 比较长的评论可以在 <!-- 和 --> 中分行写：\n  ```html\n  <!-- \n    这是一个较长评论。 这是 一个较长评论。这是一个较长评论。\n    这是 一个较长评论 这是一个较长评论。 这是 一个较长评论。\n  -->\n  ```\n- 长评论第一个字符缩进两个空格，更易于阅读。\n\n#### <a>12、样式表</a>\n\n- 样式表使用简洁的语法格式 ( `type` 属性不是必须的，在在加载 `js` 脚本时也可省去)：\n  ```html\n  <link rel=\"stylesheet\" href=\"styles.css\">\n  ```\n- 短的规则可以写成一行:\n  ```css\n  p.into {font-family: Verdana; font-size: 16em;}\n  ```\n- 长的规则可以写成多行:\n  ```css\n  body {\n    background-color: lightgrey;\n    font-family: \"Arial Black\", Helvetica, sans-serif;\n    font-size: 16em;\n    color: black;\n  }\n  ```\n  - 将左花括号与选择器放在同一行。\n  - 左花括号与选择器间添加一个空格。\n  - 使用两个空格来缩进。\n  - 冒号与属性值之间添加一个空格。\n  - 逗号和符号之后使用一个空格。\n  - 每个属性与值结尾都要使用分号。\n  - 只有属性值包含空格时才使用引号。\n  - 右花括号放在新的一行。\n  - 每行最多 80 个字符。\n  - 在逗号和冒号后添加空格是常用的一个规则。\n\n#### <a>13、使用小写文件名</a>\n\n- 大多 Web 服务器 (`Apache`, `Unix`) 对大小写敏感： `london.jpg` 不能通过 `London.jpg` 访问。\n- 其他 Web 服务器 (`Microsoft`, `IIS`) 对大小写不敏感： `london.jpg` 可以通过 `London.jpg` 或 `london.jpg` 访问。\n- 你必须保持统一的风格，我们 `建议统一使用小写` 的文件名。\n\n#### <a>14、`.htm` 和 `.html` 的区别</a>\n\n**`.htm` 和 `.html` 的扩展名文件本质上是没有区别的。浏览器和 Web 服务器都会把它们当作 `HTML` 文件来处理。**\n\n- `区别在于：`\n  - `.htm` 应用在早期 `DOS` 系统，系统现在或者只能有三个字符。\n  - 在 `Unix` 系统中后缀没有特别限制，一般用 `.html`。\n\n- `技术上的区别：`\n  - 如果一个 `URL` 没有指定文件名 (如 http://www.runoob.com/css/), 服务器会返回默认的文件名。通常默认文件名为 `index.html`, `index.htm`, `default.html`, 和 `default.htm`。\n  - 如果服务器只配置了 `index.html` 作为默认文件，你必须将文件命名为 `index.html`, 而不是 `index.htm`。\n  - 但是，通常服务器可以设置多个默认文件，你可以根据需要设置默认文件名。\n  - `无论如何`，`HTML` 完整的后缀是 `.html`。\n\n<p style=\"text-align: right\">参考文档 [runoob](http://www.runoob.com/html/html5-syntax.html)</p>","slug":"0809013_HTML5代码规范","published":1,"updated":"2018-03-15T10:22:47.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc10000f9oc0dro1g6ua","content":"<h4 id=\"1、使用正确的文档类型\"><a href=\"#1、使用正确的文档类型\" class=\"headerlink\" title=\"1、使用正确的文档类型\"></a><a>1、使用正确的文档类型</a></h4><ul>\n<li>文档类型声明位于HTML文档的第一行：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 小写也是被允许的 --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2、使用小写标签名\"><a href=\"#2、使用小写标签名\" class=\"headerlink\" title=\"2、使用小写标签名\"></a><a>2、使用小写标签名</a></h4><ul>\n<li><p>HTML5 标签名可以使用大写和小写字母，<code>推荐使用小写字母：</code></p>\n<ul>\n<li>混合了大小写的风格是非常糟糕的。</li>\n<li>开发人员通常使用小写 (类似 XHTML)。</li>\n<li>小写风格看起来更加清爽。</li>\n<li>小写字母容易编写。</li>\n</ul>\n<p><strong>不推荐：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">SECTION</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">SECTION</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>非常糟糕：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Section</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">SECTION</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>推荐：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"3、关闭HTML标签\"><a href=\"#3、关闭HTML标签\" class=\"headerlink\" title=\"3、关闭HTML标签\"></a><a>3、关闭HTML标签</a></h4><ul>\n<li><p><code>双标签：</code> 在 HTML5 中, 你不一定要关闭所有标签 (例如 <code>&lt;p&gt;</code> 标签)，但建议每个标签都要添加关闭标签。<br><strong>不推荐：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>推荐：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>单标签：</code> 在 HTML5 中, 空的 HTML 标签也不一定要关闭：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 1、可以这么写： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 2、也可以这么写： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在 <code>XHTML</code> 和 <code>XML</code> 中斜线 (/) 是必须的。如果你期望 XML 软件使用你的页面，使用这种风格是非常好的。</p>\n</li>\n</ul>\n<h4 id=\"4、标签的属性名和属性值\"><a href=\"#4、标签的属性名和属性值\" class=\"headerlink\" title=\"4、标签的属性名和属性值\"></a><a>4、标签的属性名和属性值</a></h4><p><strong>HTML5 属性名允许使用大写和小写字母。</strong></p>\n<ul>\n<li><p><code>推荐</code> 使用小写字母属性名:</p>\n<ul>\n<li>同时使用大小写是非常不好的习惯。</li>\n<li>开发人员通常使用小写 (类似 XHTML)。</li>\n<li>小写风格看起来更加清爽。</li>\n<li>小写字母容易编写。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 不推荐 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">CLASS</span>=<span class=\"string\">\"menu\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 推荐 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>HTML5 属性值可以不用引号</strong></p>\n<ul>\n<li><p>属性值我们 <code>推荐</code> 使用引号：</p>\n<ul>\n<li>如果属性值含有空格需要使用引号。</li>\n<li>混合风格不推荐的，建议统一风格。</li>\n<li>属性值使用引号易于阅读。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 以下实例属性值包含空格，没有使用引号，所以不能起作用: --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">table</span> <span class=\"attr\">striped</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 以下使用了双引号，是正确的： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table striped\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5、图片属性\"><a href=\"#5、图片属性\" class=\"headerlink\" title=\"5、图片属性\"></a><a>5、图片属性</a></h4><ul>\n<li><p>图片通常使用 <code>alt</code> 属性。 在图片不能显示时，它能替代图片显示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"html5.gif\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"HTML5\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:128px;height:128px\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义好图片的尺寸，在加载时可以预留指定空间，减少闪烁：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"html5.gif\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"HTML5\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:128px;height:128px\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"6、空格和等号\"><a href=\"#6、空格和等号\" class=\"headerlink\" title=\"6、空格和等号\"></a><a>6、空格和等号</a></h4><ul>\n<li><p>等号前后可以使用空格</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span> = <span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span> = <span class=\"string\">\"styles.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>推荐</code> 少用空格</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"7、避免一行代码过长\"><a href=\"#7、避免一行代码过长\" class=\"headerlink\" title=\"7、避免一行代码过长\"></a><a>7、避免一行代码过长</a></h4><ul>\n<li><p>使用 HTML 编辑器，左右滚动代码是不方便的。</p>\n</li>\n<li><p>每行代码尽量少于 <code>80</code> 个字符。</p>\n</li>\n</ul>\n<h4 id=\"8、空行和缩进\"><a href=\"#8、空行和缩进\" class=\"headerlink\" title=\"8、空行和缩进\"></a><a>8、空行和缩进</a></h4><ul>\n<li>不要无缘无故添加空行。</li>\n<li>为每个逻辑功能块添加空行，这样更易于阅读。</li>\n<li>缩进使用两个空格，<code>不建议</code>使用 <code>TAB</code>。</li>\n<li>比较短的代码间不要使用不必要的空行和缩进。</li>\n</ul>\n<h4 id=\"9、省略-lt-html-gt-lt-body-gt-lt-head-gt\"><a href=\"#9、省略-lt-html-gt-lt-body-gt-lt-head-gt\" class=\"headerlink\" title=\"9、省略 &lt;html&gt; &lt;body&gt; &lt;head&gt; ?\"></a><a>9、省略 <code>&lt;html&gt;</code> <code>&lt;body&gt;</code> <code>&lt;head&gt;</code> ?</a></h4><p><strong>在 <code>标准HTML5</code> 中， <code>&lt;html&gt;</code> <code>&lt;body&gt;</code> 和 <code>&lt;head&gt;</code> 标签是可以省略的，但我们都 <code>不推荐</code>。</strong></p>\n<ul>\n<li><p>以下写法是正确的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>页面标题<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>这是一个标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为什么不推荐省略呢？</p>\n<ul>\n<li><p><code>&lt;html&gt;</code> 标签是文档的根标签，用于描述页面的语言：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>声明语言是为了方便屏幕阅读器及搜索引擎。</p>\n</li>\n<li>省略 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 在 <code>DOM</code> 和 <code>XML</code> 软件中会崩溃。</li>\n<li>省略 <code>&lt;body&gt;</code> 在旧版浏览器 <code>IE9</code>会发生错误。</li>\n</ul>\n</li>\n<li><p>如果省略 <code>&lt;head&gt;</code> 标签，浏览器会将 <code>&lt;body&gt;</code> 之前的内容添加到一个默认的 <code>&lt;head&gt;</code> 标签上。</p>\n</li>\n</ul>\n<h4 id=\"10、元标签\"><a href=\"#10、元标签\" class=\"headerlink\" title=\"10、元标签\"></a><a>10、元标签</a></h4><ul>\n<li><p><code>HTML5</code> 中 <code>&lt;title&gt;</code> 标签是必须的，标题名描述了页面的主题：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>菜鸟教程<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>标题和语言可以让搜索引擎很快了解你页面的主题：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>菜鸟教程<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"11、注释\"><a href=\"#11、注释\" class=\"headerlink\" title=\"11、注释\"></a><a>11、注释</a></h4><ul>\n<li><p>注释可以写在 <!-- 和 --> 中:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 这是注释 --&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较长的评论可以在 <!-- 和 --> 中分行写：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">  这是一个较长评论。 这是 一个较长评论。这是一个较长评论。</span></span><br><span class=\"line\"><span class=\"comment\">  这是 一个较长评论 这是一个较长评论。 这是 一个较长评论。</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>长评论第一个字符缩进两个空格，更易于阅读。</p>\n</li>\n</ul>\n<h4 id=\"12、样式表\"><a href=\"#12、样式表\" class=\"headerlink\" title=\"12、样式表\"></a><a>12、样式表</a></h4><ul>\n<li><p>样式表使用简洁的语法格式 ( <code>type</code> 属性不是必须的，在在加载 <code>js</code> 脚本时也可省去)：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>短的规则可以写成一行:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-class\">.into</span> &#123;<span class=\"attribute\">font-family</span>: Verdana; <span class=\"attribute\">font-size</span>: <span class=\"number\">16em</span>;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>长的规则可以写成多行:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightgrey;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Arial Black\"</span>, Helvetica, sans-serif;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将左花括号与选择器放在同一行。</li>\n<li>左花括号与选择器间添加一个空格。</li>\n<li>使用两个空格来缩进。</li>\n<li>冒号与属性值之间添加一个空格。</li>\n<li>逗号和符号之后使用一个空格。</li>\n<li>每个属性与值结尾都要使用分号。</li>\n<li>只有属性值包含空格时才使用引号。</li>\n<li>右花括号放在新的一行。</li>\n<li>每行最多 80 个字符。</li>\n<li>在逗号和冒号后添加空格是常用的一个规则。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"13、使用小写文件名\"><a href=\"#13、使用小写文件名\" class=\"headerlink\" title=\"13、使用小写文件名\"></a><a>13、使用小写文件名</a></h4><ul>\n<li>大多 Web 服务器 (<code>Apache</code>, <code>Unix</code>) 对大小写敏感： <code>london.jpg</code> 不能通过 <code>London.jpg</code> 访问。</li>\n<li>其他 Web 服务器 (<code>Microsoft</code>, <code>IIS</code>) 对大小写不敏感： <code>london.jpg</code> 可以通过 <code>London.jpg</code> 或 <code>london.jpg</code> 访问。</li>\n<li>你必须保持统一的风格，我们 <code>建议统一使用小写</code> 的文件名。</li>\n</ul>\n<h4 id=\"14、-htm-和-html-的区别\"><a href=\"#14、-htm-和-html-的区别\" class=\"headerlink\" title=\"14、.htm 和 .html 的区别\"></a><a>14、<code>.htm</code> 和 <code>.html</code> 的区别</a></h4><p><strong><code>.htm</code> 和 <code>.html</code> 的扩展名文件本质上是没有区别的。浏览器和 Web 服务器都会把它们当作 <code>HTML</code> 文件来处理。</strong></p>\n<ul>\n<li><p><code>区别在于：</code></p>\n<ul>\n<li><code>.htm</code> 应用在早期 <code>DOS</code> 系统，系统现在或者只能有三个字符。</li>\n<li>在 <code>Unix</code> 系统中后缀没有特别限制，一般用 <code>.html</code>。</li>\n</ul>\n</li>\n<li><p><code>技术上的区别：</code></p>\n<ul>\n<li>如果一个 <code>URL</code> 没有指定文件名 (如 <a href=\"http://www.runoob.com/css/\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/css/</a>), 服务器会返回默认的文件名。通常默认文件名为 <code>index.html</code>, <code>index.htm</code>, <code>default.html</code>, 和 <code>default.htm</code>。</li>\n<li>如果服务器只配置了 <code>index.html</code> 作为默认文件，你必须将文件命名为 <code>index.html</code>, 而不是 <code>index.htm</code>。</li>\n<li>但是，通常服务器可以设置多个默认文件，你可以根据需要设置默认文件名。</li>\n<li><code>无论如何</code>，<code>HTML</code> 完整的后缀是 <code>.html</code>。</li>\n</ul>\n</li>\n</ul>\n<p style=\"text-align: right\">参考文档 <a href=\"http://www.runoob.com/html/html5-syntax.html\" target=\"_blank\" rel=\"noopener\">runoob</a></p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1、使用正确的文档类型\"><a href=\"#1、使用正确的文档类型\" class=\"headerlink\" title=\"1、使用正确的文档类型\"></a><a>1、使用正确的文档类型</a></h4><ul>\n<li>文档类型声明位于HTML文档的第一行：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 小写也是被允许的 --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2、使用小写标签名\"><a href=\"#2、使用小写标签名\" class=\"headerlink\" title=\"2、使用小写标签名\"></a><a>2、使用小写标签名</a></h4><ul>\n<li><p>HTML5 标签名可以使用大写和小写字母，<code>推荐使用小写字母：</code></p>\n<ul>\n<li>混合了大小写的风格是非常糟糕的。</li>\n<li>开发人员通常使用小写 (类似 XHTML)。</li>\n<li>小写风格看起来更加清爽。</li>\n<li>小写字母容易编写。</li>\n</ul>\n<p><strong>不推荐：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">SECTION</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">SECTION</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>非常糟糕：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Section</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">SECTION</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>推荐：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"3、关闭HTML标签\"><a href=\"#3、关闭HTML标签\" class=\"headerlink\" title=\"3、关闭HTML标签\"></a><a>3、关闭HTML标签</a></h4><ul>\n<li><p><code>双标签：</code> 在 HTML5 中, 你不一定要关闭所有标签 (例如 <code>&lt;p&gt;</code> 标签)，但建议每个标签都要添加关闭标签。<br><strong>不推荐：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>推荐：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>单标签：</code> 在 HTML5 中, 空的 HTML 标签也不一定要关闭：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 1、可以这么写： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 2、也可以这么写： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在 <code>XHTML</code> 和 <code>XML</code> 中斜线 (/) 是必须的。如果你期望 XML 软件使用你的页面，使用这种风格是非常好的。</p>\n</li>\n</ul>\n<h4 id=\"4、标签的属性名和属性值\"><a href=\"#4、标签的属性名和属性值\" class=\"headerlink\" title=\"4、标签的属性名和属性值\"></a><a>4、标签的属性名和属性值</a></h4><p><strong>HTML5 属性名允许使用大写和小写字母。</strong></p>\n<ul>\n<li><p><code>推荐</code> 使用小写字母属性名:</p>\n<ul>\n<li>同时使用大小写是非常不好的习惯。</li>\n<li>开发人员通常使用小写 (类似 XHTML)。</li>\n<li>小写风格看起来更加清爽。</li>\n<li>小写字母容易编写。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 不推荐 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">CLASS</span>=<span class=\"string\">\"menu\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 推荐 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>HTML5 属性值可以不用引号</strong></p>\n<ul>\n<li><p>属性值我们 <code>推荐</code> 使用引号：</p>\n<ul>\n<li>如果属性值含有空格需要使用引号。</li>\n<li>混合风格不推荐的，建议统一风格。</li>\n<li>属性值使用引号易于阅读。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 以下实例属性值包含空格，没有使用引号，所以不能起作用: --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">table</span> <span class=\"attr\">striped</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 以下使用了双引号，是正确的： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table striped\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5、图片属性\"><a href=\"#5、图片属性\" class=\"headerlink\" title=\"5、图片属性\"></a><a>5、图片属性</a></h4><ul>\n<li><p>图片通常使用 <code>alt</code> 属性。 在图片不能显示时，它能替代图片显示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"html5.gif\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"HTML5\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:128px;height:128px\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义好图片的尺寸，在加载时可以预留指定空间，减少闪烁：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"html5.gif\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"HTML5\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:128px;height:128px\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"6、空格和等号\"><a href=\"#6、空格和等号\" class=\"headerlink\" title=\"6、空格和等号\"></a><a>6、空格和等号</a></h4><ul>\n<li><p>等号前后可以使用空格</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span> = <span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span> = <span class=\"string\">\"styles.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>推荐</code> 少用空格</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"7、避免一行代码过长\"><a href=\"#7、避免一行代码过长\" class=\"headerlink\" title=\"7、避免一行代码过长\"></a><a>7、避免一行代码过长</a></h4><ul>\n<li><p>使用 HTML 编辑器，左右滚动代码是不方便的。</p>\n</li>\n<li><p>每行代码尽量少于 <code>80</code> 个字符。</p>\n</li>\n</ul>\n<h4 id=\"8、空行和缩进\"><a href=\"#8、空行和缩进\" class=\"headerlink\" title=\"8、空行和缩进\"></a><a>8、空行和缩进</a></h4><ul>\n<li>不要无缘无故添加空行。</li>\n<li>为每个逻辑功能块添加空行，这样更易于阅读。</li>\n<li>缩进使用两个空格，<code>不建议</code>使用 <code>TAB</code>。</li>\n<li>比较短的代码间不要使用不必要的空行和缩进。</li>\n</ul>\n<h4 id=\"9、省略-lt-html-gt-lt-body-gt-lt-head-gt\"><a href=\"#9、省略-lt-html-gt-lt-body-gt-lt-head-gt\" class=\"headerlink\" title=\"9、省略 &lt;html&gt; &lt;body&gt; &lt;head&gt; ?\"></a><a>9、省略 <code>&lt;html&gt;</code> <code>&lt;body&gt;</code> <code>&lt;head&gt;</code> ?</a></h4><p><strong>在 <code>标准HTML5</code> 中， <code>&lt;html&gt;</code> <code>&lt;body&gt;</code> 和 <code>&lt;head&gt;</code> 标签是可以省略的，但我们都 <code>不推荐</code>。</strong></p>\n<ul>\n<li><p>以下写法是正确的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>页面标题<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>这是一个标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为什么不推荐省略呢？</p>\n<ul>\n<li><p><code>&lt;html&gt;</code> 标签是文档的根标签，用于描述页面的语言：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>声明语言是为了方便屏幕阅读器及搜索引擎。</p>\n</li>\n<li>省略 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 在 <code>DOM</code> 和 <code>XML</code> 软件中会崩溃。</li>\n<li>省略 <code>&lt;body&gt;</code> 在旧版浏览器 <code>IE9</code>会发生错误。</li>\n</ul>\n</li>\n<li><p>如果省略 <code>&lt;head&gt;</code> 标签，浏览器会将 <code>&lt;body&gt;</code> 之前的内容添加到一个默认的 <code>&lt;head&gt;</code> 标签上。</p>\n</li>\n</ul>\n<h4 id=\"10、元标签\"><a href=\"#10、元标签\" class=\"headerlink\" title=\"10、元标签\"></a><a>10、元标签</a></h4><ul>\n<li><p><code>HTML5</code> 中 <code>&lt;title&gt;</code> 标签是必须的，标题名描述了页面的主题：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>菜鸟教程<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>标题和语言可以让搜索引擎很快了解你页面的主题：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>菜鸟教程<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"11、注释\"><a href=\"#11、注释\" class=\"headerlink\" title=\"11、注释\"></a><a>11、注释</a></h4><ul>\n<li><p>注释可以写在 <!-- 和 --> 中:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 这是注释 --&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较长的评论可以在 <!-- 和 --> 中分行写：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">  这是一个较长评论。 这是 一个较长评论。这是一个较长评论。</span></span><br><span class=\"line\"><span class=\"comment\">  这是 一个较长评论 这是一个较长评论。 这是 一个较长评论。</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>长评论第一个字符缩进两个空格，更易于阅读。</p>\n</li>\n</ul>\n<h4 id=\"12、样式表\"><a href=\"#12、样式表\" class=\"headerlink\" title=\"12、样式表\"></a><a>12、样式表</a></h4><ul>\n<li><p>样式表使用简洁的语法格式 ( <code>type</code> 属性不是必须的，在在加载 <code>js</code> 脚本时也可省去)：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>短的规则可以写成一行:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-class\">.into</span> &#123;<span class=\"attribute\">font-family</span>: Verdana; <span class=\"attribute\">font-size</span>: <span class=\"number\">16em</span>;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>长的规则可以写成多行:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightgrey;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Arial Black\"</span>, Helvetica, sans-serif;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将左花括号与选择器放在同一行。</li>\n<li>左花括号与选择器间添加一个空格。</li>\n<li>使用两个空格来缩进。</li>\n<li>冒号与属性值之间添加一个空格。</li>\n<li>逗号和符号之后使用一个空格。</li>\n<li>每个属性与值结尾都要使用分号。</li>\n<li>只有属性值包含空格时才使用引号。</li>\n<li>右花括号放在新的一行。</li>\n<li>每行最多 80 个字符。</li>\n<li>在逗号和冒号后添加空格是常用的一个规则。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"13、使用小写文件名\"><a href=\"#13、使用小写文件名\" class=\"headerlink\" title=\"13、使用小写文件名\"></a><a>13、使用小写文件名</a></h4><ul>\n<li>大多 Web 服务器 (<code>Apache</code>, <code>Unix</code>) 对大小写敏感： <code>london.jpg</code> 不能通过 <code>London.jpg</code> 访问。</li>\n<li>其他 Web 服务器 (<code>Microsoft</code>, <code>IIS</code>) 对大小写不敏感： <code>london.jpg</code> 可以通过 <code>London.jpg</code> 或 <code>london.jpg</code> 访问。</li>\n<li>你必须保持统一的风格，我们 <code>建议统一使用小写</code> 的文件名。</li>\n</ul>\n<h4 id=\"14、-htm-和-html-的区别\"><a href=\"#14、-htm-和-html-的区别\" class=\"headerlink\" title=\"14、.htm 和 .html 的区别\"></a><a>14、<code>.htm</code> 和 <code>.html</code> 的区别</a></h4><p><strong><code>.htm</code> 和 <code>.html</code> 的扩展名文件本质上是没有区别的。浏览器和 Web 服务器都会把它们当作 <code>HTML</code> 文件来处理。</strong></p>\n<ul>\n<li><p><code>区别在于：</code></p>\n<ul>\n<li><code>.htm</code> 应用在早期 <code>DOS</code> 系统，系统现在或者只能有三个字符。</li>\n<li>在 <code>Unix</code> 系统中后缀没有特别限制，一般用 <code>.html</code>。</li>\n</ul>\n</li>\n<li><p><code>技术上的区别：</code></p>\n<ul>\n<li>如果一个 <code>URL</code> 没有指定文件名 (如 <a href=\"http://www.runoob.com/css/\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/css/</a>), 服务器会返回默认的文件名。通常默认文件名为 <code>index.html</code>, <code>index.htm</code>, <code>default.html</code>, 和 <code>default.htm</code>。</li>\n<li>如果服务器只配置了 <code>index.html</code> 作为默认文件，你必须将文件命名为 <code>index.html</code>, 而不是 <code>index.htm</code>。</li>\n<li>但是，通常服务器可以设置多个默认文件，你可以根据需要设置默认文件名。</li>\n<li><code>无论如何</code>，<code>HTML</code> 完整的后缀是 <code>.html</code>。</li>\n</ul>\n</li>\n</ul>\n<p style=\"text-align: right\">参考文档 <a href=\"http://www.runoob.com/html/html5-syntax.html\" target=\"_blank\" rel=\"noopener\">runoob</a></p>"},{"id":"0809009","title":"vue-cli 快速构建 vue.js 项目","date":"2018-03-01T06:59:28.000Z","_content":"- <a href=\"#Quickstart\">快速上手</a>\n- <a href=\"#Commands\">构建命令</a>\n- <a href=\"#Babel\">配置Babel</a>\n\n#### <a name=\"Quickstart\">1. 快速上手</a>\n本文介绍如何使用vue-cli快速构建vus.js项目，主要用到`webpack`，以及`vue-loader`，所以确保你的环境中安装有webpack。\n\n```bash\n# 安装vue-cli脚手架工具\n$ npm install -g vue-cli\n\n# 在 my-project 目录中生成一个项目\n# 这一步中你还可以选择是否安装vue-router,ESLint,unit tests, e2e tests...\n$ vue init webpack my-project\n\n# 进入到项目\n$ cd my-project\n\n# 安装依赖\n$ npm install\n\n# 构建并启动项目\n$ npm run dev\n```\n如果你在 `vue init webpack my-project` 步骤中选择安装所有的工具，那么我们的项目目录结构应该是这样的：\n```\n.\n├── build/                      # webpack config files\n│   └── ...\n├── config/\n│   ├── index.js                # main project config\n│   └── ...\n├── src/\n│   ├── main.js                 # app entry file\n│   ├── App.vue                 # main app component\n│   ├── components/             # ui components\n│   │   └── ...\n│   └── assets/                 # module assets (processed by webpack)\n│       └── ...\n├── static/                     # pure static assets (directly copied)\n├── test/\n│   └── unit/                   # unit tests\n│   │   ├── specs/              # test spec files\n│   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests\n│   │   ├── index.js            # test build entry file\n│   │   ├── jest.conf.js        # Config file when using Jest for unit tests\n│   │   └── karma.conf.js       # test runner config file when using Karma for unit tests\n│   │   ├── setup.js            # file that runs before Jest runs your unit tests\n│   └── e2e/                    # e2e tests\n│   │   ├── specs/              # test spec files\n│   │   ├── custom-assertions/  # custom assertions for e2e tests\n│   │   ├── runner.js           # test runner script\n│   │   └── nightwatch.conf.js  # test runner config file\n├── .babelrc                    # babel config\n├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor\n├── .eslintrc.js                # eslint config\n├── .eslintignore               # eslint ignore rules\n├── .gitignore                  # sensible defaults for gitignore\n├── .postcssrc.js               # postcss config\n├── index.html                  # index.html template\n├── package.json                # build scripts and dependencies\n└── README.md                   # Default README file\n```\n> 目录/文件介绍：\n\n- `build/`：该目录保存的是开发和生产环境中的webpack配置，一般情况下是不需要进行修改的；当需要自定义webpack配置时，可以从webpack.base.conf.js开始研究。\n\n- `config/index.js`：这是项目构建时需要的一些最常用到的配置文件。\n\n- `src/`：这里存放的就是我们的业务代码了，我们可以根据项目需要自行配置。\n\n- `static/`：在这里，我们可以存放一些我们不希望webpack来处理的静态资源文件，在使用webpack来构建时，这里的文件将会直接复制到构建后的资源目录下。\n\n- `test/unit`：单元测试相关文件。\n\n- `test/e2e`：e2e测试相关文件。\n\n- `index.html`：基于vue.js的SPA单页应用的入口HTML模板，在开发、构建过程中，webpack将生成很多资源文件，文件之间的URL会被自动的注入到该index.html中。\n\n- `package.json`：npm包源文件，包含所有的构建依赖和构建命令。\n\n#### <a name=\"Commands\">2. 构建命令</a>\n\n<strong>所有的构建命令都是通过`npm`脚本执行的，见`package.json//scripts`。<strong>\n\n```\nnpm run dev\n```\n在本地开发环境启动一个node.js服务器。\n- `webpack` + `vue-loader` 作用于vue的单文件组件\n- 状态保存，热加载\n- 使用`ESLint`检查js\n- 生成资源文件的sourcemap\n- ......\n\n```\nnpm run build\n```\n在生产环境中构建资源\n- 使用`UglifyJS v3`压缩JavaScript\n- 使用`html-minifier`压缩HTML\n- 使用`cssnano`将所有组件的CSS提取到一个文件中\n- 使用版本哈希编译所有的静态文件，以实现资源的持久缓存。为所有的资源自定生成合适的URL，最后注入到`index.html`中，完成整个工程的构建。\n\n```\nnpm run unit\n```\n- 使用Jest在JSDOM中运行单元测试\n\n```\nnpm run lint\n```\n- 运行ESLint并报告任何linting错误。\n\n> 更多构建命令请查阅相关资料\n\n#### <a name=\"Babel\">3. 配置Babel</a>\n\n> 详见我的[另外一篇文章](/2018/03/01/0809007/)\n\n`至此，通过vue-cli构建vue工程的基本过程已经结束，查看更多详细配置，`[请转](https://vuejs-templates.github.io/webpack/)","source":"_posts/0809009_vue-cli快速构建vue-js项目.md","raw":"---\nid: 0809009\ntitle: vue-cli 快速构建 vue.js 项目\ndate: 2018-03-01 14:59:28\ntags:\n    - vue.js\n    - webpack\n    - JavaScript\n    - es6\ncategories:\n---\n- <a href=\"#Quickstart\">快速上手</a>\n- <a href=\"#Commands\">构建命令</a>\n- <a href=\"#Babel\">配置Babel</a>\n\n#### <a name=\"Quickstart\">1. 快速上手</a>\n本文介绍如何使用vue-cli快速构建vus.js项目，主要用到`webpack`，以及`vue-loader`，所以确保你的环境中安装有webpack。\n\n```bash\n# 安装vue-cli脚手架工具\n$ npm install -g vue-cli\n\n# 在 my-project 目录中生成一个项目\n# 这一步中你还可以选择是否安装vue-router,ESLint,unit tests, e2e tests...\n$ vue init webpack my-project\n\n# 进入到项目\n$ cd my-project\n\n# 安装依赖\n$ npm install\n\n# 构建并启动项目\n$ npm run dev\n```\n如果你在 `vue init webpack my-project` 步骤中选择安装所有的工具，那么我们的项目目录结构应该是这样的：\n```\n.\n├── build/                      # webpack config files\n│   └── ...\n├── config/\n│   ├── index.js                # main project config\n│   └── ...\n├── src/\n│   ├── main.js                 # app entry file\n│   ├── App.vue                 # main app component\n│   ├── components/             # ui components\n│   │   └── ...\n│   └── assets/                 # module assets (processed by webpack)\n│       └── ...\n├── static/                     # pure static assets (directly copied)\n├── test/\n│   └── unit/                   # unit tests\n│   │   ├── specs/              # test spec files\n│   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests\n│   │   ├── index.js            # test build entry file\n│   │   ├── jest.conf.js        # Config file when using Jest for unit tests\n│   │   └── karma.conf.js       # test runner config file when using Karma for unit tests\n│   │   ├── setup.js            # file that runs before Jest runs your unit tests\n│   └── e2e/                    # e2e tests\n│   │   ├── specs/              # test spec files\n│   │   ├── custom-assertions/  # custom assertions for e2e tests\n│   │   ├── runner.js           # test runner script\n│   │   └── nightwatch.conf.js  # test runner config file\n├── .babelrc                    # babel config\n├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor\n├── .eslintrc.js                # eslint config\n├── .eslintignore               # eslint ignore rules\n├── .gitignore                  # sensible defaults for gitignore\n├── .postcssrc.js               # postcss config\n├── index.html                  # index.html template\n├── package.json                # build scripts and dependencies\n└── README.md                   # Default README file\n```\n> 目录/文件介绍：\n\n- `build/`：该目录保存的是开发和生产环境中的webpack配置，一般情况下是不需要进行修改的；当需要自定义webpack配置时，可以从webpack.base.conf.js开始研究。\n\n- `config/index.js`：这是项目构建时需要的一些最常用到的配置文件。\n\n- `src/`：这里存放的就是我们的业务代码了，我们可以根据项目需要自行配置。\n\n- `static/`：在这里，我们可以存放一些我们不希望webpack来处理的静态资源文件，在使用webpack来构建时，这里的文件将会直接复制到构建后的资源目录下。\n\n- `test/unit`：单元测试相关文件。\n\n- `test/e2e`：e2e测试相关文件。\n\n- `index.html`：基于vue.js的SPA单页应用的入口HTML模板，在开发、构建过程中，webpack将生成很多资源文件，文件之间的URL会被自动的注入到该index.html中。\n\n- `package.json`：npm包源文件，包含所有的构建依赖和构建命令。\n\n#### <a name=\"Commands\">2. 构建命令</a>\n\n<strong>所有的构建命令都是通过`npm`脚本执行的，见`package.json//scripts`。<strong>\n\n```\nnpm run dev\n```\n在本地开发环境启动一个node.js服务器。\n- `webpack` + `vue-loader` 作用于vue的单文件组件\n- 状态保存，热加载\n- 使用`ESLint`检查js\n- 生成资源文件的sourcemap\n- ......\n\n```\nnpm run build\n```\n在生产环境中构建资源\n- 使用`UglifyJS v3`压缩JavaScript\n- 使用`html-minifier`压缩HTML\n- 使用`cssnano`将所有组件的CSS提取到一个文件中\n- 使用版本哈希编译所有的静态文件，以实现资源的持久缓存。为所有的资源自定生成合适的URL，最后注入到`index.html`中，完成整个工程的构建。\n\n```\nnpm run unit\n```\n- 使用Jest在JSDOM中运行单元测试\n\n```\nnpm run lint\n```\n- 运行ESLint并报告任何linting错误。\n\n> 更多构建命令请查阅相关资料\n\n#### <a name=\"Babel\">3. 配置Babel</a>\n\n> 详见我的[另外一篇文章](/2018/03/01/0809007/)\n\n`至此，通过vue-cli构建vue工程的基本过程已经结束，查看更多详细配置，`[请转](https://vuejs-templates.github.io/webpack/)","slug":"0809009_vue-cli快速构建vue-js项目","published":1,"updated":"2018-03-09T08:19:25.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc10000h9oc079f7g7mi","content":"<ul>\n<li><a href=\"#Quickstart\">快速上手</a></li>\n<li><a href=\"#Commands\">构建命令</a></li>\n<li><a href=\"#Babel\">配置Babel</a></li>\n</ul>\n<h4 id=\"1-快速上手\"><a href=\"#1-快速上手\" class=\"headerlink\" title=\"1. 快速上手\"></a><a name=\"Quickstart\">1. 快速上手</a></h4><p>本文介绍如何使用vue-cli快速构建vus.js项目，主要用到<code>webpack</code>，以及<code>vue-loader</code>，所以确保你的环境中安装有webpack。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装vue-cli脚手架工具</span></span><br><span class=\"line\">$ npm install -g vue-cli</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 my-project 目录中生成一个项目</span></span><br><span class=\"line\"><span class=\"comment\"># 这一步中你还可以选择是否安装vue-router,ESLint,unit tests, e2e tests...</span></span><br><span class=\"line\">$ vue init webpack my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入到项目</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">$ npm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建并启动项目</span></span><br><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n<p>如果你在 <code>vue init webpack my-project</code> 步骤中选择安装所有的工具，那么我们的项目目录结构应该是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── build/                      # webpack config files</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── config/</span><br><span class=\"line\">│   ├── index.js                # main project config</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── src/</span><br><span class=\"line\">│   ├── main.js                 # app entry file</span><br><span class=\"line\">│   ├── App.vue                 # main app component</span><br><span class=\"line\">│   ├── components/             # ui components</span><br><span class=\"line\">│   │   └── ...</span><br><span class=\"line\">│   └── assets/                 # module assets (processed by webpack)</span><br><span class=\"line\">│       └── ...</span><br><span class=\"line\">├── static/                     # pure static assets (directly copied)</span><br><span class=\"line\">├── test/</span><br><span class=\"line\">│   └── unit/                   # unit tests</span><br><span class=\"line\">│   │   ├── specs/              # test spec files</span><br><span class=\"line\">│   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests</span><br><span class=\"line\">│   │   ├── index.js            # test build entry file</span><br><span class=\"line\">│   │   ├── jest.conf.js        # Config file when using Jest for unit tests</span><br><span class=\"line\">│   │   └── karma.conf.js       # test runner config file when using Karma for unit tests</span><br><span class=\"line\">│   │   ├── setup.js            # file that runs before Jest runs your unit tests</span><br><span class=\"line\">│   └── e2e/                    # e2e tests</span><br><span class=\"line\">│   │   ├── specs/              # test spec files</span><br><span class=\"line\">│   │   ├── custom-assertions/  # custom assertions for e2e tests</span><br><span class=\"line\">│   │   ├── runner.js           # test runner script</span><br><span class=\"line\">│   │   └── nightwatch.conf.js  # test runner config file</span><br><span class=\"line\">├── .babelrc                    # babel config</span><br><span class=\"line\">├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor</span><br><span class=\"line\">├── .eslintrc.js                # eslint config</span><br><span class=\"line\">├── .eslintignore               # eslint ignore rules</span><br><span class=\"line\">├── .gitignore                  # sensible defaults for gitignore</span><br><span class=\"line\">├── .postcssrc.js               # postcss config</span><br><span class=\"line\">├── index.html                  # index.html template</span><br><span class=\"line\">├── package.json                # build scripts and dependencies</span><br><span class=\"line\">└── README.md                   # Default README file</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>目录/文件介绍：</p>\n</blockquote>\n<ul>\n<li><p><code>build/</code>：该目录保存的是开发和生产环境中的webpack配置，一般情况下是不需要进行修改的；当需要自定义webpack配置时，可以从webpack.base.conf.js开始研究。</p>\n</li>\n<li><p><code>config/index.js</code>：这是项目构建时需要的一些最常用到的配置文件。</p>\n</li>\n<li><p><code>src/</code>：这里存放的就是我们的业务代码了，我们可以根据项目需要自行配置。</p>\n</li>\n<li><p><code>static/</code>：在这里，我们可以存放一些我们不希望webpack来处理的静态资源文件，在使用webpack来构建时，这里的文件将会直接复制到构建后的资源目录下。</p>\n</li>\n<li><p><code>test/unit</code>：单元测试相关文件。</p>\n</li>\n<li><p><code>test/e2e</code>：e2e测试相关文件。</p>\n</li>\n<li><p><code>index.html</code>：基于vue.js的SPA单页应用的入口HTML模板，在开发、构建过程中，webpack将生成很多资源文件，文件之间的URL会被自动的注入到该index.html中。</p>\n</li>\n<li><p><code>package.json</code>：npm包源文件，包含所有的构建依赖和构建命令。</p>\n</li>\n</ul>\n<h4 id=\"2-构建命令\"><a href=\"#2-构建命令\" class=\"headerlink\" title=\"2. 构建命令\"></a><a name=\"Commands\">2. 构建命令</a></h4><p><strong>所有的构建命令都是通过<code>npm</code>脚本执行的，见<code>package.json//scripts</code>。<strong></strong></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<p>在本地开发环境启动一个node.js服务器。</p>\n<ul>\n<li><code>webpack</code> + <code>vue-loader</code> 作用于vue的单文件组件</li>\n<li>状态保存，热加载</li>\n<li>使用<code>ESLint</code>检查js</li>\n<li>生成资源文件的sourcemap</li>\n<li>……</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p>在生产环境中构建资源</p>\n<ul>\n<li>使用<code>UglifyJS v3</code>压缩JavaScript</li>\n<li>使用<code>html-minifier</code>压缩HTML</li>\n<li>使用<code>cssnano</code>将所有组件的CSS提取到一个文件中</li>\n<li>使用版本哈希编译所有的静态文件，以实现资源的持久缓存。为所有的资源自定生成合适的URL，最后注入到<code>index.html</code>中，完成整个工程的构建。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run unit</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用Jest在JSDOM中运行单元测试</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run lint</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行ESLint并报告任何linting错误。</li>\n</ul>\n<blockquote>\n<p>更多构建命令请查阅相关资料</p>\n</blockquote>\n<h4 id=\"3-配置Babel\"><a href=\"#3-配置Babel\" class=\"headerlink\" title=\"3. 配置Babel\"></a><a name=\"Babel\">3. 配置Babel</a></h4><blockquote>\n<p>详见我的<a href=\"/2018/03/01/0809007/\">另外一篇文章</a></p>\n</blockquote>\n<p><code>至此，通过vue-cli构建vue工程的基本过程已经结束，查看更多详细配置，</code><a href=\"https://vuejs-templates.github.io/webpack/\" target=\"_blank\" rel=\"noopener\">请转</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"#Quickstart\">快速上手</a></li>\n<li><a href=\"#Commands\">构建命令</a></li>\n<li><a href=\"#Babel\">配置Babel</a></li>\n</ul>\n<h4 id=\"1-快速上手\"><a href=\"#1-快速上手\" class=\"headerlink\" title=\"1. 快速上手\"></a><a name=\"Quickstart\">1. 快速上手</a></h4><p>本文介绍如何使用vue-cli快速构建vus.js项目，主要用到<code>webpack</code>，以及<code>vue-loader</code>，所以确保你的环境中安装有webpack。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装vue-cli脚手架工具</span></span><br><span class=\"line\">$ npm install -g vue-cli</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 my-project 目录中生成一个项目</span></span><br><span class=\"line\"><span class=\"comment\"># 这一步中你还可以选择是否安装vue-router,ESLint,unit tests, e2e tests...</span></span><br><span class=\"line\">$ vue init webpack my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入到项目</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">$ npm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建并启动项目</span></span><br><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n<p>如果你在 <code>vue init webpack my-project</code> 步骤中选择安装所有的工具，那么我们的项目目录结构应该是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── build/                      # webpack config files</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── config/</span><br><span class=\"line\">│   ├── index.js                # main project config</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── src/</span><br><span class=\"line\">│   ├── main.js                 # app entry file</span><br><span class=\"line\">│   ├── App.vue                 # main app component</span><br><span class=\"line\">│   ├── components/             # ui components</span><br><span class=\"line\">│   │   └── ...</span><br><span class=\"line\">│   └── assets/                 # module assets (processed by webpack)</span><br><span class=\"line\">│       └── ...</span><br><span class=\"line\">├── static/                     # pure static assets (directly copied)</span><br><span class=\"line\">├── test/</span><br><span class=\"line\">│   └── unit/                   # unit tests</span><br><span class=\"line\">│   │   ├── specs/              # test spec files</span><br><span class=\"line\">│   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests</span><br><span class=\"line\">│   │   ├── index.js            # test build entry file</span><br><span class=\"line\">│   │   ├── jest.conf.js        # Config file when using Jest for unit tests</span><br><span class=\"line\">│   │   └── karma.conf.js       # test runner config file when using Karma for unit tests</span><br><span class=\"line\">│   │   ├── setup.js            # file that runs before Jest runs your unit tests</span><br><span class=\"line\">│   └── e2e/                    # e2e tests</span><br><span class=\"line\">│   │   ├── specs/              # test spec files</span><br><span class=\"line\">│   │   ├── custom-assertions/  # custom assertions for e2e tests</span><br><span class=\"line\">│   │   ├── runner.js           # test runner script</span><br><span class=\"line\">│   │   └── nightwatch.conf.js  # test runner config file</span><br><span class=\"line\">├── .babelrc                    # babel config</span><br><span class=\"line\">├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor</span><br><span class=\"line\">├── .eslintrc.js                # eslint config</span><br><span class=\"line\">├── .eslintignore               # eslint ignore rules</span><br><span class=\"line\">├── .gitignore                  # sensible defaults for gitignore</span><br><span class=\"line\">├── .postcssrc.js               # postcss config</span><br><span class=\"line\">├── index.html                  # index.html template</span><br><span class=\"line\">├── package.json                # build scripts and dependencies</span><br><span class=\"line\">└── README.md                   # Default README file</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>目录/文件介绍：</p>\n</blockquote>\n<ul>\n<li><p><code>build/</code>：该目录保存的是开发和生产环境中的webpack配置，一般情况下是不需要进行修改的；当需要自定义webpack配置时，可以从webpack.base.conf.js开始研究。</p>\n</li>\n<li><p><code>config/index.js</code>：这是项目构建时需要的一些最常用到的配置文件。</p>\n</li>\n<li><p><code>src/</code>：这里存放的就是我们的业务代码了，我们可以根据项目需要自行配置。</p>\n</li>\n<li><p><code>static/</code>：在这里，我们可以存放一些我们不希望webpack来处理的静态资源文件，在使用webpack来构建时，这里的文件将会直接复制到构建后的资源目录下。</p>\n</li>\n<li><p><code>test/unit</code>：单元测试相关文件。</p>\n</li>\n<li><p><code>test/e2e</code>：e2e测试相关文件。</p>\n</li>\n<li><p><code>index.html</code>：基于vue.js的SPA单页应用的入口HTML模板，在开发、构建过程中，webpack将生成很多资源文件，文件之间的URL会被自动的注入到该index.html中。</p>\n</li>\n<li><p><code>package.json</code>：npm包源文件，包含所有的构建依赖和构建命令。</p>\n</li>\n</ul>\n<h4 id=\"2-构建命令\"><a href=\"#2-构建命令\" class=\"headerlink\" title=\"2. 构建命令\"></a><a name=\"Commands\">2. 构建命令</a></h4><p><strong>所有的构建命令都是通过<code>npm</code>脚本执行的，见<code>package.json//scripts</code>。<strong></strong></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<p>在本地开发环境启动一个node.js服务器。</p>\n<ul>\n<li><code>webpack</code> + <code>vue-loader</code> 作用于vue的单文件组件</li>\n<li>状态保存，热加载</li>\n<li>使用<code>ESLint</code>检查js</li>\n<li>生成资源文件的sourcemap</li>\n<li>……</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p>在生产环境中构建资源</p>\n<ul>\n<li>使用<code>UglifyJS v3</code>压缩JavaScript</li>\n<li>使用<code>html-minifier</code>压缩HTML</li>\n<li>使用<code>cssnano</code>将所有组件的CSS提取到一个文件中</li>\n<li>使用版本哈希编译所有的静态文件，以实现资源的持久缓存。为所有的资源自定生成合适的URL，最后注入到<code>index.html</code>中，完成整个工程的构建。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run unit</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用Jest在JSDOM中运行单元测试</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run lint</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行ESLint并报告任何linting错误。</li>\n</ul>\n<blockquote>\n<p>更多构建命令请查阅相关资料</p>\n</blockquote>\n<h4 id=\"3-配置Babel\"><a href=\"#3-配置Babel\" class=\"headerlink\" title=\"3. 配置Babel\"></a><a name=\"Babel\">3. 配置Babel</a></h4><blockquote>\n<p>详见我的<a href=\"/2018/03/01/0809007/\">另外一篇文章</a></p>\n</blockquote>\n<p><code>至此，通过vue-cli构建vue工程的基本过程已经结束，查看更多详细配置，</code><a href=\"https://vuejs-templates.github.io/webpack/\" target=\"_blank\" rel=\"noopener\">请转</a></p>\n"},{"id":"0809014","title":"JavaScript 类型检测","date":"2018-03-05T02:58:37.000Z","_content":"\n一个简单有用的js类型检测的方法：\n\n```javascript\nfunction checkType(sth) {\n    return Object.prototype.toString.call(o)\n    .match(/(\\w+)\\]$/)[1]\n    .toLowerCase();\n}\n\ncheckType({})               // object\ncheckType([])               // array\ncheckType(function(){})     // function\ncheckType(1)                // number\ncheckType(+'3')             // number\ncheckType(3+'')             // string\n```","source":"_posts/0809014_JavaScript类型检测.md","raw":"---\nid: 0809014\ntitle: JavaScript 类型检测\ndate: 2018-03-05 10:58:37\ntags:\n    - JavaScript\ncategories:\n---\n\n一个简单有用的js类型检测的方法：\n\n```javascript\nfunction checkType(sth) {\n    return Object.prototype.toString.call(o)\n    .match(/(\\w+)\\]$/)[1]\n    .toLowerCase();\n}\n\ncheckType({})               // object\ncheckType([])               // array\ncheckType(function(){})     // function\ncheckType(1)                // number\ncheckType(+'3')             // number\ncheckType(3+'')             // string\n```","slug":"0809014_JavaScript类型检测","published":1,"updated":"2018-03-09T08:18:49.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc10000j9oc06rjvunu5","content":"<p>一个简单有用的js类型检测的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkType</span>(<span class=\"params\">sth</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o)</span><br><span class=\"line\">    .match(<span class=\"regexp\">/(\\w+)\\]$/</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    .toLowerCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkType(&#123;&#125;)               <span class=\"comment\">// object</span></span><br><span class=\"line\">checkType([])               <span class=\"comment\">// array</span></span><br><span class=\"line\">checkType(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)     <span class=\"comment\">// function</span></span><br><span class=\"line\">checkType(<span class=\"number\">1</span>)                <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(+<span class=\"string\">'3'</span>)             <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(<span class=\"number\">3</span>+<span class=\"string\">''</span>)             <span class=\"comment\">// string</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>一个简单有用的js类型检测的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkType</span>(<span class=\"params\">sth</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o)</span><br><span class=\"line\">    .match(<span class=\"regexp\">/(\\w+)\\]$/</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    .toLowerCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkType(&#123;&#125;)               <span class=\"comment\">// object</span></span><br><span class=\"line\">checkType([])               <span class=\"comment\">// array</span></span><br><span class=\"line\">checkType(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)     <span class=\"comment\">// function</span></span><br><span class=\"line\">checkType(<span class=\"number\">1</span>)                <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(+<span class=\"string\">'3'</span>)             <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(<span class=\"number\">3</span>+<span class=\"string\">''</span>)             <span class=\"comment\">// string</span></span><br></pre></td></tr></table></figure>"},{"id":"0809010","title":"小窥 Node.js 服务端框架 ExpressJS","date":"2018-03-02T08:07:06.000Z","_content":"\n> Express: Fast, unopinionated, minimalist web framework for Node.js（Express是一个快速，高度包容，极简的Node.js框架）。事实上，只要对Node.js稍有了解，基本上就可以入门Express了，本人就是对Node.js有些了解之后就去学习了一下Express，自身感觉正如官方介绍那样。\n\n- <a href=\"#start\">1 入门</a>\n    - <a href=\"#install\">1.1 安装</a>\n    - <a href=\"#hello\">1.2 hello world</a>\n    - <a href=\"#generator\">1.3 Express生成器</a>\n    - <a href=\"#basicrouter\">1.4 基本路由</a>\n    - <a href=\"#static\">1.5 静态文件处理</a>\n- <a href=\"#guide\">2 指南</a>\n    - <a href=\"#router\">2.1 路由</a>\n    - <a href=\"#writingmiddleware\">2.2 编写中间件</a> \n    - <a href=\"#useingmiddleware\">2.3 使用中间件</a> \n- <a href=\"#api\">3 API</a>\n---\n\n#### <a name=\"start\">1. 入门</a>\n\n- <a name=\"install\">1.1 安装</a>\n\n`使用Express之前确保你的机器上安装有Node.js环境。`\n\n> 创建工程目录，并进入到工程目录：\n\n```bash\n$ mkdir express\n$ cd express\n```\n\n> 使用`npm init`命令为应用程序创建`package.json`文件：\n\n```bash\n$ npm init\n```\n输入`npm init`命令时，除了`entry point: (index.js)`选项修改`index.js`为`app.js`（入口文件）之外（当然也可以使用默认值），其余的选项可以直接回车选择默认值。\n此时，工程中会生成一个`package.json`文件，打开看一下，基本长这样：\n```json\n{\n  \"name\": \"express\",\n  \"version\": \"1.0.0\",\n  \"description\": \"start express\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [\n    \"express\"\n  ],\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\"\n}\n```\n\n> 在当前目录中安装`Express`，然后将其保存在依赖项列表中。例如：\n\n```bash\n$ npm install express --save\n```\n要暂时安装`Express`而不将其添加到依赖项列表中，请省略`--save`选项：\n```bash\n$ npm install express\n```\n`采用 --save 选项安装的 Node 模块已添加到 package.json 文件中的 dependencies 列表。 今后运行 app 目录中的 npm install 将自动安装依赖项列表中的模块。`\n\n- <a name=\"hello\">1.2 hello world</a>\n\n> 在<a href=\"#install\">1.1</a>步骤的基础上，开始创建第一个程序，创建一个`app.js`文件（对应`npm init`时的`entry point: (app.js)`），并填入代码：\n\n```js\n// app.js\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n  res.send('Hello World!');\n});\n\napp.listen(3000, function () {\n  console.log('Example app listening on port 3000!');\n});\n```\n应用程序会启动服务器，并在端口 3000 上侦听连接。此应用程序以“Hello World!”响应针对根 URL (/) 或路由的请求。对于其他所有路径，它将以 404 Not Found 进行响应。\n`req（请求）和 res（响应）与 Node 提供的对象完全相同，所以您可以在不涉及 Express 的情况下调用 req.pipe()、req.on('data', callback) 和要执行的其他任何函数。`\n\n> 使用以下命令运行应用程序：\n\n```bash\n$ node app.js\n```\n然后，在浏览器中输入 [http://localhost:3000/](http://localhost:3000/) 以查看输出。\n\n- <a name=\"generator\">1.3 Express生成器</a>\n\n`Express 生成器的作用就像是为完整的应用程序建立一个“脚手架”，包含各种用途的 JavaScript 文件、Jade 模板和子目录。`\n\n> 使用以下命令安装 express：\n\n```bash\n$ npm install express-generator -g\n```\n\n> 使用 -h 选项显示命令选项：\n\n```bash\n$ express -h\n\n  Usage: express [options] [dir]\n\n\n  Options:\n\n        --version        output the version number\n    -e, --ejs            add ejs engine support\n        --pug            add pug engine support\n        --hbs            add handlebars engine support\n    -H, --hogan          add hogan.js engine support\n    -v, --view <engine>  add view <engine> support (dust|ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade                                                                                                                                   )\n    -c, --css <engine>   add stylesheet <engine> support (less|stylus|compass|sass) (defaults to plain css                                                                                                                                   )\n        --git            add .gitignore\n    -f, --force          force on non-empty directory\n    -h, --help           output usage information\n```\n\n> 例如，以下语句在当前工作目录中创建名为 `myapp` 的 `Express` 应用程序：\n\n```bash\n$ express --view=pug myapp\n\n   create : myapp\n   create : myapp/package.json\n   create : myapp/app.js\n   create : myapp/views\n   create : myapp/views/index.pug\n   create : myapp/views/layout.pug\n   create : myapp/views/error.pug\n   create : myapp/public\n   create : myapp/routes\n   create : myapp/routes/index.js\n   create : myapp/routes/users.js\n   create : myapp/bin\n   create : myapp/bin/www\n   create : myapp/public/images\n   create : myapp/public/stylesheets\n   create : myapp/public/stylesheets/style.css\n\n   install dependencies:\n     $ cd myapp && npm install\n\n   run the app:\n     $ DEBUG=myapp:* npm start\n\n   create : myapp/public/javascripts\n```\n\n> 进入到 `myapp` 目录，然后安装依赖项：\n\n```bash\nnpm install\n```\n\n> 在 MacOS 或 Linux 上，采用以下命令运行此应用程序：\n\n```bash\n$ DEBUG=myapp:* npm start\n```\n\n> 在 Windows 上，使用以下命令：\n\n```bash\nset DEBUG=myapp:* & npm start\n```\n或者直接\n```bash\n$ npm start\n```\n\n*然后在浏览器中输入 [http://localhost:3000/](http://localhost:3000/) 以访问此应用程序。*\n\n> 生成的应用程序具有以下目录结构：\n\n```bash\n.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n\n7 directories, 9 files\n```\n`生成器创建的应用程序结构只是构造 Express 应用程序的众多方法之一。请随意使用此结构或者对其进行修改以最大程度满足自己的需求。`\n\n- <a name=\"basicrouter\">1.4 基本路由</a>\n- <a name=\"static\">1.5 静态文件处理</a>","source":"_posts/0809010_小窥Nodejs服务端框架Express.md","raw":"---\nid: 0809010\ntitle: 小窥 Node.js 服务端框架 ExpressJS\ndate: 2018-03-02 16:07:06\ntags:\n    - Node.js\n    - Express\n    - ing\ncategories:\n---\n\n> Express: Fast, unopinionated, minimalist web framework for Node.js（Express是一个快速，高度包容，极简的Node.js框架）。事实上，只要对Node.js稍有了解，基本上就可以入门Express了，本人就是对Node.js有些了解之后就去学习了一下Express，自身感觉正如官方介绍那样。\n\n- <a href=\"#start\">1 入门</a>\n    - <a href=\"#install\">1.1 安装</a>\n    - <a href=\"#hello\">1.2 hello world</a>\n    - <a href=\"#generator\">1.3 Express生成器</a>\n    - <a href=\"#basicrouter\">1.4 基本路由</a>\n    - <a href=\"#static\">1.5 静态文件处理</a>\n- <a href=\"#guide\">2 指南</a>\n    - <a href=\"#router\">2.1 路由</a>\n    - <a href=\"#writingmiddleware\">2.2 编写中间件</a> \n    - <a href=\"#useingmiddleware\">2.3 使用中间件</a> \n- <a href=\"#api\">3 API</a>\n---\n\n#### <a name=\"start\">1. 入门</a>\n\n- <a name=\"install\">1.1 安装</a>\n\n`使用Express之前确保你的机器上安装有Node.js环境。`\n\n> 创建工程目录，并进入到工程目录：\n\n```bash\n$ mkdir express\n$ cd express\n```\n\n> 使用`npm init`命令为应用程序创建`package.json`文件：\n\n```bash\n$ npm init\n```\n输入`npm init`命令时，除了`entry point: (index.js)`选项修改`index.js`为`app.js`（入口文件）之外（当然也可以使用默认值），其余的选项可以直接回车选择默认值。\n此时，工程中会生成一个`package.json`文件，打开看一下，基本长这样：\n```json\n{\n  \"name\": \"express\",\n  \"version\": \"1.0.0\",\n  \"description\": \"start express\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [\n    \"express\"\n  ],\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\"\n}\n```\n\n> 在当前目录中安装`Express`，然后将其保存在依赖项列表中。例如：\n\n```bash\n$ npm install express --save\n```\n要暂时安装`Express`而不将其添加到依赖项列表中，请省略`--save`选项：\n```bash\n$ npm install express\n```\n`采用 --save 选项安装的 Node 模块已添加到 package.json 文件中的 dependencies 列表。 今后运行 app 目录中的 npm install 将自动安装依赖项列表中的模块。`\n\n- <a name=\"hello\">1.2 hello world</a>\n\n> 在<a href=\"#install\">1.1</a>步骤的基础上，开始创建第一个程序，创建一个`app.js`文件（对应`npm init`时的`entry point: (app.js)`），并填入代码：\n\n```js\n// app.js\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n  res.send('Hello World!');\n});\n\napp.listen(3000, function () {\n  console.log('Example app listening on port 3000!');\n});\n```\n应用程序会启动服务器，并在端口 3000 上侦听连接。此应用程序以“Hello World!”响应针对根 URL (/) 或路由的请求。对于其他所有路径，它将以 404 Not Found 进行响应。\n`req（请求）和 res（响应）与 Node 提供的对象完全相同，所以您可以在不涉及 Express 的情况下调用 req.pipe()、req.on('data', callback) 和要执行的其他任何函数。`\n\n> 使用以下命令运行应用程序：\n\n```bash\n$ node app.js\n```\n然后，在浏览器中输入 [http://localhost:3000/](http://localhost:3000/) 以查看输出。\n\n- <a name=\"generator\">1.3 Express生成器</a>\n\n`Express 生成器的作用就像是为完整的应用程序建立一个“脚手架”，包含各种用途的 JavaScript 文件、Jade 模板和子目录。`\n\n> 使用以下命令安装 express：\n\n```bash\n$ npm install express-generator -g\n```\n\n> 使用 -h 选项显示命令选项：\n\n```bash\n$ express -h\n\n  Usage: express [options] [dir]\n\n\n  Options:\n\n        --version        output the version number\n    -e, --ejs            add ejs engine support\n        --pug            add pug engine support\n        --hbs            add handlebars engine support\n    -H, --hogan          add hogan.js engine support\n    -v, --view <engine>  add view <engine> support (dust|ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade                                                                                                                                   )\n    -c, --css <engine>   add stylesheet <engine> support (less|stylus|compass|sass) (defaults to plain css                                                                                                                                   )\n        --git            add .gitignore\n    -f, --force          force on non-empty directory\n    -h, --help           output usage information\n```\n\n> 例如，以下语句在当前工作目录中创建名为 `myapp` 的 `Express` 应用程序：\n\n```bash\n$ express --view=pug myapp\n\n   create : myapp\n   create : myapp/package.json\n   create : myapp/app.js\n   create : myapp/views\n   create : myapp/views/index.pug\n   create : myapp/views/layout.pug\n   create : myapp/views/error.pug\n   create : myapp/public\n   create : myapp/routes\n   create : myapp/routes/index.js\n   create : myapp/routes/users.js\n   create : myapp/bin\n   create : myapp/bin/www\n   create : myapp/public/images\n   create : myapp/public/stylesheets\n   create : myapp/public/stylesheets/style.css\n\n   install dependencies:\n     $ cd myapp && npm install\n\n   run the app:\n     $ DEBUG=myapp:* npm start\n\n   create : myapp/public/javascripts\n```\n\n> 进入到 `myapp` 目录，然后安装依赖项：\n\n```bash\nnpm install\n```\n\n> 在 MacOS 或 Linux 上，采用以下命令运行此应用程序：\n\n```bash\n$ DEBUG=myapp:* npm start\n```\n\n> 在 Windows 上，使用以下命令：\n\n```bash\nset DEBUG=myapp:* & npm start\n```\n或者直接\n```bash\n$ npm start\n```\n\n*然后在浏览器中输入 [http://localhost:3000/](http://localhost:3000/) 以访问此应用程序。*\n\n> 生成的应用程序具有以下目录结构：\n\n```bash\n.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n\n7 directories, 9 files\n```\n`生成器创建的应用程序结构只是构造 Express 应用程序的众多方法之一。请随意使用此结构或者对其进行修改以最大程度满足自己的需求。`\n\n- <a name=\"basicrouter\">1.4 基本路由</a>\n- <a name=\"static\">1.5 静态文件处理</a>","slug":"0809010_小窥Nodejs服务端框架Express","published":1,"updated":"2018-03-09T08:28:24.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc1g000l9oc0tiqeq0vh","content":"<blockquote>\n<p>Express: Fast, unopinionated, minimalist web framework for Node.js（Express是一个快速，高度包容，极简的Node.js框架）。事实上，只要对Node.js稍有了解，基本上就可以入门Express了，本人就是对Node.js有些了解之后就去学习了一下Express，自身感觉正如官方介绍那样。</p>\n</blockquote>\n<ul>\n<li><a href=\"#start\">1 入门</a><ul>\n<li><a href=\"#install\">1.1 安装</a></li>\n<li><a href=\"#hello\">1.2 hello world</a></li>\n<li><a href=\"#generator\">1.3 Express生成器</a></li>\n<li><a href=\"#basicrouter\">1.4 基本路由</a></li>\n<li><a href=\"#static\">1.5 静态文件处理</a></li>\n</ul>\n</li>\n<li><a href=\"#guide\">2 指南</a><ul>\n<li><a href=\"#router\">2.1 路由</a></li>\n<li><a href=\"#writingmiddleware\">2.2 编写中间件</a> </li>\n<li><a href=\"#useingmiddleware\">2.3 使用中间件</a> </li>\n</ul>\n</li>\n<li><a href=\"#api\">3 API</a></li>\n</ul>\n<hr>\n<h4 id=\"1-入门\"><a href=\"#1-入门\" class=\"headerlink\" title=\"1. 入门\"></a><a name=\"start\">1. 入门</a></h4><ul>\n<li><a name=\"install\">1.1 安装</a></li>\n</ul>\n<p><code>使用Express之前确保你的机器上安装有Node.js环境。</code></p>\n<blockquote>\n<p>创建工程目录，并进入到工程目录：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir express</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> express</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用<code>npm init</code>命令为应用程序创建<code>package.json</code>文件：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm init</span><br></pre></td></tr></table></figure>\n<p>输入<code>npm init</code>命令时，除了<code>entry point: (index.js)</code>选项修改<code>index.js</code>为<code>app.js</code>（入口文件）之外（当然也可以使用默认值），其余的选项可以直接回车选择默认值。<br>此时，工程中会生成一个<code>package.json</code>文件，打开看一下，基本长这样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"express\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"start express\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"app.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"keywords\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"express\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在当前目录中安装<code>Express</code>，然后将其保存在依赖项列表中。例如：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install express --save</span><br></pre></td></tr></table></figure>\n<p>要暂时安装<code>Express</code>而不将其添加到依赖项列表中，请省略<code>--save</code>选项：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install express</span><br></pre></td></tr></table></figure></p>\n<p><code>采用 --save 选项安装的 Node 模块已添加到 package.json 文件中的 dependencies 列表。 今后运行 app 目录中的 npm install 将自动安装依赖项列表中的模块。</code></p>\n<ul>\n<li><a name=\"hello\">1.2 hello world</a></li>\n</ul>\n<blockquote>\n<p>在<a href=\"#install\">1.1</a>步骤的基础上，开始创建第一个程序，创建一个<code>app.js</code>文件（对应<code>npm init</code>时的<code>entry point: (app.js)</code>），并填入代码：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening on port 3000!'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>应用程序会启动服务器，并在端口 3000 上侦听连接。此应用程序以“Hello World!”响应针对根 URL (/) 或路由的请求。对于其他所有路径，它将以 404 Not Found 进行响应。<br><code>req（请求）和 res（响应）与 Node 提供的对象完全相同，所以您可以在不涉及 Express 的情况下调用 req.pipe()、req.on(&#39;data&#39;, callback) 和要执行的其他任何函数。</code></p>\n<blockquote>\n<p>使用以下命令运行应用程序：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node app.js</span><br></pre></td></tr></table></figure>\n<p>然后，在浏览器中输入 <a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/</a> 以查看输出。</p>\n<ul>\n<li><a name=\"generator\">1.3 Express生成器</a></li>\n</ul>\n<p><code>Express 生成器的作用就像是为完整的应用程序建立一个“脚手架”，包含各种用途的 JavaScript 文件、Jade 模板和子目录。</code></p>\n<blockquote>\n<p>使用以下命令安装 express：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install express-generator -g</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 -h 选项显示命令选项：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ express -h</span><br><span class=\"line\"></span><br><span class=\"line\">  Usage: express [options] [dir]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  Options:</span><br><span class=\"line\"></span><br><span class=\"line\">        --version        output the version number</span><br><span class=\"line\">    -e, --ejs            add ejs engine support</span><br><span class=\"line\">        --pug            add pug engine support</span><br><span class=\"line\">        --hbs            add handlebars engine support</span><br><span class=\"line\">    -H, --hogan          add hogan.js engine support</span><br><span class=\"line\">    -v, --view &lt;engine&gt;  add view &lt;engine&gt; support (dust|ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade                                                                                                                                   )</span><br><span class=\"line\">    -c, --css &lt;engine&gt;   add stylesheet &lt;engine&gt; support (less|stylus|compass|sass) (defaults to plain css                                                                                                                                   )</span><br><span class=\"line\">        --git            add .gitignore</span><br><span class=\"line\">    -f, --force          force on non-empty directory</span><br><span class=\"line\">    -h, --<span class=\"built_in\">help</span>           output usage information</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>例如，以下语句在当前工作目录中创建名为 <code>myapp</code> 的 <code>Express</code> 应用程序：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ express --view=pug myapp</span><br><span class=\"line\"></span><br><span class=\"line\">   create : myapp</span><br><span class=\"line\">   create : myapp/package.json</span><br><span class=\"line\">   create : myapp/app.js</span><br><span class=\"line\">   create : myapp/views</span><br><span class=\"line\">   create : myapp/views/index.pug</span><br><span class=\"line\">   create : myapp/views/layout.pug</span><br><span class=\"line\">   create : myapp/views/error.pug</span><br><span class=\"line\">   create : myapp/public</span><br><span class=\"line\">   create : myapp/routes</span><br><span class=\"line\">   create : myapp/routes/index.js</span><br><span class=\"line\">   create : myapp/routes/users.js</span><br><span class=\"line\">   create : myapp/bin</span><br><span class=\"line\">   create : myapp/bin/www</span><br><span class=\"line\">   create : myapp/public/images</span><br><span class=\"line\">   create : myapp/public/stylesheets</span><br><span class=\"line\">   create : myapp/public/stylesheets/style.css</span><br><span class=\"line\"></span><br><span class=\"line\">   install dependencies:</span><br><span class=\"line\">     $ <span class=\"built_in\">cd</span> myapp &amp;&amp; npm install</span><br><span class=\"line\"></span><br><span class=\"line\">   run the app:</span><br><span class=\"line\">     $ DEBUG=myapp:* npm start</span><br><span class=\"line\"></span><br><span class=\"line\">   create : myapp/public/javascripts</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>进入到 <code>myapp</code> 目录，然后安装依赖项：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在 MacOS 或 Linux 上，采用以下命令运行此应用程序：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ DEBUG=myapp:* npm start</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在 Windows 上，使用以下命令：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> DEBUG=myapp:* &amp; npm start</span><br></pre></td></tr></table></figure>\n<p>或者直接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm start</span><br></pre></td></tr></table></figure></p>\n<p><em>然后在浏览器中输入 <a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/</a> 以访问此应用程序。</em></p>\n<blockquote>\n<p>生成的应用程序具有以下目录结构：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── app.js</span><br><span class=\"line\">├── bin</span><br><span class=\"line\">│   └── www</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── public</span><br><span class=\"line\">│   ├── images</span><br><span class=\"line\">│   ├── javascripts</span><br><span class=\"line\">│   └── stylesheets</span><br><span class=\"line\">│       └── style.css</span><br><span class=\"line\">├── routes</span><br><span class=\"line\">│   ├── index.js</span><br><span class=\"line\">│   └── users.js</span><br><span class=\"line\">└── views</span><br><span class=\"line\">    ├── error.pug</span><br><span class=\"line\">    ├── index.pug</span><br><span class=\"line\">    └── layout.pug</span><br><span class=\"line\"></span><br><span class=\"line\">7 directories, 9 files</span><br></pre></td></tr></table></figure>\n<p><code>生成器创建的应用程序结构只是构造 Express 应用程序的众多方法之一。请随意使用此结构或者对其进行修改以最大程度满足自己的需求。</code></p>\n<ul>\n<li><a name=\"basicrouter\">1.4 基本路由</a></li>\n<li><a name=\"static\">1.5 静态文件处理</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Express: Fast, unopinionated, minimalist web framework for Node.js（Express是一个快速，高度包容，极简的Node.js框架）。事实上，只要对Node.js稍有了解，基本上就可以入门Express了，本人就是对Node.js有些了解之后就去学习了一下Express，自身感觉正如官方介绍那样。</p>\n</blockquote>\n<ul>\n<li><a href=\"#start\">1 入门</a><ul>\n<li><a href=\"#install\">1.1 安装</a></li>\n<li><a href=\"#hello\">1.2 hello world</a></li>\n<li><a href=\"#generator\">1.3 Express生成器</a></li>\n<li><a href=\"#basicrouter\">1.4 基本路由</a></li>\n<li><a href=\"#static\">1.5 静态文件处理</a></li>\n</ul>\n</li>\n<li><a href=\"#guide\">2 指南</a><ul>\n<li><a href=\"#router\">2.1 路由</a></li>\n<li><a href=\"#writingmiddleware\">2.2 编写中间件</a> </li>\n<li><a href=\"#useingmiddleware\">2.3 使用中间件</a> </li>\n</ul>\n</li>\n<li><a href=\"#api\">3 API</a></li>\n</ul>\n<hr>\n<h4 id=\"1-入门\"><a href=\"#1-入门\" class=\"headerlink\" title=\"1. 入门\"></a><a name=\"start\">1. 入门</a></h4><ul>\n<li><a name=\"install\">1.1 安装</a></li>\n</ul>\n<p><code>使用Express之前确保你的机器上安装有Node.js环境。</code></p>\n<blockquote>\n<p>创建工程目录，并进入到工程目录：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir express</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> express</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用<code>npm init</code>命令为应用程序创建<code>package.json</code>文件：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm init</span><br></pre></td></tr></table></figure>\n<p>输入<code>npm init</code>命令时，除了<code>entry point: (index.js)</code>选项修改<code>index.js</code>为<code>app.js</code>（入口文件）之外（当然也可以使用默认值），其余的选项可以直接回车选择默认值。<br>此时，工程中会生成一个<code>package.json</code>文件，打开看一下，基本长这样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"express\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"start express\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"app.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"keywords\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"express\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在当前目录中安装<code>Express</code>，然后将其保存在依赖项列表中。例如：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install express --save</span><br></pre></td></tr></table></figure>\n<p>要暂时安装<code>Express</code>而不将其添加到依赖项列表中，请省略<code>--save</code>选项：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install express</span><br></pre></td></tr></table></figure></p>\n<p><code>采用 --save 选项安装的 Node 模块已添加到 package.json 文件中的 dependencies 列表。 今后运行 app 目录中的 npm install 将自动安装依赖项列表中的模块。</code></p>\n<ul>\n<li><a name=\"hello\">1.2 hello world</a></li>\n</ul>\n<blockquote>\n<p>在<a href=\"#install\">1.1</a>步骤的基础上，开始创建第一个程序，创建一个<code>app.js</code>文件（对应<code>npm init</code>时的<code>entry point: (app.js)</code>），并填入代码：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening on port 3000!'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>应用程序会启动服务器，并在端口 3000 上侦听连接。此应用程序以“Hello World!”响应针对根 URL (/) 或路由的请求。对于其他所有路径，它将以 404 Not Found 进行响应。<br><code>req（请求）和 res（响应）与 Node 提供的对象完全相同，所以您可以在不涉及 Express 的情况下调用 req.pipe()、req.on(&#39;data&#39;, callback) 和要执行的其他任何函数。</code></p>\n<blockquote>\n<p>使用以下命令运行应用程序：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node app.js</span><br></pre></td></tr></table></figure>\n<p>然后，在浏览器中输入 <a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/</a> 以查看输出。</p>\n<ul>\n<li><a name=\"generator\">1.3 Express生成器</a></li>\n</ul>\n<p><code>Express 生成器的作用就像是为完整的应用程序建立一个“脚手架”，包含各种用途的 JavaScript 文件、Jade 模板和子目录。</code></p>\n<blockquote>\n<p>使用以下命令安装 express：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install express-generator -g</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 -h 选项显示命令选项：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ express -h</span><br><span class=\"line\"></span><br><span class=\"line\">  Usage: express [options] [dir]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  Options:</span><br><span class=\"line\"></span><br><span class=\"line\">        --version        output the version number</span><br><span class=\"line\">    -e, --ejs            add ejs engine support</span><br><span class=\"line\">        --pug            add pug engine support</span><br><span class=\"line\">        --hbs            add handlebars engine support</span><br><span class=\"line\">    -H, --hogan          add hogan.js engine support</span><br><span class=\"line\">    -v, --view &lt;engine&gt;  add view &lt;engine&gt; support (dust|ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade                                                                                                                                   )</span><br><span class=\"line\">    -c, --css &lt;engine&gt;   add stylesheet &lt;engine&gt; support (less|stylus|compass|sass) (defaults to plain css                                                                                                                                   )</span><br><span class=\"line\">        --git            add .gitignore</span><br><span class=\"line\">    -f, --force          force on non-empty directory</span><br><span class=\"line\">    -h, --<span class=\"built_in\">help</span>           output usage information</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>例如，以下语句在当前工作目录中创建名为 <code>myapp</code> 的 <code>Express</code> 应用程序：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ express --view=pug myapp</span><br><span class=\"line\"></span><br><span class=\"line\">   create : myapp</span><br><span class=\"line\">   create : myapp/package.json</span><br><span class=\"line\">   create : myapp/app.js</span><br><span class=\"line\">   create : myapp/views</span><br><span class=\"line\">   create : myapp/views/index.pug</span><br><span class=\"line\">   create : myapp/views/layout.pug</span><br><span class=\"line\">   create : myapp/views/error.pug</span><br><span class=\"line\">   create : myapp/public</span><br><span class=\"line\">   create : myapp/routes</span><br><span class=\"line\">   create : myapp/routes/index.js</span><br><span class=\"line\">   create : myapp/routes/users.js</span><br><span class=\"line\">   create : myapp/bin</span><br><span class=\"line\">   create : myapp/bin/www</span><br><span class=\"line\">   create : myapp/public/images</span><br><span class=\"line\">   create : myapp/public/stylesheets</span><br><span class=\"line\">   create : myapp/public/stylesheets/style.css</span><br><span class=\"line\"></span><br><span class=\"line\">   install dependencies:</span><br><span class=\"line\">     $ <span class=\"built_in\">cd</span> myapp &amp;&amp; npm install</span><br><span class=\"line\"></span><br><span class=\"line\">   run the app:</span><br><span class=\"line\">     $ DEBUG=myapp:* npm start</span><br><span class=\"line\"></span><br><span class=\"line\">   create : myapp/public/javascripts</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>进入到 <code>myapp</code> 目录，然后安装依赖项：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在 MacOS 或 Linux 上，采用以下命令运行此应用程序：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ DEBUG=myapp:* npm start</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在 Windows 上，使用以下命令：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> DEBUG=myapp:* &amp; npm start</span><br></pre></td></tr></table></figure>\n<p>或者直接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm start</span><br></pre></td></tr></table></figure></p>\n<p><em>然后在浏览器中输入 <a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/</a> 以访问此应用程序。</em></p>\n<blockquote>\n<p>生成的应用程序具有以下目录结构：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── app.js</span><br><span class=\"line\">├── bin</span><br><span class=\"line\">│   └── www</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── public</span><br><span class=\"line\">│   ├── images</span><br><span class=\"line\">│   ├── javascripts</span><br><span class=\"line\">│   └── stylesheets</span><br><span class=\"line\">│       └── style.css</span><br><span class=\"line\">├── routes</span><br><span class=\"line\">│   ├── index.js</span><br><span class=\"line\">│   └── users.js</span><br><span class=\"line\">└── views</span><br><span class=\"line\">    ├── error.pug</span><br><span class=\"line\">    ├── index.pug</span><br><span class=\"line\">    └── layout.pug</span><br><span class=\"line\"></span><br><span class=\"line\">7 directories, 9 files</span><br></pre></td></tr></table></figure>\n<p><code>生成器创建的应用程序结构只是构造 Express 应用程序的众多方法之一。请随意使用此结构或者对其进行修改以最大程度满足自己的需求。</code></p>\n<ul>\n<li><a name=\"basicrouter\">1.4 基本路由</a></li>\n<li><a name=\"static\">1.5 静态文件处理</a></li>\n</ul>\n"},{"id":"0809015","title":"实时监听文本域输入","date":"2018-03-05T02:57:50.000Z","_content":"\n众所周知，使用 `onchange` 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， `onchange` 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用`keydown`和`keyup`外，我们还可以:\n- 使用 `onpropertychange`：\n\n```javascript\n<input type=\"text\" id=\"txt\">\n\n$(\"#ysy\").bind('input propertychange', function() {  \n    console.log(new Date().getTime()); \n});\n```\n- 使用 `oninput`：\n\n```javascript\ndocument.getElementById('txt').oninput = function(){\n    console.log(this.value);\n}\n```\n最后，总结一下`onchange, onpropertychange`和`oninput`之间的异同：\n1. `onchange`事件与`onpropertychange`事件的区别：`onchange`事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；`onpropertychange`事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。\n2. `oninput`事件与`onpropertychange`事件的区别：`oninput`事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；`onpropertychange`事件是任何属性改变都会触发的，而`oninput`却只在value改变时触发，`oninput`要通过`addEventListener()`来注册，`onpropertychange`注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）>\n3. `oninput`与`onpropertychange`失效的情况：  （1）`oninput`事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）`onpropertychange`事件：当input设置为`disable=true`后，onpropertychange不会触发。\n---","source":"_posts/0809015_实时监听文本域输入.md","raw":"---\nid: 0809015\ntitle: 实时监听文本域输入\ndate: 2018-03-05 10:57:50\ntags:\n    - JavaScript\ncategories:\n---\n\n众所周知，使用 `onchange` 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， `onchange` 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用`keydown`和`keyup`外，我们还可以:\n- 使用 `onpropertychange`：\n\n```javascript\n<input type=\"text\" id=\"txt\">\n\n$(\"#ysy\").bind('input propertychange', function() {  \n    console.log(new Date().getTime()); \n});\n```\n- 使用 `oninput`：\n\n```javascript\ndocument.getElementById('txt').oninput = function(){\n    console.log(this.value);\n}\n```\n最后，总结一下`onchange, onpropertychange`和`oninput`之间的异同：\n1. `onchange`事件与`onpropertychange`事件的区别：`onchange`事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；`onpropertychange`事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。\n2. `oninput`事件与`onpropertychange`事件的区别：`oninput`事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；`onpropertychange`事件是任何属性改变都会触发的，而`oninput`却只在value改变时触发，`oninput`要通过`addEventListener()`来注册，`onpropertychange`注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）>\n3. `oninput`与`onpropertychange`失效的情况：  （1）`oninput`事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）`onpropertychange`事件：当input设置为`disable=true`后，onpropertychange不会触发。\n---","slug":"0809015_实时监听文本域输入","published":1,"updated":"2018-03-05T06:35:51.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc1g000m9oc0sug0j5kx","content":"<p>众所周知，使用 <code>onchange</code> 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， <code>onchange</code> 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用<code>keydown</code>和<code>keyup</code>外，我们还可以:</p>\n<ul>\n<li>使用 <code>onpropertychange</code>：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"txt\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">\"#ysy\"</span>).bind(<span class=\"string\">'input propertychange'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 <code>oninput</code>：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'txt'</span>).oninput = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，总结一下<code>onchange, onpropertychange</code>和<code>oninput</code>之间的异同：</p>\n<ol>\n<li><code>onchange</code>事件与<code>onpropertychange</code>事件的区别：<code>onchange</code>事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；<code>onpropertychange</code>事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。</li>\n<li><code>oninput</code>事件与<code>onpropertychange</code>事件的区别：<code>oninput</code>事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；<code>onpropertychange</code>事件是任何属性改变都会触发的，而<code>oninput</code>却只在value改变时触发，<code>oninput</code>要通过<code>addEventListener()</code>来注册，<code>onpropertychange</code>注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）&gt;</li>\n<li><code>oninput</code>与<code>onpropertychange</code>失效的情况：  （1）<code>oninput</code>事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）<code>onpropertychange</code>事件：当input设置为<code>disable=true</code>后，onpropertychange不会触发。</li>\n</ol>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p>众所周知，使用 <code>onchange</code> 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， <code>onchange</code> 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用<code>keydown</code>和<code>keyup</code>外，我们还可以:</p>\n<ul>\n<li>使用 <code>onpropertychange</code>：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"txt\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">\"#ysy\"</span>).bind(<span class=\"string\">'input propertychange'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 <code>oninput</code>：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'txt'</span>).oninput = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，总结一下<code>onchange, onpropertychange</code>和<code>oninput</code>之间的异同：</p>\n<ol>\n<li><code>onchange</code>事件与<code>onpropertychange</code>事件的区别：<code>onchange</code>事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；<code>onpropertychange</code>事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。</li>\n<li><code>oninput</code>事件与<code>onpropertychange</code>事件的区别：<code>oninput</code>事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；<code>onpropertychange</code>事件是任何属性改变都会触发的，而<code>oninput</code>却只在value改变时触发，<code>oninput</code>要通过<code>addEventListener()</code>来注册，<code>onpropertychange</code>注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）&gt;</li>\n<li><code>oninput</code>与<code>onpropertychange</code>失效的情况：  （1）<code>oninput</code>事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）<code>onpropertychange</code>事件：当input设置为<code>disable=true</code>后，onpropertychange不会触发。</li>\n</ol>\n<hr>\n"},{"id":"0809011","title":"代码托管与常用的 git 命令","date":"2018-03-02T08:08:25.000Z","_content":"\n- github是一个基于git的代码托管平台，付费用户可以建私人仓库，我们一般的免费用户只能使用公共仓库，也就是代码要公开。\n\n- github由Chris Wanstrath, PJ Hyett 与Tom Preston-Werner三位开发者在2008年4月创办。迄今拥有59名全职员工，主要提供基于git的`版本托管`服务。\n\n#### <a>1、注册账号和创建仓库</a>\n\n1. 要想使用github第一步当然是注册github账号了， github官网地址：[https://github.com/](https://github.com/)。 之后就可以创建仓库了（免费用户只能建公共仓库），点击右上角头像，再点击 `Your profile`，进入`Repository`，点击`New`，之后会出现一些仓库的配置信息：\n<img src=\"/images/github1.png\">\n\n2. 之后会进入配置界面，依次填写仓库的基本信息，然后点击`Creat Repository`，正式创建一个代码仓库：\n<img src=\"/images/github2.png\">\n\n3. 配置完成之后，会进入到仓库里面，让我们一探究竟吧：\n<img src=\"/images/github3.png\">\n\n> 基本创建工作完成，后面就是用ssh链接到我们的仓库啦，这时我们就会用到 `git-bash` 这个工具啦，继续往下看。\n\n#### <a>2、git</a>\n\n> 下载安装 `Git`：\n\n- 下载 [git OSX](https://sourceforge.net/projects/git-osx-installer/files/git-2.16.2-intel-universal-mavericks.dmg/download?use_mirror=autoselect) 版\n- 下载 [git Windows](https://git-scm.com/download/win) 版\n- 下载 [git Linux](https://git-scm.com/download/linux) 版\n- 或者可以进入 [GIT 官网](https://git-scm.com/downloads) 下载适合自己的版本\n\n> 配置 `Git`：\n\n1. 首先在本地创建 `ssh key` ，运行命令：\n```bash\n# 这里填写你的邮箱地址\n$ ssh-keygen -t rsa -C \"your_email@youremail.com\"\n```\n\n2. 后面的your_email@youremail.com改为你在github上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。\n\n3. 回到github上，进入 Settings（账户配置），左边选择SSH and GPG keys，点击New SSH Key，title随便填，粘贴在你电脑上生成的key。\n<img src=\"/images/github4.png\">\n\n4. 为了验证是否成功，在git bash下输入：\n```bash\n$ ssh -T git@github.com\n```\n  如果是第一次的会提示是否continue，输入yes就会看到：You've successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。\n  \n5. 接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们：\n```bash\n$ git config --global user.name \"your name\"\n$ git config --global user.email \"your_email@youremail.com\"\n```\n\n6. 进入要上传的仓库，右键git bash here，添加远程地址：\n```bash\n# git remote add origin git@github.com:yushengyuan1993/test.git\n$ git remote add origin git@github.com:yourName/yourRepo.git\n```\n  后面的yourName和yourRepo表示你再github的用户名和刚才新建的仓库，加完之后进入.git，打开config，这里会多出一个remote \"origin\"内容，这就是刚才添加的远程地址，也可以直接修改config来配置远程地址。\n\n7. 创建新文件夹，打开，然后执行 git init 以创建新的 git 仓库。\n\n#### <a>3、克隆仓库</a>\n\n- 执行如下命令以创建一个本地仓库的克隆版本：\n```bash\n$ git clone /path/to/repository \n```\n\n- 如果是远程服务器上的仓库，你的命令会是这个样子：\n```bash\n$ git clone username@host:/path/to/repository\n```\n\n#### <a>4、Git命令</a>\n\n> 你的本地仓库由 git 维护的三棵\"树\"组成。第一个是你的 工作目录，它持有实际文件；第二个是 暂存区（Index），它像个缓存区域，临时保存你的改动；最后是 HEAD，它指向你最后一次提交的结果。\n\n1. `工作流：`\n  - 你可以提出更改（把它们添加到暂存区），使用如下命令：\n  ```bash\n  $ git add <filename>\n  git add *\n  ```\n  - 这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：\n  ```bash\n  $ git commit -m \"代码提交信息\"\n  ```\n    现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。\n\n2. `推送改动：`\n  - 你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：\n  ```bash\n  # 推送改动到 master 分支，实际开发中很少会直接推送到master上，\n  # 一般都是推到开发分支，再由leader推到master\n  $ git push origin master\n  ```\n    可以把 master 换成你想要推送的任何分支。 \n\n  - 如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：\n  ```bash\n  $ git remote add origin <server>\n  ```\n    如此你就能够将你的改动推送到所添加的服务器上去了。\n\n3. `分支：`\n  - 分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是\"默认的\"分支。在其他分支上进行开发，完成后再将它们合并到主分支上。\n\n  - 创建一个叫做\"feature_x\"的分支，并切换过去：\n  ```bash\n  $ git checkout -b feature_x\n  ```\n  - 切换回主分支：\n  ```bash\n  $ git checkout master\n  ```\n  - 再把新建的分支删掉：\n  ```bash\n  $ git branch -d feature_x\n  ```\n  - 除非你将分支推送到远端仓库，不然该分支就是不为他人所见的：\n  ```bash\n  $ git push origin <branch>\n  ```\n\n4. `更新与合并：`\n  - 要更新你的本地仓库至最新改动，执行：\n  ```bash\n  $ git pull\n  ```\n  - 以在你的工作目录中 `获取（fetch）` 并 `合并（merge）` 远端的改动。\n  - 要合并其他分支到你的当前分支（例如 master），执行：\n  ```bash\n  $ git merge <branch>\n  ```\n  - 在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：\n  ```bash\n  $ git add <filename>\n  ```\n  - 在合并改动之前，你可以使用如下命令预览差异：\n  ```bash\n  $ git diff <source_branch> <target_branch>\n  ```\n\n5. `标签：`\n  - 为软件发布创建标签是推荐的。这个概念早已存在，在 `SVN` 中也有。你可以执行如下命令创建一个叫做 `1.0.0` 的标签：\n  ```bash\n  $ git tag 1.0.0 1b2e1d63ff\n  ```\n  - `1b2e1d63ff` 是你想要标记的提交 `ID` 的前 `10` 位字符。可以使用下列命令获取提交 `ID`：\n  ```bash\n  $ git log\n  ```\n  - 你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。\n\n6. `替换本地改动：`\n  - 假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：\n  ```bash\n  $ git checkout -- <filename>\n  ```\n  - 此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。\n  - 假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：\n  ```bash\n  $ git fetch origin\n  $ git reset --hard origin/master\n  ```\n\n7. `实用小贴士：`\n  - 内建的图形化 `git`：\n  ```bash\n  $ gitk\n  ```\n  - 彩色的 `git` 输出：\n  ```bash\n  $ git config color.ui true\n  ```\n  - 显示历史记录时，每个提交的信息只显示一行：\n  ```bash\n  $ git config format.pretty oneline\n  ```\n  - 交互式添加文件到暂存区：\n  ```bash\n  $ git add -i\n  ```\n  - 设置 `git` 命令别名：\n  ```bash\n  $ git config --global alias.st status     # 把status 别名设置为 st\n  $ git config --global alias.cm commit     # 把commit 别名设置为 cm\n  $ git config --global alias.br branch     # 把branch 别名设置为 br\n  $ git config --global alias.co checkout   # 把checkout 别名设置为 co\n  ```\n  - `git show` 命令：\n  ```bash\n  $ git show commitId           # 查看这次提交具体修改的内容\n  $ git show stashId            # 查看stash的一些基本信息\n  $ git show commitId fileName  # 查看某一个文件在某一次提交中的修改\n  ```\n  - `git stash` 命令：\n  ```bash\n  $ git stash                   # 隐藏当前正在进行的工作\n  $ git stash list              # 列出所有stash\n  $ git stash apply stashId     # 拉取某次的stash\n  $ git stash drop stashId      # 移除某个stash\n  $ git stash pop               #  抽取上一次的stash到工作空间\n  $ git stash clear             # 清除所有的stash\n  ```\n\n<p style=\"text-align: right\">`参考文档` [git-scm](https://git-scm.com/book/zh/v2)</p>","source":"_posts/0809011_代码托管与常用的git命令.md","raw":"---\nid: 0809011\ntitle: 代码托管与常用的 git 命令\ndate: 2018-03-02 16:08:25\ntags:\n  - GIT\n  - github\ncategories:\n---\n\n- github是一个基于git的代码托管平台，付费用户可以建私人仓库，我们一般的免费用户只能使用公共仓库，也就是代码要公开。\n\n- github由Chris Wanstrath, PJ Hyett 与Tom Preston-Werner三位开发者在2008年4月创办。迄今拥有59名全职员工，主要提供基于git的`版本托管`服务。\n\n#### <a>1、注册账号和创建仓库</a>\n\n1. 要想使用github第一步当然是注册github账号了， github官网地址：[https://github.com/](https://github.com/)。 之后就可以创建仓库了（免费用户只能建公共仓库），点击右上角头像，再点击 `Your profile`，进入`Repository`，点击`New`，之后会出现一些仓库的配置信息：\n<img src=\"/images/github1.png\">\n\n2. 之后会进入配置界面，依次填写仓库的基本信息，然后点击`Creat Repository`，正式创建一个代码仓库：\n<img src=\"/images/github2.png\">\n\n3. 配置完成之后，会进入到仓库里面，让我们一探究竟吧：\n<img src=\"/images/github3.png\">\n\n> 基本创建工作完成，后面就是用ssh链接到我们的仓库啦，这时我们就会用到 `git-bash` 这个工具啦，继续往下看。\n\n#### <a>2、git</a>\n\n> 下载安装 `Git`：\n\n- 下载 [git OSX](https://sourceforge.net/projects/git-osx-installer/files/git-2.16.2-intel-universal-mavericks.dmg/download?use_mirror=autoselect) 版\n- 下载 [git Windows](https://git-scm.com/download/win) 版\n- 下载 [git Linux](https://git-scm.com/download/linux) 版\n- 或者可以进入 [GIT 官网](https://git-scm.com/downloads) 下载适合自己的版本\n\n> 配置 `Git`：\n\n1. 首先在本地创建 `ssh key` ，运行命令：\n```bash\n# 这里填写你的邮箱地址\n$ ssh-keygen -t rsa -C \"your_email@youremail.com\"\n```\n\n2. 后面的your_email@youremail.com改为你在github上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。\n\n3. 回到github上，进入 Settings（账户配置），左边选择SSH and GPG keys，点击New SSH Key，title随便填，粘贴在你电脑上生成的key。\n<img src=\"/images/github4.png\">\n\n4. 为了验证是否成功，在git bash下输入：\n```bash\n$ ssh -T git@github.com\n```\n  如果是第一次的会提示是否continue，输入yes就会看到：You've successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。\n  \n5. 接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们：\n```bash\n$ git config --global user.name \"your name\"\n$ git config --global user.email \"your_email@youremail.com\"\n```\n\n6. 进入要上传的仓库，右键git bash here，添加远程地址：\n```bash\n# git remote add origin git@github.com:yushengyuan1993/test.git\n$ git remote add origin git@github.com:yourName/yourRepo.git\n```\n  后面的yourName和yourRepo表示你再github的用户名和刚才新建的仓库，加完之后进入.git，打开config，这里会多出一个remote \"origin\"内容，这就是刚才添加的远程地址，也可以直接修改config来配置远程地址。\n\n7. 创建新文件夹，打开，然后执行 git init 以创建新的 git 仓库。\n\n#### <a>3、克隆仓库</a>\n\n- 执行如下命令以创建一个本地仓库的克隆版本：\n```bash\n$ git clone /path/to/repository \n```\n\n- 如果是远程服务器上的仓库，你的命令会是这个样子：\n```bash\n$ git clone username@host:/path/to/repository\n```\n\n#### <a>4、Git命令</a>\n\n> 你的本地仓库由 git 维护的三棵\"树\"组成。第一个是你的 工作目录，它持有实际文件；第二个是 暂存区（Index），它像个缓存区域，临时保存你的改动；最后是 HEAD，它指向你最后一次提交的结果。\n\n1. `工作流：`\n  - 你可以提出更改（把它们添加到暂存区），使用如下命令：\n  ```bash\n  $ git add <filename>\n  git add *\n  ```\n  - 这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：\n  ```bash\n  $ git commit -m \"代码提交信息\"\n  ```\n    现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。\n\n2. `推送改动：`\n  - 你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：\n  ```bash\n  # 推送改动到 master 分支，实际开发中很少会直接推送到master上，\n  # 一般都是推到开发分支，再由leader推到master\n  $ git push origin master\n  ```\n    可以把 master 换成你想要推送的任何分支。 \n\n  - 如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：\n  ```bash\n  $ git remote add origin <server>\n  ```\n    如此你就能够将你的改动推送到所添加的服务器上去了。\n\n3. `分支：`\n  - 分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是\"默认的\"分支。在其他分支上进行开发，完成后再将它们合并到主分支上。\n\n  - 创建一个叫做\"feature_x\"的分支，并切换过去：\n  ```bash\n  $ git checkout -b feature_x\n  ```\n  - 切换回主分支：\n  ```bash\n  $ git checkout master\n  ```\n  - 再把新建的分支删掉：\n  ```bash\n  $ git branch -d feature_x\n  ```\n  - 除非你将分支推送到远端仓库，不然该分支就是不为他人所见的：\n  ```bash\n  $ git push origin <branch>\n  ```\n\n4. `更新与合并：`\n  - 要更新你的本地仓库至最新改动，执行：\n  ```bash\n  $ git pull\n  ```\n  - 以在你的工作目录中 `获取（fetch）` 并 `合并（merge）` 远端的改动。\n  - 要合并其他分支到你的当前分支（例如 master），执行：\n  ```bash\n  $ git merge <branch>\n  ```\n  - 在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：\n  ```bash\n  $ git add <filename>\n  ```\n  - 在合并改动之前，你可以使用如下命令预览差异：\n  ```bash\n  $ git diff <source_branch> <target_branch>\n  ```\n\n5. `标签：`\n  - 为软件发布创建标签是推荐的。这个概念早已存在，在 `SVN` 中也有。你可以执行如下命令创建一个叫做 `1.0.0` 的标签：\n  ```bash\n  $ git tag 1.0.0 1b2e1d63ff\n  ```\n  - `1b2e1d63ff` 是你想要标记的提交 `ID` 的前 `10` 位字符。可以使用下列命令获取提交 `ID`：\n  ```bash\n  $ git log\n  ```\n  - 你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。\n\n6. `替换本地改动：`\n  - 假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：\n  ```bash\n  $ git checkout -- <filename>\n  ```\n  - 此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。\n  - 假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：\n  ```bash\n  $ git fetch origin\n  $ git reset --hard origin/master\n  ```\n\n7. `实用小贴士：`\n  - 内建的图形化 `git`：\n  ```bash\n  $ gitk\n  ```\n  - 彩色的 `git` 输出：\n  ```bash\n  $ git config color.ui true\n  ```\n  - 显示历史记录时，每个提交的信息只显示一行：\n  ```bash\n  $ git config format.pretty oneline\n  ```\n  - 交互式添加文件到暂存区：\n  ```bash\n  $ git add -i\n  ```\n  - 设置 `git` 命令别名：\n  ```bash\n  $ git config --global alias.st status     # 把status 别名设置为 st\n  $ git config --global alias.cm commit     # 把commit 别名设置为 cm\n  $ git config --global alias.br branch     # 把branch 别名设置为 br\n  $ git config --global alias.co checkout   # 把checkout 别名设置为 co\n  ```\n  - `git show` 命令：\n  ```bash\n  $ git show commitId           # 查看这次提交具体修改的内容\n  $ git show stashId            # 查看stash的一些基本信息\n  $ git show commitId fileName  # 查看某一个文件在某一次提交中的修改\n  ```\n  - `git stash` 命令：\n  ```bash\n  $ git stash                   # 隐藏当前正在进行的工作\n  $ git stash list              # 列出所有stash\n  $ git stash apply stashId     # 拉取某次的stash\n  $ git stash drop stashId      # 移除某个stash\n  $ git stash pop               #  抽取上一次的stash到工作空间\n  $ git stash clear             # 清除所有的stash\n  ```\n\n<p style=\"text-align: right\">`参考文档` [git-scm](https://git-scm.com/book/zh/v2)</p>","slug":"0809011_代码托管与常用的git命令","published":1,"updated":"2018-03-14T10:28:43.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc1g000n9oc0w9jzbse9","content":"<ul>\n<li><p>github是一个基于git的代码托管平台，付费用户可以建私人仓库，我们一般的免费用户只能使用公共仓库，也就是代码要公开。</p>\n</li>\n<li><p>github由Chris Wanstrath, PJ Hyett 与Tom Preston-Werner三位开发者在2008年4月创办。迄今拥有59名全职员工，主要提供基于git的<code>版本托管</code>服务。</p>\n</li>\n</ul>\n<h4 id=\"1、注册账号和创建仓库\"><a href=\"#1、注册账号和创建仓库\" class=\"headerlink\" title=\"1、注册账号和创建仓库\"></a><a>1、注册账号和创建仓库</a></h4><ol>\n<li><p>要想使用github第一步当然是注册github账号了， github官网地址：<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a>。 之后就可以创建仓库了（免费用户只能建公共仓库），点击右上角头像，再点击 <code>Your profile</code>，进入<code>Repository</code>，点击<code>New</code>，之后会出现一些仓库的配置信息：<br><img src=\"/images/github1.png\"></p>\n</li>\n<li><p>之后会进入配置界面，依次填写仓库的基本信息，然后点击<code>Creat Repository</code>，正式创建一个代码仓库：<br><img src=\"/images/github2.png\"></p>\n</li>\n<li><p>配置完成之后，会进入到仓库里面，让我们一探究竟吧：<br><img src=\"/images/github3.png\"></p>\n</li>\n</ol>\n<blockquote>\n<p>基本创建工作完成，后面就是用ssh链接到我们的仓库啦，这时我们就会用到 <code>git-bash</code> 这个工具啦，继续往下看。</p>\n</blockquote>\n<h4 id=\"2、git\"><a href=\"#2、git\" class=\"headerlink\" title=\"2、git\"></a><a>2、git</a></h4><blockquote>\n<p>下载安装 <code>Git</code>：</p>\n</blockquote>\n<ul>\n<li>下载 <a href=\"https://sourceforge.net/projects/git-osx-installer/files/git-2.16.2-intel-universal-mavericks.dmg/download?use_mirror=autoselect\" target=\"_blank\" rel=\"noopener\">git OSX</a> 版</li>\n<li>下载 <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">git Windows</a> 版</li>\n<li>下载 <a href=\"https://git-scm.com/download/linux\" target=\"_blank\" rel=\"noopener\">git Linux</a> 版</li>\n<li>或者可以进入 <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">GIT 官网</a> 下载适合自己的版本</li>\n</ul>\n<blockquote>\n<p>配置 <code>Git</code>：</p>\n</blockquote>\n<ol>\n<li><p>首先在本地创建 <code>ssh key</code> ，运行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里填写你的邮箱地址</span></span><br><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>后面的your_email@youremail.com改为你在github上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。</p>\n</li>\n<li><p>回到github上，进入 Settings（账户配置），左边选择SSH and GPG keys，点击New SSH Key，title随便填，粘贴在你电脑上生成的key。<br><img src=\"/images/github4.png\"></p>\n</li>\n<li><p>为了验证是否成功，在git bash下输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。</p>\n</li>\n<li><p>接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"your name\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"your_email@youremail.com\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入要上传的仓库，右键git bash here，添加远程地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># git remote add origin git@github.com:yushengyuan1993/test.git</span></span><br><span class=\"line\">$ git remote add origin git@github.com:yourName/yourRepo.git</span><br></pre></td></tr></table></figure>\n<p>后面的yourName和yourRepo表示你再github的用户名和刚才新建的仓库，加完之后进入.git，打开config，这里会多出一个remote “origin”内容，这就是刚才添加的远程地址，也可以直接修改config来配置远程地址。</p>\n</li>\n<li><p>创建新文件夹，打开，然后执行 git init 以创建新的 git 仓库。</p>\n</li>\n</ol>\n<h4 id=\"3、克隆仓库\"><a href=\"#3、克隆仓库\" class=\"headerlink\" title=\"3、克隆仓库\"></a><a>3、克隆仓库</a></h4><ul>\n<li><p>执行如下命令以创建一个本地仓库的克隆版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> /path/to/repository</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果是远程服务器上的仓库，你的命令会是这个样子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> username@host:/path/to/repository</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"4、Git命令\"><a href=\"#4、Git命令\" class=\"headerlink\" title=\"4、Git命令\"></a><a>4、Git命令</a></h4><blockquote>\n<p>你的本地仓库由 git 维护的三棵”树”组成。第一个是你的 工作目录，它持有实际文件；第二个是 暂存区（Index），它像个缓存区域，临时保存你的改动；最后是 HEAD，它指向你最后一次提交的结果。</p>\n</blockquote>\n<ol>\n<li><p><code>工作流：</code></p>\n<ul>\n<li><p>你可以提出更改（把它们添加到暂存区），使用如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add &lt;filename&gt;</span><br><span class=\"line\">git add *</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">\"代码提交信息\"</span></span><br></pre></td></tr></table></figure>\n<p>现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。</p>\n</li>\n</ul>\n</li>\n<li><p><code>推送改动：</code></p>\n<ul>\n<li><p>你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 推送改动到 master 分支，实际开发中很少会直接推送到master上，</span></span><br><span class=\"line\"><span class=\"comment\"># 一般都是推到开发分支，再由leader推到master</span></span><br><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>\n<p>可以把 master 换成你想要推送的任何分支。 </p>\n</li>\n<li><p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin &lt;server&gt;</span><br></pre></td></tr></table></figure>\n<p>如此你就能够将你的改动推送到所添加的服务器上去了。</p>\n</li>\n</ul>\n</li>\n<li><p><code>分支：</code></p>\n<ul>\n<li><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是”默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。</p>\n</li>\n<li><p>创建一个叫做”feature_x”的分支，并切换过去：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b feature_x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换回主分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再把新建的分支删掉：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d feature_x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>除非你将分支推送到远端仓库，不然该分支就是不为他人所见的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><code>更新与合并：</code></p>\n<ul>\n<li><p>要更新你的本地仓库至最新改动，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以在你的工作目录中 <code>获取（fetch）</code> 并 <code>合并（merge）</code> 远端的改动。</p>\n</li>\n<li><p>要合并其他分支到你的当前分支（例如 master），执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在合并改动之前，你可以使用如下命令预览差异：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff &lt;source_branch&gt; &lt;target_branch&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><code>标签：</code></p>\n<ul>\n<li><p>为软件发布创建标签是推荐的。这个概念早已存在，在 <code>SVN</code> 中也有。你可以执行如下命令创建一个叫做 <code>1.0.0</code> 的标签：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag 1.0.0 1b2e1d63ff</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>1b2e1d63ff</code> 是你想要标记的提交 <code>ID</code> 的前 <code>10</code> 位字符。可以使用下列命令获取提交 <code>ID</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。</p>\n</li>\n</ul>\n</li>\n<li><p><code>替换本地改动：</code></p>\n<ul>\n<li><p>假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。</p>\n</li>\n<li>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch origin</span><br><span class=\"line\">$ git reset --hard origin/master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><code>实用小贴士：</code></p>\n<ul>\n<li><p>内建的图形化 <code>git</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitk</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>彩色的 <code>git</code> 输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config color.ui <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示历史记录时，每个提交的信息只显示一行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config format.pretty oneline</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>交互式添加文件到暂存区：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add -i</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置 <code>git</code> 命令别名：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.st status     <span class=\"comment\"># 把status 别名设置为 st</span></span><br><span class=\"line\">$ git config --global alias.cm commit     <span class=\"comment\"># 把commit 别名设置为 cm</span></span><br><span class=\"line\">$ git config --global alias.br branch     <span class=\"comment\"># 把branch 别名设置为 br</span></span><br><span class=\"line\">$ git config --global alias.co checkout   <span class=\"comment\"># 把checkout 别名设置为 co</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>git show</code> 命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show commitId           <span class=\"comment\"># 查看这次提交具体修改的内容</span></span><br><span class=\"line\">$ git show stashId            <span class=\"comment\"># 查看stash的一些基本信息</span></span><br><span class=\"line\">$ git show commitId fileName  <span class=\"comment\"># 查看某一个文件在某一次提交中的修改</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>git stash</code> 命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash                   <span class=\"comment\"># 隐藏当前正在进行的工作</span></span><br><span class=\"line\">$ git stash list              <span class=\"comment\"># 列出所有stash</span></span><br><span class=\"line\">$ git stash apply stashId     <span class=\"comment\"># 拉取某次的stash</span></span><br><span class=\"line\">$ git stash drop stashId      <span class=\"comment\"># 移除某个stash</span></span><br><span class=\"line\">$ git stash pop               <span class=\"comment\">#  抽取上一次的stash到工作空间</span></span><br><span class=\"line\">$ git stash clear             <span class=\"comment\"># 清除所有的stash</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<p style=\"text-align: right\"><code>参考文档</code> <a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">git-scm</a></p>","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>github是一个基于git的代码托管平台，付费用户可以建私人仓库，我们一般的免费用户只能使用公共仓库，也就是代码要公开。</p>\n</li>\n<li><p>github由Chris Wanstrath, PJ Hyett 与Tom Preston-Werner三位开发者在2008年4月创办。迄今拥有59名全职员工，主要提供基于git的<code>版本托管</code>服务。</p>\n</li>\n</ul>\n<h4 id=\"1、注册账号和创建仓库\"><a href=\"#1、注册账号和创建仓库\" class=\"headerlink\" title=\"1、注册账号和创建仓库\"></a><a>1、注册账号和创建仓库</a></h4><ol>\n<li><p>要想使用github第一步当然是注册github账号了， github官网地址：<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a>。 之后就可以创建仓库了（免费用户只能建公共仓库），点击右上角头像，再点击 <code>Your profile</code>，进入<code>Repository</code>，点击<code>New</code>，之后会出现一些仓库的配置信息：<br><img src=\"/images/github1.png\"></p>\n</li>\n<li><p>之后会进入配置界面，依次填写仓库的基本信息，然后点击<code>Creat Repository</code>，正式创建一个代码仓库：<br><img src=\"/images/github2.png\"></p>\n</li>\n<li><p>配置完成之后，会进入到仓库里面，让我们一探究竟吧：<br><img src=\"/images/github3.png\"></p>\n</li>\n</ol>\n<blockquote>\n<p>基本创建工作完成，后面就是用ssh链接到我们的仓库啦，这时我们就会用到 <code>git-bash</code> 这个工具啦，继续往下看。</p>\n</blockquote>\n<h4 id=\"2、git\"><a href=\"#2、git\" class=\"headerlink\" title=\"2、git\"></a><a>2、git</a></h4><blockquote>\n<p>下载安装 <code>Git</code>：</p>\n</blockquote>\n<ul>\n<li>下载 <a href=\"https://sourceforge.net/projects/git-osx-installer/files/git-2.16.2-intel-universal-mavericks.dmg/download?use_mirror=autoselect\" target=\"_blank\" rel=\"noopener\">git OSX</a> 版</li>\n<li>下载 <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">git Windows</a> 版</li>\n<li>下载 <a href=\"https://git-scm.com/download/linux\" target=\"_blank\" rel=\"noopener\">git Linux</a> 版</li>\n<li>或者可以进入 <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">GIT 官网</a> 下载适合自己的版本</li>\n</ul>\n<blockquote>\n<p>配置 <code>Git</code>：</p>\n</blockquote>\n<ol>\n<li><p>首先在本地创建 <code>ssh key</code> ，运行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里填写你的邮箱地址</span></span><br><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>后面的your_email@youremail.com改为你在github上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。</p>\n</li>\n<li><p>回到github上，进入 Settings（账户配置），左边选择SSH and GPG keys，点击New SSH Key，title随便填，粘贴在你电脑上生成的key。<br><img src=\"/images/github4.png\"></p>\n</li>\n<li><p>为了验证是否成功，在git bash下输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。</p>\n</li>\n<li><p>接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"your name\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"your_email@youremail.com\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入要上传的仓库，右键git bash here，添加远程地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># git remote add origin git@github.com:yushengyuan1993/test.git</span></span><br><span class=\"line\">$ git remote add origin git@github.com:yourName/yourRepo.git</span><br></pre></td></tr></table></figure>\n<p>后面的yourName和yourRepo表示你再github的用户名和刚才新建的仓库，加完之后进入.git，打开config，这里会多出一个remote “origin”内容，这就是刚才添加的远程地址，也可以直接修改config来配置远程地址。</p>\n</li>\n<li><p>创建新文件夹，打开，然后执行 git init 以创建新的 git 仓库。</p>\n</li>\n</ol>\n<h4 id=\"3、克隆仓库\"><a href=\"#3、克隆仓库\" class=\"headerlink\" title=\"3、克隆仓库\"></a><a>3、克隆仓库</a></h4><ul>\n<li><p>执行如下命令以创建一个本地仓库的克隆版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> /path/to/repository</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果是远程服务器上的仓库，你的命令会是这个样子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> username@host:/path/to/repository</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"4、Git命令\"><a href=\"#4、Git命令\" class=\"headerlink\" title=\"4、Git命令\"></a><a>4、Git命令</a></h4><blockquote>\n<p>你的本地仓库由 git 维护的三棵”树”组成。第一个是你的 工作目录，它持有实际文件；第二个是 暂存区（Index），它像个缓存区域，临时保存你的改动；最后是 HEAD，它指向你最后一次提交的结果。</p>\n</blockquote>\n<ol>\n<li><p><code>工作流：</code></p>\n<ul>\n<li><p>你可以提出更改（把它们添加到暂存区），使用如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add &lt;filename&gt;</span><br><span class=\"line\">git add *</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">\"代码提交信息\"</span></span><br></pre></td></tr></table></figure>\n<p>现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。</p>\n</li>\n</ul>\n</li>\n<li><p><code>推送改动：</code></p>\n<ul>\n<li><p>你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 推送改动到 master 分支，实际开发中很少会直接推送到master上，</span></span><br><span class=\"line\"><span class=\"comment\"># 一般都是推到开发分支，再由leader推到master</span></span><br><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>\n<p>可以把 master 换成你想要推送的任何分支。 </p>\n</li>\n<li><p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin &lt;server&gt;</span><br></pre></td></tr></table></figure>\n<p>如此你就能够将你的改动推送到所添加的服务器上去了。</p>\n</li>\n</ul>\n</li>\n<li><p><code>分支：</code></p>\n<ul>\n<li><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是”默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。</p>\n</li>\n<li><p>创建一个叫做”feature_x”的分支，并切换过去：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b feature_x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换回主分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再把新建的分支删掉：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d feature_x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>除非你将分支推送到远端仓库，不然该分支就是不为他人所见的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><code>更新与合并：</code></p>\n<ul>\n<li><p>要更新你的本地仓库至最新改动，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以在你的工作目录中 <code>获取（fetch）</code> 并 <code>合并（merge）</code> 远端的改动。</p>\n</li>\n<li><p>要合并其他分支到你的当前分支（例如 master），执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在合并改动之前，你可以使用如下命令预览差异：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff &lt;source_branch&gt; &lt;target_branch&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><code>标签：</code></p>\n<ul>\n<li><p>为软件发布创建标签是推荐的。这个概念早已存在，在 <code>SVN</code> 中也有。你可以执行如下命令创建一个叫做 <code>1.0.0</code> 的标签：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag 1.0.0 1b2e1d63ff</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>1b2e1d63ff</code> 是你想要标记的提交 <code>ID</code> 的前 <code>10</code> 位字符。可以使用下列命令获取提交 <code>ID</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。</p>\n</li>\n</ul>\n</li>\n<li><p><code>替换本地改动：</code></p>\n<ul>\n<li><p>假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。</p>\n</li>\n<li>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch origin</span><br><span class=\"line\">$ git reset --hard origin/master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><code>实用小贴士：</code></p>\n<ul>\n<li><p>内建的图形化 <code>git</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitk</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>彩色的 <code>git</code> 输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config color.ui <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示历史记录时，每个提交的信息只显示一行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config format.pretty oneline</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>交互式添加文件到暂存区：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add -i</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置 <code>git</code> 命令别名：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.st status     <span class=\"comment\"># 把status 别名设置为 st</span></span><br><span class=\"line\">$ git config --global alias.cm commit     <span class=\"comment\"># 把commit 别名设置为 cm</span></span><br><span class=\"line\">$ git config --global alias.br branch     <span class=\"comment\"># 把branch 别名设置为 br</span></span><br><span class=\"line\">$ git config --global alias.co checkout   <span class=\"comment\"># 把checkout 别名设置为 co</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>git show</code> 命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show commitId           <span class=\"comment\"># 查看这次提交具体修改的内容</span></span><br><span class=\"line\">$ git show stashId            <span class=\"comment\"># 查看stash的一些基本信息</span></span><br><span class=\"line\">$ git show commitId fileName  <span class=\"comment\"># 查看某一个文件在某一次提交中的修改</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>git stash</code> 命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash                   <span class=\"comment\"># 隐藏当前正在进行的工作</span></span><br><span class=\"line\">$ git stash list              <span class=\"comment\"># 列出所有stash</span></span><br><span class=\"line\">$ git stash apply stashId     <span class=\"comment\"># 拉取某次的stash</span></span><br><span class=\"line\">$ git stash drop stashId      <span class=\"comment\"># 移除某个stash</span></span><br><span class=\"line\">$ git stash pop               <span class=\"comment\">#  抽取上一次的stash到工作空间</span></span><br><span class=\"line\">$ git stash clear             <span class=\"comment\"># 清除所有的stash</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<p style=\"text-align: right\"><code>参考文档</code> <a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">git-scm</a></p>"},{"id":"0809019","title":"CSS3 多媒体查询","date":"2018-03-05T09:26:49.000Z","_content":"\n<a href=\"#css2\">1. `CSS2` 多媒体类型</a>\n<a href=\"#css3\">2. `CSS3` 多媒体查询</a>\n<a href=\"#browser\">3. 浏览器支持</a>\n<a href=\"#syntax\">4. 语法介绍</a>\n<a href=\"#type\">5. 多媒体类型 `media type`</a>\n<a href=\"#feature\">6. 多媒体功能 `media feature`</a>\n<a href=\"#example\">7. 多媒体查询实例</a>\n\n#### <a name=\"css2\">1、`CSS2` 多媒体类型</a>\n\n- `@media` 规则在 `CSS2` 中有介绍，针对不同媒体类型可以定制不同的样式规则。\n\n- 例如：你可以针对不同的媒体类型(包括显示器、便携设备、电视机，等等)设置不同的样式规则。\n\n- 但是这些多媒体类型`在很多设备上支持还不够友好`。\n\n#### <a name=\"css3\">2、`CSS3` 多媒体查询</a>\nCSS3 的多媒体查询继承了 CSS2 多媒体类型的所有思想： 取代了查找设备的类型，CSS3 根据设置自适应显示。\n\n`媒体查询可用于检测很多事情，例如：`\n\n- viewport(视窗) 的宽度与高度\n- 设备的宽度与高度\n- 朝向 (智能手机横屏，竖屏) 。\n- 分辨率\n\n目前很多针对苹果手机，Android 手机，平板等设备都会使用到多媒体查询。\n\n#### <a name=\"browser\">3、浏览器支持</a>\n\n<img src=\"/images/css3media.gif\">\n\n#### <a name=\"syntax\">4、语法介绍</a>\n\n多媒体查询由多种媒体组成，可以包含一个或多个表达式，表达式根据条件是否成立返回 `true` 或 `false`。\n```css\n@media not|only mediatype and (media feature) {\n  /* CSS 代码...; */\n}\n```\n如果指定的多媒体类型匹配设备类型则查询结果返回 true，文档会在匹配的设备上显示指定样式效果。\n\n除非你使用了 `not` 或 `only` 操作符，否则所有的样式会适应在所有设备上显示效果。\n\n- `not`: not是用来排除掉某些特定的设备的，比如 @media not print（非打印设备）。\n\n- `only`: 用来定某种特别的媒体类型。对于支持Media Queries的移动设备来说，如果存在only关键字，移动设备的Web浏览器会忽略only关键字并直接根据后面的表达式应用样式文件。对于不支持Media Queries的设备但能够读取Media Type类型的Web浏览器，遇到only关键字时会忽略这个样式文件。\n\n- `all`: 所有设备，这个应该经常看到。\n\n你也可以在不同的媒体上使用不同的样式文件：\n```html\n<link rel=\"stylesheet\" media=\"mediatype and|not|only (media feature)\" href=\"mystylesheet.css\">\n```\n\n#### <a name=\"type\">5、多媒体类型 `media type`</a>\n\n| 值 |描述| \n| - | - | \n|all\t    |用于所有多媒体类型设备|\n|print\t  |用于打印机|\n|screen\t  |用于电脑屏幕，平板，智能手机等|\n|speech\t  |用于屏幕阅读器|\n\n#### <a name=\"feature\">6、多媒体功能 `media feature`</a>\n\n| 值| 描述 |\n| - | - |\n|aspect-ratio\t              |定义输出设备中的页面可见区域宽度与高度的比率\n|color\t                    |定义输出设备每一组彩色原件的个数。如果不是彩色设备，则值等于0\n|color-index\t              |定义在输出设备的彩色查询表中的条目数。如果没有使用彩色查询表，则值等于0\n|device-aspect-ratio\t      |定义输出设备的屏幕可见宽度与高度的比率。\n|device-height\t            |定义输出设备的屏幕可见高度。\n|device-width\t              |定义输出设备的屏幕可见宽度。\n|grid\t                      |用来查询输出设备是否使用栅格或点阵。\n|height\t                    |定义输出设备中的页面可见区域高度。\n|max-aspect-ratio\t          |定义输出设备的屏幕可见宽度与高度的最大比率。\n|max-color\t                |定义输出设备每一组彩色原件的最大个数。\n|max-color-index\t          |定义在输出设备的彩色查询表中的最大条目数。\n|max-device-aspect-ratio\t  |定义输出设备的屏幕可见宽度与高度的最大比率。\n|max-device-height\t        |定义输出设备的屏幕可见的最大高度。\n|max-device-width\t          |定义输出设备的屏幕最大可见宽度。\n|max-height\t                |定义输出设备中的页面最大可见区域高度。\n|max-monochrome\t            |定义在一个单色框架缓冲区中每像素包含的最大单色原件个数。\n|max-resolution\t            |定义设备的最大分辨率。\n|max-width\t                |定义输出设备中的页面最大可见区域宽度。\n|min-aspect-ratio\t          |定义输出设备中的页面可见区域宽度与高度的最小比率。\n|min-color\t                |定义输出设备每一组彩色原件的最小个数。\n|min-color-index\t          |定义在输出设备的彩色查询表中的最小条目数。\n|min-device-aspect-ratio\t  |定义输出设备的屏幕可见宽度与高度的最小比率。\n|min-device-width\t          |定义输出设备的屏幕最小可见宽度。\n|min-device-height\t        |定义输出设备的屏幕的最小可见高度。\n|min-height\t                |定义输出设备中的页面最小可见区域高度。\n|min-monochrome\t            |定义在一个单色框架缓冲区中每像素包含的最小单色原件个数\n|min-resolution\t            |定义设备的最小分辨率。\n|min-width\t                |定义输出设备中的页面最小可见区域宽度。\n|monochrome\t                |定义在一个单色框架缓冲区中每像素包含的单色原件个数。如果不是单色设备，则值等于0\n|orientation\t              |定义输出设备中的页面可见区域高度是否大于或等于宽度。\n|resolution\t                |定义设备的分辨率。如：96dpi, 300dpi, 118dpcm\n|scan\t                      |定义电视类设备的扫描工序。\n|width\t                    |定义输出设备中的页面可见区域宽度。\n\n#### <a name=\"example\">7、多媒体查询实例</a>\n\n```css\n<!-- 当浏览器的宽度在 520px 到 699px, 页面背景为 红色 -->\n@media screen and (max-width: 699px) and (min-width: 520px) {\n    body {\n      background: red;\n    }\n}\n\n<!-- 当浏览器的宽度在 700px 到 1000px, 页面背景为 绿色 -->\n@media screen and (max-width: 1000px) and (min-width: 700px) {\n    body {\n      background: green;\n    }\n}\n\n<!-- 当浏览器的宽度大于 1001px, 页面背景为 蓝色 -->\n@media screen and (min-width: 1001px) {\n    body {\n      background: blue;\n    }\n}\n\n<!-- 当浏览器的宽度在 520px 到 699px 或者大于 1200px 时, 去除body的margin -->\n@media screen and (max-width: 699px) and (min-width: 520px), (min-width: 1200px) {\n    body {\n      margin: 0;\n    }\n}\n```","source":"_posts/0809019_CSS3媒体查询.md","raw":"---\nid: 0809019\ntitle: CSS3 多媒体查询\ndate: 2018-03-05 17:26:49\ntags:\n  - CSS\ncategories:\n---\n\n<a href=\"#css2\">1. `CSS2` 多媒体类型</a>\n<a href=\"#css3\">2. `CSS3` 多媒体查询</a>\n<a href=\"#browser\">3. 浏览器支持</a>\n<a href=\"#syntax\">4. 语法介绍</a>\n<a href=\"#type\">5. 多媒体类型 `media type`</a>\n<a href=\"#feature\">6. 多媒体功能 `media feature`</a>\n<a href=\"#example\">7. 多媒体查询实例</a>\n\n#### <a name=\"css2\">1、`CSS2` 多媒体类型</a>\n\n- `@media` 规则在 `CSS2` 中有介绍，针对不同媒体类型可以定制不同的样式规则。\n\n- 例如：你可以针对不同的媒体类型(包括显示器、便携设备、电视机，等等)设置不同的样式规则。\n\n- 但是这些多媒体类型`在很多设备上支持还不够友好`。\n\n#### <a name=\"css3\">2、`CSS3` 多媒体查询</a>\nCSS3 的多媒体查询继承了 CSS2 多媒体类型的所有思想： 取代了查找设备的类型，CSS3 根据设置自适应显示。\n\n`媒体查询可用于检测很多事情，例如：`\n\n- viewport(视窗) 的宽度与高度\n- 设备的宽度与高度\n- 朝向 (智能手机横屏，竖屏) 。\n- 分辨率\n\n目前很多针对苹果手机，Android 手机，平板等设备都会使用到多媒体查询。\n\n#### <a name=\"browser\">3、浏览器支持</a>\n\n<img src=\"/images/css3media.gif\">\n\n#### <a name=\"syntax\">4、语法介绍</a>\n\n多媒体查询由多种媒体组成，可以包含一个或多个表达式，表达式根据条件是否成立返回 `true` 或 `false`。\n```css\n@media not|only mediatype and (media feature) {\n  /* CSS 代码...; */\n}\n```\n如果指定的多媒体类型匹配设备类型则查询结果返回 true，文档会在匹配的设备上显示指定样式效果。\n\n除非你使用了 `not` 或 `only` 操作符，否则所有的样式会适应在所有设备上显示效果。\n\n- `not`: not是用来排除掉某些特定的设备的，比如 @media not print（非打印设备）。\n\n- `only`: 用来定某种特别的媒体类型。对于支持Media Queries的移动设备来说，如果存在only关键字，移动设备的Web浏览器会忽略only关键字并直接根据后面的表达式应用样式文件。对于不支持Media Queries的设备但能够读取Media Type类型的Web浏览器，遇到only关键字时会忽略这个样式文件。\n\n- `all`: 所有设备，这个应该经常看到。\n\n你也可以在不同的媒体上使用不同的样式文件：\n```html\n<link rel=\"stylesheet\" media=\"mediatype and|not|only (media feature)\" href=\"mystylesheet.css\">\n```\n\n#### <a name=\"type\">5、多媒体类型 `media type`</a>\n\n| 值 |描述| \n| - | - | \n|all\t    |用于所有多媒体类型设备|\n|print\t  |用于打印机|\n|screen\t  |用于电脑屏幕，平板，智能手机等|\n|speech\t  |用于屏幕阅读器|\n\n#### <a name=\"feature\">6、多媒体功能 `media feature`</a>\n\n| 值| 描述 |\n| - | - |\n|aspect-ratio\t              |定义输出设备中的页面可见区域宽度与高度的比率\n|color\t                    |定义输出设备每一组彩色原件的个数。如果不是彩色设备，则值等于0\n|color-index\t              |定义在输出设备的彩色查询表中的条目数。如果没有使用彩色查询表，则值等于0\n|device-aspect-ratio\t      |定义输出设备的屏幕可见宽度与高度的比率。\n|device-height\t            |定义输出设备的屏幕可见高度。\n|device-width\t              |定义输出设备的屏幕可见宽度。\n|grid\t                      |用来查询输出设备是否使用栅格或点阵。\n|height\t                    |定义输出设备中的页面可见区域高度。\n|max-aspect-ratio\t          |定义输出设备的屏幕可见宽度与高度的最大比率。\n|max-color\t                |定义输出设备每一组彩色原件的最大个数。\n|max-color-index\t          |定义在输出设备的彩色查询表中的最大条目数。\n|max-device-aspect-ratio\t  |定义输出设备的屏幕可见宽度与高度的最大比率。\n|max-device-height\t        |定义输出设备的屏幕可见的最大高度。\n|max-device-width\t          |定义输出设备的屏幕最大可见宽度。\n|max-height\t                |定义输出设备中的页面最大可见区域高度。\n|max-monochrome\t            |定义在一个单色框架缓冲区中每像素包含的最大单色原件个数。\n|max-resolution\t            |定义设备的最大分辨率。\n|max-width\t                |定义输出设备中的页面最大可见区域宽度。\n|min-aspect-ratio\t          |定义输出设备中的页面可见区域宽度与高度的最小比率。\n|min-color\t                |定义输出设备每一组彩色原件的最小个数。\n|min-color-index\t          |定义在输出设备的彩色查询表中的最小条目数。\n|min-device-aspect-ratio\t  |定义输出设备的屏幕可见宽度与高度的最小比率。\n|min-device-width\t          |定义输出设备的屏幕最小可见宽度。\n|min-device-height\t        |定义输出设备的屏幕的最小可见高度。\n|min-height\t                |定义输出设备中的页面最小可见区域高度。\n|min-monochrome\t            |定义在一个单色框架缓冲区中每像素包含的最小单色原件个数\n|min-resolution\t            |定义设备的最小分辨率。\n|min-width\t                |定义输出设备中的页面最小可见区域宽度。\n|monochrome\t                |定义在一个单色框架缓冲区中每像素包含的单色原件个数。如果不是单色设备，则值等于0\n|orientation\t              |定义输出设备中的页面可见区域高度是否大于或等于宽度。\n|resolution\t                |定义设备的分辨率。如：96dpi, 300dpi, 118dpcm\n|scan\t                      |定义电视类设备的扫描工序。\n|width\t                    |定义输出设备中的页面可见区域宽度。\n\n#### <a name=\"example\">7、多媒体查询实例</a>\n\n```css\n<!-- 当浏览器的宽度在 520px 到 699px, 页面背景为 红色 -->\n@media screen and (max-width: 699px) and (min-width: 520px) {\n    body {\n      background: red;\n    }\n}\n\n<!-- 当浏览器的宽度在 700px 到 1000px, 页面背景为 绿色 -->\n@media screen and (max-width: 1000px) and (min-width: 700px) {\n    body {\n      background: green;\n    }\n}\n\n<!-- 当浏览器的宽度大于 1001px, 页面背景为 蓝色 -->\n@media screen and (min-width: 1001px) {\n    body {\n      background: blue;\n    }\n}\n\n<!-- 当浏览器的宽度在 520px 到 699px 或者大于 1200px 时, 去除body的margin -->\n@media screen and (max-width: 699px) and (min-width: 520px), (min-width: 1200px) {\n    body {\n      margin: 0;\n    }\n}\n```","slug":"0809019_CSS3媒体查询","published":1,"updated":"2018-03-16T03:55:21.124Z","_id":"cjetacc1g000q9oc012lricb4","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"#css2\">1. <code>CSS2</code> 多媒体类型</a><br><a href=\"#css3\">2. <code>CSS3</code> 多媒体查询</a><br><a href=\"#browser\">3. 浏览器支持</a><br><a href=\"#syntax\">4. 语法介绍</a><br><a href=\"#type\">5. 多媒体类型 <code>media type</code></a><br><a href=\"#feature\">6. 多媒体功能 <code>media feature</code></a><br><a href=\"#example\">7. 多媒体查询实例</a></p>\n<h4 id=\"1、CSS2-多媒体类型\"><a href=\"#1、CSS2-多媒体类型\" class=\"headerlink\" title=\"1、CSS2 多媒体类型\"></a><a name=\"css2\">1、<code>CSS2</code> 多媒体类型</a></h4><ul>\n<li><p><code>@media</code> 规则在 <code>CSS2</code> 中有介绍，针对不同媒体类型可以定制不同的样式规则。</p>\n</li>\n<li><p>例如：你可以针对不同的媒体类型(包括显示器、便携设备、电视机，等等)设置不同的样式规则。</p>\n</li>\n<li><p>但是这些多媒体类型<code>在很多设备上支持还不够友好</code>。</p>\n</li>\n</ul>\n<h4 id=\"2、CSS3-多媒体查询\"><a href=\"#2、CSS3-多媒体查询\" class=\"headerlink\" title=\"2、CSS3 多媒体查询\"></a><a name=\"css3\">2、<code>CSS3</code> 多媒体查询</a></h4><p>CSS3 的多媒体查询继承了 CSS2 多媒体类型的所有思想： 取代了查找设备的类型，CSS3 根据设置自适应显示。</p>\n<p><code>媒体查询可用于检测很多事情，例如：</code></p>\n<ul>\n<li>viewport(视窗) 的宽度与高度</li>\n<li>设备的宽度与高度</li>\n<li>朝向 (智能手机横屏，竖屏) 。</li>\n<li>分辨率</li>\n</ul>\n<p>目前很多针对苹果手机，Android 手机，平板等设备都会使用到多媒体查询。</p>\n<h4 id=\"3、浏览器支持\"><a href=\"#3、浏览器支持\" class=\"headerlink\" title=\"3、浏览器支持\"></a><a name=\"browser\">3、浏览器支持</a></h4><p><img src=\"/images/css3media.gif\"></p>\n<h4 id=\"4、语法介绍\"><a href=\"#4、语法介绍\" class=\"headerlink\" title=\"4、语法介绍\"></a><a name=\"syntax\">4、语法介绍</a></h4><p>多媒体查询由多种媒体组成，可以包含一个或多个表达式，表达式根据条件是否成立返回 <code>true</code> 或 <code>false</code>。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> not|only mediatype and (media feature) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* CSS 代码...; */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果指定的多媒体类型匹配设备类型则查询结果返回 true，文档会在匹配的设备上显示指定样式效果。</p>\n<p>除非你使用了 <code>not</code> 或 <code>only</code> 操作符，否则所有的样式会适应在所有设备上显示效果。</p>\n<ul>\n<li><p><code>not</code>: not是用来排除掉某些特定的设备的，比如 @media not print（非打印设备）。</p>\n</li>\n<li><p><code>only</code>: 用来定某种特别的媒体类型。对于支持Media Queries的移动设备来说，如果存在only关键字，移动设备的Web浏览器会忽略only关键字并直接根据后面的表达式应用样式文件。对于不支持Media Queries的设备但能够读取Media Type类型的Web浏览器，遇到only关键字时会忽略这个样式文件。</p>\n</li>\n<li><p><code>all</code>: 所有设备，这个应该经常看到。</p>\n</li>\n</ul>\n<p>你也可以在不同的媒体上使用不同的样式文件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"mediatype and|not|only (media feature)\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mystylesheet.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5、多媒体类型-media-type\"><a href=\"#5、多媒体类型-media-type\" class=\"headerlink\" title=\"5、多媒体类型 media type\"></a><a name=\"type\">5、多媒体类型 <code>media type</code></a></h4><table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>all</td>\n<td>用于所有多媒体类型设备</td>\n</tr>\n<tr>\n<td>print</td>\n<td>用于打印机</td>\n</tr>\n<tr>\n<td>screen</td>\n<td>用于电脑屏幕，平板，智能手机等</td>\n</tr>\n<tr>\n<td>speech</td>\n<td>用于屏幕阅读器</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"6、多媒体功能-media-feature\"><a href=\"#6、多媒体功能-media-feature\" class=\"headerlink\" title=\"6、多媒体功能 media feature\"></a><a name=\"feature\">6、多媒体功能 <code>media feature</code></a></h4><table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>aspect-ratio</td>\n<td>定义输出设备中的页面可见区域宽度与高度的比率</td>\n</tr>\n<tr>\n<td>color</td>\n<td>定义输出设备每一组彩色原件的个数。如果不是彩色设备，则值等于0</td>\n</tr>\n<tr>\n<td>color-index</td>\n<td>定义在输出设备的彩色查询表中的条目数。如果没有使用彩色查询表，则值等于0</td>\n</tr>\n<tr>\n<td>device-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的比率。</td>\n</tr>\n<tr>\n<td>device-height</td>\n<td>定义输出设备的屏幕可见高度。</td>\n</tr>\n<tr>\n<td>device-width</td>\n<td>定义输出设备的屏幕可见宽度。</td>\n</tr>\n<tr>\n<td>grid</td>\n<td>用来查询输出设备是否使用栅格或点阵。</td>\n</tr>\n<tr>\n<td>height</td>\n<td>定义输出设备中的页面可见区域高度。</td>\n</tr>\n<tr>\n<td>max-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的最大比率。</td>\n</tr>\n<tr>\n<td>max-color</td>\n<td>定义输出设备每一组彩色原件的最大个数。</td>\n</tr>\n<tr>\n<td>max-color-index</td>\n<td>定义在输出设备的彩色查询表中的最大条目数。</td>\n</tr>\n<tr>\n<td>max-device-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的最大比率。</td>\n</tr>\n<tr>\n<td>max-device-height</td>\n<td>定义输出设备的屏幕可见的最大高度。</td>\n</tr>\n<tr>\n<td>max-device-width</td>\n<td>定义输出设备的屏幕最大可见宽度。</td>\n</tr>\n<tr>\n<td>max-height</td>\n<td>定义输出设备中的页面最大可见区域高度。</td>\n</tr>\n<tr>\n<td>max-monochrome</td>\n<td>定义在一个单色框架缓冲区中每像素包含的最大单色原件个数。</td>\n</tr>\n<tr>\n<td>max-resolution</td>\n<td>定义设备的最大分辨率。</td>\n</tr>\n<tr>\n<td>max-width</td>\n<td>定义输出设备中的页面最大可见区域宽度。</td>\n</tr>\n<tr>\n<td>min-aspect-ratio</td>\n<td>定义输出设备中的页面可见区域宽度与高度的最小比率。</td>\n</tr>\n<tr>\n<td>min-color</td>\n<td>定义输出设备每一组彩色原件的最小个数。</td>\n</tr>\n<tr>\n<td>min-color-index</td>\n<td>定义在输出设备的彩色查询表中的最小条目数。</td>\n</tr>\n<tr>\n<td>min-device-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的最小比率。</td>\n</tr>\n<tr>\n<td>min-device-width</td>\n<td>定义输出设备的屏幕最小可见宽度。</td>\n</tr>\n<tr>\n<td>min-device-height</td>\n<td>定义输出设备的屏幕的最小可见高度。</td>\n</tr>\n<tr>\n<td>min-height</td>\n<td>定义输出设备中的页面最小可见区域高度。</td>\n</tr>\n<tr>\n<td>min-monochrome</td>\n<td>定义在一个单色框架缓冲区中每像素包含的最小单色原件个数</td>\n</tr>\n<tr>\n<td>min-resolution</td>\n<td>定义设备的最小分辨率。</td>\n</tr>\n<tr>\n<td>min-width</td>\n<td>定义输出设备中的页面最小可见区域宽度。</td>\n</tr>\n<tr>\n<td>monochrome</td>\n<td>定义在一个单色框架缓冲区中每像素包含的单色原件个数。如果不是单色设备，则值等于0</td>\n</tr>\n<tr>\n<td>orientation</td>\n<td>定义输出设备中的页面可见区域高度是否大于或等于宽度。</td>\n</tr>\n<tr>\n<td>resolution</td>\n<td>定义设备的分辨率。如：96dpi, 300dpi, 118dpcm</td>\n</tr>\n<tr>\n<td>scan</td>\n<td>定义电视类设备的扫描工序。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>定义输出设备中的页面可见区域宽度。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"7、多媒体查询实例\"><a href=\"#7、多媒体查询实例\" class=\"headerlink\" title=\"7、多媒体查询实例\"></a><a name=\"example\">7、多媒体查询实例</a></h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 当浏览器的宽度在 520<span class=\"selector-tag\">px</span> 到 699<span class=\"selector-tag\">px</span>, 页面背景为 红色 <span class=\"selector-tag\">--</span>&gt;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">699px</span>) and (min-width: <span class=\"number\">520px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 当浏览器的宽度在 700<span class=\"selector-tag\">px</span> 到 1000<span class=\"selector-tag\">px</span>, 页面背景为 绿色 <span class=\"selector-tag\">--</span>&gt;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">1000px</span>) and (min-width: <span class=\"number\">700px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: green;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 当浏览器的宽度大于 1001<span class=\"selector-tag\">px</span>, 页面背景为 蓝色 <span class=\"selector-tag\">--</span>&gt;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width: <span class=\"number\">1001px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 当浏览器的宽度在 520<span class=\"selector-tag\">px</span> 到 699<span class=\"selector-tag\">px</span> 或者大于 1200<span class=\"selector-tag\">px</span> 时, 去除<span class=\"selector-tag\">body</span>的<span class=\"selector-tag\">margin</span> <span class=\"selector-tag\">--</span>&gt;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">699px</span>) and (min-width: <span class=\"number\">520px</span>), (min-width: <span class=\"number\">1200px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"#css2\">1. <code>CSS2</code> 多媒体类型</a><br><a href=\"#css3\">2. <code>CSS3</code> 多媒体查询</a><br><a href=\"#browser\">3. 浏览器支持</a><br><a href=\"#syntax\">4. 语法介绍</a><br><a href=\"#type\">5. 多媒体类型 <code>media type</code></a><br><a href=\"#feature\">6. 多媒体功能 <code>media feature</code></a><br><a href=\"#example\">7. 多媒体查询实例</a></p>\n<h4 id=\"1、CSS2-多媒体类型\"><a href=\"#1、CSS2-多媒体类型\" class=\"headerlink\" title=\"1、CSS2 多媒体类型\"></a><a name=\"css2\">1、<code>CSS2</code> 多媒体类型</a></h4><ul>\n<li><p><code>@media</code> 规则在 <code>CSS2</code> 中有介绍，针对不同媒体类型可以定制不同的样式规则。</p>\n</li>\n<li><p>例如：你可以针对不同的媒体类型(包括显示器、便携设备、电视机，等等)设置不同的样式规则。</p>\n</li>\n<li><p>但是这些多媒体类型<code>在很多设备上支持还不够友好</code>。</p>\n</li>\n</ul>\n<h4 id=\"2、CSS3-多媒体查询\"><a href=\"#2、CSS3-多媒体查询\" class=\"headerlink\" title=\"2、CSS3 多媒体查询\"></a><a name=\"css3\">2、<code>CSS3</code> 多媒体查询</a></h4><p>CSS3 的多媒体查询继承了 CSS2 多媒体类型的所有思想： 取代了查找设备的类型，CSS3 根据设置自适应显示。</p>\n<p><code>媒体查询可用于检测很多事情，例如：</code></p>\n<ul>\n<li>viewport(视窗) 的宽度与高度</li>\n<li>设备的宽度与高度</li>\n<li>朝向 (智能手机横屏，竖屏) 。</li>\n<li>分辨率</li>\n</ul>\n<p>目前很多针对苹果手机，Android 手机，平板等设备都会使用到多媒体查询。</p>\n<h4 id=\"3、浏览器支持\"><a href=\"#3、浏览器支持\" class=\"headerlink\" title=\"3、浏览器支持\"></a><a name=\"browser\">3、浏览器支持</a></h4><p><img src=\"/images/css3media.gif\"></p>\n<h4 id=\"4、语法介绍\"><a href=\"#4、语法介绍\" class=\"headerlink\" title=\"4、语法介绍\"></a><a name=\"syntax\">4、语法介绍</a></h4><p>多媒体查询由多种媒体组成，可以包含一个或多个表达式，表达式根据条件是否成立返回 <code>true</code> 或 <code>false</code>。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> not|only mediatype and (media feature) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* CSS 代码...; */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果指定的多媒体类型匹配设备类型则查询结果返回 true，文档会在匹配的设备上显示指定样式效果。</p>\n<p>除非你使用了 <code>not</code> 或 <code>only</code> 操作符，否则所有的样式会适应在所有设备上显示效果。</p>\n<ul>\n<li><p><code>not</code>: not是用来排除掉某些特定的设备的，比如 @media not print（非打印设备）。</p>\n</li>\n<li><p><code>only</code>: 用来定某种特别的媒体类型。对于支持Media Queries的移动设备来说，如果存在only关键字，移动设备的Web浏览器会忽略only关键字并直接根据后面的表达式应用样式文件。对于不支持Media Queries的设备但能够读取Media Type类型的Web浏览器，遇到only关键字时会忽略这个样式文件。</p>\n</li>\n<li><p><code>all</code>: 所有设备，这个应该经常看到。</p>\n</li>\n</ul>\n<p>你也可以在不同的媒体上使用不同的样式文件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"mediatype and|not|only (media feature)\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mystylesheet.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5、多媒体类型-media-type\"><a href=\"#5、多媒体类型-media-type\" class=\"headerlink\" title=\"5、多媒体类型 media type\"></a><a name=\"type\">5、多媒体类型 <code>media type</code></a></h4><table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>all</td>\n<td>用于所有多媒体类型设备</td>\n</tr>\n<tr>\n<td>print</td>\n<td>用于打印机</td>\n</tr>\n<tr>\n<td>screen</td>\n<td>用于电脑屏幕，平板，智能手机等</td>\n</tr>\n<tr>\n<td>speech</td>\n<td>用于屏幕阅读器</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"6、多媒体功能-media-feature\"><a href=\"#6、多媒体功能-media-feature\" class=\"headerlink\" title=\"6、多媒体功能 media feature\"></a><a name=\"feature\">6、多媒体功能 <code>media feature</code></a></h4><table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>aspect-ratio</td>\n<td>定义输出设备中的页面可见区域宽度与高度的比率</td>\n</tr>\n<tr>\n<td>color</td>\n<td>定义输出设备每一组彩色原件的个数。如果不是彩色设备，则值等于0</td>\n</tr>\n<tr>\n<td>color-index</td>\n<td>定义在输出设备的彩色查询表中的条目数。如果没有使用彩色查询表，则值等于0</td>\n</tr>\n<tr>\n<td>device-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的比率。</td>\n</tr>\n<tr>\n<td>device-height</td>\n<td>定义输出设备的屏幕可见高度。</td>\n</tr>\n<tr>\n<td>device-width</td>\n<td>定义输出设备的屏幕可见宽度。</td>\n</tr>\n<tr>\n<td>grid</td>\n<td>用来查询输出设备是否使用栅格或点阵。</td>\n</tr>\n<tr>\n<td>height</td>\n<td>定义输出设备中的页面可见区域高度。</td>\n</tr>\n<tr>\n<td>max-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的最大比率。</td>\n</tr>\n<tr>\n<td>max-color</td>\n<td>定义输出设备每一组彩色原件的最大个数。</td>\n</tr>\n<tr>\n<td>max-color-index</td>\n<td>定义在输出设备的彩色查询表中的最大条目数。</td>\n</tr>\n<tr>\n<td>max-device-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的最大比率。</td>\n</tr>\n<tr>\n<td>max-device-height</td>\n<td>定义输出设备的屏幕可见的最大高度。</td>\n</tr>\n<tr>\n<td>max-device-width</td>\n<td>定义输出设备的屏幕最大可见宽度。</td>\n</tr>\n<tr>\n<td>max-height</td>\n<td>定义输出设备中的页面最大可见区域高度。</td>\n</tr>\n<tr>\n<td>max-monochrome</td>\n<td>定义在一个单色框架缓冲区中每像素包含的最大单色原件个数。</td>\n</tr>\n<tr>\n<td>max-resolution</td>\n<td>定义设备的最大分辨率。</td>\n</tr>\n<tr>\n<td>max-width</td>\n<td>定义输出设备中的页面最大可见区域宽度。</td>\n</tr>\n<tr>\n<td>min-aspect-ratio</td>\n<td>定义输出设备中的页面可见区域宽度与高度的最小比率。</td>\n</tr>\n<tr>\n<td>min-color</td>\n<td>定义输出设备每一组彩色原件的最小个数。</td>\n</tr>\n<tr>\n<td>min-color-index</td>\n<td>定义在输出设备的彩色查询表中的最小条目数。</td>\n</tr>\n<tr>\n<td>min-device-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的最小比率。</td>\n</tr>\n<tr>\n<td>min-device-width</td>\n<td>定义输出设备的屏幕最小可见宽度。</td>\n</tr>\n<tr>\n<td>min-device-height</td>\n<td>定义输出设备的屏幕的最小可见高度。</td>\n</tr>\n<tr>\n<td>min-height</td>\n<td>定义输出设备中的页面最小可见区域高度。</td>\n</tr>\n<tr>\n<td>min-monochrome</td>\n<td>定义在一个单色框架缓冲区中每像素包含的最小单色原件个数</td>\n</tr>\n<tr>\n<td>min-resolution</td>\n<td>定义设备的最小分辨率。</td>\n</tr>\n<tr>\n<td>min-width</td>\n<td>定义输出设备中的页面最小可见区域宽度。</td>\n</tr>\n<tr>\n<td>monochrome</td>\n<td>定义在一个单色框架缓冲区中每像素包含的单色原件个数。如果不是单色设备，则值等于0</td>\n</tr>\n<tr>\n<td>orientation</td>\n<td>定义输出设备中的页面可见区域高度是否大于或等于宽度。</td>\n</tr>\n<tr>\n<td>resolution</td>\n<td>定义设备的分辨率。如：96dpi, 300dpi, 118dpcm</td>\n</tr>\n<tr>\n<td>scan</td>\n<td>定义电视类设备的扫描工序。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>定义输出设备中的页面可见区域宽度。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"7、多媒体查询实例\"><a href=\"#7、多媒体查询实例\" class=\"headerlink\" title=\"7、多媒体查询实例\"></a><a name=\"example\">7、多媒体查询实例</a></h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 当浏览器的宽度在 520<span class=\"selector-tag\">px</span> 到 699<span class=\"selector-tag\">px</span>, 页面背景为 红色 <span class=\"selector-tag\">--</span>&gt;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">699px</span>) and (min-width: <span class=\"number\">520px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 当浏览器的宽度在 700<span class=\"selector-tag\">px</span> 到 1000<span class=\"selector-tag\">px</span>, 页面背景为 绿色 <span class=\"selector-tag\">--</span>&gt;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">1000px</span>) and (min-width: <span class=\"number\">700px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: green;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 当浏览器的宽度大于 1001<span class=\"selector-tag\">px</span>, 页面背景为 蓝色 <span class=\"selector-tag\">--</span>&gt;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width: <span class=\"number\">1001px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 当浏览器的宽度在 520<span class=\"selector-tag\">px</span> 到 699<span class=\"selector-tag\">px</span> 或者大于 1200<span class=\"selector-tag\">px</span> 时, 去除<span class=\"selector-tag\">body</span>的<span class=\"selector-tag\">margin</span> <span class=\"selector-tag\">--</span>&gt;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">699px</span>) and (min-width: <span class=\"number\">520px</span>), (min-width: <span class=\"number\">1200px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"id":"0809017","title":"axios 简易上手","date":"2018-03-05T02:23:18.000Z","_content":"\n> Promise based HTTP client for the browser and node.js.（`axios` 是一个基于 `Promise` 的 `HTTP` 库，可以用在 `浏览器` 和 `node.js` 中。）\n\n<a href=\"#install\">1. 安装</a>\n<a href=\"#example\">2. 官网示例</a>\n<a href=\"#apiIntro\">3. API 介绍</a>\n<a href=\"#requestConfig\">4. 请求配置</a>\n<a href=\"#response\">5. 响应结构</a>\n<a href=\"#defaultConfig\">6. 默认配置</a>\n<a href=\"#interceptors\">7. 拦截器</a>\n<a href=\"#handleErr\">8. 错误处理</a>\n<a href=\"#applicationForm\">9. 使用 application/x-www-form-urlencoded 格式的请求参数</a>\n<a href=\"#notes\">10. 使用必看</a>\n\n#### <a name=\"install\">1、安装</a>\n\n- `使用 npm：`\n```\n$ npm install axios\n```\n- `使用 cdn：`\n```\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n\n```\n\n#### <a name=\"example\">2、官方示例</a>\n\n- `执行 GET 请求：`\n  ```js\n  // 为给定 ID 的 user 创建请求\n  axios.get('/user?ID=12345')\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err)\n  });\n\n  // 同样的，上面的请求可以这样做\n  axios.get('/user', {\n    params: {\n      ID: 123\n    }\n  })\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n  ```\n\n- `执行 POST 请求：`\n  ```js\n  axios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n  ```\n\n- `执行多个并发请求：`\n  ```js\n  function getUserAccount() {\n    return axios.get('/user/12345');\n  }\n\n  function getUserPermissions() {\n    return axios.get('/user/12345/permissions');\n  }\n\n  axios.all([getUserAccount(), getUserPermissions()])\n  .then(axios.spread((acct, perms) => {\n    // 两个请求现在都执行完成\n  }));\n  ```\n\n#### <a name=\"apiIntro\">3、API 介绍</a>\n\n- `可以通过向 axios 传递相关配置来创建请求：`\n\n  axios(config)\n  ```js\n  // 发送 POST 请求\n  axios({\n    method: 'post',\n    url: '/user/12345',\n    data: {\n      firstName: 'Fred',\n      lastName: 'Flintstone'\n    },\n    ...\n  });\n  ```\n  ```js\n  // GET 请求远程图片\n  axios({\n    method:'get',\n    url:'http://bit.ly/2mTM3nY',\n    responseType:'stream'\n  })\n  .then((response) => {\n  response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n  ```\n  axios(url[, config])\n  ```js\n    // 发送 GET 请求（默认的方法）\n    axios('/user/12345');\n```\n\n- `请求方法的别名：`\n\n  为方便起见，为所有支持的请求方法提供了别名\n  ```js\n  axios.request(config)\n  axios.get(url[, config])\n  axios.delete(url[, config])\n  axios.head(url[, config])\n  axios.post(url[, data[, config]])\n  axios.put(url[, data[, config]])\n  axios.patch(url[, data[, config]])\n  ```\n  在使用别名方法时， url、method、data 这些属性都不必在配置中指定。\n\n- `处理并发请求：`\n  ```js\n  axios.all(iterable)\n  axios.spread(callback)\n  ```\n\n- `创建 axios 实例：`\n  可以使用自定义配置新建一个 axios 实例\n  ```js\n  // axios.create([config])\n  var instance = axios.create({\n    baseURL: 'https://some-domain.com/api/',\n    timeout: 1000,\n    headers: {'X-Custom-Header': 'foobar'}\n  });\n  ```\n\n- `实例的方法：`;\n  以下是可用的实例方法。指定的配置将与实例的配置合并\n  ```\n  axios#request(config)\n  axios#get(url[, config])\n  axios#delete(url[, config])\n  axios#head(url[, config])\n  axios#post(url[, data[, config]])\n  axios#put(url[, data[, config]])\n  axios#patch(url[, data[, config]])\n  ```\n\n#### <a name=\"requestConfig\">4、请求配置</a>\n\n- `这些是创建请求时可以用的配置选项。只有 url 是必需的。如果没有指定 method，请求将默认使用 get 方法：`\n  ```js\n  {\n    // `url` 是用于请求的服务器 URL\n    url: '/user',\n\n    // `method` 是创建请求时使用的方法\n    method: 'get', // 默认是 get\n\n    // `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。\n    // 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL\n    baseURL: 'https://some-domain.com/api/',\n\n    // `transformRequest` 允许在向服务器发送前，修改请求数据\n    // 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法\n    // 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream\n    transformRequest: [function (data) {\n      // 对 data 进行任意转换处理\n\n      return data;\n    }],\n\n    // `transformResponse` 在传递给 then/catch 前，允许修改响应数据\n    transformResponse: [function (data) {\n      // 对 data 进行任意转换处理\n\n      return data;\n    }],\n\n    // `headers` 是即将被发送的自定义请求头\n    headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n    // `params` 是即将与请求一起发送的 URL 参数\n    // 必须是一个无格式对象(plain object)或 URLSearchParams 对象\n    params: {\n      ID: 12345\n    },\n\n    // `paramsSerializer` 是一个负责 `params` 序列化的函数\n    // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)\n    paramsSerializer: function(params) {\n      return Qs.stringify(params, {arrayFormat: 'brackets'})\n    },\n\n    // `data` 是作为请求主体被发送的数据\n    // 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'\n    // 在没有设置 `transformRequest` 时，必须是以下类型之一：\n    // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n    // - 浏览器专属：FormData, File, Blob\n    // - Node 专属： Stream\n    data: {\n      firstName: 'Fred'\n    },\n\n    // `timeout` 指定请求超时的毫秒数(0 表示无超时时间)\n    // 如果请求话费了超过 `timeout` 的时间，请求将被中断\n    timeout: 1000,\n\n    // `withCredentials` 表示跨域请求时是否需要使用凭证\n    withCredentials: false, // 默认的\n\n    // `adapter` 允许自定义处理请求，以使测试更轻松\n    // 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).\n    adapter: function (config) {\n      /* ... */\n    },\n\n    // `auth` 表示应该使用 HTTP 基础验证，并提供凭据\n    // 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` ,\n    // 设置的自定义 `Authorization`头\n    auth: {\n      username: 'janedoe',\n      password: 's00pers3cret'\n    },\n\n    // `responseType` 表示服务器响应的数据类型，\n    // 可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\n    responseType: 'json', // 默认的\n\n    // `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称\n    xsrfCookieName: 'XSRF-TOKEN', // default\n\n    // `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称\n    xsrfHeaderName: 'X-XSRF-TOKEN', // 默认的\n\n    // `onUploadProgress` 允许为上传处理进度事件\n    onUploadProgress: function (progressEvent) {\n      // 对原生进度事件的处理\n    },\n\n    // `onDownloadProgress` 允许为下载处理进度事件\n    onDownloadProgress: function (progressEvent) {\n      // 对原生进度事件的处理\n    },\n\n    // `maxContentLength` 定义允许的响应内容的最大尺寸\n    maxContentLength: 2000,\n\n    // `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。\n    // 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，\n    // promise 将被 resolve; 否则，promise 将被 rejecte\n    validateStatus: function (status) {\n      return status >= 200 && status < 300; // 默认的\n    },\n\n    // `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目\n    // 如果设置为0，将不会 follow 任何重定向\n    maxRedirects: 5, // 默认的\n\n    // `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。\n    // 允许像这样配置选项：\n    // `keepAlive` 默认没有启用\n    httpAgent: new http.Agent({ keepAlive: true }),\n    httpsAgent: new https.Agent({ keepAlive: true }),\n\n    // 'proxy' 定义代理服务器的主机名称和端口\n    // `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据\n    // 这将会设置一个 `Proxy-Authorization` 头，\n    // 覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。\n    proxy: {\n      host: '127.0.0.1',\n      port: 9000,\n      auth: : {\n        username: 'mikeymike',\n        password: 'rapunz3l'\n      }\n    },\n\n    // `cancelToken` 指定用于取消请求的 cancel token\n    // （查看后面的 Cancellation 这节了解更多）\n    cancelToken: new CancelToken(function (cancel) {\n    })\n  }\n  ```\n\n#### <a name=\"response\">5、响应结构</a>\n\n- `某个请求的响应包含以下信息：`\n  ```js\n  {\n    // `data` 由服务器提供的响应\n    data: {},\n\n    // `status` 来自服务器响应的 HTTP 状态码\n    status: 200,\n\n    // `statusText` 来自服务器响应的 HTTP 状态信息\n    statusText: 'OK',\n\n    // `headers` 服务器响应的头\n    headers: {},\n\n    // `config` 是为请求提供的配置信息\n    config: {}\n  }\n  ```\n  使用 then 时，你将接收下面这样的响应：\n  ```js\n  axios.get('/user/12345')\n  .then((response) => {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n  ```\n \n#### <a name=\"#defaultConfig\">6、默认配置</a>\n \n> 指定将被用在各个请求的配置默认值\n\n- `axios 全局默认值：`\n  ```js\n  axios.defaults.baseURL = 'https://api.example.com';\n  axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n  axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n  ```\n\n- `自定义实例的默认值：`\n  ```js\n  // 1、创建实例时设置配置的默认值\n  var instance = axios.create({\n    baseURL: 'https://api.example.com'\n  });\n\n  // 2、在实例已创建后修改默认值\n  instance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n  ```\n\n- `配置的优先顺序:`\n  配置会以一个优先顺序进行合并。这个顺序是：在 lib/defaults.js 找到的库的默认值，然后是实例的 defaults 属性，最后是请求的 config 参数。后者将优先于前者。这里是一个例子：\n  ```js\n  // 使用由库提供的配置的默认值来创建实例\n  // 此时超时配置的默认值是 `0`\n  var instance = axios.create();\n\n  // 覆写库的超时默认值\n  // 现在，在超时前，所有请求都会等待 2.5 秒\n  instance.defaults.timeout = 2500;\n\n  // 为已知需要花费很长时间的请求覆写超时设置\n  instance.get('/longRequest', {\n    timeout: 5000\n  });\n  ```\n\n#### <a name=\"interceptors\">7、拦截器</a>\n\n- `在请求或响应被 then 或 catch 处理前拦截它们：`\n  ```js\n  // 添加请求拦截器\n  axios.interceptors.request.use((config) => {\n    // 在发送请求之前做些什么\n    return config;\n  }, (error) => {\n    // 对请求错误做些什么\n    return Promise.reject(error);\n  });\n\n  // 添加响应拦截器\n  axios.interceptors.response.use((response) => {\n    // 对响应数据做点什么\n    return response;\n  }, (error) => {\n    // 对响应错误做点什么\n    return Promise.reject(error);\n  });\n  ```\n\n- `如果你想在稍后移除拦截器，可以这样：`\n  ```js\n  // 使用拦截器\n  var myInterceptor = axios.interceptors.request.use(function () {/*...*/});\n\n  // 移除拦截器\n  axios.interceptors.request.eject(myInterceptor);\n  ```\n\n- `可以为自定义 axios 实例添加拦截器：`\n  ```js\n  var instance = axios.create();\n  instance.interceptors.request.use(function () {/*...*/});\n  ```\n\n#### <a name=\"handleErr\">8、错误处理</a>\n\n- `常见的错误处理方式：`\n  ```js\n  axios.get('/user/12345')\n    .catch((error) => {\n      if (error.response) {\n        // 请求已发出，但服务器响应的状态码不在 2xx 范围内\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log('Error', error.message);\n      }\n      console.log(error.config);\n    });\n  ```\n- `可以使用 validateStatus 配置选项定义一个自定义 HTTP 状态码的错误范围：`\n  ```js\n  axios.get('/user/12345', {\n    validateStatus: function (status) {\n      return status < 500; // 状态码在大于或等于500时才会 reject\n    }\n  })\n  ```\n\n#### <a name=\"applicationForm\">9、使用 `application/x-www-form-urlencoded` 格式的请求参数</a>\n\n\n> 默认情况下，axios将JavaScript对象序列化为JSON，即 `application/json` 。要以 `application/x-www-form-urlencoded` 格式发送数据，您可以使用以下选项之一。\n\n- `浏览器`\n  在浏览器中，您可以使用URLSearchParams API，如下所示：\n  ```js\n  var params = new URLSearchParams();\n  params.append('param1', 'value1');\n  params.append('param2', 'value2');\n  axios.post('/foo', params);\n\n  // 值得注意的是，并不是所有的浏览器都支持 `URLSearchParams`，\n  // 但是可以借助 `polyfill` 来解决\n  ```\n  也可以使用 [`qs`](https://github.com/ljharb/qs) 库来编码请求参数：\n  ```js\n  var qs = import 'qs';\n  axios.post('/foo', qs.stringify({ 'bar': 123 }));\n  ```\n\n- `Node.js`\n  在 `node.js` 中，可以使用 [`querystring`](https://nodejs.org/api/querystring.html) 模块：\n  ```js\n  var querystring = import 'querystring';\n  axios.post('http://something.com/', querystring.stringify({ foo: 'bar' }));\n\n  // 当然也可以使用 `qs` 库\n  ```\n\n#### <a name=\"notes\">10、使用必看</a>\n\n- `更新说明：`\n  在axios达到1.0版本之前，重大更改将以新的次要版本发布。例如0.5.1和0.5.4将具有相同的API，但0.6.0将具有重大变化。\n\n- `Promise：`\n  axios依赖于原生ES6 `Promise` 实现的支持。如果您的环境不支持ES6 Promise，则可以使用 [polyfill](https://github.com/stefanpenner/es6-promise)。\n\n<p style=\"text-align: right\">参考文档 [axios](https://www.npmjs.com/package/axios)</p>","source":"_posts/0809017_axios简易上手.md","raw":"---\nid: 0809017\ntitle: axios 简易上手\ndate: 2018-03-05 10:23:18\ntags:\n  - ES6\n  - ajax\n  - Promise\ncategories:\n---\n\n> Promise based HTTP client for the browser and node.js.（`axios` 是一个基于 `Promise` 的 `HTTP` 库，可以用在 `浏览器` 和 `node.js` 中。）\n\n<a href=\"#install\">1. 安装</a>\n<a href=\"#example\">2. 官网示例</a>\n<a href=\"#apiIntro\">3. API 介绍</a>\n<a href=\"#requestConfig\">4. 请求配置</a>\n<a href=\"#response\">5. 响应结构</a>\n<a href=\"#defaultConfig\">6. 默认配置</a>\n<a href=\"#interceptors\">7. 拦截器</a>\n<a href=\"#handleErr\">8. 错误处理</a>\n<a href=\"#applicationForm\">9. 使用 application/x-www-form-urlencoded 格式的请求参数</a>\n<a href=\"#notes\">10. 使用必看</a>\n\n#### <a name=\"install\">1、安装</a>\n\n- `使用 npm：`\n```\n$ npm install axios\n```\n- `使用 cdn：`\n```\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n\n```\n\n#### <a name=\"example\">2、官方示例</a>\n\n- `执行 GET 请求：`\n  ```js\n  // 为给定 ID 的 user 创建请求\n  axios.get('/user?ID=12345')\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err)\n  });\n\n  // 同样的，上面的请求可以这样做\n  axios.get('/user', {\n    params: {\n      ID: 123\n    }\n  })\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n  ```\n\n- `执行 POST 请求：`\n  ```js\n  axios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n  ```\n\n- `执行多个并发请求：`\n  ```js\n  function getUserAccount() {\n    return axios.get('/user/12345');\n  }\n\n  function getUserPermissions() {\n    return axios.get('/user/12345/permissions');\n  }\n\n  axios.all([getUserAccount(), getUserPermissions()])\n  .then(axios.spread((acct, perms) => {\n    // 两个请求现在都执行完成\n  }));\n  ```\n\n#### <a name=\"apiIntro\">3、API 介绍</a>\n\n- `可以通过向 axios 传递相关配置来创建请求：`\n\n  axios(config)\n  ```js\n  // 发送 POST 请求\n  axios({\n    method: 'post',\n    url: '/user/12345',\n    data: {\n      firstName: 'Fred',\n      lastName: 'Flintstone'\n    },\n    ...\n  });\n  ```\n  ```js\n  // GET 请求远程图片\n  axios({\n    method:'get',\n    url:'http://bit.ly/2mTM3nY',\n    responseType:'stream'\n  })\n  .then((response) => {\n  response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n  ```\n  axios(url[, config])\n  ```js\n    // 发送 GET 请求（默认的方法）\n    axios('/user/12345');\n```\n\n- `请求方法的别名：`\n\n  为方便起见，为所有支持的请求方法提供了别名\n  ```js\n  axios.request(config)\n  axios.get(url[, config])\n  axios.delete(url[, config])\n  axios.head(url[, config])\n  axios.post(url[, data[, config]])\n  axios.put(url[, data[, config]])\n  axios.patch(url[, data[, config]])\n  ```\n  在使用别名方法时， url、method、data 这些属性都不必在配置中指定。\n\n- `处理并发请求：`\n  ```js\n  axios.all(iterable)\n  axios.spread(callback)\n  ```\n\n- `创建 axios 实例：`\n  可以使用自定义配置新建一个 axios 实例\n  ```js\n  // axios.create([config])\n  var instance = axios.create({\n    baseURL: 'https://some-domain.com/api/',\n    timeout: 1000,\n    headers: {'X-Custom-Header': 'foobar'}\n  });\n  ```\n\n- `实例的方法：`;\n  以下是可用的实例方法。指定的配置将与实例的配置合并\n  ```\n  axios#request(config)\n  axios#get(url[, config])\n  axios#delete(url[, config])\n  axios#head(url[, config])\n  axios#post(url[, data[, config]])\n  axios#put(url[, data[, config]])\n  axios#patch(url[, data[, config]])\n  ```\n\n#### <a name=\"requestConfig\">4、请求配置</a>\n\n- `这些是创建请求时可以用的配置选项。只有 url 是必需的。如果没有指定 method，请求将默认使用 get 方法：`\n  ```js\n  {\n    // `url` 是用于请求的服务器 URL\n    url: '/user',\n\n    // `method` 是创建请求时使用的方法\n    method: 'get', // 默认是 get\n\n    // `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。\n    // 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL\n    baseURL: 'https://some-domain.com/api/',\n\n    // `transformRequest` 允许在向服务器发送前，修改请求数据\n    // 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法\n    // 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream\n    transformRequest: [function (data) {\n      // 对 data 进行任意转换处理\n\n      return data;\n    }],\n\n    // `transformResponse` 在传递给 then/catch 前，允许修改响应数据\n    transformResponse: [function (data) {\n      // 对 data 进行任意转换处理\n\n      return data;\n    }],\n\n    // `headers` 是即将被发送的自定义请求头\n    headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n    // `params` 是即将与请求一起发送的 URL 参数\n    // 必须是一个无格式对象(plain object)或 URLSearchParams 对象\n    params: {\n      ID: 12345\n    },\n\n    // `paramsSerializer` 是一个负责 `params` 序列化的函数\n    // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)\n    paramsSerializer: function(params) {\n      return Qs.stringify(params, {arrayFormat: 'brackets'})\n    },\n\n    // `data` 是作为请求主体被发送的数据\n    // 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'\n    // 在没有设置 `transformRequest` 时，必须是以下类型之一：\n    // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n    // - 浏览器专属：FormData, File, Blob\n    // - Node 专属： Stream\n    data: {\n      firstName: 'Fred'\n    },\n\n    // `timeout` 指定请求超时的毫秒数(0 表示无超时时间)\n    // 如果请求话费了超过 `timeout` 的时间，请求将被中断\n    timeout: 1000,\n\n    // `withCredentials` 表示跨域请求时是否需要使用凭证\n    withCredentials: false, // 默认的\n\n    // `adapter` 允许自定义处理请求，以使测试更轻松\n    // 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).\n    adapter: function (config) {\n      /* ... */\n    },\n\n    // `auth` 表示应该使用 HTTP 基础验证，并提供凭据\n    // 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` ,\n    // 设置的自定义 `Authorization`头\n    auth: {\n      username: 'janedoe',\n      password: 's00pers3cret'\n    },\n\n    // `responseType` 表示服务器响应的数据类型，\n    // 可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\n    responseType: 'json', // 默认的\n\n    // `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称\n    xsrfCookieName: 'XSRF-TOKEN', // default\n\n    // `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称\n    xsrfHeaderName: 'X-XSRF-TOKEN', // 默认的\n\n    // `onUploadProgress` 允许为上传处理进度事件\n    onUploadProgress: function (progressEvent) {\n      // 对原生进度事件的处理\n    },\n\n    // `onDownloadProgress` 允许为下载处理进度事件\n    onDownloadProgress: function (progressEvent) {\n      // 对原生进度事件的处理\n    },\n\n    // `maxContentLength` 定义允许的响应内容的最大尺寸\n    maxContentLength: 2000,\n\n    // `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。\n    // 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，\n    // promise 将被 resolve; 否则，promise 将被 rejecte\n    validateStatus: function (status) {\n      return status >= 200 && status < 300; // 默认的\n    },\n\n    // `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目\n    // 如果设置为0，将不会 follow 任何重定向\n    maxRedirects: 5, // 默认的\n\n    // `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。\n    // 允许像这样配置选项：\n    // `keepAlive` 默认没有启用\n    httpAgent: new http.Agent({ keepAlive: true }),\n    httpsAgent: new https.Agent({ keepAlive: true }),\n\n    // 'proxy' 定义代理服务器的主机名称和端口\n    // `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据\n    // 这将会设置一个 `Proxy-Authorization` 头，\n    // 覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。\n    proxy: {\n      host: '127.0.0.1',\n      port: 9000,\n      auth: : {\n        username: 'mikeymike',\n        password: 'rapunz3l'\n      }\n    },\n\n    // `cancelToken` 指定用于取消请求的 cancel token\n    // （查看后面的 Cancellation 这节了解更多）\n    cancelToken: new CancelToken(function (cancel) {\n    })\n  }\n  ```\n\n#### <a name=\"response\">5、响应结构</a>\n\n- `某个请求的响应包含以下信息：`\n  ```js\n  {\n    // `data` 由服务器提供的响应\n    data: {},\n\n    // `status` 来自服务器响应的 HTTP 状态码\n    status: 200,\n\n    // `statusText` 来自服务器响应的 HTTP 状态信息\n    statusText: 'OK',\n\n    // `headers` 服务器响应的头\n    headers: {},\n\n    // `config` 是为请求提供的配置信息\n    config: {}\n  }\n  ```\n  使用 then 时，你将接收下面这样的响应：\n  ```js\n  axios.get('/user/12345')\n  .then((response) => {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n  ```\n \n#### <a name=\"#defaultConfig\">6、默认配置</a>\n \n> 指定将被用在各个请求的配置默认值\n\n- `axios 全局默认值：`\n  ```js\n  axios.defaults.baseURL = 'https://api.example.com';\n  axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n  axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n  ```\n\n- `自定义实例的默认值：`\n  ```js\n  // 1、创建实例时设置配置的默认值\n  var instance = axios.create({\n    baseURL: 'https://api.example.com'\n  });\n\n  // 2、在实例已创建后修改默认值\n  instance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n  ```\n\n- `配置的优先顺序:`\n  配置会以一个优先顺序进行合并。这个顺序是：在 lib/defaults.js 找到的库的默认值，然后是实例的 defaults 属性，最后是请求的 config 参数。后者将优先于前者。这里是一个例子：\n  ```js\n  // 使用由库提供的配置的默认值来创建实例\n  // 此时超时配置的默认值是 `0`\n  var instance = axios.create();\n\n  // 覆写库的超时默认值\n  // 现在，在超时前，所有请求都会等待 2.5 秒\n  instance.defaults.timeout = 2500;\n\n  // 为已知需要花费很长时间的请求覆写超时设置\n  instance.get('/longRequest', {\n    timeout: 5000\n  });\n  ```\n\n#### <a name=\"interceptors\">7、拦截器</a>\n\n- `在请求或响应被 then 或 catch 处理前拦截它们：`\n  ```js\n  // 添加请求拦截器\n  axios.interceptors.request.use((config) => {\n    // 在发送请求之前做些什么\n    return config;\n  }, (error) => {\n    // 对请求错误做些什么\n    return Promise.reject(error);\n  });\n\n  // 添加响应拦截器\n  axios.interceptors.response.use((response) => {\n    // 对响应数据做点什么\n    return response;\n  }, (error) => {\n    // 对响应错误做点什么\n    return Promise.reject(error);\n  });\n  ```\n\n- `如果你想在稍后移除拦截器，可以这样：`\n  ```js\n  // 使用拦截器\n  var myInterceptor = axios.interceptors.request.use(function () {/*...*/});\n\n  // 移除拦截器\n  axios.interceptors.request.eject(myInterceptor);\n  ```\n\n- `可以为自定义 axios 实例添加拦截器：`\n  ```js\n  var instance = axios.create();\n  instance.interceptors.request.use(function () {/*...*/});\n  ```\n\n#### <a name=\"handleErr\">8、错误处理</a>\n\n- `常见的错误处理方式：`\n  ```js\n  axios.get('/user/12345')\n    .catch((error) => {\n      if (error.response) {\n        // 请求已发出，但服务器响应的状态码不在 2xx 范围内\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log('Error', error.message);\n      }\n      console.log(error.config);\n    });\n  ```\n- `可以使用 validateStatus 配置选项定义一个自定义 HTTP 状态码的错误范围：`\n  ```js\n  axios.get('/user/12345', {\n    validateStatus: function (status) {\n      return status < 500; // 状态码在大于或等于500时才会 reject\n    }\n  })\n  ```\n\n#### <a name=\"applicationForm\">9、使用 `application/x-www-form-urlencoded` 格式的请求参数</a>\n\n\n> 默认情况下，axios将JavaScript对象序列化为JSON，即 `application/json` 。要以 `application/x-www-form-urlencoded` 格式发送数据，您可以使用以下选项之一。\n\n- `浏览器`\n  在浏览器中，您可以使用URLSearchParams API，如下所示：\n  ```js\n  var params = new URLSearchParams();\n  params.append('param1', 'value1');\n  params.append('param2', 'value2');\n  axios.post('/foo', params);\n\n  // 值得注意的是，并不是所有的浏览器都支持 `URLSearchParams`，\n  // 但是可以借助 `polyfill` 来解决\n  ```\n  也可以使用 [`qs`](https://github.com/ljharb/qs) 库来编码请求参数：\n  ```js\n  var qs = import 'qs';\n  axios.post('/foo', qs.stringify({ 'bar': 123 }));\n  ```\n\n- `Node.js`\n  在 `node.js` 中，可以使用 [`querystring`](https://nodejs.org/api/querystring.html) 模块：\n  ```js\n  var querystring = import 'querystring';\n  axios.post('http://something.com/', querystring.stringify({ foo: 'bar' }));\n\n  // 当然也可以使用 `qs` 库\n  ```\n\n#### <a name=\"notes\">10、使用必看</a>\n\n- `更新说明：`\n  在axios达到1.0版本之前，重大更改将以新的次要版本发布。例如0.5.1和0.5.4将具有相同的API，但0.6.0将具有重大变化。\n\n- `Promise：`\n  axios依赖于原生ES6 `Promise` 实现的支持。如果您的环境不支持ES6 Promise，则可以使用 [polyfill](https://github.com/stefanpenner/es6-promise)。\n\n<p style=\"text-align: right\">参考文档 [axios](https://www.npmjs.com/package/axios)</p>","slug":"0809017_axios简易上手","published":1,"updated":"2018-03-15T08:20:40.140Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc1g000s9oc011k0nu8b","content":"<blockquote>\n<p>Promise based HTTP client for the browser and node.js.（<code>axios</code> 是一个基于 <code>Promise</code> 的 <code>HTTP</code> 库，可以用在 <code>浏览器</code> 和 <code>node.js</code> 中。）</p>\n</blockquote>\n<p><a href=\"#install\">1. 安装</a><br><a href=\"#example\">2. 官网示例</a><br><a href=\"#apiIntro\">3. API 介绍</a><br><a href=\"#requestConfig\">4. 请求配置</a><br><a href=\"#response\">5. 响应结构</a><br><a href=\"#defaultConfig\">6. 默认配置</a><br><a href=\"#interceptors\">7. 拦截器</a><br><a href=\"#handleErr\">8. 错误处理</a><br><a href=\"#applicationForm\">9. 使用 application/x-www-form-urlencoded 格式的请求参数</a><br><a href=\"#notes\">10. 使用必看</a></p>\n<h4 id=\"1、安装\"><a href=\"#1、安装\" class=\"headerlink\" title=\"1、安装\"></a><a name=\"install\">1、安装</a></h4><ul>\n<li><p><code>使用 npm：</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install axios</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>使用 cdn：</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2、官方示例\"><a href=\"#2、官方示例\" class=\"headerlink\" title=\"2、官方示例\"></a><a name=\"example\">2、官方示例</a></h4><ul>\n<li><p><code>执行 GET 请求：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为给定 ID 的 user 创建请求</span></span><br><span class=\"line\">axios.get(<span class=\"string\">'/user?ID=12345'</span>)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同样的，上面的请求可以这样做</span></span><br><span class=\"line\">axios.get(<span class=\"string\">'/user'</span>, &#123;</span><br><span class=\"line\">  params: &#123;</span><br><span class=\"line\">    ID: <span class=\"number\">123</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>执行 POST 请求：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.post(<span class=\"string\">'/user'</span>, &#123;</span><br><span class=\"line\">  firstName: <span class=\"string\">'Fred'</span>,</span><br><span class=\"line\">  lastName: <span class=\"string\">'Flintstone'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>执行多个并发请求：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserAccount</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios.get(<span class=\"string\">'/user/12345'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserPermissions</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios.get(<span class=\"string\">'/user/12345/permissions'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class=\"line\">.then(axios.spread(<span class=\"function\">(<span class=\"params\">acct, perms</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 两个请求现在都执行完成</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"3、API-介绍\"><a href=\"#3、API-介绍\" class=\"headerlink\" title=\"3、API 介绍\"></a><a name=\"apiIntro\">3、API 介绍</a></h4><ul>\n<li><p><code>可以通过向 axios 传递相关配置来创建请求：</code></p>\n<p>axios(config)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送 POST 请求</span></span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  method: <span class=\"string\">'post'</span>,</span><br><span class=\"line\">  url: <span class=\"string\">'/user/12345'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'Fred'</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">'Flintstone'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET 请求远程图片</span></span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  method:<span class=\"string\">'get'</span>,</span><br><span class=\"line\">  url:<span class=\"string\">'http://bit.ly/2mTM3nY'</span>,</span><br><span class=\"line\">  responseType:<span class=\"string\">'stream'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">response.data.pipe(fs.createWriteStream(<span class=\"string\">'ada_lovelace.jpg'</span>))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>axios(url[, config])</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送 GET 请求（默认的方法）</span></span><br><span class=\"line\">axios(<span class=\"string\">'/user/12345'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>请求方法的别名：</code></p>\n<p>为方便起见，为所有支持的请求方法提供了别名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.request(config)</span><br><span class=\"line\">axios.get(url[, config])</span><br><span class=\"line\">axios.delete(url[, config])</span><br><span class=\"line\">axios.head(url[, config])</span><br><span class=\"line\">axios.post(url[, data[, config]])</span><br><span class=\"line\">axios.put(url[, data[, config]])</span><br><span class=\"line\">axios.patch(url[, data[, config]])</span><br></pre></td></tr></table></figure>\n<p>在使用别名方法时， url、method、data 这些属性都不必在配置中指定。</p>\n</li>\n<li><p><code>处理并发请求：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.all(iterable)</span><br><span class=\"line\">axios.spread(callback)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>创建 axios 实例：</code><br>可以使用自定义配置新建一个 axios 实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// axios.create([config])</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance = axios.create(&#123;</span><br><span class=\"line\">  baseURL: <span class=\"string\">'https://some-domain.com/api/'</span>,</span><br><span class=\"line\">  timeout: <span class=\"number\">1000</span>,</span><br><span class=\"line\">  headers: &#123;<span class=\"string\">'X-Custom-Header'</span>: <span class=\"string\">'foobar'</span>&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>实例的方法：</code>;<br>以下是可用的实例方法。指定的配置将与实例的配置合并</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios#request(config)</span><br><span class=\"line\">axios#get(url[, config])</span><br><span class=\"line\">axios#delete(url[, config])</span><br><span class=\"line\">axios#head(url[, config])</span><br><span class=\"line\">axios#post(url[, data[, config]])</span><br><span class=\"line\">axios#put(url[, data[, config]])</span><br><span class=\"line\">axios#patch(url[, data[, config]])</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"4、请求配置\"><a href=\"#4、请求配置\" class=\"headerlink\" title=\"4、请求配置\"></a><a name=\"requestConfig\">4、请求配置</a></h4><ul>\n<li><code>这些是创建请求时可以用的配置选项。只有 url 是必需的。如果没有指定 method，请求将默认使用 get 方法：</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// `url` 是用于请求的服务器 URL</span></span><br><span class=\"line\">  url: <span class=\"string\">'/user'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `method` 是创建请求时使用的方法</span></span><br><span class=\"line\">  method: <span class=\"string\">'get'</span>, <span class=\"comment\">// 默认是 get</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class=\"line\">  <span class=\"comment\">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class=\"line\">  baseURL: <span class=\"string\">'https://some-domain.com/api/'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class=\"line\">  <span class=\"comment\">// 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法</span></span><br><span class=\"line\">  <span class=\"comment\">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span></span><br><span class=\"line\">  transformRequest: [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对 data 进行任意转换处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class=\"line\">  transformResponse: [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对 data 进行任意转换处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `headers` 是即将被发送的自定义请求头</span></span><br><span class=\"line\">  headers: &#123;<span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span>&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `params` 是即将与请求一起发送的 URL 参数</span></span><br><span class=\"line\">  <span class=\"comment\">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span></span><br><span class=\"line\">  params: &#123;</span><br><span class=\"line\">    ID: <span class=\"number\">12345</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span></span><br><span class=\"line\">  <span class=\"comment\">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class=\"line\">  paramsSerializer: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Qs.stringify(params, &#123;<span class=\"attr\">arrayFormat</span>: <span class=\"string\">'brackets'</span>&#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `data` 是作为请求主体被发送的数据</span></span><br><span class=\"line\">  <span class=\"comment\">// 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'</span></span><br><span class=\"line\">  <span class=\"comment\">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span></span><br><span class=\"line\">  <span class=\"comment\">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class=\"line\">  <span class=\"comment\">// - 浏览器专属：FormData, File, Blob</span></span><br><span class=\"line\">  <span class=\"comment\">// - Node 专属： Stream</span></span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'Fred'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span></span><br><span class=\"line\">  timeout: <span class=\"number\">1000</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class=\"line\">  withCredentials: <span class=\"literal\">false</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `adapter` 允许自定义处理请求，以使测试更轻松</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span></span><br><span class=\"line\">  adapter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span></span><br><span class=\"line\">  <span class=\"comment\">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` ,</span></span><br><span class=\"line\">  <span class=\"comment\">// 设置的自定义 `Authorization`头</span></span><br><span class=\"line\">  auth: &#123;</span><br><span class=\"line\">    username: <span class=\"string\">'janedoe'</span>,</span><br><span class=\"line\">    password: <span class=\"string\">'s00pers3cret'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `responseType` 表示服务器响应的数据类型，</span></span><br><span class=\"line\">  <span class=\"comment\">// 可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span></span><br><span class=\"line\">  responseType: <span class=\"string\">'json'</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span></span><br><span class=\"line\">  xsrfCookieName: <span class=\"string\">'XSRF-TOKEN'</span>, <span class=\"comment\">// default</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称</span></span><br><span class=\"line\">  xsrfHeaderName: <span class=\"string\">'X-XSRF-TOKEN'</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class=\"line\">  onUploadProgress: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">progressEvent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对原生进度事件的处理</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class=\"line\">  onDownloadProgress: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">progressEvent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对原生进度事件的处理</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `maxContentLength` 定义允许的响应内容的最大尺寸</span></span><br><span class=\"line\">  maxContentLength: <span class=\"number\">2000</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，</span></span><br><span class=\"line\">  <span class=\"comment\">// promise 将被 resolve; 否则，promise 将被 rejecte</span></span><br><span class=\"line\">  validateStatus: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status &gt;= <span class=\"number\">200</span> &amp;&amp; status &lt; <span class=\"number\">300</span>; <span class=\"comment\">// 默认的</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果设置为0，将不会 follow 任何重定向</span></span><br><span class=\"line\">  maxRedirects: <span class=\"number\">5</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。</span></span><br><span class=\"line\">  <span class=\"comment\">// 允许像这样配置选项：</span></span><br><span class=\"line\">  <span class=\"comment\">// `keepAlive` 默认没有启用</span></span><br><span class=\"line\">  httpAgent: <span class=\"keyword\">new</span> http.Agent(&#123; <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> &#125;),</span><br><span class=\"line\">  httpsAgent: <span class=\"keyword\">new</span> https.Agent(&#123; <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 'proxy' 定义代理服务器的主机名称和端口</span></span><br><span class=\"line\">  <span class=\"comment\">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span></span><br><span class=\"line\">  <span class=\"comment\">// 这将会设置一个 `Proxy-Authorization` 头，</span></span><br><span class=\"line\">  <span class=\"comment\">// 覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span></span><br><span class=\"line\">  proxy: &#123;</span><br><span class=\"line\">    host: <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">    port: <span class=\"number\">9000</span>,</span><br><span class=\"line\">    auth: : &#123;</span><br><span class=\"line\">      username: <span class=\"string\">'mikeymike'</span>,</span><br><span class=\"line\">      password: <span class=\"string\">'rapunz3l'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `cancelToken` 指定用于取消请求的 cancel token</span></span><br><span class=\"line\">  <span class=\"comment\">// （查看后面的 Cancellation 这节了解更多）</span></span><br><span class=\"line\">  cancelToken: <span class=\"keyword\">new</span> CancelToken(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cancel</span>) </span>&#123;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5、响应结构\"><a href=\"#5、响应结构\" class=\"headerlink\" title=\"5、响应结构\"></a><a name=\"response\">5、响应结构</a></h4><ul>\n<li><p><code>某个请求的响应包含以下信息：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// `data` 由服务器提供的响应</span></span><br><span class=\"line\">  data: &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class=\"line\">  status: <span class=\"number\">200</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class=\"line\">  statusText: <span class=\"string\">'OK'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `headers` 服务器响应的头</span></span><br><span class=\"line\">  headers: &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `config` 是为请求提供的配置信息</span></span><br><span class=\"line\">  config: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 then 时，你将接收下面这样的响应：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.data);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.status);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.statusText);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.headers);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.config);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"6、默认配置\"><a href=\"#6、默认配置\" class=\"headerlink\" title=\"6、默认配置\"></a><a name=\"#defaultConfig\">6、默认配置</a></h4><blockquote>\n<p>指定将被用在各个请求的配置默认值</p>\n</blockquote>\n<ul>\n<li><p><code>axios 全局默认值：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.defaults.baseURL = <span class=\"string\">'https://api.example.com'</span>;</span><br><span class=\"line\">axios.defaults.headers.common[<span class=\"string\">'Authorization'</span>] = AUTH_TOKEN;</span><br><span class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded'</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>自定义实例的默认值：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1、创建实例时设置配置的默认值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance = axios.create(&#123;</span><br><span class=\"line\">  baseURL: <span class=\"string\">'https://api.example.com'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2、在实例已创建后修改默认值</span></span><br><span class=\"line\">instance.defaults.headers.common[<span class=\"string\">'Authorization'</span>] = AUTH_TOKEN;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>配置的优先顺序:</code><br>配置会以一个优先顺序进行合并。这个顺序是：在 lib/defaults.js 找到的库的默认值，然后是实例的 defaults 属性，最后是请求的 config 参数。后者将优先于前者。这里是一个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用由库提供的配置的默认值来创建实例</span></span><br><span class=\"line\"><span class=\"comment\">// 此时超时配置的默认值是 `0`</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance = axios.create();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 覆写库的超时默认值</span></span><br><span class=\"line\"><span class=\"comment\">// 现在，在超时前，所有请求都会等待 2.5 秒</span></span><br><span class=\"line\">instance.defaults.timeout = <span class=\"number\">2500</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为已知需要花费很长时间的请求覆写超时设置</span></span><br><span class=\"line\">instance.get(<span class=\"string\">'/longRequest'</span>, &#123;</span><br><span class=\"line\">  timeout: <span class=\"number\">5000</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"7、拦截器\"><a href=\"#7、拦截器\" class=\"headerlink\" title=\"7、拦截器\"></a><a name=\"interceptors\">7、拦截器</a></h4><ul>\n<li><p><code>在请求或响应被 then 或 catch 处理前拦截它们：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加请求拦截器</span></span><br><span class=\"line\">axios.interceptors.request.use(<span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在发送请求之前做些什么</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;, (error) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对请求错误做些什么</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加响应拦截器</span></span><br><span class=\"line\">axios.interceptors.response.use(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对响应数据做点什么</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;, (error) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对响应错误做点什么</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>如果你想在稍后移除拦截器，可以这样：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用拦截器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myInterceptor = axios.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/*...*/</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除拦截器</span></span><br><span class=\"line\">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>可以为自定义 axios 实例添加拦截器：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> instance = axios.create();</span><br><span class=\"line\">instance.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/*...*/</span>&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"8、错误处理\"><a href=\"#8、错误处理\" class=\"headerlink\" title=\"8、错误处理\"></a><a name=\"handleErr\">8、错误处理</a></h4><ul>\n<li><p><code>常见的错误处理方式：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error.response) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 请求已发出，但服务器响应的状态码不在 2xx 范围内</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error.response.data);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error.response.status);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error.response.headers);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Something happened in setting up the request that triggered an Error</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error'</span>, error.message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error.config);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>可以使用 validateStatus 配置选项定义一个自定义 HTTP 状态码的错误范围：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>, &#123;</span><br><span class=\"line\">  validateStatus: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status &lt; <span class=\"number\">500</span>; <span class=\"comment\">// 状态码在大于或等于500时才会 reject</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"9、使用-application-x-www-form-urlencoded-格式的请求参数\"><a href=\"#9、使用-application-x-www-form-urlencoded-格式的请求参数\" class=\"headerlink\" title=\"9、使用 application/x-www-form-urlencoded 格式的请求参数\"></a><a name=\"applicationForm\">9、使用 <code>application/x-www-form-urlencoded</code> 格式的请求参数</a></h4><blockquote>\n<p>默认情况下，axios将JavaScript对象序列化为JSON，即 <code>application/json</code> 。要以 <code>application/x-www-form-urlencoded</code> 格式发送数据，您可以使用以下选项之一。</p>\n</blockquote>\n<ul>\n<li><p><code>浏览器</code><br>在浏览器中，您可以使用URLSearchParams API，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> params = <span class=\"keyword\">new</span> URLSearchParams();</span><br><span class=\"line\">params.append(<span class=\"string\">'param1'</span>, <span class=\"string\">'value1'</span>);</span><br><span class=\"line\">params.append(<span class=\"string\">'param2'</span>, <span class=\"string\">'value2'</span>);</span><br><span class=\"line\">axios.post(<span class=\"string\">'/foo'</span>, params);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 值得注意的是，并不是所有的浏览器都支持 `URLSearchParams`，</span></span><br><span class=\"line\"><span class=\"comment\">// 但是可以借助 `polyfill` 来解决</span></span><br></pre></td></tr></table></figure>\n<p>也可以使用 <a href=\"https://github.com/ljharb/qs\" target=\"_blank\" rel=\"noopener\"><code>qs</code></a> 库来编码请求参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> qs = <span class=\"keyword\">import</span> <span class=\"string\">'qs'</span>;</span><br><span class=\"line\">axios.post(<span class=\"string\">'/foo'</span>, qs.stringify(&#123; <span class=\"string\">'bar'</span>: <span class=\"number\">123</span> &#125;));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Node.js</code><br>在 <code>node.js</code> 中，可以使用 <a href=\"https://nodejs.org/api/querystring.html\" target=\"_blank\" rel=\"noopener\"><code>querystring</code></a> 模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"keyword\">import</span> <span class=\"string\">'querystring'</span>;</span><br><span class=\"line\">axios.post(<span class=\"string\">'http://something.com/'</span>, querystring.stringify(&#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span> &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当然也可以使用 `qs` 库</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"10、使用必看\"><a href=\"#10、使用必看\" class=\"headerlink\" title=\"10、使用必看\"></a><a name=\"notes\">10、使用必看</a></h4><ul>\n<li><p><code>更新说明：</code><br>在axios达到1.0版本之前，重大更改将以新的次要版本发布。例如0.5.1和0.5.4将具有相同的API，但0.6.0将具有重大变化。</p>\n</li>\n<li><p><code>Promise：</code><br>axios依赖于原生ES6 <code>Promise</code> 实现的支持。如果您的环境不支持ES6 Promise，则可以使用 <a href=\"https://github.com/stefanpenner/es6-promise\" target=\"_blank\" rel=\"noopener\">polyfill</a>。</p>\n</li>\n</ul>\n<p style=\"text-align: right\">参考文档 <a href=\"https://www.npmjs.com/package/axios\" target=\"_blank\" rel=\"noopener\">axios</a></p>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Promise based HTTP client for the browser and node.js.（<code>axios</code> 是一个基于 <code>Promise</code> 的 <code>HTTP</code> 库，可以用在 <code>浏览器</code> 和 <code>node.js</code> 中。）</p>\n</blockquote>\n<p><a href=\"#install\">1. 安装</a><br><a href=\"#example\">2. 官网示例</a><br><a href=\"#apiIntro\">3. API 介绍</a><br><a href=\"#requestConfig\">4. 请求配置</a><br><a href=\"#response\">5. 响应结构</a><br><a href=\"#defaultConfig\">6. 默认配置</a><br><a href=\"#interceptors\">7. 拦截器</a><br><a href=\"#handleErr\">8. 错误处理</a><br><a href=\"#applicationForm\">9. 使用 application/x-www-form-urlencoded 格式的请求参数</a><br><a href=\"#notes\">10. 使用必看</a></p>\n<h4 id=\"1、安装\"><a href=\"#1、安装\" class=\"headerlink\" title=\"1、安装\"></a><a name=\"install\">1、安装</a></h4><ul>\n<li><p><code>使用 npm：</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install axios</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>使用 cdn：</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2、官方示例\"><a href=\"#2、官方示例\" class=\"headerlink\" title=\"2、官方示例\"></a><a name=\"example\">2、官方示例</a></h4><ul>\n<li><p><code>执行 GET 请求：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为给定 ID 的 user 创建请求</span></span><br><span class=\"line\">axios.get(<span class=\"string\">'/user?ID=12345'</span>)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同样的，上面的请求可以这样做</span></span><br><span class=\"line\">axios.get(<span class=\"string\">'/user'</span>, &#123;</span><br><span class=\"line\">  params: &#123;</span><br><span class=\"line\">    ID: <span class=\"number\">123</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>执行 POST 请求：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.post(<span class=\"string\">'/user'</span>, &#123;</span><br><span class=\"line\">  firstName: <span class=\"string\">'Fred'</span>,</span><br><span class=\"line\">  lastName: <span class=\"string\">'Flintstone'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>执行多个并发请求：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserAccount</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios.get(<span class=\"string\">'/user/12345'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserPermissions</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios.get(<span class=\"string\">'/user/12345/permissions'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class=\"line\">.then(axios.spread(<span class=\"function\">(<span class=\"params\">acct, perms</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 两个请求现在都执行完成</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"3、API-介绍\"><a href=\"#3、API-介绍\" class=\"headerlink\" title=\"3、API 介绍\"></a><a name=\"apiIntro\">3、API 介绍</a></h4><ul>\n<li><p><code>可以通过向 axios 传递相关配置来创建请求：</code></p>\n<p>axios(config)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送 POST 请求</span></span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  method: <span class=\"string\">'post'</span>,</span><br><span class=\"line\">  url: <span class=\"string\">'/user/12345'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'Fred'</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">'Flintstone'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET 请求远程图片</span></span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  method:<span class=\"string\">'get'</span>,</span><br><span class=\"line\">  url:<span class=\"string\">'http://bit.ly/2mTM3nY'</span>,</span><br><span class=\"line\">  responseType:<span class=\"string\">'stream'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">response.data.pipe(fs.createWriteStream(<span class=\"string\">'ada_lovelace.jpg'</span>))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>axios(url[, config])</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送 GET 请求（默认的方法）</span></span><br><span class=\"line\">axios(<span class=\"string\">'/user/12345'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>请求方法的别名：</code></p>\n<p>为方便起见，为所有支持的请求方法提供了别名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.request(config)</span><br><span class=\"line\">axios.get(url[, config])</span><br><span class=\"line\">axios.delete(url[, config])</span><br><span class=\"line\">axios.head(url[, config])</span><br><span class=\"line\">axios.post(url[, data[, config]])</span><br><span class=\"line\">axios.put(url[, data[, config]])</span><br><span class=\"line\">axios.patch(url[, data[, config]])</span><br></pre></td></tr></table></figure>\n<p>在使用别名方法时， url、method、data 这些属性都不必在配置中指定。</p>\n</li>\n<li><p><code>处理并发请求：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.all(iterable)</span><br><span class=\"line\">axios.spread(callback)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>创建 axios 实例：</code><br>可以使用自定义配置新建一个 axios 实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// axios.create([config])</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance = axios.create(&#123;</span><br><span class=\"line\">  baseURL: <span class=\"string\">'https://some-domain.com/api/'</span>,</span><br><span class=\"line\">  timeout: <span class=\"number\">1000</span>,</span><br><span class=\"line\">  headers: &#123;<span class=\"string\">'X-Custom-Header'</span>: <span class=\"string\">'foobar'</span>&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>实例的方法：</code>;<br>以下是可用的实例方法。指定的配置将与实例的配置合并</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios#request(config)</span><br><span class=\"line\">axios#get(url[, config])</span><br><span class=\"line\">axios#delete(url[, config])</span><br><span class=\"line\">axios#head(url[, config])</span><br><span class=\"line\">axios#post(url[, data[, config]])</span><br><span class=\"line\">axios#put(url[, data[, config]])</span><br><span class=\"line\">axios#patch(url[, data[, config]])</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"4、请求配置\"><a href=\"#4、请求配置\" class=\"headerlink\" title=\"4、请求配置\"></a><a name=\"requestConfig\">4、请求配置</a></h4><ul>\n<li><code>这些是创建请求时可以用的配置选项。只有 url 是必需的。如果没有指定 method，请求将默认使用 get 方法：</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// `url` 是用于请求的服务器 URL</span></span><br><span class=\"line\">  url: <span class=\"string\">'/user'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `method` 是创建请求时使用的方法</span></span><br><span class=\"line\">  method: <span class=\"string\">'get'</span>, <span class=\"comment\">// 默认是 get</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class=\"line\">  <span class=\"comment\">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class=\"line\">  baseURL: <span class=\"string\">'https://some-domain.com/api/'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class=\"line\">  <span class=\"comment\">// 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法</span></span><br><span class=\"line\">  <span class=\"comment\">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span></span><br><span class=\"line\">  transformRequest: [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对 data 进行任意转换处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class=\"line\">  transformResponse: [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对 data 进行任意转换处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `headers` 是即将被发送的自定义请求头</span></span><br><span class=\"line\">  headers: &#123;<span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span>&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `params` 是即将与请求一起发送的 URL 参数</span></span><br><span class=\"line\">  <span class=\"comment\">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span></span><br><span class=\"line\">  params: &#123;</span><br><span class=\"line\">    ID: <span class=\"number\">12345</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span></span><br><span class=\"line\">  <span class=\"comment\">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class=\"line\">  paramsSerializer: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Qs.stringify(params, &#123;<span class=\"attr\">arrayFormat</span>: <span class=\"string\">'brackets'</span>&#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `data` 是作为请求主体被发送的数据</span></span><br><span class=\"line\">  <span class=\"comment\">// 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'</span></span><br><span class=\"line\">  <span class=\"comment\">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span></span><br><span class=\"line\">  <span class=\"comment\">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class=\"line\">  <span class=\"comment\">// - 浏览器专属：FormData, File, Blob</span></span><br><span class=\"line\">  <span class=\"comment\">// - Node 专属： Stream</span></span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'Fred'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span></span><br><span class=\"line\">  timeout: <span class=\"number\">1000</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class=\"line\">  withCredentials: <span class=\"literal\">false</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `adapter` 允许自定义处理请求，以使测试更轻松</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span></span><br><span class=\"line\">  adapter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span></span><br><span class=\"line\">  <span class=\"comment\">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` ,</span></span><br><span class=\"line\">  <span class=\"comment\">// 设置的自定义 `Authorization`头</span></span><br><span class=\"line\">  auth: &#123;</span><br><span class=\"line\">    username: <span class=\"string\">'janedoe'</span>,</span><br><span class=\"line\">    password: <span class=\"string\">'s00pers3cret'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `responseType` 表示服务器响应的数据类型，</span></span><br><span class=\"line\">  <span class=\"comment\">// 可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span></span><br><span class=\"line\">  responseType: <span class=\"string\">'json'</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span></span><br><span class=\"line\">  xsrfCookieName: <span class=\"string\">'XSRF-TOKEN'</span>, <span class=\"comment\">// default</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称</span></span><br><span class=\"line\">  xsrfHeaderName: <span class=\"string\">'X-XSRF-TOKEN'</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class=\"line\">  onUploadProgress: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">progressEvent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对原生进度事件的处理</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class=\"line\">  onDownloadProgress: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">progressEvent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对原生进度事件的处理</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `maxContentLength` 定义允许的响应内容的最大尺寸</span></span><br><span class=\"line\">  maxContentLength: <span class=\"number\">2000</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，</span></span><br><span class=\"line\">  <span class=\"comment\">// promise 将被 resolve; 否则，promise 将被 rejecte</span></span><br><span class=\"line\">  validateStatus: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status &gt;= <span class=\"number\">200</span> &amp;&amp; status &lt; <span class=\"number\">300</span>; <span class=\"comment\">// 默认的</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果设置为0，将不会 follow 任何重定向</span></span><br><span class=\"line\">  maxRedirects: <span class=\"number\">5</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。</span></span><br><span class=\"line\">  <span class=\"comment\">// 允许像这样配置选项：</span></span><br><span class=\"line\">  <span class=\"comment\">// `keepAlive` 默认没有启用</span></span><br><span class=\"line\">  httpAgent: <span class=\"keyword\">new</span> http.Agent(&#123; <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> &#125;),</span><br><span class=\"line\">  httpsAgent: <span class=\"keyword\">new</span> https.Agent(&#123; <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 'proxy' 定义代理服务器的主机名称和端口</span></span><br><span class=\"line\">  <span class=\"comment\">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span></span><br><span class=\"line\">  <span class=\"comment\">// 这将会设置一个 `Proxy-Authorization` 头，</span></span><br><span class=\"line\">  <span class=\"comment\">// 覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span></span><br><span class=\"line\">  proxy: &#123;</span><br><span class=\"line\">    host: <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">    port: <span class=\"number\">9000</span>,</span><br><span class=\"line\">    auth: : &#123;</span><br><span class=\"line\">      username: <span class=\"string\">'mikeymike'</span>,</span><br><span class=\"line\">      password: <span class=\"string\">'rapunz3l'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `cancelToken` 指定用于取消请求的 cancel token</span></span><br><span class=\"line\">  <span class=\"comment\">// （查看后面的 Cancellation 这节了解更多）</span></span><br><span class=\"line\">  cancelToken: <span class=\"keyword\">new</span> CancelToken(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cancel</span>) </span>&#123;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5、响应结构\"><a href=\"#5、响应结构\" class=\"headerlink\" title=\"5、响应结构\"></a><a name=\"response\">5、响应结构</a></h4><ul>\n<li><p><code>某个请求的响应包含以下信息：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// `data` 由服务器提供的响应</span></span><br><span class=\"line\">  data: &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class=\"line\">  status: <span class=\"number\">200</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class=\"line\">  statusText: <span class=\"string\">'OK'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `headers` 服务器响应的头</span></span><br><span class=\"line\">  headers: &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `config` 是为请求提供的配置信息</span></span><br><span class=\"line\">  config: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 then 时，你将接收下面这样的响应：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.data);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.status);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.statusText);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.headers);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.config);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"6、默认配置\"><a href=\"#6、默认配置\" class=\"headerlink\" title=\"6、默认配置\"></a><a name=\"#defaultConfig\">6、默认配置</a></h4><blockquote>\n<p>指定将被用在各个请求的配置默认值</p>\n</blockquote>\n<ul>\n<li><p><code>axios 全局默认值：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.defaults.baseURL = <span class=\"string\">'https://api.example.com'</span>;</span><br><span class=\"line\">axios.defaults.headers.common[<span class=\"string\">'Authorization'</span>] = AUTH_TOKEN;</span><br><span class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded'</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>自定义实例的默认值：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1、创建实例时设置配置的默认值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance = axios.create(&#123;</span><br><span class=\"line\">  baseURL: <span class=\"string\">'https://api.example.com'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2、在实例已创建后修改默认值</span></span><br><span class=\"line\">instance.defaults.headers.common[<span class=\"string\">'Authorization'</span>] = AUTH_TOKEN;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>配置的优先顺序:</code><br>配置会以一个优先顺序进行合并。这个顺序是：在 lib/defaults.js 找到的库的默认值，然后是实例的 defaults 属性，最后是请求的 config 参数。后者将优先于前者。这里是一个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用由库提供的配置的默认值来创建实例</span></span><br><span class=\"line\"><span class=\"comment\">// 此时超时配置的默认值是 `0`</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance = axios.create();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 覆写库的超时默认值</span></span><br><span class=\"line\"><span class=\"comment\">// 现在，在超时前，所有请求都会等待 2.5 秒</span></span><br><span class=\"line\">instance.defaults.timeout = <span class=\"number\">2500</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为已知需要花费很长时间的请求覆写超时设置</span></span><br><span class=\"line\">instance.get(<span class=\"string\">'/longRequest'</span>, &#123;</span><br><span class=\"line\">  timeout: <span class=\"number\">5000</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"7、拦截器\"><a href=\"#7、拦截器\" class=\"headerlink\" title=\"7、拦截器\"></a><a name=\"interceptors\">7、拦截器</a></h4><ul>\n<li><p><code>在请求或响应被 then 或 catch 处理前拦截它们：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加请求拦截器</span></span><br><span class=\"line\">axios.interceptors.request.use(<span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在发送请求之前做些什么</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;, (error) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对请求错误做些什么</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加响应拦截器</span></span><br><span class=\"line\">axios.interceptors.response.use(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对响应数据做点什么</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;, (error) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对响应错误做点什么</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>如果你想在稍后移除拦截器，可以这样：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用拦截器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myInterceptor = axios.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/*...*/</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除拦截器</span></span><br><span class=\"line\">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>可以为自定义 axios 实例添加拦截器：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> instance = axios.create();</span><br><span class=\"line\">instance.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/*...*/</span>&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"8、错误处理\"><a href=\"#8、错误处理\" class=\"headerlink\" title=\"8、错误处理\"></a><a name=\"handleErr\">8、错误处理</a></h4><ul>\n<li><p><code>常见的错误处理方式：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error.response) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 请求已发出，但服务器响应的状态码不在 2xx 范围内</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error.response.data);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error.response.status);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error.response.headers);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Something happened in setting up the request that triggered an Error</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error'</span>, error.message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error.config);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>可以使用 validateStatus 配置选项定义一个自定义 HTTP 状态码的错误范围：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>, &#123;</span><br><span class=\"line\">  validateStatus: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status &lt; <span class=\"number\">500</span>; <span class=\"comment\">// 状态码在大于或等于500时才会 reject</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"9、使用-application-x-www-form-urlencoded-格式的请求参数\"><a href=\"#9、使用-application-x-www-form-urlencoded-格式的请求参数\" class=\"headerlink\" title=\"9、使用 application/x-www-form-urlencoded 格式的请求参数\"></a><a name=\"applicationForm\">9、使用 <code>application/x-www-form-urlencoded</code> 格式的请求参数</a></h4><blockquote>\n<p>默认情况下，axios将JavaScript对象序列化为JSON，即 <code>application/json</code> 。要以 <code>application/x-www-form-urlencoded</code> 格式发送数据，您可以使用以下选项之一。</p>\n</blockquote>\n<ul>\n<li><p><code>浏览器</code><br>在浏览器中，您可以使用URLSearchParams API，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> params = <span class=\"keyword\">new</span> URLSearchParams();</span><br><span class=\"line\">params.append(<span class=\"string\">'param1'</span>, <span class=\"string\">'value1'</span>);</span><br><span class=\"line\">params.append(<span class=\"string\">'param2'</span>, <span class=\"string\">'value2'</span>);</span><br><span class=\"line\">axios.post(<span class=\"string\">'/foo'</span>, params);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 值得注意的是，并不是所有的浏览器都支持 `URLSearchParams`，</span></span><br><span class=\"line\"><span class=\"comment\">// 但是可以借助 `polyfill` 来解决</span></span><br></pre></td></tr></table></figure>\n<p>也可以使用 <a href=\"https://github.com/ljharb/qs\" target=\"_blank\" rel=\"noopener\"><code>qs</code></a> 库来编码请求参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> qs = <span class=\"keyword\">import</span> <span class=\"string\">'qs'</span>;</span><br><span class=\"line\">axios.post(<span class=\"string\">'/foo'</span>, qs.stringify(&#123; <span class=\"string\">'bar'</span>: <span class=\"number\">123</span> &#125;));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Node.js</code><br>在 <code>node.js</code> 中，可以使用 <a href=\"https://nodejs.org/api/querystring.html\" target=\"_blank\" rel=\"noopener\"><code>querystring</code></a> 模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"keyword\">import</span> <span class=\"string\">'querystring'</span>;</span><br><span class=\"line\">axios.post(<span class=\"string\">'http://something.com/'</span>, querystring.stringify(&#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span> &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当然也可以使用 `qs` 库</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"10、使用必看\"><a href=\"#10、使用必看\" class=\"headerlink\" title=\"10、使用必看\"></a><a name=\"notes\">10、使用必看</a></h4><ul>\n<li><p><code>更新说明：</code><br>在axios达到1.0版本之前，重大更改将以新的次要版本发布。例如0.5.1和0.5.4将具有相同的API，但0.6.0将具有重大变化。</p>\n</li>\n<li><p><code>Promise：</code><br>axios依赖于原生ES6 <code>Promise</code> 实现的支持。如果您的环境不支持ES6 Promise，则可以使用 <a href=\"https://github.com/stefanpenner/es6-promise\" target=\"_blank\" rel=\"noopener\">polyfill</a>。</p>\n</li>\n</ul>\n<p style=\"text-align: right\">参考文档 <a href=\"https://www.npmjs.com/package/axios\" target=\"_blank\" rel=\"noopener\">axios</a></p>"},{"id":"0809021","title":"理解 this 之 call, apply, bind","date":"2018-03-09T07:30:49.000Z","_content":"\n> 首先，`call`，`apply`，`bind` 他们是为了解决哪些问题的呢？","source":"_posts/0809021_理解this之call-apply-bind.md","raw":"---\nid: 0809021\ntitle: 理解 this 之 call, apply, bind\ndate: 2018-03-09 15:30:49\ntags:\n    - JavaScript\ncategories:\n---\n\n> 首先，`call`，`apply`，`bind` 他们是为了解决哪些问题的呢？","slug":"0809021_理解this之call-apply-bind","published":1,"updated":"2018-03-12T03:49:20.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc1g000x9oc0mu4pvq4v","content":"<blockquote>\n<p>首先，<code>call</code>，<code>apply</code>，<code>bind</code> 他们是为了解决哪些问题的呢？</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>首先，<code>call</code>，<code>apply</code>，<code>bind</code> 他们是为了解决哪些问题的呢？</p>\n</blockquote>\n"},{"id":"0809018","title":"在 hexo 中配置 swiftype 搜索系统","date":"2018-03-05T09:23:37.000Z","_content":"\n- 进入[swiftype](https://swiftype.com/)官网：\n<!-- ![swiftype](/images/swiftype.png) -->\n<img src=\"/images/swiftype.png\" class=\"preview\">\n完成注册后，我们进入到[概览](https://app.swiftype.com/engines/blog/overview)页面，进入到overview页面后，点击`Install Swiftype On Your Website`，我们会看到如图的两段代码，分别是搜索文本框和脚本，我们可以将文本框放在任何位置自己喜欢的位置，脚本也是如此，这个swiftype并没有任何限制：\n<img src=\"/images/swiftype1.png\" class=\"preview\">\n\n- 当在输入框输入时，会异步搜索文章并显示搜索推荐\n<img src=\"/images/swiftype2.png\" class=\"preview\">\n点击回车，会弹出一个稍大的窗口\n<img src=\"/images/swiftype3.png\" class=\"preview\">\n\n","source":"_posts/0809018_在hexo中配置swiftype搜索系统.md","raw":"---\nid: 0809018\ntitle: 在 hexo 中配置 swiftype 搜索系统\ndate: 2018-03-05 17:23:37\ntags:\n    - swiftype\n    - JavaScript\ncategories:\n---\n\n- 进入[swiftype](https://swiftype.com/)官网：\n<!-- ![swiftype](/images/swiftype.png) -->\n<img src=\"/images/swiftype.png\" class=\"preview\">\n完成注册后，我们进入到[概览](https://app.swiftype.com/engines/blog/overview)页面，进入到overview页面后，点击`Install Swiftype On Your Website`，我们会看到如图的两段代码，分别是搜索文本框和脚本，我们可以将文本框放在任何位置自己喜欢的位置，脚本也是如此，这个swiftype并没有任何限制：\n<img src=\"/images/swiftype1.png\" class=\"preview\">\n\n- 当在输入框输入时，会异步搜索文章并显示搜索推荐\n<img src=\"/images/swiftype2.png\" class=\"preview\">\n点击回车，会弹出一个稍大的窗口\n<img src=\"/images/swiftype3.png\" class=\"preview\">\n\n","slug":"0809018_在hexo中配置swiftype搜索系统","published":1,"updated":"2018-03-09T08:32:31.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc1g000z9oc0zviykgdr","content":"<ul>\n<li><p>进入<a href=\"https://swiftype.com/\" target=\"_blank\" rel=\"noopener\">swiftype</a>官网：</p>\n<!-- ![swiftype](/images/swiftype.png) -->\n<p><img src=\"/images/swiftype.png\" class=\"preview\"><br>完成注册后，我们进入到<a href=\"https://app.swiftype.com/engines/blog/overview\" target=\"_blank\" rel=\"noopener\">概览</a>页面，进入到overview页面后，点击<code>Install Swiftype On Your Website</code>，我们会看到如图的两段代码，分别是搜索文本框和脚本，我们可以将文本框放在任何位置自己喜欢的位置，脚本也是如此，这个swiftype并没有任何限制：<br><img src=\"/images/swiftype1.png\" class=\"preview\"></p>\n</li>\n<li><p>当在输入框输入时，会异步搜索文章并显示搜索推荐<br><img src=\"/images/swiftype2.png\" class=\"preview\"><br>点击回车，会弹出一个稍大的窗口<br><img src=\"/images/swiftype3.png\" class=\"preview\"></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>进入<a href=\"https://swiftype.com/\" target=\"_blank\" rel=\"noopener\">swiftype</a>官网：</p>\n<!-- ![swiftype](/images/swiftype.png) -->\n<p><img src=\"/images/swiftype.png\" class=\"preview\"><br>完成注册后，我们进入到<a href=\"https://app.swiftype.com/engines/blog/overview\" target=\"_blank\" rel=\"noopener\">概览</a>页面，进入到overview页面后，点击<code>Install Swiftype On Your Website</code>，我们会看到如图的两段代码，分别是搜索文本框和脚本，我们可以将文本框放在任何位置自己喜欢的位置，脚本也是如此，这个swiftype并没有任何限制：<br><img src=\"/images/swiftype1.png\" class=\"preview\"></p>\n</li>\n<li><p>当在输入框输入时，会异步搜索文章并显示搜索推荐<br><img src=\"/images/swiftype2.png\" class=\"preview\"><br>点击回车，会弹出一个稍大的窗口<br><img src=\"/images/swiftype3.png\" class=\"preview\"></p>\n</li>\n</ul>\n"},{"id":"0809023","title":"什么是JavaScript严格模式","date":"2018-03-09T08:17:23.000Z","_content":"","source":"_posts/0809023_什么是JavaScript严格模式.md","raw":"---\nid: 0809023\ntitle: 什么是JavaScript严格模式\ndate: 2018-03-09 16:17:23\ntags:\ncategories:\n---\n","slug":"0809023_什么是JavaScript严格模式","published":1,"updated":"2018-03-15T09:09:10.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc1v00119oc04urhesrt","content":"","site":{"data":{}},"excerpt":"","more":""},{"id":"0809022","title":"JavaScript 闭包 (Closure)","date":"2018-03-09T08:16:25.000Z","_content":"","source":"_posts/0809022_JavaScript闭包-Closure.md","raw":"---\nid: 0809022\ntitle: JavaScript 闭包 (Closure)\ndate: 2018-03-09 16:16:25\ntags:\ncategories:\n---\n","slug":"0809022_JavaScript闭包-Closure","published":1,"updated":"2018-03-12T03:49:31.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc1v00149oc0xa86iay9","content":"","site":{"data":{}},"excerpt":"","more":""},{"id":"0809016","title":"获取 JSON 的 key","date":"2018-03-05T02:56:54.000Z","_content":"\n```javascript\nvar obj = { name: \"naruto\", age: 23, dad: \"minato\"}\n\n```\n- 使用 `for in` 来循环：\n\n```javascript\nfor (var key in obj){\n    console.log(key) // 依次输出 \"name\", \"age\", \"dad\"\n}\n```\n这种方法比较常见，相信大家看到这个问题时第一时间都会想到吧，但是我要介绍的是下面这个更简单的方法。\n- 使用 `Object.keys()` 来获取 :\n\n```javascript\n- console.log( Object.keys(obj) ) // 输出一个数组 [\"name\", \"age\", \"dad\"]\n// 所以, 当我们需要某个key值时可以从当前数组中取得。\n```\n","source":"_posts/0809016_获取JSON的key.md","raw":"---\nid: 0809016\ntitle: 获取 JSON 的 key\ndate: 2018-03-05 10:56:54\ntags:\n    - json\n    - JavaScript\ncategories:\n---\n\n```javascript\nvar obj = { name: \"naruto\", age: 23, dad: \"minato\"}\n\n```\n- 使用 `for in` 来循环：\n\n```javascript\nfor (var key in obj){\n    console.log(key) // 依次输出 \"name\", \"age\", \"dad\"\n}\n```\n这种方法比较常见，相信大家看到这个问题时第一时间都会想到吧，但是我要介绍的是下面这个更简单的方法。\n- 使用 `Object.keys()` 来获取 :\n\n```javascript\n- console.log( Object.keys(obj) ) // 输出一个数组 [\"name\", \"age\", \"dad\"]\n// 所以, 当我们需要某个key值时可以从当前数组中取得。\n```\n","slug":"0809016_获取JSON的key","published":1,"updated":"2018-03-09T08:18:44.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc1v00159oc048tbkijg","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"naruto\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">23</span>, <span class=\"attr\">dad</span>: <span class=\"string\">\"minato\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 <code>for in</code> 来循环：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key) <span class=\"comment\">// 依次输出 \"name\", \"age\", \"dad\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法比较常见，相信大家看到这个问题时第一时间都会想到吧，但是我要介绍的是下面这个更简单的方法。</p>\n<ul>\n<li>使用 <code>Object.keys()</code> 来获取 :</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"built_in\">console</span>.log( <span class=\"built_in\">Object</span>.keys(obj) ) <span class=\"comment\">// 输出一个数组 [\"name\", \"age\", \"dad\"]</span></span><br><span class=\"line\"><span class=\"comment\">// 所以, 当我们需要某个key值时可以从当前数组中取得。</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"naruto\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">23</span>, <span class=\"attr\">dad</span>: <span class=\"string\">\"minato\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 <code>for in</code> 来循环：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key) <span class=\"comment\">// 依次输出 \"name\", \"age\", \"dad\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法比较常见，相信大家看到这个问题时第一时间都会想到吧，但是我要介绍的是下面这个更简单的方法。</p>\n<ul>\n<li>使用 <code>Object.keys()</code> 来获取 :</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"built_in\">console</span>.log( <span class=\"built_in\">Object</span>.keys(obj) ) <span class=\"comment\">// 输出一个数组 [\"name\", \"age\", \"dad\"]</span></span><br><span class=\"line\"><span class=\"comment\">// 所以, 当我们需要某个key值时可以从当前数组中取得。</span></span><br></pre></td></tr></table></figure>\n"},{"id":"0809012","title":"常用的  Vim命令","date":"2018-03-02T08:09:18.000Z","_content":"\n#### <a>1. 简介</a>\n\n- `vim` 是从 `vi` 发展出来的一个文本编辑器，所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在,但是目前我们使用比较多的是 `vim` 编辑器。\n- `vim` 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计:\n- `vim` 代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。\n- 简单的来说，`vi` 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。`vim` 则可以说是程序开发者的一项很好用的工具。\n\n#### <a>2. 使用</a>\n\n> 基本上 vi/vim 共分为三种模式，分别是`命令模式`（Command mode），`输入模式`（Insert mode）和`底线命令模式`（Last line mode）。 这三种模式的作用分别是：\n\n<strong>命令模式：</strong>\n- 用户刚刚启动 `vi/vim`，便进入了命令模式。\n- 此状态下敲击键盘动作会被 `Vim` 识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。以下是常用的几个命令：\n```\ni 切换到输入模式，以输入字符。\nx 删除当前光标所在处的字符。\n: 切换到底线命令模式，以在最底一行输入命令。\n```\n- 若想要编辑文本：启动 `Vim`，进入了命令模式，按下i，切换到输入模式。\n- 命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。\n\n<strong>输入模式：</strong>\n- 在命令模式下按下i就进入了输入模式。\n- 在输入模式中，可以使用以下按键：\n```\n字符按键以及Shift组合，输入字符\nENTER，回车键，换行\nBACK SPACE，退格键，删除光标前一个字符\nDEL，删除键，删除光标后一个字符\n方向键，在文本中移动光标\nHOME/END，移动光标到行首/行尾\nPage Up/Page Down，上/下翻页\nInsert，切换光标为输入/替换模式，光标将变成竖线/下划线\nESC，退出输入模式，切换到命令模式\n```\n\n<strong>底线命令模式：</strong>\n- 在命令模式下按下:（英文冒号）就进入了底线命令模式。\n- 底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。\n- 在底线命令模式中，基本的命令有（已经省略了冒号）：\n```\nq  退出程序\nw  保存文件\nwq 保存并推出\n```\n- 按ESC键可随时退出底线命令模式。\n\n`简单的说，我们可以将这三个模式想成底下的图标来表示：`\n<img src=\"/images/vim.png\">\n\n<!-- #### <a>3. Vim键盘使用</a> -->\n\n<!-- <table>\n    <thead>\n        <tr>\n            <th></th>\n            <th></th>\n            <th></th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td></td>\n            <td></td>\n            <td></td>\n        </tr>\n    </tbody>\n</table> -->","source":"_posts/0809012_常用的Vim命令.md","raw":"---\nid: 0809012\ntitle: 常用的  Vim命令\ndate: 2018-03-02 16:09:18\ntags:\n    - vim\ncategories:\n---\n\n#### <a>1. 简介</a>\n\n- `vim` 是从 `vi` 发展出来的一个文本编辑器，所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在,但是目前我们使用比较多的是 `vim` 编辑器。\n- `vim` 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计:\n- `vim` 代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。\n- 简单的来说，`vi` 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。`vim` 则可以说是程序开发者的一项很好用的工具。\n\n#### <a>2. 使用</a>\n\n> 基本上 vi/vim 共分为三种模式，分别是`命令模式`（Command mode），`输入模式`（Insert mode）和`底线命令模式`（Last line mode）。 这三种模式的作用分别是：\n\n<strong>命令模式：</strong>\n- 用户刚刚启动 `vi/vim`，便进入了命令模式。\n- 此状态下敲击键盘动作会被 `Vim` 识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。以下是常用的几个命令：\n```\ni 切换到输入模式，以输入字符。\nx 删除当前光标所在处的字符。\n: 切换到底线命令模式，以在最底一行输入命令。\n```\n- 若想要编辑文本：启动 `Vim`，进入了命令模式，按下i，切换到输入模式。\n- 命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。\n\n<strong>输入模式：</strong>\n- 在命令模式下按下i就进入了输入模式。\n- 在输入模式中，可以使用以下按键：\n```\n字符按键以及Shift组合，输入字符\nENTER，回车键，换行\nBACK SPACE，退格键，删除光标前一个字符\nDEL，删除键，删除光标后一个字符\n方向键，在文本中移动光标\nHOME/END，移动光标到行首/行尾\nPage Up/Page Down，上/下翻页\nInsert，切换光标为输入/替换模式，光标将变成竖线/下划线\nESC，退出输入模式，切换到命令模式\n```\n\n<strong>底线命令模式：</strong>\n- 在命令模式下按下:（英文冒号）就进入了底线命令模式。\n- 底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。\n- 在底线命令模式中，基本的命令有（已经省略了冒号）：\n```\nq  退出程序\nw  保存文件\nwq 保存并推出\n```\n- 按ESC键可随时退出底线命令模式。\n\n`简单的说，我们可以将这三个模式想成底下的图标来表示：`\n<img src=\"/images/vim.png\">\n\n<!-- #### <a>3. Vim键盘使用</a> -->\n\n<!-- <table>\n    <thead>\n        <tr>\n            <th></th>\n            <th></th>\n            <th></th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td></td>\n            <td></td>\n            <td></td>\n        </tr>\n    </tbody>\n</table> -->","slug":"0809012_常用的Vim命令","published":1,"updated":"2018-03-09T08:19:03.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc1v00169oc0tq7hlrpj","content":"<h4 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a><a>1. 简介</a></h4><ul>\n<li><code>vim</code> 是从 <code>vi</code> 发展出来的一个文本编辑器，所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在,但是目前我们使用比较多的是 <code>vim</code> 编辑器。</li>\n<li><code>vim</code> 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计:</li>\n<li><code>vim</code> 代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</li>\n<li>简单的来说，<code>vi</code> 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。<code>vim</code> 则可以说是程序开发者的一项很好用的工具。</li>\n</ul>\n<h4 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a><a>2. 使用</a></h4><blockquote>\n<p>基本上 vi/vim 共分为三种模式，分别是<code>命令模式</code>（Command mode），<code>输入模式</code>（Insert mode）和<code>底线命令模式</code>（Last line mode）。 这三种模式的作用分别是：</p>\n</blockquote>\n<p><strong>命令模式：</strong></p>\n<ul>\n<li>用户刚刚启动 <code>vi/vim</code>，便进入了命令模式。</li>\n<li><p>此状态下敲击键盘动作会被 <code>Vim</code> 识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。以下是常用的几个命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i 切换到输入模式，以输入字符。</span><br><span class=\"line\">x 删除当前光标所在处的字符。</span><br><span class=\"line\">: 切换到底线命令模式，以在最底一行输入命令。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若想要编辑文本：启动 <code>Vim</code>，进入了命令模式，按下i，切换到输入模式。</p>\n</li>\n<li>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</li>\n</ul>\n<p><strong>输入模式：</strong></p>\n<ul>\n<li>在命令模式下按下i就进入了输入模式。</li>\n<li>在输入模式中，可以使用以下按键：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符按键以及Shift组合，输入字符</span><br><span class=\"line\">ENTER，回车键，换行</span><br><span class=\"line\">BACK SPACE，退格键，删除光标前一个字符</span><br><span class=\"line\">DEL，删除键，删除光标后一个字符</span><br><span class=\"line\">方向键，在文本中移动光标</span><br><span class=\"line\">HOME/END，移动光标到行首/行尾</span><br><span class=\"line\">Page Up/Page Down，上/下翻页</span><br><span class=\"line\">Insert，切换光标为输入/替换模式，光标将变成竖线/下划线</span><br><span class=\"line\">ESC，退出输入模式，切换到命令模式</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>底线命令模式：</strong></p>\n<ul>\n<li>在命令模式下按下:（英文冒号）就进入了底线命令模式。</li>\n<li>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</li>\n<li><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q  退出程序</span><br><span class=\"line\">w  保存文件</span><br><span class=\"line\">wq 保存并推出</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>按ESC键可随时退出底线命令模式。</p>\n</li>\n</ul>\n<p><code>简单的说，我们可以将这三个模式想成底下的图标来表示：</code><br><img src=\"/images/vim.png\"></p>\n<!-- #### <a>3. Vim键盘使用</a> -->\n<!-- <table>\n    <thead>\n        <tr>\n            <th></th>\n            <th></th>\n            <th></th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td></td>\n            <td></td>\n            <td></td>\n        </tr>\n    </tbody>\n</table> -->","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a><a>1. 简介</a></h4><ul>\n<li><code>vim</code> 是从 <code>vi</code> 发展出来的一个文本编辑器，所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在,但是目前我们使用比较多的是 <code>vim</code> 编辑器。</li>\n<li><code>vim</code> 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计:</li>\n<li><code>vim</code> 代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</li>\n<li>简单的来说，<code>vi</code> 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。<code>vim</code> 则可以说是程序开发者的一项很好用的工具。</li>\n</ul>\n<h4 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a><a>2. 使用</a></h4><blockquote>\n<p>基本上 vi/vim 共分为三种模式，分别是<code>命令模式</code>（Command mode），<code>输入模式</code>（Insert mode）和<code>底线命令模式</code>（Last line mode）。 这三种模式的作用分别是：</p>\n</blockquote>\n<p><strong>命令模式：</strong></p>\n<ul>\n<li>用户刚刚启动 <code>vi/vim</code>，便进入了命令模式。</li>\n<li><p>此状态下敲击键盘动作会被 <code>Vim</code> 识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。以下是常用的几个命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i 切换到输入模式，以输入字符。</span><br><span class=\"line\">x 删除当前光标所在处的字符。</span><br><span class=\"line\">: 切换到底线命令模式，以在最底一行输入命令。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若想要编辑文本：启动 <code>Vim</code>，进入了命令模式，按下i，切换到输入模式。</p>\n</li>\n<li>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</li>\n</ul>\n<p><strong>输入模式：</strong></p>\n<ul>\n<li>在命令模式下按下i就进入了输入模式。</li>\n<li>在输入模式中，可以使用以下按键：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符按键以及Shift组合，输入字符</span><br><span class=\"line\">ENTER，回车键，换行</span><br><span class=\"line\">BACK SPACE，退格键，删除光标前一个字符</span><br><span class=\"line\">DEL，删除键，删除光标后一个字符</span><br><span class=\"line\">方向键，在文本中移动光标</span><br><span class=\"line\">HOME/END，移动光标到行首/行尾</span><br><span class=\"line\">Page Up/Page Down，上/下翻页</span><br><span class=\"line\">Insert，切换光标为输入/替换模式，光标将变成竖线/下划线</span><br><span class=\"line\">ESC，退出输入模式，切换到命令模式</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>底线命令模式：</strong></p>\n<ul>\n<li>在命令模式下按下:（英文冒号）就进入了底线命令模式。</li>\n<li>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</li>\n<li><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q  退出程序</span><br><span class=\"line\">w  保存文件</span><br><span class=\"line\">wq 保存并推出</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>按ESC键可随时退出底线命令模式。</p>\n</li>\n</ul>\n<p><code>简单的说，我们可以将这三个模式想成底下的图标来表示：</code><br><img src=\"/images/vim.png\"></p>\n<!-- #### <a>3. Vim键盘使用</a> -->\n<!-- <table>\n    <thead>\n        <tr>\n            <th></th>\n            <th></th>\n            <th></th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td></td>\n            <td></td>\n            <td></td>\n        </tr>\n    </tbody>\n</table> -->"},{"id":"0808024","title":"JavaScript 异步编程","date":"2018-03-12T03:48:34.000Z","_content":"\n> 对于`JavaScript` ，什么是异步编程？为什么要异步？如何做？\n\n- 由于JavaScript的执行环境是 `单线程` 的。即一次只能完成一件任务，如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。\n\n- 这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。\n\n- 为了解决这个问题，Javascript语言将任务的执行模式分成两种：同步（Synchronous）和异步（Asynchronous）。\n\n- \"同步模式\"就是上一段的模式，后一个任务等待前一个任务结束，然后再执行，程序的执行顺序与任务的排列顺序是一致的、同步的；\"异步模式\"则完全不同，每一个任务有一个或多个回 调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异 步的。\n\n- \"异步模式\"非常重要。在浏览器端，耗时很长的操作都应该异步执行，避免浏览器失去响应，最好的例子就是Ajax操作。在服务器端，\"异步模式\"甚至是唯一的模式，因为执行环境是单线 程的，如果允许同步执行所有http请求，服务器性能会急剧下降，很快就会失去响应。\n\n> 以下是四种异步编程的四种常用方法：\n\n#### <a>1、回调函数</a>\n\n如果有两个函数，`fn1` 和 `fn2`，fn2要在fn1执行完之后才执行，于是我们可以这么写：\n```js\nfn1();\n\nfn2();\n```\n\n但是，若 `fn1` 非常耗时（大概需要3s），我们就可以写成回调函数了，改写 `fn1`，将 `fn2 ` 写成 `fn1` 的回调函数：\n```js\nfunction fn1(callback){\n\n  setTimeout(function () {\n\n　　// fn1的任务代码\n    console.log('这是fn1');\n\n    callback();\n\n  }, 3000);\n\n}\n\nfunction fn2() {\n  console.log('这是fn2');\n}\n\n// 执行代码\nfn1(fn2);\n```\n`小结：`\n1. 采用这种方式，我们把同步操作变成了异步操作，fn1不会堵塞程序运行，相当于先执行程序的主要逻辑，将耗时的操作推迟执行。\n2. 回调函数的`优点`是简单、容易理解和部署，`缺点`是不利于代码的阅读和维护，各个部分之间高度耦合（Coupling），流程会很混乱，而且每个任务只能指定一个回调函数。\n\n#### <a>2、事件监听</a>\n\n> 采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生。\n\n当fn1发生 `done` 事件，就执行fn2：\n```js\nfn1.on('done', fn2);\n\nfunction fn1(callback){\n\n  setTimeout(function () {\n\n　　// fn1的任务代码\n    console.log('这是fn1');\n\n    fn1.trigger('done');\n\n  }, 3000);\n\n}\n\nfunction fn2() {\n  console.log('这是fn2');\n}\n```\n`fn1.trigger('done')` 表示，执行完成后，立即触发 `done` 事件，从而开始执行 `fn2`。\n`小结：`\n&emsp;这种方法的`优点`是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以\"去耦合\"（Decoupling），有利于实现模块化。`缺点`是整个程序都要变成事件驱动型，运行流程会变得很不清晰。\n\n#### <a>3、Promises对象</a>\n\n&emsp;`Promise` 思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。比如，fn1的回调函数fn2,可以写成：\n```js\nfn1().then(fn2);\n```\nfn1要进行如下改写（这里使用的是jQuery的实现）：\n```js\nfunction fn1(){\n\n　var dfd = $.Deferred();\n\n　setTimeout(function () {\n\n　　// fn1的任务代码\n    console.log('这是fn1');\n\n　　dfd.resolve();\n\n　}, 500);\n\n　return dfd.promise;\n\n}\n```\n> 这样写的`优点`在于，回调函数变成了链式写法，程序的流程可以看得很清楚，而且有一整套的配套方法，可以实现许多强大的功能。\n\n比如，指定多个回调函数：\n```js\nfn1().then(fn2).then(fn3);\n```\n再比如，指定发生错误时的回调函数：\n```js\nfn1().then(fn2).fail(fn3);\n```\n\n> 而且，它还有一个前面三种方法都没有的好处：如果一个任务已经完成，再添加回调函数，该回调函数会立即执行。所以，你不用担心是否错过了某个事件或信号。这种方法的缺点就是编写和理解，都相对比较难。\n\n<p style=\"text-align: right;\">`参考文档` [ruanyifeng](http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html)</p>","source":"_posts/0809024_JavaScript异步编程.md","raw":"---\nid: 0808024\ntitle: JavaScript 异步编程\ndate: 2018-03-12 11:48:34\ntags:\n  - javascript\n  - promise\ncategories:\n---\n\n> 对于`JavaScript` ，什么是异步编程？为什么要异步？如何做？\n\n- 由于JavaScript的执行环境是 `单线程` 的。即一次只能完成一件任务，如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。\n\n- 这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。\n\n- 为了解决这个问题，Javascript语言将任务的执行模式分成两种：同步（Synchronous）和异步（Asynchronous）。\n\n- \"同步模式\"就是上一段的模式，后一个任务等待前一个任务结束，然后再执行，程序的执行顺序与任务的排列顺序是一致的、同步的；\"异步模式\"则完全不同，每一个任务有一个或多个回 调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异 步的。\n\n- \"异步模式\"非常重要。在浏览器端，耗时很长的操作都应该异步执行，避免浏览器失去响应，最好的例子就是Ajax操作。在服务器端，\"异步模式\"甚至是唯一的模式，因为执行环境是单线 程的，如果允许同步执行所有http请求，服务器性能会急剧下降，很快就会失去响应。\n\n> 以下是四种异步编程的四种常用方法：\n\n#### <a>1、回调函数</a>\n\n如果有两个函数，`fn1` 和 `fn2`，fn2要在fn1执行完之后才执行，于是我们可以这么写：\n```js\nfn1();\n\nfn2();\n```\n\n但是，若 `fn1` 非常耗时（大概需要3s），我们就可以写成回调函数了，改写 `fn1`，将 `fn2 ` 写成 `fn1` 的回调函数：\n```js\nfunction fn1(callback){\n\n  setTimeout(function () {\n\n　　// fn1的任务代码\n    console.log('这是fn1');\n\n    callback();\n\n  }, 3000);\n\n}\n\nfunction fn2() {\n  console.log('这是fn2');\n}\n\n// 执行代码\nfn1(fn2);\n```\n`小结：`\n1. 采用这种方式，我们把同步操作变成了异步操作，fn1不会堵塞程序运行，相当于先执行程序的主要逻辑，将耗时的操作推迟执行。\n2. 回调函数的`优点`是简单、容易理解和部署，`缺点`是不利于代码的阅读和维护，各个部分之间高度耦合（Coupling），流程会很混乱，而且每个任务只能指定一个回调函数。\n\n#### <a>2、事件监听</a>\n\n> 采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生。\n\n当fn1发生 `done` 事件，就执行fn2：\n```js\nfn1.on('done', fn2);\n\nfunction fn1(callback){\n\n  setTimeout(function () {\n\n　　// fn1的任务代码\n    console.log('这是fn1');\n\n    fn1.trigger('done');\n\n  }, 3000);\n\n}\n\nfunction fn2() {\n  console.log('这是fn2');\n}\n```\n`fn1.trigger('done')` 表示，执行完成后，立即触发 `done` 事件，从而开始执行 `fn2`。\n`小结：`\n&emsp;这种方法的`优点`是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以\"去耦合\"（Decoupling），有利于实现模块化。`缺点`是整个程序都要变成事件驱动型，运行流程会变得很不清晰。\n\n#### <a>3、Promises对象</a>\n\n&emsp;`Promise` 思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。比如，fn1的回调函数fn2,可以写成：\n```js\nfn1().then(fn2);\n```\nfn1要进行如下改写（这里使用的是jQuery的实现）：\n```js\nfunction fn1(){\n\n　var dfd = $.Deferred();\n\n　setTimeout(function () {\n\n　　// fn1的任务代码\n    console.log('这是fn1');\n\n　　dfd.resolve();\n\n　}, 500);\n\n　return dfd.promise;\n\n}\n```\n> 这样写的`优点`在于，回调函数变成了链式写法，程序的流程可以看得很清楚，而且有一整套的配套方法，可以实现许多强大的功能。\n\n比如，指定多个回调函数：\n```js\nfn1().then(fn2).then(fn3);\n```\n再比如，指定发生错误时的回调函数：\n```js\nfn1().then(fn2).fail(fn3);\n```\n\n> 而且，它还有一个前面三种方法都没有的好处：如果一个任务已经完成，再添加回调函数，该回调函数会立即执行。所以，你不用担心是否错过了某个事件或信号。这种方法的缺点就是编写和理解，都相对比较难。\n\n<p style=\"text-align: right;\">`参考文档` [ruanyifeng](http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html)</p>","slug":"0809024_JavaScript异步编程","published":1,"updated":"2018-03-14T10:28:56.562Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc2b00189oc064rxd6d5","content":"<blockquote>\n<p>对于<code>JavaScript</code> ，什么是异步编程？为什么要异步？如何做？</p>\n</blockquote>\n<ul>\n<li><p>由于JavaScript的执行环境是 <code>单线程</code> 的。即一次只能完成一件任务，如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。</p>\n</li>\n<li><p>这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。</p>\n</li>\n<li><p>为了解决这个问题，Javascript语言将任务的执行模式分成两种：同步（Synchronous）和异步（Asynchronous）。</p>\n</li>\n<li><p>“同步模式”就是上一段的模式，后一个任务等待前一个任务结束，然后再执行，程序的执行顺序与任务的排列顺序是一致的、同步的；”异步模式”则完全不同，每一个任务有一个或多个回 调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异 步的。</p>\n</li>\n<li><p>“异步模式”非常重要。在浏览器端，耗时很长的操作都应该异步执行，避免浏览器失去响应，最好的例子就是Ajax操作。在服务器端，”异步模式”甚至是唯一的模式，因为执行环境是单线 程的，如果允许同步执行所有http请求，服务器性能会急剧下降，很快就会失去响应。</p>\n</li>\n</ul>\n<blockquote>\n<p>以下是四种异步编程的四种常用方法：</p>\n</blockquote>\n<h4 id=\"1、回调函数\"><a href=\"#1、回调函数\" class=\"headerlink\" title=\"1、回调函数\"></a><a>1、回调函数</a></h4><p>如果有两个函数，<code>fn1</code> 和 <code>fn2</code>，fn2要在fn1执行完之后才执行，于是我们可以这么写：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1();</span><br><span class=\"line\"></span><br><span class=\"line\">fn2();</span><br></pre></td></tr></table></figure></p>\n<p>但是，若 <code>fn1</code> 非常耗时（大概需要3s），我们就可以写成回调函数了，改写 <code>fn1</code>，将 <code>fn2</code> 写成 <code>fn1</code> 的回调函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">// fn1的任务代码</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是fn1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    callback();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是fn2'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行代码</span></span><br><span class=\"line\">fn1(fn2);</span><br></pre></td></tr></table></figure></p>\n<p><code>小结：</code></p>\n<ol>\n<li>采用这种方式，我们把同步操作变成了异步操作，fn1不会堵塞程序运行，相当于先执行程序的主要逻辑，将耗时的操作推迟执行。</li>\n<li>回调函数的<code>优点</code>是简单、容易理解和部署，<code>缺点</code>是不利于代码的阅读和维护，各个部分之间高度耦合（Coupling），流程会很混乱，而且每个任务只能指定一个回调函数。</li>\n</ol>\n<h4 id=\"2、事件监听\"><a href=\"#2、事件监听\" class=\"headerlink\" title=\"2、事件监听\"></a><a>2、事件监听</a></h4><blockquote>\n<p>采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生。</p>\n</blockquote>\n<p>当fn1发生 <code>done</code> 事件，就执行fn2：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1.on(<span class=\"string\">'done'</span>, fn2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">// fn1的任务代码</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是fn1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    fn1.trigger(<span class=\"string\">'done'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是fn2'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>fn1.trigger(&#39;done&#39;)</code> 表示，执行完成后，立即触发 <code>done</code> 事件，从而开始执行 <code>fn2</code>。<br><code>小结：</code><br>&emsp;这种方法的<code>优点</code>是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以”去耦合”（Decoupling），有利于实现模块化。<code>缺点</code>是整个程序都要变成事件驱动型，运行流程会变得很不清晰。</p>\n<h4 id=\"3、Promises对象\"><a href=\"#3、Promises对象\" class=\"headerlink\" title=\"3、Promises对象\"></a><a>3、Promises对象</a></h4><p>&emsp;<code>Promise</code> 思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。比如，fn1的回调函数fn2,可以写成：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1().then(fn2);</span><br></pre></td></tr></table></figure></p>\n<p>fn1要进行如下改写（这里使用的是jQuery的实现）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　<span class=\"keyword\">var</span> dfd = $.Deferred();</span><br><span class=\"line\"></span><br><span class=\"line\">　setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">// fn1的任务代码</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是fn1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">　　dfd.resolve();</span><br><span class=\"line\"></span><br><span class=\"line\">　&#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">　<span class=\"keyword\">return</span> dfd.promise;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这样写的<code>优点</code>在于，回调函数变成了链式写法，程序的流程可以看得很清楚，而且有一整套的配套方法，可以实现许多强大的功能。</p>\n</blockquote>\n<p>比如，指定多个回调函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1().then(fn2).then(fn3);</span><br></pre></td></tr></table></figure></p>\n<p>再比如，指定发生错误时的回调函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1().then(fn2).fail(fn3);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>而且，它还有一个前面三种方法都没有的好处：如果一个任务已经完成，再添加回调函数，该回调函数会立即执行。所以，你不用担心是否错过了某个事件或信号。这种方法的缺点就是编写和理解，都相对比较难。</p>\n</blockquote>\n<p style=\"text-align: right;\"><code>参考文档</code> <a href=\"http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html\" target=\"_blank\" rel=\"noopener\">ruanyifeng</a></p>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>对于<code>JavaScript</code> ，什么是异步编程？为什么要异步？如何做？</p>\n</blockquote>\n<ul>\n<li><p>由于JavaScript的执行环境是 <code>单线程</code> 的。即一次只能完成一件任务，如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。</p>\n</li>\n<li><p>这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。</p>\n</li>\n<li><p>为了解决这个问题，Javascript语言将任务的执行模式分成两种：同步（Synchronous）和异步（Asynchronous）。</p>\n</li>\n<li><p>“同步模式”就是上一段的模式，后一个任务等待前一个任务结束，然后再执行，程序的执行顺序与任务的排列顺序是一致的、同步的；”异步模式”则完全不同，每一个任务有一个或多个回 调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异 步的。</p>\n</li>\n<li><p>“异步模式”非常重要。在浏览器端，耗时很长的操作都应该异步执行，避免浏览器失去响应，最好的例子就是Ajax操作。在服务器端，”异步模式”甚至是唯一的模式，因为执行环境是单线 程的，如果允许同步执行所有http请求，服务器性能会急剧下降，很快就会失去响应。</p>\n</li>\n</ul>\n<blockquote>\n<p>以下是四种异步编程的四种常用方法：</p>\n</blockquote>\n<h4 id=\"1、回调函数\"><a href=\"#1、回调函数\" class=\"headerlink\" title=\"1、回调函数\"></a><a>1、回调函数</a></h4><p>如果有两个函数，<code>fn1</code> 和 <code>fn2</code>，fn2要在fn1执行完之后才执行，于是我们可以这么写：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1();</span><br><span class=\"line\"></span><br><span class=\"line\">fn2();</span><br></pre></td></tr></table></figure></p>\n<p>但是，若 <code>fn1</code> 非常耗时（大概需要3s），我们就可以写成回调函数了，改写 <code>fn1</code>，将 <code>fn2</code> 写成 <code>fn1</code> 的回调函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">// fn1的任务代码</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是fn1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    callback();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是fn2'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行代码</span></span><br><span class=\"line\">fn1(fn2);</span><br></pre></td></tr></table></figure></p>\n<p><code>小结：</code></p>\n<ol>\n<li>采用这种方式，我们把同步操作变成了异步操作，fn1不会堵塞程序运行，相当于先执行程序的主要逻辑，将耗时的操作推迟执行。</li>\n<li>回调函数的<code>优点</code>是简单、容易理解和部署，<code>缺点</code>是不利于代码的阅读和维护，各个部分之间高度耦合（Coupling），流程会很混乱，而且每个任务只能指定一个回调函数。</li>\n</ol>\n<h4 id=\"2、事件监听\"><a href=\"#2、事件监听\" class=\"headerlink\" title=\"2、事件监听\"></a><a>2、事件监听</a></h4><blockquote>\n<p>采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生。</p>\n</blockquote>\n<p>当fn1发生 <code>done</code> 事件，就执行fn2：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1.on(<span class=\"string\">'done'</span>, fn2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">// fn1的任务代码</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是fn1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    fn1.trigger(<span class=\"string\">'done'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是fn2'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>fn1.trigger(&#39;done&#39;)</code> 表示，执行完成后，立即触发 <code>done</code> 事件，从而开始执行 <code>fn2</code>。<br><code>小结：</code><br>&emsp;这种方法的<code>优点</code>是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以”去耦合”（Decoupling），有利于实现模块化。<code>缺点</code>是整个程序都要变成事件驱动型，运行流程会变得很不清晰。</p>\n<h4 id=\"3、Promises对象\"><a href=\"#3、Promises对象\" class=\"headerlink\" title=\"3、Promises对象\"></a><a>3、Promises对象</a></h4><p>&emsp;<code>Promise</code> 思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。比如，fn1的回调函数fn2,可以写成：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1().then(fn2);</span><br></pre></td></tr></table></figure></p>\n<p>fn1要进行如下改写（这里使用的是jQuery的实现）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　<span class=\"keyword\">var</span> dfd = $.Deferred();</span><br><span class=\"line\"></span><br><span class=\"line\">　setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">// fn1的任务代码</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是fn1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">　　dfd.resolve();</span><br><span class=\"line\"></span><br><span class=\"line\">　&#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">　<span class=\"keyword\">return</span> dfd.promise;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这样写的<code>优点</code>在于，回调函数变成了链式写法，程序的流程可以看得很清楚，而且有一整套的配套方法，可以实现许多强大的功能。</p>\n</blockquote>\n<p>比如，指定多个回调函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1().then(fn2).then(fn3);</span><br></pre></td></tr></table></figure></p>\n<p>再比如，指定发生错误时的回调函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1().then(fn2).fail(fn3);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>而且，它还有一个前面三种方法都没有的好处：如果一个任务已经完成，再添加回调函数，该回调函数会立即执行。所以，你不用担心是否错过了某个事件或信号。这种方法的缺点就是编写和理解，都相对比较难。</p>\n</blockquote>\n<p style=\"text-align: right;\"><code>参考文档</code> <a href=\"http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html\" target=\"_blank\" rel=\"noopener\">ruanyifeng</a></p>"},{"id":"0809003","title":"在 hexo 中部署 livere 评论系统","date":"2018-02-23T16:05:00.000Z","_content":"\n- 注册来必力账号\n\n这一步很简单，进去[官网](https://livere.com/)，注册账号：\n![注册](/images/livere.png)\n\n然后点击右上角图标进入到管理页面，点击左侧的代码管理，这里面就是部署livere需要的脚本了：\n![获取部署代码](/images/livere1.png)\n\n- 用户登录账号设置\n\nlivere 评论系统里支持非常多的第三方账号登录方式：\n![账号](/images/livere2.png)\n可以根据自己的需要选择适用的方式。\n\n- 主题设置\n\nlivere 同样提供多种颜色主题，供用户免费使用：\n![主题](/images/livere3.png)\n\n`来必力livere部署起来其实是非常简单的，更多细节可以去`[官网](https://livere.com/)`查看更多`","source":"_posts/0809003_在hexo中部署livere评论系统.md","raw":"---\nid: 0809003\ntitle: 在 hexo 中部署 livere 评论系统\ndate: 2018-02-24 00:05:00\ntags: \n    - JavaScript\n    - livere\ncategories:\n---\n\n- 注册来必力账号\n\n这一步很简单，进去[官网](https://livere.com/)，注册账号：\n![注册](/images/livere.png)\n\n然后点击右上角图标进入到管理页面，点击左侧的代码管理，这里面就是部署livere需要的脚本了：\n![获取部署代码](/images/livere1.png)\n\n- 用户登录账号设置\n\nlivere 评论系统里支持非常多的第三方账号登录方式：\n![账号](/images/livere2.png)\n可以根据自己的需要选择适用的方式。\n\n- 主题设置\n\nlivere 同样提供多种颜色主题，供用户免费使用：\n![主题](/images/livere3.png)\n\n`来必力livere部署起来其实是非常简单的，更多细节可以去`[官网](https://livere.com/)`查看更多`","slug":"0809003_在hexo中部署livere评论系统","published":1,"updated":"2018-03-09T08:20:41.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjetacc2b00199oc0rygkl9dv","content":"<ul>\n<li>注册来必力账号</li>\n</ul>\n<p>这一步很简单，进去<a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">官网</a>，注册账号：<br><img src=\"/images/livere.png\" alt=\"注册\"></p>\n<p>然后点击右上角图标进入到管理页面，点击左侧的代码管理，这里面就是部署livere需要的脚本了：<br><img src=\"/images/livere1.png\" alt=\"获取部署代码\"></p>\n<ul>\n<li>用户登录账号设置</li>\n</ul>\n<p>livere 评论系统里支持非常多的第三方账号登录方式：<br><img src=\"/images/livere2.png\" alt=\"账号\"><br>可以根据自己的需要选择适用的方式。</p>\n<ul>\n<li>主题设置</li>\n</ul>\n<p>livere 同样提供多种颜色主题，供用户免费使用：<br><img src=\"/images/livere3.png\" alt=\"主题\"></p>\n<p><code>来必力livere部署起来其实是非常简单的，更多细节可以去</code><a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">官网</a><code>查看更多</code></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>注册来必力账号</li>\n</ul>\n<p>这一步很简单，进去<a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">官网</a>，注册账号：<br><img src=\"/images/livere.png\" alt=\"注册\"></p>\n<p>然后点击右上角图标进入到管理页面，点击左侧的代码管理，这里面就是部署livere需要的脚本了：<br><img src=\"/images/livere1.png\" alt=\"获取部署代码\"></p>\n<ul>\n<li>用户登录账号设置</li>\n</ul>\n<p>livere 评论系统里支持非常多的第三方账号登录方式：<br><img src=\"/images/livere2.png\" alt=\"账号\"><br>可以根据自己的需要选择适用的方式。</p>\n<ul>\n<li>主题设置</li>\n</ul>\n<p>livere 同样提供多种颜色主题，供用户免费使用：<br><img src=\"/images/livere3.png\" alt=\"主题\"></p>\n<p><code>来必力livere部署起来其实是非常简单的，更多细节可以去</code><a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">官网</a><code>查看更多</code></p>\n"},{"id":"0809020","title":"总结《You-Dont-Need-Lodash-Underscore》","date":"2018-03-08T10:07:48.000Z","_content":"\n#### <a>前言</a>\n- [Lodash](https://github.com/lodash/lodash) 和 [Underscore](https://github.com/jashkenas/underscore) 是非常优秀的现代JavaScript程序库，它们被前端开发人员广泛使用。\n\n- 但是，如果你将目标锁定为现代浏览器，则可能会发现很多原生的方法，已经被原生的 `ES5` 或者 `ES6` 支持了。\n\n- 如果你希望你的项目需要更少的依赖关系，并且你清楚地知道你的目标浏览器，那么你可能不需要 `Lodash` / `Underscore`。\n\n- 如果你想在更传统的JavaScript执行环境（浏览器？）中使用这些ES5方法，可以使用 [es5-shim](https://github.com/es-shims/es5-shim)\n\n<a href=\"#array\">1. 数组 Array</a>\n<a href=\"#Collection\">2. 集合 Collection</a>\n<a href=\"#Function\">3. 函数 Function</a>\n<a href=\"#Object\">4. 对象 Object</a>\n<a href=\"#String\">5. 字符串 String</a>\n\n#### <a name=\"Array\">1、数组 Array</a>\n\n- **_.compact**\n  返回一个过滤了 `falsy `（隐含有false属性，`false`, `0`, `\"\"`, `null`, `undefined`, `NaN`）的值得集合。\n  ```js\n  // Underscore/Lodash\n  _.compact([0, 1, false, 2, '', 3]);\n\n  // Native\n  [0, 1, false, 2, '', 3].filter(v => v)\n  // [1, 2, 3]\n  ```\n  ![Chrome][/images/chrome.png] | ![Firefox][firefox-image] | ![IE][ie-image] | ![Opera][opera-image] | ![Safari][safari-image]\n  :-: | :-: | :-: | :-: | :-: |\n   ✔  |  1.5 ✔ |  9 ✔ |  ✔ |  ✔  |\n\n- ****\n\n#### <a name=\"Collection\">2、集合 Collection</a>\n#### <a name=\"Function\">3、函数 Function</a>\n#### <a name=\"Object\">4、对象 Object</a>\n#### <a name=\"String\">5、字符串 String</a>\n\n","source":"_posts/0809020_总结 You-Dont-Need-Lodash-Underscore.md","raw":"---\nid: 0809020\ntitle: 总结《You-Dont-Need-Lodash-Underscore》\ndate: 2018-03-08 18:07:48\ntags:\n  - JavaScript\n  - es6\ncategories:\n---\n\n#### <a>前言</a>\n- [Lodash](https://github.com/lodash/lodash) 和 [Underscore](https://github.com/jashkenas/underscore) 是非常优秀的现代JavaScript程序库，它们被前端开发人员广泛使用。\n\n- 但是，如果你将目标锁定为现代浏览器，则可能会发现很多原生的方法，已经被原生的 `ES5` 或者 `ES6` 支持了。\n\n- 如果你希望你的项目需要更少的依赖关系，并且你清楚地知道你的目标浏览器，那么你可能不需要 `Lodash` / `Underscore`。\n\n- 如果你想在更传统的JavaScript执行环境（浏览器？）中使用这些ES5方法，可以使用 [es5-shim](https://github.com/es-shims/es5-shim)\n\n<a href=\"#array\">1. 数组 Array</a>\n<a href=\"#Collection\">2. 集合 Collection</a>\n<a href=\"#Function\">3. 函数 Function</a>\n<a href=\"#Object\">4. 对象 Object</a>\n<a href=\"#String\">5. 字符串 String</a>\n\n#### <a name=\"Array\">1、数组 Array</a>\n\n- **_.compact**\n  返回一个过滤了 `falsy `（隐含有false属性，`false`, `0`, `\"\"`, `null`, `undefined`, `NaN`）的值得集合。\n  ```js\n  // Underscore/Lodash\n  _.compact([0, 1, false, 2, '', 3]);\n\n  // Native\n  [0, 1, false, 2, '', 3].filter(v => v)\n  // [1, 2, 3]\n  ```\n  ![Chrome][/images/chrome.png] | ![Firefox][firefox-image] | ![IE][ie-image] | ![Opera][opera-image] | ![Safari][safari-image]\n  :-: | :-: | :-: | :-: | :-: |\n   ✔  |  1.5 ✔ |  9 ✔ |  ✔ |  ✔  |\n\n- ****\n\n#### <a name=\"Collection\">2、集合 Collection</a>\n#### <a name=\"Function\">3、函数 Function</a>\n#### <a name=\"Object\">4、对象 Object</a>\n#### <a name=\"String\">5、字符串 String</a>\n\n","slug":"0809020_总结 You-Dont-Need-Lodash-Underscore","published":1,"updated":"2018-03-16T08:08:27.243Z","_id":"cjetlk3ns00369oc0atmtiof3","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><a>前言</a></h4><ul>\n<li><p><a href=\"https://github.com/lodash/lodash\" target=\"_blank\" rel=\"noopener\">Lodash</a> 和 <a href=\"https://github.com/jashkenas/underscore\" target=\"_blank\" rel=\"noopener\">Underscore</a> 是非常优秀的现代JavaScript程序库，它们被前端开发人员广泛使用。</p>\n</li>\n<li><p>但是，如果你将目标锁定为现代浏览器，则可能会发现很多原生的方法，已经被原生的 <code>ES5</code> 或者 <code>ES6</code> 支持了。</p>\n</li>\n<li><p>如果你希望你的项目需要更少的依赖关系，并且你清楚地知道你的目标浏览器，那么你可能不需要 <code>Lodash</code> / <code>Underscore</code>。</p>\n</li>\n<li><p>如果你想在更传统的JavaScript执行环境（浏览器？）中使用这些ES5方法，可以使用 <a href=\"https://github.com/es-shims/es5-shim\" target=\"_blank\" rel=\"noopener\">es5-shim</a></p>\n</li>\n</ul>\n<p><a href=\"#array\">1. 数组 Array</a><br><a href=\"#Collection\">2. 集合 Collection</a><br><a href=\"#Function\">3. 函数 Function</a><br><a href=\"#Object\">4. 对象 Object</a><br><a href=\"#String\">5. 字符串 String</a></p>\n<h4 id=\"1、数组-Array\"><a href=\"#1、数组-Array\" class=\"headerlink\" title=\"1、数组 Array\"></a><a name=\"Array\">1、数组 Array</a></h4><ul>\n<li><p><strong>_.compact</strong><br>返回一个过滤了 <code>falsy</code>（隐含有false属性，<code>false</code>, <code>0</code>, <code>&quot;&quot;</code>, <code>null</code>, <code>undefined</code>, <code>NaN</code>）的值得集合。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.compact([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">''</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">''</span>, <span class=\"number\">3</span>].filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v)</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<p>![Chrome][/images/chrome.png] | ![Firefox][firefox-image] | ![IE][ie-image] | ![Opera][opera-image] | ![Safari][safari-image]<br>:-: | :-: | :-: | :-: | :-: |<br> ✔  |  1.5 ✔ |  9 ✔ |  ✔ |  ✔  |</p>\n</li>\n</ul>\n<hr>\n<h4 id=\"2、集合-Collection\"><a href=\"#2、集合-Collection\" class=\"headerlink\" title=\"2、集合 Collection\"></a><a name=\"Collection\">2、集合 Collection</a></h4><h4 id=\"3、函数-Function\"><a href=\"#3、函数-Function\" class=\"headerlink\" title=\"3、函数 Function\"></a><a name=\"Function\">3、函数 Function</a></h4><h4 id=\"4、对象-Object\"><a href=\"#4、对象-Object\" class=\"headerlink\" title=\"4、对象 Object\"></a><a name=\"Object\">4、对象 Object</a></h4><h4 id=\"5、字符串-String\"><a href=\"#5、字符串-String\" class=\"headerlink\" title=\"5、字符串 String\"></a><a name=\"String\">5、字符串 String</a></h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><a>前言</a></h4><ul>\n<li><p><a href=\"https://github.com/lodash/lodash\" target=\"_blank\" rel=\"noopener\">Lodash</a> 和 <a href=\"https://github.com/jashkenas/underscore\" target=\"_blank\" rel=\"noopener\">Underscore</a> 是非常优秀的现代JavaScript程序库，它们被前端开发人员广泛使用。</p>\n</li>\n<li><p>但是，如果你将目标锁定为现代浏览器，则可能会发现很多原生的方法，已经被原生的 <code>ES5</code> 或者 <code>ES6</code> 支持了。</p>\n</li>\n<li><p>如果你希望你的项目需要更少的依赖关系，并且你清楚地知道你的目标浏览器，那么你可能不需要 <code>Lodash</code> / <code>Underscore</code>。</p>\n</li>\n<li><p>如果你想在更传统的JavaScript执行环境（浏览器？）中使用这些ES5方法，可以使用 <a href=\"https://github.com/es-shims/es5-shim\" target=\"_blank\" rel=\"noopener\">es5-shim</a></p>\n</li>\n</ul>\n<p><a href=\"#array\">1. 数组 Array</a><br><a href=\"#Collection\">2. 集合 Collection</a><br><a href=\"#Function\">3. 函数 Function</a><br><a href=\"#Object\">4. 对象 Object</a><br><a href=\"#String\">5. 字符串 String</a></p>\n<h4 id=\"1、数组-Array\"><a href=\"#1、数组-Array\" class=\"headerlink\" title=\"1、数组 Array\"></a><a name=\"Array\">1、数组 Array</a></h4><ul>\n<li><p><strong>_.compact</strong><br>返回一个过滤了 <code>falsy</code>（隐含有false属性，<code>false</code>, <code>0</code>, <code>&quot;&quot;</code>, <code>null</code>, <code>undefined</code>, <code>NaN</code>）的值得集合。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.compact([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">''</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">''</span>, <span class=\"number\">3</span>].filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v)</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<p>![Chrome][/images/chrome.png] | ![Firefox][firefox-image] | ![IE][ie-image] | ![Opera][opera-image] | ![Safari][safari-image]<br>:-: | :-: | :-: | :-: | :-: |<br> ✔  |  1.5 ✔ |  9 ✔ |  ✔ |  ✔  |</p>\n</li>\n</ul>\n<hr>\n<h4 id=\"2、集合-Collection\"><a href=\"#2、集合-Collection\" class=\"headerlink\" title=\"2、集合 Collection\"></a><a name=\"Collection\">2、集合 Collection</a></h4><h4 id=\"3、函数-Function\"><a href=\"#3、函数-Function\" class=\"headerlink\" title=\"3、函数 Function\"></a><a name=\"Function\">3、函数 Function</a></h4><h4 id=\"4、对象-Object\"><a href=\"#4、对象-Object\" class=\"headerlink\" title=\"4、对象 Object\"></a><a name=\"Object\">4、对象 Object</a></h4><h4 id=\"5、字符串-String\"><a href=\"#5、字符串-String\" class=\"headerlink\" title=\"5、字符串 String\"></a><a name=\"String\">5、字符串 String</a></h4>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjetacc0500009oc059zhtojv","tag_id":"cjetacc0500049oc0uh2vq9jy","_id":"cjetacc1000099oc0hgu7sqek"},{"post_id":"cjetacc0500029oc0afde1b01","tag_id":"cjetacc1000089oc0ajbc6hge","_id":"cjetacc10000e9oc02dmmlfsv"},{"post_id":"cjetacc10000f9oc0dro1g6ua","tag_id":"cjetacc10000c9oc0u71374ao","_id":"cjetacc10000i9oc0hh85csrh"},{"post_id":"cjetacc0500059oc0sju7aqu2","tag_id":"cjetacc10000c9oc0u71374ao","_id":"cjetacc1g000p9oc0tqumkjx3"},{"post_id":"cjetacc0500059oc0sju7aqu2","tag_id":"cjetacc10000g9oc0yu6qo2su","_id":"cjetacc1g000r9oc05ey53ai1"},{"post_id":"cjetacc0500059oc0sju7aqu2","tag_id":"cjetacc1g000k9oc0wddr7y4p","_id":"cjetacc1g000u9oc0dlkona15"},{"post_id":"cjetacc0k00069oc0qa02kj51","tag_id":"cjetacc1g000o9oc01iznl692","_id":"cjetacc1g000w9oc0lnje7mqb"},{"post_id":"cjetacc1000079oc09zq2xuco","tag_id":"cjetacc1g000t9oc0847l67fq","_id":"cjetacc1g00109oc0rkxtickr"},{"post_id":"cjetacc1g000x9oc0mu4pvq4v","tag_id":"cjetacc1g000o9oc01iznl692","_id":"cjetacc1v00129oc0u78c34gd"},{"post_id":"cjetacc10000a9oc03lzez3fr","tag_id":"cjetacc1g000y9oc02et5rs0q","_id":"cjetacc2b001b9oc0xxy9rcm3"},{"post_id":"cjetacc10000a9oc03lzez3fr","tag_id":"cjetacc1v00139oc081ppgmyb","_id":"cjetacc2b001c9oc0sucr6wh0"},{"post_id":"cjetacc10000a9oc03lzez3fr","tag_id":"cjetacc1g000o9oc01iznl692","_id":"cjetacc2b001e9oc0smfmxtr5"},{"post_id":"cjetacc10000b9oc07izn0bb9","tag_id":"cjetacc1g000o9oc01iznl692","_id":"cjetacc2b001g9oc0nn26bqb3"},{"post_id":"cjetacc10000b9oc07izn0bb9","tag_id":"cjetacc2b001d9oc0yyuo8g8b","_id":"cjetacc2b001h9oc0xtrfoinw"},{"post_id":"cjetacc10000d9oc07uu23xgk","tag_id":"cjetacc1g000o9oc01iznl692","_id":"cjetacc2b001j9oc09rb1gmr5"},{"post_id":"cjetacc10000h9oc079f7g7mi","tag_id":"cjetacc2b001i9oc0fdmphjsz","_id":"cjetacc2b001o9oc0ydt9p75n"},{"post_id":"cjetacc10000h9oc079f7g7mi","tag_id":"cjetacc2b001k9oc0979ek5z9","_id":"cjetacc2b001p9oc07ey1o0we"},{"post_id":"cjetacc10000h9oc079f7g7mi","tag_id":"cjetacc1g000o9oc01iznl692","_id":"cjetacc2b001r9oc0zb8n0ynq"},{"post_id":"cjetacc10000h9oc079f7g7mi","tag_id":"cjetacc1v00139oc081ppgmyb","_id":"cjetacc2b001s9oc02zbxd86e"},{"post_id":"cjetacc10000j9oc06rjvunu5","tag_id":"cjetacc1g000o9oc01iznl692","_id":"cjetacc2b001u9oc0fx5hu7on"},{"post_id":"cjetacc1g000l9oc0tiqeq0vh","tag_id":"cjetacc2b001q9oc0nvk99q36","_id":"cjetacc2b001x9oc0bg8m6j4r"},{"post_id":"cjetacc1g000l9oc0tiqeq0vh","tag_id":"cjetacc2b001t9oc0h6puuzg5","_id":"cjetacc2q001y9oc0v4wexh1w"},{"post_id":"cjetacc1g000l9oc0tiqeq0vh","tag_id":"cjetacc2b001v9oc0127vbod0","_id":"cjetacc2q00209oc0vjkhk3d7"},{"post_id":"cjetacc1g000m9oc0sug0j5kx","tag_id":"cjetacc1g000o9oc01iznl692","_id":"cjetacc2q00219oc0fuxhvluw"},{"post_id":"cjetacc1g000n9oc0w9jzbse9","tag_id":"cjetacc2q001z9oc04xksfa89","_id":"cjetacc2q00249oc0nb1mzjd8"},{"post_id":"cjetacc1g000n9oc0w9jzbse9","tag_id":"cjetacc2q00229oc0gpqw2wy9","_id":"cjetacc2q00259oc0623k4j89"},{"post_id":"cjetacc1g000s9oc011k0nu8b","tag_id":"cjetacc2q00269oc0yf56lgd4","_id":"cjetacc2q002b9oc0fm4njyro"},{"post_id":"cjetacc1g000s9oc011k0nu8b","tag_id":"cjetacc2q00289oc0qk00pxgk","_id":"cjetacc2q002c9oc0kzrbgq25"},{"post_id":"cjetacc1g000s9oc011k0nu8b","tag_id":"cjetacc2q00299oc0ra7z8vxx","_id":"cjetacc2q002e9oc0zis45p0t"},{"post_id":"cjetacc1g000z9oc0zviykgdr","tag_id":"cjetacc2q002d9oc0z6vzjpgq","_id":"cjetacc2q002i9oc0tqocwcy6"},{"post_id":"cjetacc1g000z9oc0zviykgdr","tag_id":"cjetacc1g000o9oc01iznl692","_id":"cjetacc2q002k9oc0ixvhn3xx"},{"post_id":"cjetacc1v00159oc048tbkijg","tag_id":"cjetacc2q002g9oc029pgf411","_id":"cjetacc2q002l9oc0aaq6d89y"},{"post_id":"cjetacc1v00159oc048tbkijg","tag_id":"cjetacc1g000o9oc01iznl692","_id":"cjetacc2q002n9oc01ya2e3t0"},{"post_id":"cjetacc1v00169oc0tq7hlrpj","tag_id":"cjetacc2q002j9oc0wfc5u0qo","_id":"cjetacc2q002o9oc0b6w9jz66"},{"post_id":"cjetacc2b00189oc064rxd6d5","tag_id":"cjetacc2q002m9oc0diixpvj5","_id":"cjetacc2q002r9oc0q9so7nvq"},{"post_id":"cjetacc2b00189oc064rxd6d5","tag_id":"cjetacc2q002p9oc01swsqs88","_id":"cjetacc2q002s9oc0x9xaah35"},{"post_id":"cjetacc2b00199oc0rygkl9dv","tag_id":"cjetacc1g000o9oc01iznl692","_id":"cjetacc2q002t9oc0iend4cxa"},{"post_id":"cjetacc2b00199oc0rygkl9dv","tag_id":"cjetacc2q002q9oc0yyizjg3j","_id":"cjetacc2q002u9oc0dc4ela7f"},{"post_id":"cjetacc1g000q9oc012lricb4","tag_id":"cjetacc2q00239oc0mocfmqci","_id":"cjetekjb400319oc0iaicp522"},{"post_id":"cjetlk3ns00369oc0atmtiof3","tag_id":"cjetacc1g000o9oc01iznl692","_id":"cjetnjiob003b9oc00515gjxj"},{"post_id":"cjetlk3ns00369oc0atmtiof3","tag_id":"cjetacc1v00139oc081ppgmyb","_id":"cjetnjioc003c9oc07xm09q1s"}],"Tag":[{"name":"HTML","_id":"cjetacc0500049oc0uh2vq9jy"},{"name":"test","_id":"cjetacc1000089oc0ajbc6hge"},{"name":"HTML5","_id":"cjetacc10000c9oc0u71374ao"},{"name":"sessionStorage","_id":"cjetacc10000g9oc0yu6qo2su"},{"name":"localStorage","_id":"cjetacc1g000k9oc0wddr7y4p"},{"name":"JavaScript","_id":"cjetacc1g000o9oc01iznl692"},{"name":"CSS3","_id":"cjetacc1g000t9oc0847l67fq"},{"name":"Babel","_id":"cjetacc1g000y9oc02et5rs0q"},{"name":"es6","_id":"cjetacc1v00139oc081ppgmyb"},{"name":"JSON","_id":"cjetacc2b001d9oc0yyuo8g8b"},{"name":"vue.js","_id":"cjetacc2b001i9oc0fdmphjsz"},{"name":"webpack","_id":"cjetacc2b001k9oc0979ek5z9"},{"name":"Node.js","_id":"cjetacc2b001q9oc0nvk99q36"},{"name":"Express","_id":"cjetacc2b001t9oc0h6puuzg5"},{"name":"ing","_id":"cjetacc2b001v9oc0127vbod0"},{"name":"GIT","_id":"cjetacc2q001z9oc04xksfa89"},{"name":"github","_id":"cjetacc2q00229oc0gpqw2wy9"},{"name":"CSS","_id":"cjetacc2q00239oc0mocfmqci"},{"name":"ES6","_id":"cjetacc2q00269oc0yf56lgd4"},{"name":"ajax","_id":"cjetacc2q00289oc0qk00pxgk"},{"name":"Promise","_id":"cjetacc2q00299oc0ra7z8vxx"},{"name":"swiftype","_id":"cjetacc2q002d9oc0z6vzjpgq"},{"name":"json","_id":"cjetacc2q002g9oc029pgf411"},{"name":"vim","_id":"cjetacc2q002j9oc0wfc5u0qo"},{"name":"javascript","_id":"cjetacc2q002m9oc0diixpvj5"},{"name":"promise","_id":"cjetacc2q002p9oc01swsqs88"},{"name":"livere","_id":"cjetacc2q002q9oc0yyizjg3j"},{"name":"JavaScript - es6","_id":"cjetevhfd00329oc03p15v4l2"}]}}