{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/yvshare/source/css/blog_basic.css","path":"css/blog_basic.css","modified":1,"renderable":1},{"_id":"themes/yvshare/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/yvshare/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/yvshare/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/actionscript.svg","path":"icons/actionscript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-component.svg","path":"icons/angular-component.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/android.svg","path":"icons/android.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-directive.svg","path":"icons/angular-directive.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-guard.svg","path":"icons/angular-guard.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-pipe.svg","path":"icons/angular-pipe.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-resolver.svg","path":"icons/angular-resolver.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-routing.svg","path":"icons/angular-routing.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular-service.svg","path":"icons/angular-service.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/angular.svg","path":"icons/angular.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/apiblueprint.svg","path":"icons/apiblueprint.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/applescript.svg","path":"icons/applescript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/appveyor.svg","path":"icons/appveyor.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/arduino.svg","path":"icons/arduino.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/audio.svg","path":"icons/audio.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/assembly.svg","path":"icons/assembly.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/aurelia.svg","path":"icons/aurelia.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/autohotkey.svg","path":"icons/autohotkey.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/autoit.svg","path":"icons/autoit.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/babel.svg","path":"icons/babel.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/bithound.svg","path":"icons/bithound.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/blink.svg","path":"icons/blink.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/blink_light.svg","path":"icons/blink_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/bower.svg","path":"icons/bower.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/browserlist.svg","path":"icons/browserlist.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/browserlist_light.svg","path":"icons/browserlist_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/bucklescript.svg","path":"icons/bucklescript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/c.svg","path":"icons/c.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/cabal.svg","path":"icons/cabal.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/cake.svg","path":"icons/cake.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/certificate.svg","path":"icons/certificate.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/changelog.svg","path":"icons/changelog.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/circleci.svg","path":"icons/circleci.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/circleci_light.svg","path":"icons/circleci_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/cloudfoundry.svg","path":"icons/cloudfoundry.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/clojure.svg","path":"icons/clojure.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/cmake.svg","path":"icons/cmake.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/code-climate.svg","path":"icons/code-climate.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/code-climate_light.svg","path":"icons/code-climate_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/coffee.svg","path":"icons/coffee.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/coldfusion.svg","path":"icons/coldfusion.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/conduct.svg","path":"icons/conduct.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/console.svg","path":"icons/console.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/contributing.svg","path":"icons/contributing.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/cpp.svg","path":"icons/cpp.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/credits.svg","path":"icons/credits.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/crystal.svg","path":"icons/crystal.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/crystal_light.svg","path":"icons/crystal_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/csharp.svg","path":"icons/csharp.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/css-map.svg","path":"icons/css-map.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/css.svg","path":"icons/css.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/cucumber.svg","path":"icons/cucumber.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/cuda.svg","path":"icons/cuda.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/dart.svg","path":"icons/dart.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/database.svg","path":"icons/database.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/diff.svg","path":"icons/diff.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/docker.svg","path":"icons/docker.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/document.svg","path":"icons/document.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/dotjs.svg","path":"icons/dotjs.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/drone.svg","path":"icons/drone.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/drone_light.svg","path":"icons/drone_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ejs.svg","path":"icons/ejs.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/elm.svg","path":"icons/elm.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/email.svg","path":"icons/email.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/elixir.svg","path":"icons/elixir.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/erlang.svg","path":"icons/erlang.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/eslint.svg","path":"icons/eslint.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/editorconfig.svg","path":"icons/editorconfig.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/exe.svg","path":"icons/exe.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/favicon.svg","path":"icons/favicon.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/firebase.svg","path":"icons/firebase.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/file.svg","path":"icons/file.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/flash.svg","path":"icons/flash.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-audio.svg","path":"icons/folder-audio.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-audio-open.svg","path":"icons/folder-audio-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/flow.svg","path":"icons/flow.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-aurelia-open.svg","path":"icons/folder-aurelia-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-aurelia.svg","path":"icons/folder-aurelia.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-aws-open.svg","path":"icons/folder-aws-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-aws.svg","path":"icons/folder-aws.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-bower-open.svg","path":"icons/folder-bower-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-bower.svg","path":"icons/folder-bower.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-circleci-open.svg","path":"icons/folder-circleci-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-circleci.svg","path":"icons/folder-circleci.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-components-open.svg","path":"icons/folder-components-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-components.svg","path":"icons/folder-components.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-config-open.svg","path":"icons/folder-config-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-config.svg","path":"icons/folder-config.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-coverage-open.svg","path":"icons/folder-coverage-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-coverage.svg","path":"icons/folder-coverage.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-css-open.svg","path":"icons/folder-css-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-css.svg","path":"icons/folder-css.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-database.svg","path":"icons/folder-database.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-database-open.svg","path":"icons/folder-database-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-dist-open.svg","path":"icons/folder-dist-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-dist.svg","path":"icons/folder-dist.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-docker-open.svg","path":"icons/folder-docker-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-docker.svg","path":"icons/folder-docker.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-docs-open.svg","path":"icons/folder-docs-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-docs.svg","path":"icons/folder-docs.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-expo-open.svg","path":"icons/folder-expo-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-expo.svg","path":"icons/folder-expo.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-export-open.svg","path":"icons/folder-export-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-export.svg","path":"icons/folder-export.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-font-open.svg","path":"icons/folder-font-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-font.svg","path":"icons/folder-font.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-git-open.svg","path":"icons/folder-git-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-git.svg","path":"icons/folder-git.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-github.svg","path":"icons/folder-github.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-github-open.svg","path":"icons/folder-github-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-gitlab-open.svg","path":"icons/folder-gitlab-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-gitlab.svg","path":"icons/folder-gitlab.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-global-open.svg","path":"icons/folder-global-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-global.svg","path":"icons/folder-global.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-gradle-open.svg","path":"icons/folder-gradle-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-gradle.svg","path":"icons/folder-gradle.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-i18n-open.svg","path":"icons/folder-i18n-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-images-open.svg","path":"icons/folder-images-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-i18n.svg","path":"icons/folder-i18n.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-images.svg","path":"icons/folder-images.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-import-open.svg","path":"icons/folder-import-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-import.svg","path":"icons/folder-import.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-include-open.svg","path":"icons/folder-include-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-include.svg","path":"icons/folder-include.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-javascript-open.svg","path":"icons/folder-javascript-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-javascript.svg","path":"icons/folder-javascript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-jinja-open.svg","path":"icons/folder-jinja-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-jinja-open_light.svg","path":"icons/folder-jinja-open_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-jinja.svg","path":"icons/folder-jinja.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-jinja_light.svg","path":"icons/folder-jinja_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-kubernetes-open.svg","path":"icons/folder-kubernetes-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-kubernetes.svg","path":"icons/folder-kubernetes.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-lib-open.svg","path":"icons/folder-lib-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-lib.svg","path":"icons/folder-lib.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-log-open.svg","path":"icons/folder-log-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-log.svg","path":"icons/folder-log.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-markdown-open.svg","path":"icons/folder-markdown-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-markdown.svg","path":"icons/folder-markdown.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-actions-open.svg","path":"icons/folder-ngrx-actions-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-actions.svg","path":"icons/folder-ngrx-actions.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-effects-open.svg","path":"icons/folder-ngrx-effects-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-effects.svg","path":"icons/folder-ngrx-effects.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-entities-open.svg","path":"icons/folder-ngrx-entities-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-entities.svg","path":"icons/folder-ngrx-entities.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-reducer-open.svg","path":"icons/folder-ngrx-reducer-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-reducer.svg","path":"icons/folder-ngrx-reducer.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-state-open.svg","path":"icons/folder-ngrx-state-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-ngrx-state.svg","path":"icons/folder-ngrx-state.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-node-open.svg","path":"icons/folder-node-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-node.svg","path":"icons/folder-node.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-other-open.svg","path":"icons/folder-other-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-php.svg","path":"icons/folder-php.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-php-open.svg","path":"icons/folder-php-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-phpmailer-open.svg","path":"icons/folder-phpmailer-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-other.svg","path":"icons/folder-other.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-phpmailer.svg","path":"icons/folder-phpmailer.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-public-open.svg","path":"icons/folder-public-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-public.svg","path":"icons/folder-public.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-react-components-open.svg","path":"icons/folder-react-components-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-react-components.svg","path":"icons/folder-react-components.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-actions-open.svg","path":"icons/folder-redux-actions-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-actions.svg","path":"icons/folder-redux-actions.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-reducer-open.svg","path":"icons/folder-redux-reducer-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-reducer.svg","path":"icons/folder-redux-reducer.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-store-open.svg","path":"icons/folder-redux-store-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-redux-store.svg","path":"icons/folder-redux-store.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-resource-open.svg","path":"icons/folder-resource-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-resource.svg","path":"icons/folder-resource.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-scripts-open.svg","path":"icons/folder-scripts-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-sass-open.svg","path":"icons/folder-sass-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-sass.svg","path":"icons/folder-sass.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-scripts.svg","path":"icons/folder-scripts.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-src.svg","path":"icons/folder-src.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-src-open.svg","path":"icons/folder-src-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-sublime-open.svg","path":"icons/folder-sublime-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-sublime.svg","path":"icons/folder-sublime.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-temp-open.svg","path":"icons/folder-temp-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-temp.svg","path":"icons/folder-temp.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-test-open.svg","path":"icons/folder-test-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-tools-open.svg","path":"icons/folder-tools-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-tools.svg","path":"icons/folder-tools.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-typescript-open.svg","path":"icons/folder-typescript-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-typescript.svg","path":"icons/folder-typescript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-video.svg","path":"icons/folder-video.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-video-open.svg","path":"icons/folder-video-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-views-open.svg","path":"icons/folder-views-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-test.svg","path":"icons/folder-test.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-views.svg","path":"icons/folder-views.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-vscode-open.svg","path":"icons/folder-vscode-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-vscode.svg","path":"icons/folder-vscode.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-vue-open.svg","path":"icons/folder-vue-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-vue.svg","path":"icons/folder-vue.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-wakatime-open.svg","path":"icons/folder-wakatime-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-wakatime.svg","path":"icons/folder-wakatime.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-webpack-open.svg","path":"icons/folder-webpack-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-webpack.svg","path":"icons/folder-webpack.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-wordpress-open.svg","path":"icons/folder-wordpress-open.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/folder-wordpress.svg","path":"icons/folder-wordpress.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/font.svg","path":"icons/font.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/gatsby.svg","path":"icons/gatsby.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/fsharp.svg","path":"icons/fsharp.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/fusebox.svg","path":"icons/fusebox.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/gitlab.svg","path":"icons/gitlab.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/git.svg","path":"icons/git.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/go.svg","path":"icons/go.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/gradle.svg","path":"icons/gradle.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/graphql.svg","path":"icons/graphql.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/gulp.svg","path":"icons/gulp.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/groovy.svg","path":"icons/groovy.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/graphcool.svg","path":"icons/graphcool.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/h.svg","path":"icons/h.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/haml.svg","path":"icons/haml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/hack.svg","path":"icons/hack.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/handlebars.svg","path":"icons/handlebars.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/haxe.svg","path":"icons/haxe.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/heroku.svg","path":"icons/heroku.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/hpp.svg","path":"icons/hpp.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/haskell.svg","path":"icons/haskell.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/html.svg","path":"icons/html.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/http.svg","path":"icons/http.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ionic.svg","path":"icons/ionic.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/image.svg","path":"icons/image.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/java.svg","path":"icons/java.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/javascript-map.svg","path":"icons/javascript-map.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/jenkins.svg","path":"icons/jenkins.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/javascript.svg","path":"icons/javascript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/jinja.svg","path":"icons/jinja.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/jinja_light.svg","path":"icons/jinja_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/julia.svg","path":"icons/julia.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/json.svg","path":"icons/json.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/karma.svg","path":"icons/karma.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/kl.svg","path":"icons/kl.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/key.svg","path":"icons/key.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/kivy.svg","path":"icons/kivy.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/kotlin.svg","path":"icons/kotlin.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/laravel.svg","path":"icons/laravel.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/less.svg","path":"icons/less.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/lib.svg","path":"icons/lib.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/livescript.svg","path":"icons/livescript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/lock.svg","path":"icons/lock.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/log.svg","path":"icons/log.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/lua.svg","path":"icons/lua.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/markdown.svg","path":"icons/markdown.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/markojs.svg","path":"icons/markojs.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/mathematica.svg","path":"icons/mathematica.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/matlab.svg","path":"icons/matlab.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/merlin.svg","path":"icons/merlin.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/mjml.svg","path":"icons/mjml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/mocha.svg","path":"icons/mocha.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/mxml.svg","path":"icons/mxml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ngrx-effects.svg","path":"icons/ngrx-effects.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ngrx-actions.svg","path":"icons/ngrx-actions.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ngrx-entity.svg","path":"icons/ngrx-entity.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ngrx-reducer.svg","path":"icons/ngrx-reducer.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ngrx-state.svg","path":"icons/ngrx-state.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/nim.svg","path":"icons/nim.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/nix.svg","path":"icons/nix.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/nodejs.svg","path":"icons/nodejs.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/nodemon.svg","path":"icons/nodemon.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/npm.svg","path":"icons/npm.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/nunjucks.svg","path":"icons/nunjucks.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ocaml.svg","path":"icons/ocaml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/pdf.svg","path":"icons/pdf.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/perl.svg","path":"icons/perl.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/php.svg","path":"icons/php.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/php_elephant.svg","path":"icons/php_elephant.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/postcss.svg","path":"icons/postcss.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/powerpoint.svg","path":"icons/powerpoint.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/powershell.svg","path":"icons/powershell.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/prettier.svg","path":"icons/prettier.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/protractor.svg","path":"icons/protractor.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/pug.svg","path":"icons/pug.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/puppet.svg","path":"icons/puppet.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/purescript.svg","path":"icons/purescript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/python.svg","path":"icons/python.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/r.svg","path":"icons/r.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/raml.svg","path":"icons/raml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/razor.svg","path":"icons/razor.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/react.svg","path":"icons/react.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/readme.svg","path":"icons/readme.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/reason.svg","path":"icons/reason.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/restql.svg","path":"icons/restql.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/riot.svg","path":"icons/riot.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/robot.svg","path":"icons/robot.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/rollup.svg","path":"icons/rollup.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/ruby.svg","path":"icons/ruby.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/rust.svg","path":"icons/rust.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/sass.svg","path":"icons/sass.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/sbt.svg","path":"icons/sbt.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/scala.svg","path":"icons/scala.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/sequelize.svg","path":"icons/sequelize.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/settings.svg","path":"icons/settings.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/shaderlab.svg","path":"icons/shaderlab.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/slim.svg","path":"icons/slim.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/smarty.svg","path":"icons/smarty.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/snyk.svg","path":"icons/snyk.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/solidity.svg","path":"icons/solidity.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/sonar.svg","path":"icons/sonar.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/stylelint.svg","path":"icons/stylelint.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/stylelint_light.svg","path":"icons/stylelint_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/stylus.svg","path":"icons/stylus.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/sublime.svg","path":"icons/sublime.svg","modified":0,"renderable":1},{"_id":"themes/yvshare/source/icons/swc.svg","path":"icons/swc.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/swift.svg","path":"icons/swift.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/table.svg","path":"icons/table.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/terraform.svg","path":"icons/terraform.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/test-js.svg","path":"icons/test-js.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/test-jsx.svg","path":"icons/test-jsx.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/test-ts.svg","path":"icons/test-ts.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/tex.svg","path":"icons/tex.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/todo.svg","path":"icons/todo.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/travis.svg","path":"icons/travis.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/tune.svg","path":"icons/tune.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/twig.svg","path":"icons/twig.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/typescript-def.svg","path":"icons/typescript-def.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/typescript.svg","path":"icons/typescript.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/url.svg","path":"icons/url.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/verilog.svg","path":"icons/verilog.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/vfl.svg","path":"icons/vfl.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/video.svg","path":"icons/video.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/virtual.svg","path":"icons/virtual.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/visualstudio.svg","path":"icons/visualstudio.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/vscode.svg","path":"icons/vscode.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/vue.svg","path":"icons/vue.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/wakatime.svg","path":"icons/wakatime.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/wakatime_light.svg","path":"icons/wakatime_light.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/watchman.svg","path":"icons/watchman.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/webpack.svg","path":"icons/webpack.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/wolframlanguage.svg","path":"icons/wolframlanguage.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/word.svg","path":"icons/word.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/xaml.svg","path":"icons/xaml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/xml.svg","path":"icons/xml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/yaml.svg","path":"icons/yaml.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/yang.svg","path":"icons/yang.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/yarn.svg","path":"icons/yarn.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/icons/zip.svg","path":"icons/zip.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/livere2.png","path":"images/livere2.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/livere3.png","path":"images/livere3.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/localstorage.png","path":"images/localstorage.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/logo@2x.png","path":"images/logo@2x.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/js/jquery-migrate-1.2.1.min.js","path":"js/jquery-migrate-1.2.1.min.js","modified":1,"renderable":1},{"_id":"themes/yvshare/source/js/jquery.appear.js","path":"js/jquery.appear.js","modified":1,"renderable":1},{"_id":"themes/yvshare/source/js/livere.js","path":"js/livere.js","modified":1,"renderable":1},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/yvshare/source/images/livere1.png","path":"images/livere1.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/yvshare/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"themes/yvshare/source/images/livere.png","path":"images/livere.png","modified":0,"renderable":1},{"_id":"themes/yvshare/source/css/viewer.min.css","path":"css/viewer.min.css","modified":1,"renderable":1},{"_id":"themes/yvshare/source/js/viewer.min.js","path":"js/viewer.min.js","modified":1,"renderable":1},{"_id":"themes/yvshare/source/images/swiftype.png","path":"images/swiftype.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yvshare/LICENSE","hash":"359cb81298c1fdbccf531548fc097466b0151be4","modified":1519982374523},{"_id":"themes/yvshare/README.md","hash":"75a3829b8a316249ec0b4fd8eae2d371de879494","modified":1519982374523},{"_id":"themes/yvshare/_config.sample.yml","hash":"75b7755ee0f70cbf76190001e081c704171077bb","modified":1519982374523},{"_id":"themes/yvshare/_config.yml","hash":"1821e34a74e6a4bec91666aeb3f07dd78dafa105","modified":1519986567892},{"_id":"themes/yvshare/package.json","hash":"eb94a9d0487218419c726152189c1c915d0c4fa7","modified":1519979914845},{"_id":"source/_posts/0809000_hello-world.md","hash":"f7ad00e551da066bb9d9917fb63496b7a130859e","modified":1520244768978},{"_id":"source/_posts/0809001_hello.md","hash":"e5cb9c1b10833ecb225fbcaaca6633c95e4f86a8","modified":1520244768978},{"_id":"source/_posts/0809002_CSS3-渐变.md","hash":"0f956e0893b3fd1cfb4c404d9d5916a1e82f07b3","modified":1520231380499},{"_id":"source/_posts/0809003_在hexo中部署livere评论系统.md","hash":"9683c91cff0cfebe4c2fc4f4f901ddc6a2ea531d","modified":1520241864269},{"_id":"source/_posts/0809004_HTML5存储webStorage.md","hash":"0b0ef963dd3f212a7ad8b1efa532fb18f6d06a36","modified":1520235117544},{"_id":"source/_posts/0809005_JSON序列化选项.md","hash":"4067e80309534d0f739e8085a5e7f0e2ab6de626","modified":1520235167614},{"_id":"source/_posts/0809007_记一次在公司中配置Babel的经历.md","hash":"b203b526032869772a1e1fe393cad9e1ddc4621e","modified":1520218999544},{"_id":"source/_posts/0809006_关于JavaScript数组的一些思考.md","hash":"8f7221a5378f8f02f48fb049d206563a50eaf21d","modified":1520218935370},{"_id":"source/_posts/0809008_JavaScript面向对象.md","hash":"319d4acba371294f53dc734c9bf6dfc12ab3d81d","modified":1520218897767},{"_id":"source/_posts/0809010_小窥Node.js服务端框架Express.md","hash":"fd87f390258f4414b095910bd87a25c731432844","modified":1520235192716},{"_id":"source/_posts/0809009_vue-cli快速构建vue-js项目.md","hash":"f8fac124f276e278f61162b5db20c1abf07f6e51","modified":1520218924084},{"_id":"source/_posts/0809011_常用的GIT命令.md","hash":"cad117ff6eaf49db0f3b601ab4a35568527f965d","modified":1520218962211},{"_id":"source/_posts/0809012_常用的Vim命令.md","hash":"4d17f5b4428659cfda6f176aaaf9cdbe8465c0c7","modified":1520219173132},{"_id":"source/_posts/0809013_常用的markdown语法.md","hash":"e3339d6e11acc26dc5085f77bf10f0da5fd77693","modified":1520219164691},{"_id":"source/_posts/0809014_JavaScript类型检测.md","hash":"af4d0335fddc948165af984b3c3b7587e3060ded","modified":1520232004930},{"_id":"source/_posts/0809015_实时监听文本域输入.md","hash":"220af769f7adddff09aef1f143e0a6b1b8cbcc4d","modified":1520231751105},{"_id":"source/_posts/0809016_获取JSON的key.md","hash":"6d5a74cb99dcb129db87fa39fd277a893661c8c9","modified":1520231636280},{"_id":"source/_posts/0809017_ajax请求之axios.md","hash":"bfec2896f124cda5cfdb26ddfaa9459a505ed81c","modified":1520219151503},{"_id":"source/_posts/0809018_在hexo中配置swiftype搜索平台.md","hash":"e7e1c90886e30d67db971e5f15e8ab51c17b7aec","modified":1520244769056},{"_id":"source/_posts/0809019_搭建一个基于hexo的个人博客.md","hash":"fd173387d638069a5105a020f66fad7490db3856","modified":1520242336583},{"_id":"source/tags/index.md","hash":"4e5a63708cf4c6d561273edaeb06c990269a15f7","modified":1519717535259},{"_id":"source/about/index.md","hash":"04ba66073f092f19094c5e7bbb7c221ef4a7ebbd","modified":1519641398391},{"_id":"themes/yvshare/languages/pt-BR--.yml","hash":"ac5a0003d7793aade51f70643b2e2a631b6a65c3","modified":1519982374523},{"_id":"themes/yvshare/languages/zh-cn.yml","hash":"dab1823e036f4adb3b7ae9efe95a37a15e47bec2","modified":1519982374523},{"_id":"themes/yvshare/layout/archive.pug","hash":"1a161404966000b25a84762f08da3ca60af146bc","modified":1519982374523},{"_id":"themes/yvshare/layout/category.pug","hash":"ae894ef4baee4a0c7c8e66641166061e789f1fa7","modified":1519982374523},{"_id":"themes/yvshare/layout/index.pug","hash":"53da3cfd498951148acb33de1574df80ae282dc5","modified":1519982374523},{"_id":"themes/yvshare/layout/mixins.pug","hash":"107bfd2fe10de0d8b110c13bb1168af79e62a37c","modified":1519982374523},{"_id":"themes/yvshare/layout/page.pug","hash":"15142c94e5c2247aba8efb64cffd695b3f133670","modified":1519982374523},{"_id":"themes/yvshare/layout/tag.pug","hash":"7017a8bae4f4a412dafb556772bdcf2cfddeb79f","modified":1519982374524},{"_id":"themes/yvshare/layout/post.pug","hash":"a663a89b88869e037e2c22ac2f55be18434471df","modified":1519982374523},{"_id":"themes/yvshare/layout/partial/footer.pug","hash":"d3d51ef93adb024ae0cb91a0ab4644ea0f39524a","modified":1519982374523},{"_id":"themes/yvshare/layout/partial/comments.pug","hash":"fad5bbe7c2a134c892fcb1c731d979463145a49b","modified":1519982374523},{"_id":"themes/yvshare/layout/partial/layout.pug","hash":"4aa21ca0991fc2755aa9eac5a59eb9e225c98be6","modified":1520244769091},{"_id":"themes/yvshare/layout/partial/head.pug","hash":"29831dda2c392f563c45e91e5436d04d58e5fb00","modified":1520244769091},{"_id":"themes/yvshare/layout/partial/nav.pug","hash":"41a43a0c82adb8fe3b9707e07e2044617da6c8c9","modified":1519986567892},{"_id":"themes/yvshare/layout/partial/sidebar.pug","hash":"92bf3a95666e60decbc230b98f4d9cd199b47e7a","modified":1519982374523},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1519979914764},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1519979914772},{"_id":"themes/yvshare/source/css/blog_basic.css","hash":"0ea3688739f7c816f5aa0488a5250ffc619f4e57","modified":1519982374524},{"_id":"themes/yvshare/source/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1519982374524},{"_id":"themes/yvshare/source/css/style.css","hash":"8af43d357f25beb6332aca4ce97abad87ceb988e","modified":1520244769091},{"_id":"themes/yvshare/source/css/style.scss","hash":"175c9237798207f705c62777b5f51509adec6d0a","modified":1519982374524},{"_id":"themes/yvshare/source/icons/actionscript.svg","hash":"fe14fa433d5eb810efe2f87bce769612fa0ef242","modified":1520244769092},{"_id":"themes/yvshare/source/icons/angular-component.svg","hash":"5d5f18afb4195e792816852e4e9ba2e596607c42","modified":1520244769092},{"_id":"themes/yvshare/source/icons/android.svg","hash":"8faaa2e1a7bb845d456e11ba4b1470e3fa104769","modified":1520244769092},{"_id":"themes/yvshare/source/icons/angular-directive.svg","hash":"64a014ccb7e4a98d20db12678c371a5c294bd62b","modified":1520244769092},{"_id":"themes/yvshare/source/icons/angular-guard.svg","hash":"eb422a3e4302c92b64ea7f496c2a88792a03e8a6","modified":1520244769092},{"_id":"themes/yvshare/source/icons/angular-pipe.svg","hash":"13ff75121fb4418195b42eafdc9fbd1f8eda7ec5","modified":1520244769092},{"_id":"themes/yvshare/source/icons/angular-resolver.svg","hash":"eb422a3e4302c92b64ea7f496c2a88792a03e8a6","modified":1520244769092},{"_id":"themes/yvshare/source/icons/angular-routing.svg","hash":"5cd1e302741cb14d132d1dedf83617e713789516","modified":1520244769092},{"_id":"themes/yvshare/source/icons/angular-service.svg","hash":"038ec80df1ff8d2491c6aa5169e73a2da0c99877","modified":1520244769092},{"_id":"themes/yvshare/source/icons/angular.svg","hash":"eb25808d4e2770546d7cee4117e51217d3bef6cd","modified":1520244769092},{"_id":"themes/yvshare/source/icons/apiblueprint.svg","hash":"0d06a293d0eed95715cfafddc073483b8037a9e1","modified":1520244769092},{"_id":"themes/yvshare/source/icons/applescript.svg","hash":"78d61b98df02da8361c8d86092d0c8cca48ab485","modified":1520244769106},{"_id":"themes/yvshare/source/icons/appveyor.svg","hash":"c4d95188e5df7d33a422a64ad5aa7c5334308e70","modified":1520244769106},{"_id":"themes/yvshare/source/icons/arduino.svg","hash":"5df8206ace5bd8fab216e7b2c19006617d55a0ec","modified":1520228940149},{"_id":"themes/yvshare/source/icons/audio.svg","hash":"3f429938d66d67af771ebd53ba91b83e97436714","modified":1520244769106},{"_id":"themes/yvshare/source/icons/assembly.svg","hash":"c443924918ba7655004e591ddcdeb22745ef1a73","modified":1520244769106},{"_id":"themes/yvshare/source/icons/aurelia.svg","hash":"46e2fb5768175227427b52b7ce3476919e1b35a3","modified":1520244769106},{"_id":"themes/yvshare/source/icons/autohotkey.svg","hash":"3d1416ffdc6e9c5a118be89478b9365d183ec757","modified":1520244769106},{"_id":"themes/yvshare/source/icons/autoit.svg","hash":"f24af078ba62eca22d0f5f68c2a6bd45376fa49f","modified":1520244769106},{"_id":"themes/yvshare/source/icons/babel.svg","hash":"b551682468803b781e4429e145eb33bc32f8dd04","modified":1520244769106},{"_id":"themes/yvshare/source/icons/bithound.svg","hash":"edf90d0f1fdbea471415f4771a4c9557a4037043","modified":1520244769106},{"_id":"themes/yvshare/source/icons/blink.svg","hash":"dd44fca4fdb2f16d6cd7299b4b819dc256ed901b","modified":1520244769106},{"_id":"themes/yvshare/source/icons/blink_light.svg","hash":"e8dc0b0f4f4a45ee6aa9b9caa2667ba96d56e56d","modified":1520244769106},{"_id":"themes/yvshare/source/icons/bower.svg","hash":"722b461c2d4c8e3830a35ee4e4135730eebf7f7d","modified":1520244769106},{"_id":"themes/yvshare/source/icons/browserlist.svg","hash":"e0cb09286dfca27877cc3400a9f786770023a210","modified":1520244769106},{"_id":"themes/yvshare/source/icons/browserlist_light.svg","hash":"accf6ed7221a058e5b3a3e0a2e7aa023cac87b03","modified":1520244769106},{"_id":"themes/yvshare/source/icons/bucklescript.svg","hash":"c03ed2e44b58193a20ce2e8a4fcbaaff3c373f05","modified":1520244769106},{"_id":"themes/yvshare/source/icons/c.svg","hash":"867c2e881653942ca44220ed7567e7f7e663d5c8","modified":1520244769106},{"_id":"themes/yvshare/source/icons/cabal.svg","hash":"b081095df608b3a31f063b04f107bbb480532845","modified":1520244769106},{"_id":"themes/yvshare/source/icons/cake.svg","hash":"b63011ef26d8132c72e76a974628dc97dc31a9f6","modified":1520244769106},{"_id":"themes/yvshare/source/icons/certificate.svg","hash":"ac38e8c9e5f0fe8b4a7c747808a2e2d7613f0583","modified":1520244769106},{"_id":"themes/yvshare/source/icons/changelog.svg","hash":"f05bfebd6dfac31acc7602f9fc3f2574af00a9b0","modified":1520244769107},{"_id":"themes/yvshare/source/icons/circleci.svg","hash":"ae6d02474424393c5ba26f413cd5c817d8079bfb","modified":1520244769107},{"_id":"themes/yvshare/source/icons/circleci_light.svg","hash":"1b600acce04d7b6e9ef4a9f6c7224931cc12d516","modified":1520244769107},{"_id":"themes/yvshare/source/icons/cloudfoundry.svg","hash":"30f7fb722c012af9121d6dfc984bde1bc44a8588","modified":1520244769107},{"_id":"themes/yvshare/source/icons/clojure.svg","hash":"3d9681928ef4a136777f68dcc20611e3b6f03ade","modified":1520244769107},{"_id":"themes/yvshare/source/icons/cmake.svg","hash":"5d453f57ac310cd7607d76e28de7dc65123bb295","modified":1520244769107},{"_id":"themes/yvshare/source/icons/code-climate.svg","hash":"43d4a89e95c382fd623bbd0f17db30e1f3fb77bd","modified":1520244769107},{"_id":"themes/yvshare/source/icons/code-climate_light.svg","hash":"4d7280658e80a23334b305029ffabb63848e6337","modified":1520244769107},{"_id":"themes/yvshare/source/icons/coffee.svg","hash":"adfa6f8b6fa3a01c4135444282f89b8c863fff17","modified":1520244769107},{"_id":"themes/yvshare/source/icons/coldfusion.svg","hash":"35cf0136da6da3e6d1b92a78c98e06d19dd8f1cc","modified":1520244769107},{"_id":"themes/yvshare/source/icons/conduct.svg","hash":"1170de5115778d3fde39cba10db1111796c3ea5f","modified":1520244769107},{"_id":"themes/yvshare/source/icons/console.svg","hash":"c1cce82f0ec834b3f644afa13a23f48aa97dbbf9","modified":1520244769107},{"_id":"themes/yvshare/source/icons/contributing.svg","hash":"cdc2b995778db801cd4b2d25970b95dbcf681194","modified":1520244769107},{"_id":"themes/yvshare/source/icons/cpp.svg","hash":"c15420adfadfbe3a2ace2fc9bf2b2460362ca42c","modified":1520244769107},{"_id":"themes/yvshare/source/icons/credits.svg","hash":"75afdf49c8a543c6c2f8aa16e0fcc7aeca46f39c","modified":1520244769107},{"_id":"themes/yvshare/source/icons/crystal.svg","hash":"eba1721c20018b10d69dcc3d652e364a1882310e","modified":1520244769107},{"_id":"themes/yvshare/source/icons/crystal_light.svg","hash":"87f49a3339fd3717985e1d68c91f82cd7d29dd92","modified":1520244769107},{"_id":"themes/yvshare/source/icons/csharp.svg","hash":"19908909103b94899da5ac1cadc195b43124ce5a","modified":1520244769107},{"_id":"themes/yvshare/source/icons/css-map.svg","hash":"0a402e00be0acb4dfe1fa523399be79562b4448c","modified":1520244769107},{"_id":"themes/yvshare/source/icons/css.svg","hash":"bfb02387ea224454337caada35495f0c7b00b703","modified":1520244769107},{"_id":"themes/yvshare/source/icons/cucumber.svg","hash":"29900bb3ab4dff20e86ef7358c1e2569970583bc","modified":1520244769107},{"_id":"themes/yvshare/source/icons/cuda.svg","hash":"b7124d6454a924821a28d05b4e017dfa2c55bdef","modified":1520244769107},{"_id":"themes/yvshare/source/icons/dart.svg","hash":"520fec75469dbb1243e832ef94776fc3ed4dafd2","modified":1520244769107},{"_id":"themes/yvshare/source/icons/database.svg","hash":"816534588280775b939cc004e9d94966ccd15faf","modified":1520244769107},{"_id":"themes/yvshare/source/icons/diff.svg","hash":"76d798fe252bdad85e6f9832cd4d8e529464707c","modified":1520244769107},{"_id":"themes/yvshare/source/icons/docker.svg","hash":"db2b6acbeb5dacd5b9c188fbc53b4fd34c51b3b7","modified":1520244769107},{"_id":"themes/yvshare/source/icons/document.svg","hash":"711cc674bb9952199ef76186370019b72a3d0c93","modified":1520244769107},{"_id":"themes/yvshare/source/icons/dotjs.svg","hash":"6727f701bc3c2cad130d14b3e5474877a7559463","modified":1520244769107},{"_id":"themes/yvshare/source/icons/drone.svg","hash":"68e0ec0dd7bb3ab85447c60c62734188ecbd0922","modified":1520244769107},{"_id":"themes/yvshare/source/icons/drone_light.svg","hash":"ebe95284aeb24707a339b430ab800a97d7a9fab7","modified":1520244769107},{"_id":"themes/yvshare/source/icons/ejs.svg","hash":"59ee762d968e24512ee05cd89dbc80c9d119ff9b","modified":1520244769107},{"_id":"themes/yvshare/source/icons/elm.svg","hash":"5d6abe86f84a129c9ccf5f8793f8a95415a4e6ef","modified":1520244769108},{"_id":"themes/yvshare/source/icons/email.svg","hash":"75f4901cb4349f0e018f2ae6c8efd2fa6b8281ea","modified":1520244769108},{"_id":"themes/yvshare/source/icons/elixir.svg","hash":"550e933f7307a3a7ae54c72ca65c9a02dd781b1c","modified":1520244769108},{"_id":"themes/yvshare/source/icons/erlang.svg","hash":"696446fc1bdb2218e76a2aa42a24312be21f2e7c","modified":1520244769108},{"_id":"themes/yvshare/source/icons/eslint.svg","hash":"d03cb3601c6ee1a6230a0387da741752480fca93","modified":1520244769108},{"_id":"themes/yvshare/source/icons/editorconfig.svg","hash":"86ed852ff68aeb2eb1e1f36d2f27121ce6651038","modified":1520244769107},{"_id":"themes/yvshare/source/icons/exe.svg","hash":"4908d93243ace9403d53554fa2c6e39f71920b97","modified":1520244769108},{"_id":"themes/yvshare/source/icons/favicon.svg","hash":"fcfc804306a874b264e7c5d5fa76cf733714b181","modified":1520244769108},{"_id":"themes/yvshare/source/icons/firebase.svg","hash":"46af5498ed68468de53a59677a345ec16e6d0ff3","modified":1520244769108},{"_id":"themes/yvshare/source/icons/file.svg","hash":"92e2534cd8f8fe66f7222af49076faf295417a99","modified":1520244769108},{"_id":"themes/yvshare/source/icons/flash.svg","hash":"70c1bc8d9aab438f2f86aa8aab8442de9de04ac1","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-audio.svg","hash":"06d72d37d5d6bb9a5173b1b6010f7d886aadfda8","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-audio-open.svg","hash":"9b0789f5dec59a25d23abad03b37eb568cdc51f2","modified":1520244769108},{"_id":"themes/yvshare/source/icons/flow.svg","hash":"d4deca2d09c421b85ce996af63b1474c8ea5023d","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-aurelia-open.svg","hash":"d5d4e5e031641644d6221ad3c7a151ea2c04f421","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-aurelia.svg","hash":"54153cd10ea6020ee1a4ddf6ed46ccaebc7817b8","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-aws-open.svg","hash":"54faa4ddc50a7d3bfeab75cd810dd54b1c17fedb","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-aws.svg","hash":"65c33814078a13a80c17a1760a31dc8a5124b668","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-bower-open.svg","hash":"2f52e5110da14d32aa14f72b2c4b38aebd98622a","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-bower.svg","hash":"49a87f00d0844d0b277d25c5bf371b99675aa979","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-circleci-open.svg","hash":"f820900e2ef7d1135fc3220993d1ea130c5a4480","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-circleci.svg","hash":"81d08e6eb5ab4d60e6d51f91386fec6c463f0dd0","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-components-open.svg","hash":"63e59064710afaacdf2abe421e90a4b1354d207e","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-components.svg","hash":"07482e8114d6ae1115928b8556f1d2cf7b1c245b","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-config-open.svg","hash":"2a21020e94da94decd5db5be84eff3d330b173c6","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-config.svg","hash":"d1a9942664ee6f37a8542b7953ce7b01ba58389f","modified":1520244769108},{"_id":"themes/yvshare/source/icons/folder-coverage-open.svg","hash":"30396ae61a706f7aa01317b4c1eed620beb224e3","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-coverage.svg","hash":"bfe3dba4344c0bbb9496dc634a6adbedc27c23eb","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-css-open.svg","hash":"55f10feb07dc32a91eab24c89a731682072aeb81","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-css.svg","hash":"c6b36463452f9208ebe1d7f9db3e2353ef9af464","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-database.svg","hash":"d5883c18e6317848ea23fa0e8f367f2e8cbea9b3","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-database-open.svg","hash":"4f169865dba67e148d8169950598cdaad3ac0c8c","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-dist-open.svg","hash":"9ee9c8aa451d8557869b859fc7afab6529253714","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-dist.svg","hash":"91a8a5833b54ba3d5d2085f31a1f0458d2609964","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-docker-open.svg","hash":"ebdb69fc91bfc711890bb40dda186f1d2b310f78","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-docker.svg","hash":"3a21831c02d13f82006a2324e618b560f6114f4a","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-docs-open.svg","hash":"9c1a66ae0cbfb70e66351f2ee2aac2576372c229","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-docs.svg","hash":"105fbd3c249bd5b6dded349707fa5ea2a1f05dfe","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-expo-open.svg","hash":"1201cb30d9b3be42f7733bf47bc6dcbc675b0ee5","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-expo.svg","hash":"1db588c981a68edb53c15cadecced95cf879bb07","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-export-open.svg","hash":"14e1684c467de4f119edabc2a1b5a5dfc92b8bb3","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-export.svg","hash":"c459e80b56751f21755f767b700596696c292826","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-font-open.svg","hash":"e1b75403f154bf9278c5d9aa4c9ecca0fb7cf802","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-font.svg","hash":"f0ff99282eadf26498f549861819c21420ff20cf","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-git-open.svg","hash":"a22f9b1447a52952083f754261af2627f4aa5b88","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-git.svg","hash":"9023cee1498f9b570ac9e91ce306d17f3ce5c13b","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-github.svg","hash":"6cc257965c728021df6e1e508234d07affc43ce2","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-github-open.svg","hash":"6b69b9a4b34f9c13427e3622c79b288ca45ff317","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-gitlab-open.svg","hash":"aad4c21e7f43d4068a621eb1d85370fbe79828e4","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-gitlab.svg","hash":"aea624652f1dc8bdaf0ac4048c0001ce7b4e9abf","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-global-open.svg","hash":"454883bd9297fe17dc3dd772bb670373da060746","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-global.svg","hash":"1739a20a403e0ba5fa5bb5c39e8ea662252da3ba","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-gradle-open.svg","hash":"9cc801584389b9f56b08877ffd6237625f09fe47","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-gradle.svg","hash":"ce79b7e084366f361c31b7aa90e3afbdca5aabb3","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-i18n-open.svg","hash":"3ff7480bff3d4e86d705641571b1953ee0f55e91","modified":1520244769109},{"_id":"themes/yvshare/source/icons/folder-images-open.svg","hash":"c77039e8684bca7e4babf43d6d139be0c5c5e1c5","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-i18n.svg","hash":"c938e551793a5a70bbf0b6dc44cff3ee8ed63ab6","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-images.svg","hash":"de6ffd14c8ac8fcb97425858cf726d6bef611e61","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-import-open.svg","hash":"a662b8ccad8ec9958ef3d2a200598ad10cc0c59b","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-import.svg","hash":"79055b3ffff83757e4df7febfc4a2251722d849a","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-include-open.svg","hash":"74551b79bf69c13a73e8f695993c85c476102d16","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-include.svg","hash":"36d74bbae324d6b68964e3fb476c7a00bdcee6c7","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-javascript-open.svg","hash":"0fa6a5ddf3d348ed977211011b41f02ec04cc611","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-javascript.svg","hash":"76dec6c18b468ac9c1f87004794417b685cebcca","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-jinja-open.svg","hash":"c45a436f380c4867306e6f1c72e49f27e8f0157e","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-jinja-open_light.svg","hash":"7e4c55d108bb03b56068a41701b33b56baf0c98d","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-jinja.svg","hash":"4b21e915e0bc41e0f980fbea4e75187e5c61f970","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-jinja_light.svg","hash":"a92753881f1116baf776fff04f8ee0e9ba7fa9da","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-kubernetes-open.svg","hash":"23360d710753f4bcca420e379ee6904c320a8cdc","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-kubernetes.svg","hash":"3e76bd3d518e95982daa225c04dcb98e6344fe73","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-lib-open.svg","hash":"3334fe45f71dcdfd0f9aa881c19e4006cbe37225","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-lib.svg","hash":"83ef2e51ded8a964c4abd1324f629624f1e36c3d","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-log-open.svg","hash":"3383b237b4528946e4fb26664414afc6b1dc97e2","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-log.svg","hash":"df3743d460b2be2720b64e259e5b0b5eddb40c65","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-markdown-open.svg","hash":"4a292144c3cf13ab295acc3f780381b856f410bd","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-markdown.svg","hash":"927a4477a2964e3ce8a44e04c26050f2f41b6497","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-ngrx-actions-open.svg","hash":"b8c71038b77888695101715cb8ee8aea91bd0aa6","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-ngrx-actions.svg","hash":"4b783355110a640e9f2874e42dc41aced498d5bb","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-ngrx-effects-open.svg","hash":"1e533652cf10c07ef863571d3083befefdaf4eb0","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-ngrx-effects.svg","hash":"88cd99b9cd93b266f84349b4b1ba7fb7090dca78","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-ngrx-entities-open.svg","hash":"178e0dc0dd2d5b0469d7a33477160e6e556ce5c1","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-ngrx-entities.svg","hash":"727e11b2e669339fc2584bdb94d06cb7d11fee99","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-ngrx-reducer-open.svg","hash":"b412a05acdd568b27404f76295f7036ff27f2a93","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-ngrx-reducer.svg","hash":"805563475b1afcdfa0964da65b34ad551e4f98e8","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-ngrx-state-open.svg","hash":"690f3b2ef494a9c1e8cd2c2be6d475301db39853","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-ngrx-state.svg","hash":"bae2898baa2c02062cfc9e6645a9331434b1aa01","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-node-open.svg","hash":"06ef410511a0648e5eb119a4ebc804a2dd61191d","modified":1520244769110},{"_id":"themes/yvshare/source/icons/folder-node.svg","hash":"13ec14746f94e70b4f5bfec70fce5997d3646b0d","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-other-open.svg","hash":"40097e00d7378fdbf50887b84a9610c381c70f08","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-php.svg","hash":"1122d1a25b99f26a544cd01876d703eb3ce06027","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-php-open.svg","hash":"1f2dc031f9155d7e23e02b811099abb75ad2f3f4","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-phpmailer-open.svg","hash":"3ba13af85e4430946e48e9246f0ab239790db4bd","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-other.svg","hash":"da7347983121d44a7304598a620461bbf2282399","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-phpmailer.svg","hash":"1402d6a011e292668e2d70f3437dbae6d4ab6a06","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-public-open.svg","hash":"2308ea896fb4a90a14e702fbf79c9765650c1e64","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-public.svg","hash":"d1e59569fea99acea9f1b2032e0489cafa2a204a","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-react-components-open.svg","hash":"455302ef30c736094e12c6029cdfa572124af5ff","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-react-components.svg","hash":"7507063e86ef14ce7e94136e8d4cd98de9758bc1","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-redux-actions-open.svg","hash":"97987adb8041e78ffb43ea78a6b6de8cd177dcb5","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-redux-actions.svg","hash":"9fd1cae4732402949a0a3ac36e1ba2773ca8583c","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-redux-reducer-open.svg","hash":"336471f173439f941830d3a15539c1df0e9aecff","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-redux-reducer.svg","hash":"439216c7cf0663af7356dfc97b2acd1d3b63fb1d","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-redux-store-open.svg","hash":"ab665cdab9e56a5c7ca54c483a56b5e325e43e0c","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-redux-store.svg","hash":"0df7b3ab910e3d37f044904f5e734b335ea9c797","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-resource-open.svg","hash":"eb9ae046441bf4f50e9503e3d5d8de8b3c5f0dea","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-resource.svg","hash":"af71f9cf2d5dae363fc3ffd93ad0ada783b0b7b4","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-scripts-open.svg","hash":"9db85590d5ac93d9cd3d2b529cc0e18a081df1de","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-sass-open.svg","hash":"ca1fd205a079af9f84807df74dcb489db39dd382","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-sass.svg","hash":"e81b2d70fe922bb16d50d6b0471df65cb55da40e","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-scripts.svg","hash":"0ed5b0b65b7c3a98d581a16f2cdbedfa3d3fe651","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-src.svg","hash":"bb4a68c6cc663a59403cc4de2bcf6474d3439c9f","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-src-open.svg","hash":"307b0302a988eff51d78e40e34ccbbc93a26610e","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-sublime-open.svg","hash":"c77988026cbc33ae60b74e0f204129b022fb03c6","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-sublime.svg","hash":"492a61deeb771296cd6f438319cbba856730d0b4","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-temp-open.svg","hash":"6a4bd4fc4c2c4860db59df0cf5493515b951ed80","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-temp.svg","hash":"053baed398e7f1590c51ae8c46f093e77197f75a","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-test-open.svg","hash":"120a76bad0bfada92628fbe125f9157d8bcc9f79","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-tools-open.svg","hash":"0a859504b6157aa201b1e7da10a2c2c6d54fb0c5","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-tools.svg","hash":"8a86d3d38d788d639890eb74856c12a61b7f9d2c","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-typescript-open.svg","hash":"5a9b375f0ac3679aff3f3751bf474b9b41088e74","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-typescript.svg","hash":"7448cdfac8c31b9e56a127335051601cb7c04d34","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-video.svg","hash":"c4161f971e9cfa8425ef8d1c5428713484a666ef","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-video-open.svg","hash":"5e0a1df479ac1b8cfc75b695f6c4bfc5a4bb5aa7","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-views-open.svg","hash":"974bb858a7802bb2b438be75920f33c49c2574a0","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-test.svg","hash":"2851586c3ab366f25ee8dd7998974085d9134327","modified":1520244769111},{"_id":"themes/yvshare/source/icons/folder-views.svg","hash":"e7680a23138ad3c21db7f1c7dc4123035d5b41e7","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-vscode-open.svg","hash":"1d8cf06d6ffdca92b3850006ca772ea11967b1b9","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-vscode.svg","hash":"15ec5c6f55f9894bdc3196b490aa0c2d23d5dc85","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-vue-open.svg","hash":"f2f7597dcd040050d95596fa5ae7609e47a744c8","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-vue.svg","hash":"a56d1aa92f81cefbc1a785a23e2d6db6e4b5da82","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-wakatime-open.svg","hash":"080041abe10d2c9ad070db6b5b8cb814e20cbf7c","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-wakatime.svg","hash":"e84b2b9978138702bfab66ba8c85e0e13e231e30","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-webpack-open.svg","hash":"bed64b79cf0fc2025287bf9739cbdb8deb20be12","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-webpack.svg","hash":"0c5777c4204fae34b4e0ae7b7121fd7e10f5809a","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-wordpress-open.svg","hash":"e33431590c1c4b9512ff14baba21a835e110ef25","modified":1520244769112},{"_id":"themes/yvshare/source/icons/folder-wordpress.svg","hash":"5fc101ea5d21d0c96814ee6a5b9dc0493082f2a0","modified":1520244769112},{"_id":"themes/yvshare/source/icons/font.svg","hash":"d7c97c206f36a83afb5d8d5889ca3815c5ac54f5","modified":1520244769112},{"_id":"themes/yvshare/source/icons/gatsby.svg","hash":"a18343673f500365517a9f2c9e2424826f3264ef","modified":1520244769112},{"_id":"themes/yvshare/source/icons/fsharp.svg","hash":"e2bba34e4656c59339b74fd762418d629bef7b93","modified":1520244769112},{"_id":"themes/yvshare/source/icons/fusebox.svg","hash":"2c7b286aa4e2722dc581868c3088f6d09ec139b5","modified":1520244769112},{"_id":"themes/yvshare/source/icons/gitlab.svg","hash":"9fd7416f3a5f556aa9bf72db260ccc8470af1df7","modified":1520244769112},{"_id":"themes/yvshare/source/icons/git.svg","hash":"0d198e65b2f7fbf5e6e783826ae9e61e63d63747","modified":1520244769112},{"_id":"themes/yvshare/source/icons/go.svg","hash":"3ee0bc8dabee9e7f827147fb6bab4f705bd76dfe","modified":1520244769112},{"_id":"themes/yvshare/source/icons/gradle.svg","hash":"4cb7a1b7608eed0c66d2192b24e8ff813c4f78c5","modified":1520244769112},{"_id":"themes/yvshare/source/icons/graphql.svg","hash":"277a230f62123582747c32c1d03d62e4c610d744","modified":1520244769113},{"_id":"themes/yvshare/source/icons/gulp.svg","hash":"1e83799a00950a834e4ee658fdb104c772c682ad","modified":1520244769113},{"_id":"themes/yvshare/source/icons/groovy.svg","hash":"f88d8e0fe81ff646918f07a094c9428bac1f40e0","modified":1520244769113},{"_id":"themes/yvshare/source/icons/graphcool.svg","hash":"08946ccd9c09162beab3da43558ba40e0786cb2d","modified":1520244769112},{"_id":"themes/yvshare/source/icons/h.svg","hash":"f96a5422f0c0ec59d4e0cf3a80e02b6263d285d0","modified":1520244769113},{"_id":"themes/yvshare/source/icons/haml.svg","hash":"557c840423aa865dbdca922674970443ff859f71","modified":1520244769113},{"_id":"themes/yvshare/source/icons/hack.svg","hash":"a4938073f52421452f3a7044ad0bb8c865978283","modified":1520244769113},{"_id":"themes/yvshare/source/icons/handlebars.svg","hash":"0153163ed7660a01fdb4f0d4424ac724b565365e","modified":1520244769113},{"_id":"themes/yvshare/source/icons/haxe.svg","hash":"9d273a095562312660b14933c3519bc42c5f253a","modified":1520244769113},{"_id":"themes/yvshare/source/icons/heroku.svg","hash":"d0b7ff776087490d1e297890078531a02a149326","modified":1520244769113},{"_id":"themes/yvshare/source/icons/hpp.svg","hash":"cf14f6e3ca54da210f382c3b274b329dbc954aec","modified":1520244769113},{"_id":"themes/yvshare/source/icons/haskell.svg","hash":"29e8709e1cf59ee1437c1f90fa20f6e05deddc67","modified":1520244769113},{"_id":"themes/yvshare/source/icons/html.svg","hash":"9370ff438c81d4aa40c59f166c4950f9ede8ae71","modified":1520244769113},{"_id":"themes/yvshare/source/icons/http.svg","hash":"bcdc266aa110845c1720b2adda8dcaf811386e8b","modified":1520244769113},{"_id":"themes/yvshare/source/icons/ionic.svg","hash":"8b5828745a9e705650a14690f2575d66c7745ac2","modified":1520244769113},{"_id":"themes/yvshare/source/icons/image.svg","hash":"cc500250b650ee8fbb3ed8b764d63f990b30718e","modified":1520244769113},{"_id":"themes/yvshare/source/icons/java.svg","hash":"cade3bcf3aeebd98310db0b18ffd227b51d68c72","modified":1520244769113},{"_id":"themes/yvshare/source/icons/javascript-map.svg","hash":"7d26325b990d1a79efb885516f317d2fed6d1e99","modified":1520244769113},{"_id":"themes/yvshare/source/icons/jenkins.svg","hash":"bac8f61c6bc8abddb018c0acf77ac81f76bf4845","modified":1520244769113},{"_id":"themes/yvshare/source/icons/javascript.svg","hash":"8b104dee40d46a38ad193ea7e34c2452eae09d6a","modified":1520244769113},{"_id":"themes/yvshare/source/icons/jinja.svg","hash":"8ec652194ab339d31ad8457fbe998a923740308b","modified":1520244769113},{"_id":"themes/yvshare/source/icons/jinja_light.svg","hash":"8d38aece30fe7c64b7ad2168dd6722a5a4705f34","modified":1520244769113},{"_id":"themes/yvshare/source/icons/julia.svg","hash":"db98678782187de401caee5d3943fccd468e50f0","modified":1520244769113},{"_id":"themes/yvshare/source/icons/json.svg","hash":"e4d074d730be2eba68821b1583003bafa9f9146d","modified":1520244769113},{"_id":"themes/yvshare/source/icons/karma.svg","hash":"1749e8d2a7b42cb07cccf4c95bfa46cf4bbb94a8","modified":1520244769113},{"_id":"themes/yvshare/source/icons/kl.svg","hash":"cf1d6607fea594e7e8f51743a365ad7eadefaccb","modified":1520244769114},{"_id":"themes/yvshare/source/icons/key.svg","hash":"30da94bf03f9437a514f4510720fbdefce764443","modified":1520244769113},{"_id":"themes/yvshare/source/icons/kivy.svg","hash":"cd5026f911f00a5b1108cd2691eefc131cfbe532","modified":1520244769114},{"_id":"themes/yvshare/source/icons/kotlin.svg","hash":"45a7beb72124fa85ac748633d5396b7188d2061b","modified":1520244769114},{"_id":"themes/yvshare/source/icons/laravel.svg","hash":"977c52cd005d64bf2ee4da7b5303e5d15124ee7c","modified":1520244769114},{"_id":"themes/yvshare/source/icons/less.svg","hash":"c00ae1edac3eb422377c24fa785b3d06aad85040","modified":1520244769114},{"_id":"themes/yvshare/source/icons/lib.svg","hash":"bd17b5cf89b621440e4041fc893c3bb74c08005c","modified":1520244769114},{"_id":"themes/yvshare/source/icons/livescript.svg","hash":"ab9002c4ad12ee486b8c23e63e1eef43f53148d6","modified":1520244769114},{"_id":"themes/yvshare/source/icons/lock.svg","hash":"1cf8b50ceb43a6aeba474148b28e9a7ec7b6892f","modified":1520244769114},{"_id":"themes/yvshare/source/icons/log.svg","hash":"0fcf45c02ad9fe311af31a7414019d2ed29203d2","modified":1520244769114},{"_id":"themes/yvshare/source/icons/lua.svg","hash":"99eec08a51e806d009814d9894735773678c51b2","modified":1520244769114},{"_id":"themes/yvshare/source/icons/markdown.svg","hash":"4e25fbf2b51a6ea89a6f4bab24632147f944db0c","modified":1520244769114},{"_id":"themes/yvshare/source/icons/markojs.svg","hash":"e4342d3b0448cca5679aa49cbf8435388fbba52b","modified":1520244769114},{"_id":"themes/yvshare/source/icons/mathematica.svg","hash":"f173db51c8465094933c1e1ba9f984b428f8f726","modified":1520244769114},{"_id":"themes/yvshare/source/icons/matlab.svg","hash":"9350278a7bb0480197da9f646006b7d1b420a91b","modified":1520244769114},{"_id":"themes/yvshare/source/icons/merlin.svg","hash":"2134903f28eecd86b3e8b1e04adb3977ef0247ba","modified":1520244769114},{"_id":"themes/yvshare/source/icons/mjml.svg","hash":"473cc0cc9e01b6cb75b2c2622ad9a45a380a9bda","modified":1520244769114},{"_id":"themes/yvshare/source/icons/mocha.svg","hash":"97ac7036d9fe30ea6f9b0ed4fefb260a5870dd8e","modified":1520244769114},{"_id":"themes/yvshare/source/icons/mxml.svg","hash":"b0a0367bccf646acec8c25422c334159b82b8e30","modified":1520244769114},{"_id":"themes/yvshare/source/icons/ngrx-effects.svg","hash":"115b83a5dc0dbe9435fdb2d5ca04e1611e56b0d0","modified":1520244769114},{"_id":"themes/yvshare/source/icons/ngrx-actions.svg","hash":"7f8300cdfaab5a2bad0081234ccc04eb500b3da2","modified":1520244769114},{"_id":"themes/yvshare/source/icons/ngrx-entity.svg","hash":"4f2857dcb974650ecd712d783645334883512d90","modified":1520244769114},{"_id":"themes/yvshare/source/icons/ngrx-reducer.svg","hash":"95f5ceb6fd37fd9ef0b5facb0b911e503b91ad15","modified":1520244769114},{"_id":"themes/yvshare/source/icons/ngrx-state.svg","hash":"d67e881890bdfb7abaabec0f918d98b06d1e601b","modified":1520244769114},{"_id":"themes/yvshare/source/icons/nim.svg","hash":"642c2f8a6832ce166bf6dc7d1e1a5f82eaaea546","modified":1520244769114},{"_id":"themes/yvshare/source/icons/nix.svg","hash":"a724790dc429810d2b96ddc79a099b44ee00ea7a","modified":1520244769114},{"_id":"themes/yvshare/source/icons/nodejs.svg","hash":"96701a58b1216e4ae90326c067ea0f9a97d7ca83","modified":1520244769114},{"_id":"themes/yvshare/source/icons/nodemon.svg","hash":"2e2af6d031c8a1db9b4ce685317d4573511e8342","modified":1520244769115},{"_id":"themes/yvshare/source/icons/npm.svg","hash":"7a7776651740094e95274e0152a22eb8dae86d82","modified":1520244769115},{"_id":"themes/yvshare/source/icons/nunjucks.svg","hash":"f4d53e9e1ed06186305ab7ed06b905e81e63e18a","modified":1520244769115},{"_id":"themes/yvshare/source/icons/ocaml.svg","hash":"ae993eae044b115ce07b2bf9fecee2a33e7bd4b8","modified":1520244769115},{"_id":"themes/yvshare/source/icons/pdf.svg","hash":"218b1d069f420c6ba73623d6745f010b67f98183","modified":1520244769115},{"_id":"themes/yvshare/source/icons/perl.svg","hash":"b74b163eea816de486e8cd45ad4dadf60256e885","modified":1520244769115},{"_id":"themes/yvshare/source/icons/php.svg","hash":"8108dac317e0ddc0491f8253c59eb86c99e3bea9","modified":1520228940441},{"_id":"themes/yvshare/source/icons/php_elephant.svg","hash":"cc426dbdc2332d0d523be542871564faa7e9e7dd","modified":1520244769115},{"_id":"themes/yvshare/source/icons/postcss.svg","hash":"b606a8b7790d46cb7e12330b687cb9dd0852dd4a","modified":1520244769115},{"_id":"themes/yvshare/source/icons/powerpoint.svg","hash":"d7a45dcf40bcac13e847edbd011f41945a9322cd","modified":1520244769115},{"_id":"themes/yvshare/source/icons/powershell.svg","hash":"c91c3803e5713a474425791483e40e98e7c94d7f","modified":1520244769115},{"_id":"themes/yvshare/source/icons/prettier.svg","hash":"c24a76c1f03835133bf090eb3ad48a7c67a12da6","modified":1520244769115},{"_id":"themes/yvshare/source/icons/protractor.svg","hash":"4f2ed93276c9df829a3e75231022f2143fda30dd","modified":1520244769115},{"_id":"themes/yvshare/source/icons/pug.svg","hash":"398e3e2d566bcc59e0b44c17efe5ba811ec9e279","modified":1520244769115},{"_id":"themes/yvshare/source/icons/puppet.svg","hash":"c2aa113d8aed9e15c1ccf7659f99f75b24919c0d","modified":1520244769115},{"_id":"themes/yvshare/source/icons/purescript.svg","hash":"27f9db8809e7288474dde59b5b4e9b4d6a374d98","modified":1520244769115},{"_id":"themes/yvshare/source/icons/python.svg","hash":"a21fc5d7f9cbd112891641563a51eaa643c7616b","modified":1520244769115},{"_id":"themes/yvshare/source/icons/r.svg","hash":"ea6b00eabd9d432e9f8220aceb8deec41484ceea","modified":1520244769115},{"_id":"themes/yvshare/source/icons/raml.svg","hash":"404b529fceead8c9c5197b6dfb5f914d2e60810a","modified":1520244769115},{"_id":"themes/yvshare/source/icons/razor.svg","hash":"dd7f24d36ff5ef8aee67599747090e79a072eeed","modified":1520244769115},{"_id":"themes/yvshare/source/icons/react.svg","hash":"f508abcfe32a7b8f8a2504e27b2264e094cfa621","modified":1520244769115},{"_id":"themes/yvshare/source/icons/readme.svg","hash":"8c757a47ea5ade41e30e599e05c13307c68edfcc","modified":1520244769115},{"_id":"themes/yvshare/source/icons/reason.svg","hash":"a5a9291a6293ad965778f4cdea0ad9313e91418d","modified":1520244769115},{"_id":"themes/yvshare/source/icons/restql.svg","hash":"b9857b7dee14e650e7a02d8cdfc489f1fcde8b78","modified":1520244769115},{"_id":"themes/yvshare/source/icons/riot.svg","hash":"1a2734983890f6ea512cb73a398a97c964b06c1f","modified":1520244769116},{"_id":"themes/yvshare/source/icons/robot.svg","hash":"56b69f52df86b7ff35a35b87263ba5ef24037686","modified":1520244769116},{"_id":"themes/yvshare/source/icons/rollup.svg","hash":"675af84267629e71b8b3c2362ef864c57eff15a1","modified":1520244769116},{"_id":"themes/yvshare/source/icons/ruby.svg","hash":"0202423fb2524be32750a1d6f35981593c7dd41e","modified":1520244769116},{"_id":"themes/yvshare/source/icons/rust.svg","hash":"c754fb91e2a595212416b1bfbb0c131b1f44332e","modified":1520244769116},{"_id":"themes/yvshare/source/icons/sass.svg","hash":"5c4438cca52b2e67f73879a361b280043bdfef13","modified":1520244769116},{"_id":"themes/yvshare/source/icons/sbt.svg","hash":"6eb7143a0248ed7ccebee35a47f9dcf57378e367","modified":1520244769116},{"_id":"themes/yvshare/source/icons/scala.svg","hash":"6058574349c69e622ed1f1328c654e52956fd840","modified":1520244769116},{"_id":"themes/yvshare/source/icons/sequelize.svg","hash":"6f9dfcca2ae7d24c42559a527d012169b0d0d162","modified":1520244769116},{"_id":"themes/yvshare/source/icons/settings.svg","hash":"10106b7d089cb4b4895d8adcbc3de9c552f4a22b","modified":1520244769116},{"_id":"themes/yvshare/source/icons/shaderlab.svg","hash":"2b0e7b5f1f07183af565bee29b4af6c05ee16fad","modified":1520244769116},{"_id":"themes/yvshare/source/icons/slim.svg","hash":"db7c4dc8a4230139a4191df6c59876da3ffb6216","modified":1520244769116},{"_id":"themes/yvshare/source/icons/smarty.svg","hash":"a7f764357ef21e784aa1e8e0cc2e938b4ca2c7c2","modified":1520244769116},{"_id":"themes/yvshare/source/icons/snyk.svg","hash":"eba3b1873268236dcfe3b94b68218a36dcc0c3a3","modified":1520244769116},{"_id":"themes/yvshare/source/icons/solidity.svg","hash":"961bf53c79cd397ed06aaa62a754e3896b272184","modified":1520244769116},{"_id":"themes/yvshare/source/icons/sonar.svg","hash":"444ca2de776352b5533545afa0ce4f6c3ed57faa","modified":1520244769116},{"_id":"themes/yvshare/source/icons/stylelint.svg","hash":"17eac6d2e8b8ef21323ffd8760b366e777333757","modified":1520244769116},{"_id":"themes/yvshare/source/icons/stylelint_light.svg","hash":"6a70e16e5aa4e22bafe5364e50aaf82ccd594cbe","modified":1520244769116},{"_id":"themes/yvshare/source/icons/stylus.svg","hash":"2ff53e5615622739e05a28d9fda350f8a6894f5f","modified":1520244769116},{"_id":"themes/yvshare/source/icons/sublime.svg","hash":"9f5bafd5fa1d26bc96d2b061aa6c8748bc12b505","modified":1520228940485},{"_id":"themes/yvshare/source/icons/swc.svg","hash":"fde6cbe034454e59111fd8a2eb67dcb70ac2a2d7","modified":1520244769116},{"_id":"themes/yvshare/source/icons/swift.svg","hash":"a91332b544fca06afecbee470d76b7428fdfa190","modified":1520244769116},{"_id":"themes/yvshare/source/icons/table.svg","hash":"61d73cdd81075be3833b7edfb7073b0f395ebc4a","modified":1520244769116},{"_id":"themes/yvshare/source/icons/terraform.svg","hash":"7c36f35e1b320aba9b26ff84c2ce2d5091e90995","modified":1520244769116},{"_id":"themes/yvshare/source/icons/test-js.svg","hash":"6e0bcbe3e2a594e2042b1c39e6ec4cec932bdbcd","modified":1520244769116},{"_id":"themes/yvshare/source/icons/test-jsx.svg","hash":"e290796ed70fb12b6546796a721d6c3c5a6346b0","modified":1520244769120},{"_id":"themes/yvshare/source/icons/test-ts.svg","hash":"bd9772f9c99bf06be9963d48913a106fa5478040","modified":1520244769121},{"_id":"themes/yvshare/source/icons/tex.svg","hash":"c95b4f0e2fca47fd3a1436869efbe2029131b5d2","modified":1520244769121},{"_id":"themes/yvshare/source/icons/todo.svg","hash":"fb71f2ca84580fd88066deadff8a1fa2bc93fada","modified":1520244769121},{"_id":"themes/yvshare/source/icons/travis.svg","hash":"848f832b0223f6594891869f0d17e52c20289853","modified":1520244769121},{"_id":"themes/yvshare/source/icons/tune.svg","hash":"468fb75430b32c574b5e032b14c7d694ded67d03","modified":1520244769121},{"_id":"themes/yvshare/source/icons/twig.svg","hash":"6064a353616f3efa2c945b7a11355034156deab6","modified":1520244769121},{"_id":"themes/yvshare/source/icons/typescript-def.svg","hash":"be0602f0e1aa59b3d8d651ca910acdd00a8269ab","modified":1520244769121},{"_id":"themes/yvshare/source/icons/typescript.svg","hash":"15c51ad6e364c194365b64582a7668b3841e2ff3","modified":1520244769121},{"_id":"themes/yvshare/source/icons/url.svg","hash":"ed090a64df878bf83e1b98b0bc52f18c28cfd2e3","modified":1520244769121},{"_id":"themes/yvshare/source/icons/verilog.svg","hash":"35afcff49d443d158b0045271bc106a94a8818a5","modified":1520244769121},{"_id":"themes/yvshare/source/icons/vfl.svg","hash":"fc12952f9388ed6167f4e8eaedab0a8dd11eddef","modified":1520244769121},{"_id":"themes/yvshare/source/icons/video.svg","hash":"790fe9d8f1df8bb18e777c4ee5b062c38f8396d4","modified":1520244769121},{"_id":"themes/yvshare/source/icons/virtual.svg","hash":"2ee1768702dc0f0bccb03c1abdda30b316de556f","modified":1520244769121},{"_id":"themes/yvshare/source/icons/visualstudio.svg","hash":"b567df32fdfa988a426026849f93668908c528d9","modified":1520244769121},{"_id":"themes/yvshare/source/icons/vscode.svg","hash":"57eac6a110328561ac14e867b48ecfe5162a23bd","modified":1520244769121},{"_id":"themes/yvshare/source/icons/vue.svg","hash":"d54dad7a8ca9b8154c06da00becae6da6a5a38ff","modified":1520244769121},{"_id":"themes/yvshare/source/icons/wakatime.svg","hash":"3aaa35197e23b1c39813d1067d9dbc8be2c33d88","modified":1520244769121},{"_id":"themes/yvshare/source/icons/wakatime_light.svg","hash":"0b24499daecf9e84aa9967e97841972a2276cdee","modified":1520244769121},{"_id":"themes/yvshare/source/icons/watchman.svg","hash":"709642030891f16e1f4fa10a3451f8e691978647","modified":1520244769121},{"_id":"themes/yvshare/source/icons/webpack.svg","hash":"2edf9af451a5b5d7b88c89cef3dea7ab1749be05","modified":1520244769121},{"_id":"themes/yvshare/source/icons/wolframlanguage.svg","hash":"9cbf5778619e0fe8975a02eb78fcb18e6c96a31e","modified":1520244769122},{"_id":"themes/yvshare/source/icons/word.svg","hash":"04901ff61446d69fe68966cf142dbe18976650d7","modified":1520244769122},{"_id":"themes/yvshare/source/icons/xaml.svg","hash":"81a936442e7b0c2ff96a94dd0ffec55c62286a00","modified":1520244769122},{"_id":"themes/yvshare/source/icons/xml.svg","hash":"672e30cb425afbecd1c85c1edb9fb4c02c90c3b0","modified":1520244769122},{"_id":"themes/yvshare/source/icons/yaml.svg","hash":"786c1358b697431fdd9d98d2328adc2619de4876","modified":1520244769122},{"_id":"themes/yvshare/source/icons/yang.svg","hash":"1e42a328a913a0b7414ef78ced8b257ef7c0cd1b","modified":1520244769122},{"_id":"themes/yvshare/source/icons/yarn.svg","hash":"43da24660caff42e37428b0fb3195667c490cff0","modified":1520244769122},{"_id":"themes/yvshare/source/icons/zip.svg","hash":"8199051f86d819cb441df239d6f85b9e6ef14ac2","modified":1520244769122},{"_id":"themes/yvshare/source/images/favicon.png","hash":"86ddbf2c91296f911b92aee951da38e28d9ffc20","modified":1519979914743},{"_id":"themes/yvshare/source/images/livere2.png","hash":"073f0a0fbda42da7f273eb15dba0fda7840b5204","modified":1520233665640},{"_id":"themes/yvshare/source/images/livere3.png","hash":"56a3cd45228609ba7f7b718db838f00fcbe4f8fe","modified":1520233807667},{"_id":"themes/yvshare/source/images/localstorage.png","hash":"3f2ec9a9905ab8345eea5b54e5a370bee3e66e68","modified":1520234698121},{"_id":"themes/yvshare/source/images/logo.png","hash":"fcfff1033431ef67503991c81e267eaa1def9a23","modified":1519979914740},{"_id":"themes/yvshare/source/images/logo@2x.png","hash":"079514207e436af0a6ac2494595702a47c060eac","modified":1519979914737},{"_id":"themes/yvshare/source/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1519982374529},{"_id":"themes/yvshare/source/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1519982374529},{"_id":"themes/yvshare/source/js/livere.js","hash":"cd45ad10eb7b1fe1d477d8a32279ab0e071941fd","modified":1520084733676},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1519979914768},{"_id":"themes/yvshare/source/images/livere1.png","hash":"8ffceb875a5affb7a97bd40a92d9462603dc8315","modified":1520233461135},{"_id":"themes/yvshare/source/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1519982374527},{"_id":"themes/yvshare/source/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1519982374531},{"_id":"themes/yvshare/source/images/livere.png","hash":"e9c09aece44e1f814a2154e9709595b0e1ddc3d7","modified":1520232689959},{"_id":"themes/yvshare/source/css/viewer.min.css","hash":"a0154b3cc3f43c79f89d6d5aafcf26b034fcf131","modified":1520244769092},{"_id":"themes/yvshare/source/js/viewer.min.js","hash":"006b10fcfc945c63c325cd662a47bd2d74483d15","modified":1520244769155},{"_id":"themes/yvshare/source/images/swiftype.png","hash":"349644f397b1e172ae504e61c44abe3ae7d0a741","modified":1520244769155}],"Category":[],"Data":[],"Page":[{"_content":"[CSS](/tags/CSS/)","source":"tags/index.md","raw":"[CSS](/tags/CSS/)","date":"2018-02-27T07:45:35.259Z","updated":"2018-02-27T07:45:35.259Z","path":"tags/index.html","title":"","comments":1,"layout":"page","_id":"cjee12qau00016cc0t24h2j76","content":"<p><a href=\"/tags/CSS/\">CSS</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"/tags/CSS/\">CSS</a></p>\n"},{"title":"about","date":"2018-02-26T10:36:38.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-02-26 18:36:38\n---\n","updated":"2018-02-26T10:36:38.391Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjee12qee002c6cc0ntfdzefq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"id":"0809000","title":"Hello World","date":"2017-02-09T13:49:31.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/0809000_hello-world.md","raw":"---\nid: 0809000\ntitle: Hello World\ndate: 2017-02-09 21:49:31\ntags: \n    - HTML\ncategories: \n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"0809000_hello-world","published":1,"updated":"2018-03-05T10:12:48.978Z","_id":"cjee12qao00006cc07m4ykz4b","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"id":"0809002","title":"CSS3 渐变","date":"2017-02-27T10:01:38.000Z","_content":"\n#### CSS3 定义了两种类型的渐变（gradients）：\n\n1. 线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向\n2. 径向渐变（Radial Gradients）- 由它们的中心定义\n#### 注意： IE 9 及之前的版本不支持渐变。\n### 线性渐变：\n- `background: linear-gradient(direction, color-stop1, color-stop2, ...);`\n#### 1. 线性渐变 - 从上到下（默认情况下）:\n```css\n.box {\n  background: -webkit-linear-gradient(red, blue);   /* Safari 5.1 - 6.0 */\n  background: -o-linear-gradient(red, blue);        /* Opera 11.1 - 12.0 */\n  background: -moz-linear-gradient(red, blue);      /* Firefox 3.6 - 15 */\n  background: linear-gradient(red, blue);           /* 标准的语法(必须放在最后) */\n}\n```\n效果图 ![效果图](/images/gradient/渐变1.png)\n#### 2. 线性渐变 - 从左到右\n```css\n.box {\n    height: 50px;\n    background: -webkit-linear-gradient(left, red , blue);\n    background: -o-linear-gradient(right, red, blue);\n    background: -moz-linear-gradient(right, red, blue);\n    background: linear-gradient(to right, red , blue);\n}\n```\n效果图 ![效果图](/images/gradient/渐变2.png)\n#### 3. 重复的线性渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-repeating-linear-gradient(red, yellow 10%, green 20%);  \n    background: -o-repeating-linear-gradient(red, yellow 10%, green 20%);       \n    background: -moz-repeating-linear-gradient(red, yellow 10%, green 20%);  \n    background: repeating-linear-gradient(red, yellow 10%, green 20%);    \n}\n```\n效果图 ![效果图](/images/gradient/渐变3.png)\n#### 4. 线性渐变进阶\n```css\n.box{\n    height: 100px;\n    width: 100px;\n    background: -webkit-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: -o-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: -moz-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n}\n```\n效果图 ![效果图](/images/gradient/0deg.png)\n\n没错，就是通过角度来空值渐变的起始位置：\n- 45deg 效果图 ![效果图](/images/gradient/45deg.png)\n- 90deg 效果图 ![效果图](/images/gradient/90deg.png)\n- 135deg 效果图 ![效果图](/images/gradient/135deg.png)\n\n*由此，我们知道了起始可以通过角度来获得我们想要的线性渐变的各种效果了，这基本能满足我们大多数的需求了。*\n径向渐变\n- `background: radial-gradient(center, shape size, start-color, ..., last-color);`\n1. 径向渐变由它的中心定义。\n2. 为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。\n#### 1. 普通的径向渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-radial-gradient(red, green, blue);  \n    background: -o-radial-gradient(red, green, blue);\n    background: -moz-radial-gradient(red, green, blue);  \n    background: radial-gradient(red, green, blue);    \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变1.png)\n#### 2. 不均匀的径向渐变\n```css\n.box {\n  background: -webkit-radial-gradient(red 5%, green 15%, blue 60%);     \n  background: -o-radial-gradient(red 5%, green 15%, blue 60%);\n  background: -moz-radial-gradient(red 5%, green 15%, blue 60%);     \n  background: radial-gradient(red 5%, green 15%, blue 60%);\n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变2.png)\n**径向渐变容器如果不为正方形，则渐变区域会默认呈现为椭圆，若为正方形，则会呈现为正方形。**\n#### 3.不同尺寸的径向渐变\n- closest-side\n- farthest-side\n- closest-corner\n- farthest-corner\n```css\n.box {\n    background: -webkit-radial-gradient(70% 50%, closest-side,red,green,blue);     \n    background: -o-radial-gradient(70% 50%, closest-side,red,green,blue);\n    background: -moz-radial-gradient(70% 50%, closest-side,red,green,blue);     \n    background: radial-gradient(70% 50%, closest-side,red,green,blue);       \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变3.png)\n1.  从上面的效果图中可以看出径向渐变的渐变原点的作用\n2. 通过设置尺寸属性可以改变其大小\n#### 4.重复的径向渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-repeating-radial-gradient(red, yellow 10%, green 15%);  \n    background: -o-repeating-radial-gradient(red, yellow 10%, green 15%);\n    background: -moz-repeating-radial-gradient(red, yellow 10%, green 15%);  \n    background: repeating-radial-gradient(red, yellow 10%, green 15%);    \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变4.png)\n","source":"_posts/0809002_CSS3-渐变.md","raw":"---\nid: 0809002\ntitle: CSS3 渐变\ndate: 2017-02-27 18:01:38\ntags:\n    - CSS3\ncategories:\n---\n\n#### CSS3 定义了两种类型的渐变（gradients）：\n\n1. 线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向\n2. 径向渐变（Radial Gradients）- 由它们的中心定义\n#### 注意： IE 9 及之前的版本不支持渐变。\n### 线性渐变：\n- `background: linear-gradient(direction, color-stop1, color-stop2, ...);`\n#### 1. 线性渐变 - 从上到下（默认情况下）:\n```css\n.box {\n  background: -webkit-linear-gradient(red, blue);   /* Safari 5.1 - 6.0 */\n  background: -o-linear-gradient(red, blue);        /* Opera 11.1 - 12.0 */\n  background: -moz-linear-gradient(red, blue);      /* Firefox 3.6 - 15 */\n  background: linear-gradient(red, blue);           /* 标准的语法(必须放在最后) */\n}\n```\n效果图 ![效果图](/images/gradient/渐变1.png)\n#### 2. 线性渐变 - 从左到右\n```css\n.box {\n    height: 50px;\n    background: -webkit-linear-gradient(left, red , blue);\n    background: -o-linear-gradient(right, red, blue);\n    background: -moz-linear-gradient(right, red, blue);\n    background: linear-gradient(to right, red , blue);\n}\n```\n效果图 ![效果图](/images/gradient/渐变2.png)\n#### 3. 重复的线性渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-repeating-linear-gradient(red, yellow 10%, green 20%);  \n    background: -o-repeating-linear-gradient(red, yellow 10%, green 20%);       \n    background: -moz-repeating-linear-gradient(red, yellow 10%, green 20%);  \n    background: repeating-linear-gradient(red, yellow 10%, green 20%);    \n}\n```\n效果图 ![效果图](/images/gradient/渐变3.png)\n#### 4. 线性渐变进阶\n```css\n.box{\n    height: 100px;\n    width: 100px;\n    background: -webkit-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: -o-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: -moz-linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n    background: linear-gradient(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);\n}\n```\n效果图 ![效果图](/images/gradient/0deg.png)\n\n没错，就是通过角度来空值渐变的起始位置：\n- 45deg 效果图 ![效果图](/images/gradient/45deg.png)\n- 90deg 效果图 ![效果图](/images/gradient/90deg.png)\n- 135deg 效果图 ![效果图](/images/gradient/135deg.png)\n\n*由此，我们知道了起始可以通过角度来获得我们想要的线性渐变的各种效果了，这基本能满足我们大多数的需求了。*\n径向渐变\n- `background: radial-gradient(center, shape size, start-color, ..., last-color);`\n1. 径向渐变由它的中心定义。\n2. 为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。\n#### 1. 普通的径向渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-radial-gradient(red, green, blue);  \n    background: -o-radial-gradient(red, green, blue);\n    background: -moz-radial-gradient(red, green, blue);  \n    background: radial-gradient(red, green, blue);    \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变1.png)\n#### 2. 不均匀的径向渐变\n```css\n.box {\n  background: -webkit-radial-gradient(red 5%, green 15%, blue 60%);     \n  background: -o-radial-gradient(red 5%, green 15%, blue 60%);\n  background: -moz-radial-gradient(red 5%, green 15%, blue 60%);     \n  background: radial-gradient(red 5%, green 15%, blue 60%);\n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变2.png)\n**径向渐变容器如果不为正方形，则渐变区域会默认呈现为椭圆，若为正方形，则会呈现为正方形。**\n#### 3.不同尺寸的径向渐变\n- closest-side\n- farthest-side\n- closest-corner\n- farthest-corner\n```css\n.box {\n    background: -webkit-radial-gradient(70% 50%, closest-side,red,green,blue);     \n    background: -o-radial-gradient(70% 50%, closest-side,red,green,blue);\n    background: -moz-radial-gradient(70% 50%, closest-side,red,green,blue);     \n    background: radial-gradient(70% 50%, closest-side,red,green,blue);       \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变3.png)\n1.  从上面的效果图中可以看出径向渐变的渐变原点的作用\n2. 通过设置尺寸属性可以改变其大小\n#### 4.重复的径向渐变\n```css\n.box {\n    height: 100px;\n    width: 100px;\n    background: -webkit-repeating-radial-gradient(red, yellow 10%, green 15%);  \n    background: -o-repeating-radial-gradient(red, yellow 10%, green 15%);\n    background: -moz-repeating-radial-gradient(red, yellow 10%, green 15%);  \n    background: repeating-radial-gradient(red, yellow 10%, green 15%);    \n}\n```\n- 效果图 ![效果图](/images/gradient/径向渐变4.png)\n","slug":"0809002_CSS3-渐变","published":1,"updated":"2018-03-05T06:29:40.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qaw00026cc0uehmotwm","content":"<h4 id=\"CSS3-定义了两种类型的渐变（gradients）：\"><a href=\"#CSS3-定义了两种类型的渐变（gradients）：\" class=\"headerlink\" title=\"CSS3 定义了两种类型的渐变（gradients）：\"></a>CSS3 定义了两种类型的渐变（gradients）：</h4><ol>\n<li>线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向</li>\n<li>径向渐变（Radial Gradients）- 由它们的中心定义<h4 id=\"注意：-IE-9-及之前的版本不支持渐变。\"><a href=\"#注意：-IE-9-及之前的版本不支持渐变。\" class=\"headerlink\" title=\"注意： IE 9 及之前的版本不支持渐变。\"></a>注意： IE 9 及之前的版本不支持渐变。</h4><h3 id=\"线性渐变：\"><a href=\"#线性渐变：\" class=\"headerlink\" title=\"线性渐变：\"></a>线性渐变：</h3></li>\n</ol>\n<ul>\n<li><code>background: linear-gradient(direction, color-stop1, color-stop2, ...);</code><h4 id=\"1-线性渐变-从上到下（默认情况下）\"><a href=\"#1-线性渐变-从上到下（默认情况下）\" class=\"headerlink\" title=\"1. 线性渐变 - 从上到下（默认情况下）:\"></a>1. 线性渐变 - 从上到下（默认情况下）:</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(red, blue);   <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(red, blue);        <span class=\"comment\">/* Opera 11.1 - 12.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(red, blue);      <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(red, blue);           <span class=\"comment\">/* 标准的语法(必须放在最后) */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>效果图 <img src=\"/images/gradient/渐变1.png\" alt=\"效果图\"></p>\n<h4 id=\"2-线性渐变-从左到右\"><a href=\"#2-线性渐变-从左到右\" class=\"headerlink\" title=\"2. 线性渐变 - 从左到右\"></a>2. 线性渐变 - 从左到右</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(left, red , blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(right, red, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(right, red, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to right, red , blue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/渐变2.png\" alt=\"效果图\"></p>\n<h4 id=\"3-重复的线性渐变\"><a href=\"#3-重复的线性渐变\" class=\"headerlink\" title=\"3. 重复的线性渐变\"></a>3. 重复的线性渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-repeating-linear-gradient</span>(red, yellow 10%, green 20%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-repeating-linear-gradient</span>(red, yellow 10%, green 20%);       </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-repeating-linear-gradient</span>(red, yellow 10%, green 20%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-linear-gradient</span>(red, yellow 10%, green 20%);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/渐变3.png\" alt=\"效果图\"></p>\n<h4 id=\"4-线性渐变进阶\"><a href=\"#4-线性渐变进阶\" class=\"headerlink\" title=\"4. 线性渐变进阶\"></a>4. 线性渐变进阶</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/0deg.png\" alt=\"效果图\"></p>\n<p>没错，就是通过角度来空值渐变的起始位置：</p>\n<ul>\n<li>45deg 效果图 <img src=\"/images/gradient/45deg.png\" alt=\"效果图\"></li>\n<li>90deg 效果图 <img src=\"/images/gradient/90deg.png\" alt=\"效果图\"></li>\n<li>135deg 效果图 <img src=\"/images/gradient/135deg.png\" alt=\"效果图\"></li>\n</ul>\n<p><em>由此，我们知道了起始可以通过角度来获得我们想要的线性渐变的各种效果了，这基本能满足我们大多数的需求了。</em><br>径向渐变</p>\n<ul>\n<li><code>background: radial-gradient(center, shape size, start-color, ..., last-color);</code></li>\n</ul>\n<ol>\n<li>径向渐变由它的中心定义。</li>\n<li>为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。<h4 id=\"1-普通的径向渐变\"><a href=\"#1-普通的径向渐变\" class=\"headerlink\" title=\"1. 普通的径向渐变\"></a>1. 普通的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(red, green, blue);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(red, green, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(red, green, blue);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(red, green, blue);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变1.png\" alt=\"效果图\"></p>\n<h4 id=\"2-不均匀的径向渐变\"><a href=\"#2-不均匀的径向渐变\" class=\"headerlink\" title=\"2. 不均匀的径向渐变\"></a>2. 不均匀的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(red 5%, green 15%, blue 60%);     </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(red 5%, green 15%, blue 60%);</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(red 5%, green 15%, blue 60%);     </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(red 5%, green 15%, blue 60%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变2.png\" alt=\"效果图\"><br><strong>径向渐变容器如果不为正方形，则渐变区域会默认呈现为椭圆，若为正方形，则会呈现为正方形。</strong></p>\n<h4 id=\"3-不同尺寸的径向渐变\"><a href=\"#3-不同尺寸的径向渐变\" class=\"headerlink\" title=\"3.不同尺寸的径向渐变\"></a>3.不同尺寸的径向渐变</h4></li>\n<li>closest-side</li>\n<li>farthest-side</li>\n<li>closest-corner</li>\n<li><p>farthest-corner</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(70% 50%, closest-side,red,green,blue);     </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(70% 50%, closest-side,red,green,blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(70% 50%, closest-side,red,green,blue);     </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(70% 50%, closest-side,red,green,blue);       </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变3.png\" alt=\"效果图\"></p>\n</li>\n</ul>\n<ol>\n<li>从上面的效果图中可以看出径向渐变的渐变原点的作用</li>\n<li>通过设置尺寸属性可以改变其大小<h4 id=\"4-重复的径向渐变\"><a href=\"#4-重复的径向渐变\" class=\"headerlink\" title=\"4.重复的径向渐变\"></a>4.重复的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-repeating-radial-gradient</span>(red, yellow 10%, green 15%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-repeating-radial-gradient</span>(red, yellow 10%, green 15%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-repeating-radial-gradient</span>(red, yellow 10%, green 15%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-radial-gradient</span>(red, yellow 10%, green 15%);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>效果图 <img src=\"/images/gradient/径向渐变4.png\" alt=\"效果图\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"CSS3-定义了两种类型的渐变（gradients）：\"><a href=\"#CSS3-定义了两种类型的渐变（gradients）：\" class=\"headerlink\" title=\"CSS3 定义了两种类型的渐变（gradients）：\"></a>CSS3 定义了两种类型的渐变（gradients）：</h4><ol>\n<li>线性渐变（Linear Gradients）- 向下/向上/向左/向右/对角方向</li>\n<li>径向渐变（Radial Gradients）- 由它们的中心定义<h4 id=\"注意：-IE-9-及之前的版本不支持渐变。\"><a href=\"#注意：-IE-9-及之前的版本不支持渐变。\" class=\"headerlink\" title=\"注意： IE 9 及之前的版本不支持渐变。\"></a>注意： IE 9 及之前的版本不支持渐变。</h4><h3 id=\"线性渐变：\"><a href=\"#线性渐变：\" class=\"headerlink\" title=\"线性渐变：\"></a>线性渐变：</h3></li>\n</ol>\n<ul>\n<li><code>background: linear-gradient(direction, color-stop1, color-stop2, ...);</code><h4 id=\"1-线性渐变-从上到下（默认情况下）\"><a href=\"#1-线性渐变-从上到下（默认情况下）\" class=\"headerlink\" title=\"1. 线性渐变 - 从上到下（默认情况下）:\"></a>1. 线性渐变 - 从上到下（默认情况下）:</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(red, blue);   <span class=\"comment\">/* Safari 5.1 - 6.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(red, blue);        <span class=\"comment\">/* Opera 11.1 - 12.0 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(red, blue);      <span class=\"comment\">/* Firefox 3.6 - 15 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(red, blue);           <span class=\"comment\">/* 标准的语法(必须放在最后) */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>效果图 <img src=\"/images/gradient/渐变1.png\" alt=\"效果图\"></p>\n<h4 id=\"2-线性渐变-从左到右\"><a href=\"#2-线性渐变-从左到右\" class=\"headerlink\" title=\"2. 线性渐变 - 从左到右\"></a>2. 线性渐变 - 从左到右</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(left, red , blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(right, red, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(right, red, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to right, red , blue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/渐变2.png\" alt=\"效果图\"></p>\n<h4 id=\"3-重复的线性渐变\"><a href=\"#3-重复的线性渐变\" class=\"headerlink\" title=\"3. 重复的线性渐变\"></a>3. 重复的线性渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-repeating-linear-gradient</span>(red, yellow 10%, green 20%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-repeating-linear-gradient</span>(red, yellow 10%, green 20%);       </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-repeating-linear-gradient</span>(red, yellow 10%, green 20%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-linear-gradient</span>(red, yellow 10%, green 20%);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/渐变3.png\" alt=\"效果图\"></p>\n<h4 id=\"4-线性渐变进阶\"><a href=\"#4-线性渐变进阶\" class=\"headerlink\" title=\"4. 线性渐变进阶\"></a>4. 线性渐变进阶</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(0deg,#FF0000 0%,#00FF00 50%,#0000FF 100%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果图 <img src=\"/images/gradient/0deg.png\" alt=\"效果图\"></p>\n<p>没错，就是通过角度来空值渐变的起始位置：</p>\n<ul>\n<li>45deg 效果图 <img src=\"/images/gradient/45deg.png\" alt=\"效果图\"></li>\n<li>90deg 效果图 <img src=\"/images/gradient/90deg.png\" alt=\"效果图\"></li>\n<li>135deg 效果图 <img src=\"/images/gradient/135deg.png\" alt=\"效果图\"></li>\n</ul>\n<p><em>由此，我们知道了起始可以通过角度来获得我们想要的线性渐变的各种效果了，这基本能满足我们大多数的需求了。</em><br>径向渐变</p>\n<ul>\n<li><code>background: radial-gradient(center, shape size, start-color, ..., last-color);</code></li>\n</ul>\n<ol>\n<li>径向渐变由它的中心定义。</li>\n<li>为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。<h4 id=\"1-普通的径向渐变\"><a href=\"#1-普通的径向渐变\" class=\"headerlink\" title=\"1. 普通的径向渐变\"></a>1. 普通的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(red, green, blue);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(red, green, blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(red, green, blue);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(red, green, blue);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变1.png\" alt=\"效果图\"></p>\n<h4 id=\"2-不均匀的径向渐变\"><a href=\"#2-不均匀的径向渐变\" class=\"headerlink\" title=\"2. 不均匀的径向渐变\"></a>2. 不均匀的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(red 5%, green 15%, blue 60%);     </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(red 5%, green 15%, blue 60%);</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(red 5%, green 15%, blue 60%);     </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(red 5%, green 15%, blue 60%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变2.png\" alt=\"效果图\"><br><strong>径向渐变容器如果不为正方形，则渐变区域会默认呈现为椭圆，若为正方形，则会呈现为正方形。</strong></p>\n<h4 id=\"3-不同尺寸的径向渐变\"><a href=\"#3-不同尺寸的径向渐变\" class=\"headerlink\" title=\"3.不同尺寸的径向渐变\"></a>3.不同尺寸的径向渐变</h4></li>\n<li>closest-side</li>\n<li>farthest-side</li>\n<li>closest-corner</li>\n<li><p>farthest-corner</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-radial-gradient</span>(70% 50%, closest-side,red,green,blue);     </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-radial-gradient</span>(70% 50%, closest-side,red,green,blue);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-radial-gradient</span>(70% 50%, closest-side,red,green,blue);     </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(70% 50%, closest-side,red,green,blue);       </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>效果图 <img src=\"/images/gradient/径向渐变3.png\" alt=\"效果图\"></p>\n</li>\n</ul>\n<ol>\n<li>从上面的效果图中可以看出径向渐变的渐变原点的作用</li>\n<li>通过设置尺寸属性可以改变其大小<h4 id=\"4-重复的径向渐变\"><a href=\"#4-重复的径向渐变\" class=\"headerlink\" title=\"4.重复的径向渐变\"></a>4.重复的径向渐变</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-webkit-repeating-radial-gradient</span>(red, yellow 10%, green 15%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-o-repeating-radial-gradient</span>(red, yellow 10%, green 15%);</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">-moz-repeating-radial-gradient</span>(red, yellow 10%, green 15%);  </span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">repeating-radial-gradient</span>(red, yellow 10%, green 15%);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>效果图 <img src=\"/images/gradient/径向渐变4.png\" alt=\"效果图\"></li>\n</ul>\n"},{"id":"0809001","title":"hello","date":"2017-02-09T13:56:46.000Z","_content":"","source":"_posts/0809001_hello.md","raw":"---\nid: 0809001\ntitle: hello\ndate: 2017-02-09 21:56:46\ntags: \n    - test\n---\n","slug":"0809001_hello","published":1,"updated":"2018-03-05T10:12:48.978Z","_id":"cjee12qb400046cc0iyqzsr68","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"id":"0809003","title":"在hexo中部署livere评论系统","date":"2018-02-23T16:05:00.000Z","_content":"\n- 注册来必力账号\n\n这一步很简单，进去[官网](https://livere.com/)，注册账号：\n![注册](/images/livere.png)\n\n然后点击右上角图标进入到管理页面，点击左侧的代码管理，这里面就是部署livere需要的脚本了：\n![获取部署代码](/images/livere1.png)\n\n- 用户登录账号设置\n\nlivere 评论系统里支持非常多的第三方账号登录方式：\n![账号](/images/livere2.png)\n可以根据自己的需要选择适用的方式。\n\n- 主题设置\n\nlivere 同样提供多种颜色主题，供用户免费使用：\n![主题](/images/livere3.png)\n\n`来必力livere部署起来其实是非常简单的，更多细节可以去`[官网](https://livere.com/)`查看更多`","source":"_posts/0809003_在hexo中部署livere评论系统.md","raw":"---\nid: 0809003\ntitle: 在hexo中部署livere评论系统\ndate: 2018-02-24 00:05:00\ntags: \n    - JavaScript\n    - livere\ncategories:\n---\n\n- 注册来必力账号\n\n这一步很简单，进去[官网](https://livere.com/)，注册账号：\n![注册](/images/livere.png)\n\n然后点击右上角图标进入到管理页面，点击左侧的代码管理，这里面就是部署livere需要的脚本了：\n![获取部署代码](/images/livere1.png)\n\n- 用户登录账号设置\n\nlivere 评论系统里支持非常多的第三方账号登录方式：\n![账号](/images/livere2.png)\n可以根据自己的需要选择适用的方式。\n\n- 主题设置\n\nlivere 同样提供多种颜色主题，供用户免费使用：\n![主题](/images/livere3.png)\n\n`来必力livere部署起来其实是非常简单的，更多细节可以去`[官网](https://livere.com/)`查看更多`","slug":"0809003_在hexo中部署livere评论系统","published":1,"updated":"2018-03-05T09:24:24.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qb600056cc0wpr4w404","content":"<ul>\n<li>注册来必力账号</li>\n</ul>\n<p>这一步很简单，进去<a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">官网</a>，注册账号：<br><img src=\"/images/livere.png\" alt=\"注册\"></p>\n<p>然后点击右上角图标进入到管理页面，点击左侧的代码管理，这里面就是部署livere需要的脚本了：<br><img src=\"/images/livere1.png\" alt=\"获取部署代码\"></p>\n<ul>\n<li>用户登录账号设置</li>\n</ul>\n<p>livere 评论系统里支持非常多的第三方账号登录方式：<br><img src=\"/images/livere2.png\" alt=\"账号\"><br>可以根据自己的需要选择适用的方式。</p>\n<ul>\n<li>主题设置</li>\n</ul>\n<p>livere 同样提供多种颜色主题，供用户免费使用：<br><img src=\"/images/livere3.png\" alt=\"主题\"></p>\n<p><code>来必力livere部署起来其实是非常简单的，更多细节可以去</code><a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">官网</a><code>查看更多</code></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>注册来必力账号</li>\n</ul>\n<p>这一步很简单，进去<a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">官网</a>，注册账号：<br><img src=\"/images/livere.png\" alt=\"注册\"></p>\n<p>然后点击右上角图标进入到管理页面，点击左侧的代码管理，这里面就是部署livere需要的脚本了：<br><img src=\"/images/livere1.png\" alt=\"获取部署代码\"></p>\n<ul>\n<li>用户登录账号设置</li>\n</ul>\n<p>livere 评论系统里支持非常多的第三方账号登录方式：<br><img src=\"/images/livere2.png\" alt=\"账号\"><br>可以根据自己的需要选择适用的方式。</p>\n<ul>\n<li>主题设置</li>\n</ul>\n<p>livere 同样提供多种颜色主题，供用户免费使用：<br><img src=\"/images/livere3.png\" alt=\"主题\"></p>\n<p><code>来必力livere部署起来其实是非常简单的，更多细节可以去</code><a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">官网</a><code>查看更多</code></p>\n"},{"id":"0809004","title":"HTML5存储webStorage","date":"2018-02-27T09:56:48.000Z","_content":"\n`客户端存储数据的两个对象为：`\n- `localStorage` - 没有时间限制的数据存储\n- `sessionStorage` - 针对一个 session(会话) 的数据存储\n在使用 web 存储前，应检查浏览器是否支持 localStorage 和sessionStorage :\n```js\nif( typeof(Storage) !== \"undefined\" )\n{\n    // 是的! 支持 localStorage  sessionStorage 对象!\n    // your code\n} else {\n    // 抱歉! 不支持 web 存储。\n}\n```\n#### <a name=\"local\">1. localStorage 对象</a>\n- `localStorage` 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。\n实例：\n```js\n// 存储\n// {\"name\": \"yssuo\"}\nlocalStorage.name=\"yasuo\";\n\n// 获取\nconsole.log(localStorage.name); // yasuo\n\n// 移除\nlocalStorage.removeItem(\"name\");\n\n// 再次获取\nconsole.log(localStorage.name); // undefined\n```\n![localstorage](/images/localstorage.png)\n\n#### <a name=\"local\">2. sessionStorage 对象</a>\n\n- `sessionStorage` 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。\n\n不管是 `localStorage`，还是 `sessionStorage`，可使用的API都相同，常用的有如下几个（以localStorage为例）：\n```js\n// 保存数据\nlocalStorage.setItem(key,value);\n// 读取数据\nlocalStorage.getItem(key);\n// 删除单个数据\nlocalStorage.removeItem(key);\n// 删除所有数据\nlocalStorage.clear();\n// 得到某个索引的key\nlocalStorage.key(index);\n```","source":"_posts/0809004_HTML5存储webStorage.md","raw":"---\nid: 0809004\ntitle: HTML5存储webStorage\ndate: 2018-02-27 17:56:48\ntags: \n    - HTML5\n    - sessionStorage\n    - localStorage\ncategories:\n---\n\n`客户端存储数据的两个对象为：`\n- `localStorage` - 没有时间限制的数据存储\n- `sessionStorage` - 针对一个 session(会话) 的数据存储\n在使用 web 存储前，应检查浏览器是否支持 localStorage 和sessionStorage :\n```js\nif( typeof(Storage) !== \"undefined\" )\n{\n    // 是的! 支持 localStorage  sessionStorage 对象!\n    // your code\n} else {\n    // 抱歉! 不支持 web 存储。\n}\n```\n#### <a name=\"local\">1. localStorage 对象</a>\n- `localStorage` 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。\n实例：\n```js\n// 存储\n// {\"name\": \"yssuo\"}\nlocalStorage.name=\"yasuo\";\n\n// 获取\nconsole.log(localStorage.name); // yasuo\n\n// 移除\nlocalStorage.removeItem(\"name\");\n\n// 再次获取\nconsole.log(localStorage.name); // undefined\n```\n![localstorage](/images/localstorage.png)\n\n#### <a name=\"local\">2. sessionStorage 对象</a>\n\n- `sessionStorage` 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。\n\n不管是 `localStorage`，还是 `sessionStorage`，可使用的API都相同，常用的有如下几个（以localStorage为例）：\n```js\n// 保存数据\nlocalStorage.setItem(key,value);\n// 读取数据\nlocalStorage.getItem(key);\n// 删除单个数据\nlocalStorage.removeItem(key);\n// 删除所有数据\nlocalStorage.clear();\n// 得到某个索引的key\nlocalStorage.key(index);\n```","slug":"0809004_HTML5存储webStorage","published":1,"updated":"2018-03-05T07:31:57.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qb900066cc0uru35ej7","content":"<p><code>客户端存储数据的两个对象为：</code></p>\n<ul>\n<li><code>localStorage</code> - 没有时间限制的数据存储</li>\n<li><code>sessionStorage</code> - 针对一个 session(会话) 的数据存储<br>在使用 web 存储前，应检查浏览器是否支持 localStorage 和sessionStorage :<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>( <span class=\"keyword\">typeof</span>(Storage) !== <span class=\"string\">\"undefined\"</span> )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是的! 支持 localStorage  sessionStorage 对象!</span></span><br><span class=\"line\">    <span class=\"comment\">// your code</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 抱歉! 不支持 web 存储。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"1-localStorage-对象\"><a href=\"#1-localStorage-对象\" class=\"headerlink\" title=\"1. localStorage 对象\"></a><a name=\"local\">1. localStorage 对象</a></h4><ul>\n<li><code>localStorage</code> 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。<br>实例：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 存储</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;\"name\": \"yssuo\"&#125;</span></span><br><span class=\"line\">localStorage.name=<span class=\"string\">\"yasuo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(localStorage.name); <span class=\"comment\">// yasuo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除</span></span><br><span class=\"line\">localStorage.removeItem(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再次获取</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(localStorage.name); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/images/localstorage.png\" alt=\"localstorage\"></p>\n<h4 id=\"2-sessionStorage-对象\"><a href=\"#2-sessionStorage-对象\" class=\"headerlink\" title=\"2. sessionStorage 对象\"></a><a name=\"local\">2. sessionStorage 对象</a></h4><ul>\n<li><code>sessionStorage</code> 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。</li>\n</ul>\n<p>不管是 <code>localStorage</code>，还是 <code>sessionStorage</code>，可使用的API都相同，常用的有如下几个（以localStorage为例）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 保存数据</span></span><br><span class=\"line\">localStorage.setItem(key,value);</span><br><span class=\"line\"><span class=\"comment\">// 读取数据</span></span><br><span class=\"line\">localStorage.getItem(key);</span><br><span class=\"line\"><span class=\"comment\">// 删除单个数据</span></span><br><span class=\"line\">localStorage.removeItem(key);</span><br><span class=\"line\"><span class=\"comment\">// 删除所有数据</span></span><br><span class=\"line\">localStorage.clear();</span><br><span class=\"line\"><span class=\"comment\">// 得到某个索引的key</span></span><br><span class=\"line\">localStorage.key(index);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>客户端存储数据的两个对象为：</code></p>\n<ul>\n<li><code>localStorage</code> - 没有时间限制的数据存储</li>\n<li><code>sessionStorage</code> - 针对一个 session(会话) 的数据存储<br>在使用 web 存储前，应检查浏览器是否支持 localStorage 和sessionStorage :<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>( <span class=\"keyword\">typeof</span>(Storage) !== <span class=\"string\">\"undefined\"</span> )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是的! 支持 localStorage  sessionStorage 对象!</span></span><br><span class=\"line\">    <span class=\"comment\">// your code</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 抱歉! 不支持 web 存储。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"1-localStorage-对象\"><a href=\"#1-localStorage-对象\" class=\"headerlink\" title=\"1. localStorage 对象\"></a><a name=\"local\">1. localStorage 对象</a></h4><ul>\n<li><code>localStorage</code> 对象存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。<br>实例：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 存储</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;\"name\": \"yssuo\"&#125;</span></span><br><span class=\"line\">localStorage.name=<span class=\"string\">\"yasuo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(localStorage.name); <span class=\"comment\">// yasuo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除</span></span><br><span class=\"line\">localStorage.removeItem(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再次获取</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(localStorage.name); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/images/localstorage.png\" alt=\"localstorage\"></p>\n<h4 id=\"2-sessionStorage-对象\"><a href=\"#2-sessionStorage-对象\" class=\"headerlink\" title=\"2. sessionStorage 对象\"></a><a name=\"local\">2. sessionStorage 对象</a></h4><ul>\n<li><code>sessionStorage</code> 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。</li>\n</ul>\n<p>不管是 <code>localStorage</code>，还是 <code>sessionStorage</code>，可使用的API都相同，常用的有如下几个（以localStorage为例）：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 保存数据</span></span><br><span class=\"line\">localStorage.setItem(key,value);</span><br><span class=\"line\"><span class=\"comment\">// 读取数据</span></span><br><span class=\"line\">localStorage.getItem(key);</span><br><span class=\"line\"><span class=\"comment\">// 删除单个数据</span></span><br><span class=\"line\">localStorage.removeItem(key);</span><br><span class=\"line\"><span class=\"comment\">// 删除所有数据</span></span><br><span class=\"line\">localStorage.clear();</span><br><span class=\"line\"><span class=\"comment\">// 得到某个索引的key</span></span><br><span class=\"line\">localStorage.key(index);</span><br></pre></td></tr></table></figure></p>\n"},{"id":"0809005","title":"JSON序列化选项","date":"2018-02-27T10:46:18.000Z","_content":"\n实际上，JSON.stringify()除了要序列化JavaScript对象外，还可以接受另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。**第一个**参数是个过滤器，可以使一个数组，也可以是个函数；**第二个**参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用者两个参数，可以更全面深入地控制JSON的序列化。\n#### 1. 过滤器（第一个参数）\n1.数组\n```JavaScript\nvar hero = {\n    \"name\": \"MasterYi\",\n    \"skills\": [\n        \"AlphaStrike\"\n    ],\n    \"type\": \"Warrior\"\n}\n\nvar jsonTxt = JSON.stringify(hero, [\"name\", \"type\"]);\njsonTxt --> \"{\"name\":\"MasterYi\",\"type\":\"Warrior\"}\"\n```\n2.函数\n```JavaScript\nvar jsonTxt = JSON.stringify(hero, function(k, v){\n    switch(k){\n        case \"name\":\n            return \"Annie\";\n        case \"type\":\n            return \"Mage\";\n        default:\n            return v;\n    }\n});\njsonTxt --> \"{\"name\":\"Annie\",\"skills\":[\"AlphaStrike\"],\"type\":\"Mage\"}\"\n```\n*值得注意的是，如果函数返回了undefined，那么相应的属性会被忽略。另外请务必写上default，此时返回传入的值，以便其他值都能正常出现在结果中*\n#### 2. 选项（字符串缩进）\n```JavaScript\nvar jsonTxt1 = JSON.stringify(hero, null, 2);\njsonTxt1 -->\n\"{\n  \"name\": \"MasterYi\",\n  \"skills\": [\n    \"AlphaStrike\"\n  ],\n  \"type\": \"Warrior\"\n}\"\n\nvar jsonTxt2 = JSON.stringify(hero, null, 4);\njsonTxt2 -->\n\"{\n    \"name\": \"MasterYi\",\n    \"skills\": [\n        \"AlphaStrike\"\n    ],\n    \"type\": \"Warrior\"\n}\"\n```\n*如上，结果字符串中也插入了换行符，这样一来就提高了可读性。只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。最大缩进空格数为10，大于10会默认转换为10.*\n","source":"_posts/0809005_JSON序列化选项.md","raw":"---\nid: 0809005\ntitle: JSON序列化选项\ndate: 2018-02-27 18:46:18\ntags:\n    - JavaScript\n    - JSON\ncategories:\n---\n\n实际上，JSON.stringify()除了要序列化JavaScript对象外，还可以接受另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。**第一个**参数是个过滤器，可以使一个数组，也可以是个函数；**第二个**参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用者两个参数，可以更全面深入地控制JSON的序列化。\n#### 1. 过滤器（第一个参数）\n1.数组\n```JavaScript\nvar hero = {\n    \"name\": \"MasterYi\",\n    \"skills\": [\n        \"AlphaStrike\"\n    ],\n    \"type\": \"Warrior\"\n}\n\nvar jsonTxt = JSON.stringify(hero, [\"name\", \"type\"]);\njsonTxt --> \"{\"name\":\"MasterYi\",\"type\":\"Warrior\"}\"\n```\n2.函数\n```JavaScript\nvar jsonTxt = JSON.stringify(hero, function(k, v){\n    switch(k){\n        case \"name\":\n            return \"Annie\";\n        case \"type\":\n            return \"Mage\";\n        default:\n            return v;\n    }\n});\njsonTxt --> \"{\"name\":\"Annie\",\"skills\":[\"AlphaStrike\"],\"type\":\"Mage\"}\"\n```\n*值得注意的是，如果函数返回了undefined，那么相应的属性会被忽略。另外请务必写上default，此时返回传入的值，以便其他值都能正常出现在结果中*\n#### 2. 选项（字符串缩进）\n```JavaScript\nvar jsonTxt1 = JSON.stringify(hero, null, 2);\njsonTxt1 -->\n\"{\n  \"name\": \"MasterYi\",\n  \"skills\": [\n    \"AlphaStrike\"\n  ],\n  \"type\": \"Warrior\"\n}\"\n\nvar jsonTxt2 = JSON.stringify(hero, null, 4);\njsonTxt2 -->\n\"{\n    \"name\": \"MasterYi\",\n    \"skills\": [\n        \"AlphaStrike\"\n    ],\n    \"type\": \"Warrior\"\n}\"\n```\n*如上，结果字符串中也插入了换行符，这样一来就提高了可读性。只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。最大缩进空格数为10，大于10会默认转换为10.*\n","slug":"0809005_JSON序列化选项","published":1,"updated":"2018-03-05T07:32:47.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qbd00096cc0lhe7ql5c","content":"<p>实际上，JSON.stringify()除了要序列化JavaScript对象外，还可以接受另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。<strong>第一个</strong>参数是个过滤器，可以使一个数组，也可以是个函数；<strong>第二个</strong>参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用者两个参数，可以更全面深入地控制JSON的序列化。</p>\n<h4 id=\"1-过滤器（第一个参数）\"><a href=\"#1-过滤器（第一个参数）\" class=\"headerlink\" title=\"1. 过滤器（第一个参数）\"></a>1. 过滤器（第一个参数）</h4><p>1.数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"MasterYi\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"skills\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"AlphaStrike\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Warrior\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt = <span class=\"built_in\">JSON</span>.stringify(hero, [<span class=\"string\">\"name\"</span>, <span class=\"string\">\"type\"</span>]);</span><br><span class=\"line\">jsonTxt --&gt; <span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>MasterYi<span class=\"string\">\",\"</span>type<span class=\"string\">\":\"</span>Warrior<span class=\"string\">\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p>2.函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k, v</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"name\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Annie\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"type\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Mage\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">jsonTxt --&gt; <span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>Annie<span class=\"string\">\",\"</span>skills<span class=\"string\">\":[\"</span>AlphaStrike<span class=\"string\">\"],\"</span>type<span class=\"string\">\":\"</span>Mage<span class=\"string\">\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p><em>值得注意的是，如果函数返回了undefined，那么相应的属性会被忽略。另外请务必写上default，此时返回传入的值，以便其他值都能正常出现在结果中</em></p>\n<h4 id=\"2-选项（字符串缩进）\"><a href=\"#2-选项（字符串缩进）\" class=\"headerlink\" title=\"2. 选项（字符串缩进）\"></a>2. 选项（字符串缩进）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt1 = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"literal\">null</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">jsonTxt1 --&gt;</span><br><span class=\"line\"><span class=\"string\">\"&#123;</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>name<span class=\"string\">\": \"</span>MasterYi<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>skills<span class=\"string\">\": [</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>AlphaStrike<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>type<span class=\"string\">\": \"</span>Warrior<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt2 = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"literal\">null</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">jsonTxt2 --&gt;</span><br><span class=\"line\"><span class=\"string\">\"&#123;</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>name<span class=\"string\">\": \"</span>MasterYi<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>skills<span class=\"string\">\": [</span></span><br><span class=\"line\"><span class=\"string\">        \"</span>AlphaStrike<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">    ],</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>type<span class=\"string\">\": \"</span>Warrior<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span></span><br></pre></td></tr></table></figure>\n<p><em>如上，结果字符串中也插入了换行符，这样一来就提高了可读性。只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。最大缩进空格数为10，大于10会默认转换为10.</em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>实际上，JSON.stringify()除了要序列化JavaScript对象外，还可以接受另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。<strong>第一个</strong>参数是个过滤器，可以使一个数组，也可以是个函数；<strong>第二个</strong>参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用者两个参数，可以更全面深入地控制JSON的序列化。</p>\n<h4 id=\"1-过滤器（第一个参数）\"><a href=\"#1-过滤器（第一个参数）\" class=\"headerlink\" title=\"1. 过滤器（第一个参数）\"></a>1. 过滤器（第一个参数）</h4><p>1.数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hero = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"MasterYi\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"skills\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"AlphaStrike\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Warrior\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt = <span class=\"built_in\">JSON</span>.stringify(hero, [<span class=\"string\">\"name\"</span>, <span class=\"string\">\"type\"</span>]);</span><br><span class=\"line\">jsonTxt --&gt; <span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>MasterYi<span class=\"string\">\",\"</span>type<span class=\"string\">\":\"</span>Warrior<span class=\"string\">\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p>2.函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k, v</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"name\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Annie\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"type\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Mage\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">jsonTxt --&gt; <span class=\"string\">\"&#123;\"</span>name<span class=\"string\">\":\"</span>Annie<span class=\"string\">\",\"</span>skills<span class=\"string\">\":[\"</span>AlphaStrike<span class=\"string\">\"],\"</span>type<span class=\"string\">\":\"</span>Mage<span class=\"string\">\"&#125;\"</span></span><br></pre></td></tr></table></figure></p>\n<p><em>值得注意的是，如果函数返回了undefined，那么相应的属性会被忽略。另外请务必写上default，此时返回传入的值，以便其他值都能正常出现在结果中</em></p>\n<h4 id=\"2-选项（字符串缩进）\"><a href=\"#2-选项（字符串缩进）\" class=\"headerlink\" title=\"2. 选项（字符串缩进）\"></a>2. 选项（字符串缩进）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt1 = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"literal\">null</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">jsonTxt1 --&gt;</span><br><span class=\"line\"><span class=\"string\">\"&#123;</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>name<span class=\"string\">\": \"</span>MasterYi<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>skills<span class=\"string\">\": [</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>AlphaStrike<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  \"</span>type<span class=\"string\">\": \"</span>Warrior<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonTxt2 = <span class=\"built_in\">JSON</span>.stringify(hero, <span class=\"literal\">null</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">jsonTxt2 --&gt;</span><br><span class=\"line\"><span class=\"string\">\"&#123;</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>name<span class=\"string\">\": \"</span>MasterYi<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>skills<span class=\"string\">\": [</span></span><br><span class=\"line\"><span class=\"string\">        \"</span>AlphaStrike<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">    ],</span></span><br><span class=\"line\"><span class=\"string\">    \"</span>type<span class=\"string\">\": \"</span>Warrior<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;\"</span></span><br></pre></td></tr></table></figure>\n<p><em>如上，结果字符串中也插入了换行符，这样一来就提高了可读性。只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。最大缩进空格数为10，大于10会默认转换为10.</em></p>\n"},{"id":"0809007","title":"记一次在公司中配置Babel的经历","date":"2018-03-01T01:46:10.000Z","_content":"\n- <a href=\"#install\">安装</a>\n- <a href=\"#usage\">使用</a>\n- <a href=\"#babelrc\">创建.babelrc文件</a>\n- <a href=\"#polyfill\">Babel-Polyfill</a>\n- <a href=\"#register\">Babel-Register</a>\n\n&emsp;首先，为什么会写这样一篇文章呢？在进入公司几个月后，写业务代码都是使用es5语法，es6，于是想着使用Babel来构建一下。这样既可以愉快的使用ES6了，还能舒心的写代码，何乐而不为。\n\n- Babel的使用是基于Node.js环境的，所以必须先安装Node。\n- 我们将采用通过安装babel-cli的方式来使用babel。\n\n#### <a name=\"install\">1. 安装</a>\n&emsp;虽然你可以在你的机器上全局安装`Babel CLI`, 但根据单个项目进行本地安装会更好一些。这样做有两个主要的原因：\n* 同一机器上的不同的项目可以依赖不同版本的 Babel, 这允许你一次更新一个项目。\n* 这意味着在你的工作环境中没有隐含的依赖项。它将使你的项目更方便移植、更易于安装。\n\n> 首先我们需要生成一个package.json文件，进入到项目目录执行`npm init`命令，随后一顿选择回车。\n\n```bash\nYSY@SY-YU MINGW64 /d/START/webpack\n$ npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help json` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install <pkg>` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\npackage name: (webpack)\n```\n*最后，目录下会生成一个package.json文件，打开看一下*\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\"\n}\n```\n*里面都是刚才npm init时自己的配置*\n\n> 我们可以通过以下命令本地安装 Babel CLI:\n\n```bash\n// 全局安装\nnpm install babel-cli -g\n// 安装在当前项目中\nnpm install --save-dev babel-cli\n```\n我们在当前目录安装babel-cli，随后我们的package.json应该长这个样：\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.26.0\"\n  }\n}\n```\n\n#### <a name=\"usage\">2. 使用</a>\n- 我们将把我们的指令放在本地版本的 npm 脚本中，而不是直接通过命令行来运行 Babel.\n\n> 简单的在你的 package.json 中添加一个 \"scripts\" 属性并将 babel 命令放在它的 build 属性中：\n\n```json\n  {\n    \"name\": \"webpack\",\n    \"version\": \"1.0.0\",\n    \"scripts\": {\n      \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n+     \"build\": \"babel src -d lib\"  // 加入这一句命令\n    },\n    \"devDependencies\": {\n      \"babel-cli\": \"^6.26.0\"\n    }\n  }\n```\n现在从我们的终端可以运行以下命令：\n```bash\nnpm run build\n```\n*这会按照和之前一样的方式来运行 Babel 并将输出放在 lib 目录下，唯一不同在于我们现在使用了一个本地拷贝。*\n> 值得注意的是在babel的build命令是可以在build属性中自行配置的，上面是把src目录下的脚本打包到lib目录中，你也可以打包单个文件...\n\n#### <a name=\"babelrc\">3. 创建.babelrc配置文件</a>\n\n- 虽然已经配置好了 Babel ，但并没有让它真正生效。在项目的根目录中创建一个 .babelrc 文件并启用一些插件。 [详看](https://babeljs.cn/docs/setup/#installation)\n\n首先，你可以使用转换 ES2015+ 的 env preset：\n```bash\nnpm install babel-preset-env --save-dev\n```\n为了让 preset 生效，你需要像下面这样定义你的 .babelrc 文件：\n```json\n{\n  \"presets\": [\"env\"],\n  \"plugins\": []\n}\n```\n> .babelrc配置文件非常丰富：\n\n```bash\n# ES2015转码规则\n$ npm install --save-dev babel-preset-es2015\n\n# react转码规则\n$ npm install --save-dev babel-preset-react\n\n# ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个\n$ npm install --save-dev babel-preset-stage-0\n$ npm install --save-dev babel-preset-stage-1\n$ npm install --save-dev babel-preset-stage-2\n$ npm install --save-dev babel-preset-stage-3\n```\n最后，我们的 .babelrc 文件可以长这个样：\n``` json\n{\n  \"presets\": [\n    \"es2015\",\n    \"react\",\n    \"stage-2\"\n  ],\n  \"plugins\": []\n}\n```\n\n#### <a name=\"polyfill\">4. Babel-Polyfill</a>\n\nBabel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如`Object.assign`）都不会转码。\n\n举例来说，ES6在Array对象上新增了`Array.from`方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。\n\n安装命令如下：\n```bash\nnpm install --save babel-polyfill\n```\n然后，在脚本头部，加入如下一行代码：\n```js\nimport 'babel-polyfill';\n// 或者\nrequire('babel-polyfill');\n```\n\n#### <a name=\"register\">5. Babel-Register</a>\n\nbabel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。\n```bash\nnpm install --save-dev babel-register\n```\n使用时，必须首先加载babel-register：\n```js\nimport(\"babel-register\");\nimport(\"./index.js\");\n```\n然后，就不需要手动对index.js转码了。\n> 需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在`开发环境`使用。\n\n#### `后记`：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\n---\n> 参考文档： [babeljs.cn](https://babeljs.cn/) / [ruanyifeng.com](http://www.ruanyifeng.com/blog/2016/01/babel.html?20170213113809)","source":"_posts/0809007_记一次在公司中配置Babel的经历.md","raw":"---\nid: 0809007\ntitle: 记一次在公司中配置Babel的经历\ndate: 2018-03-01 09:46:10\ntags:\n    - Babel\n    - es6\n    - JavaScript\ncategories:\n---\n\n- <a href=\"#install\">安装</a>\n- <a href=\"#usage\">使用</a>\n- <a href=\"#babelrc\">创建.babelrc文件</a>\n- <a href=\"#polyfill\">Babel-Polyfill</a>\n- <a href=\"#register\">Babel-Register</a>\n\n&emsp;首先，为什么会写这样一篇文章呢？在进入公司几个月后，写业务代码都是使用es5语法，es6，于是想着使用Babel来构建一下。这样既可以愉快的使用ES6了，还能舒心的写代码，何乐而不为。\n\n- Babel的使用是基于Node.js环境的，所以必须先安装Node。\n- 我们将采用通过安装babel-cli的方式来使用babel。\n\n#### <a name=\"install\">1. 安装</a>\n&emsp;虽然你可以在你的机器上全局安装`Babel CLI`, 但根据单个项目进行本地安装会更好一些。这样做有两个主要的原因：\n* 同一机器上的不同的项目可以依赖不同版本的 Babel, 这允许你一次更新一个项目。\n* 这意味着在你的工作环境中没有隐含的依赖项。它将使你的项目更方便移植、更易于安装。\n\n> 首先我们需要生成一个package.json文件，进入到项目目录执行`npm init`命令，随后一顿选择回车。\n\n```bash\nYSY@SY-YU MINGW64 /d/START/webpack\n$ npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help json` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install <pkg>` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\npackage name: (webpack)\n```\n*最后，目录下会生成一个package.json文件，打开看一下*\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\"\n}\n```\n*里面都是刚才npm init时自己的配置*\n\n> 我们可以通过以下命令本地安装 Babel CLI:\n\n```bash\n// 全局安装\nnpm install babel-cli -g\n// 安装在当前项目中\nnpm install --save-dev babel-cli\n```\n我们在当前目录安装babel-cli，随后我们的package.json应该长这个样：\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"yvshare.cn\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.26.0\"\n  }\n}\n```\n\n#### <a name=\"usage\">2. 使用</a>\n- 我们将把我们的指令放在本地版本的 npm 脚本中，而不是直接通过命令行来运行 Babel.\n\n> 简单的在你的 package.json 中添加一个 \"scripts\" 属性并将 babel 命令放在它的 build 属性中：\n\n```json\n  {\n    \"name\": \"webpack\",\n    \"version\": \"1.0.0\",\n    \"scripts\": {\n      \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n+     \"build\": \"babel src -d lib\"  // 加入这一句命令\n    },\n    \"devDependencies\": {\n      \"babel-cli\": \"^6.26.0\"\n    }\n  }\n```\n现在从我们的终端可以运行以下命令：\n```bash\nnpm run build\n```\n*这会按照和之前一样的方式来运行 Babel 并将输出放在 lib 目录下，唯一不同在于我们现在使用了一个本地拷贝。*\n> 值得注意的是在babel的build命令是可以在build属性中自行配置的，上面是把src目录下的脚本打包到lib目录中，你也可以打包单个文件...\n\n#### <a name=\"babelrc\">3. 创建.babelrc配置文件</a>\n\n- 虽然已经配置好了 Babel ，但并没有让它真正生效。在项目的根目录中创建一个 .babelrc 文件并启用一些插件。 [详看](https://babeljs.cn/docs/setup/#installation)\n\n首先，你可以使用转换 ES2015+ 的 env preset：\n```bash\nnpm install babel-preset-env --save-dev\n```\n为了让 preset 生效，你需要像下面这样定义你的 .babelrc 文件：\n```json\n{\n  \"presets\": [\"env\"],\n  \"plugins\": []\n}\n```\n> .babelrc配置文件非常丰富：\n\n```bash\n# ES2015转码规则\n$ npm install --save-dev babel-preset-es2015\n\n# react转码规则\n$ npm install --save-dev babel-preset-react\n\n# ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个\n$ npm install --save-dev babel-preset-stage-0\n$ npm install --save-dev babel-preset-stage-1\n$ npm install --save-dev babel-preset-stage-2\n$ npm install --save-dev babel-preset-stage-3\n```\n最后，我们的 .babelrc 文件可以长这个样：\n``` json\n{\n  \"presets\": [\n    \"es2015\",\n    \"react\",\n    \"stage-2\"\n  ],\n  \"plugins\": []\n}\n```\n\n#### <a name=\"polyfill\">4. Babel-Polyfill</a>\n\nBabel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如`Object.assign`）都不会转码。\n\n举例来说，ES6在Array对象上新增了`Array.from`方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。\n\n安装命令如下：\n```bash\nnpm install --save babel-polyfill\n```\n然后，在脚本头部，加入如下一行代码：\n```js\nimport 'babel-polyfill';\n// 或者\nrequire('babel-polyfill');\n```\n\n#### <a name=\"register\">5. Babel-Register</a>\n\nbabel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。\n```bash\nnpm install --save-dev babel-register\n```\n使用时，必须首先加载babel-register：\n```js\nimport(\"babel-register\");\nimport(\"./index.js\");\n```\n然后，就不需要手动对index.js转码了。\n> 需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在`开发环境`使用。\n\n#### `后记`：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\n---\n> 参考文档： [babeljs.cn](https://babeljs.cn/) / [ruanyifeng.com](http://www.ruanyifeng.com/blog/2016/01/babel.html?20170213113809)","slug":"0809007_记一次在公司中配置Babel的经历","published":1,"updated":"2018-03-05T03:03:19.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qbf000a6cc0f19b03hs","content":"<ul>\n<li><a href=\"#install\">安装</a></li>\n<li><a href=\"#usage\">使用</a></li>\n<li><a href=\"#babelrc\">创建.babelrc文件</a></li>\n<li><a href=\"#polyfill\">Babel-Polyfill</a></li>\n<li><a href=\"#register\">Babel-Register</a></li>\n</ul>\n<p>&emsp;首先，为什么会写这样一篇文章呢？在进入公司几个月后，写业务代码都是使用es5语法，es6，于是想着使用Babel来构建一下。这样既可以愉快的使用ES6了，还能舒心的写代码，何乐而不为。</p>\n<ul>\n<li>Babel的使用是基于Node.js环境的，所以必须先安装Node。</li>\n<li>我们将采用通过安装babel-cli的方式来使用babel。</li>\n</ul>\n<h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a><a name=\"install\">1. 安装</a></h4><p>&emsp;虽然你可以在你的机器上全局安装<code>Babel CLI</code>, 但根据单个项目进行本地安装会更好一些。这样做有两个主要的原因：</p>\n<ul>\n<li>同一机器上的不同的项目可以依赖不同版本的 Babel, 这允许你一次更新一个项目。</li>\n<li>这意味着在你的工作环境中没有隐含的依赖项。它将使你的项目更方便移植、更易于安装。</li>\n</ul>\n<blockquote>\n<p>首先我们需要生成一个package.json文件，进入到项目目录执行<code>npm init</code>命令，随后一顿选择回车。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YSY@SY-YU MINGW64 /d/START/webpack</span><br><span class=\"line\">$ npm init</span><br><span class=\"line\">This utility will walk you through creating a package.json file.</span><br><span class=\"line\">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class=\"line\"></span><br><span class=\"line\">See `npm <span class=\"built_in\">help</span> json` <span class=\"keyword\">for</span> definitive documentation on these fields</span><br><span class=\"line\">and exactly what they <span class=\"keyword\">do</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class=\"line\">save it as a dependency <span class=\"keyword\">in</span> the package.json file.</span><br><span class=\"line\"></span><br><span class=\"line\">Press ^C at any time to quit.</span><br><span class=\"line\">package name: (webpack)</span><br></pre></td></tr></table></figure>\n<p><em>最后，目录下会生成一个package.json文件，打开看一下</em><br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>里面都是刚才npm init时自己的配置</em></p>\n<blockquote>\n<p>我们可以通过以下命令本地安装 Babel CLI:</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 全局安装</span><br><span class=\"line\">npm install babel-cli -g</span><br><span class=\"line\">// 安装在当前项目中</span><br><span class=\"line\">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure>\n<p>我们在当前目录安装babel-cli，随后我们的package.json应该长这个样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-cli\"</span>: <span class=\"string\">\"^6.26.0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a><a name=\"usage\">2. 使用</a></h4><ul>\n<li>我们将把我们的指令放在本地版本的 npm 脚本中，而不是直接通过命令行来运行 Babel.</li>\n</ul>\n<blockquote>\n<p>简单的在你的 package.json 中添加一个 “scripts” 属性并将 babel 命令放在它的 build 属性中：</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">+     \"build\": \"babel src -d lib\"  // 加入这一句命令</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"devDependencies\": &#123;</span><br><span class=\"line\">      \"babel-cli\": \"^6.26.0\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>现在从我们的终端可以运行以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure></p>\n<p><em>这会按照和之前一样的方式来运行 Babel 并将输出放在 lib 目录下，唯一不同在于我们现在使用了一个本地拷贝。</em></p>\n<blockquote>\n<p>值得注意的是在babel的build命令是可以在build属性中自行配置的，上面是把src目录下的脚本打包到lib目录中，你也可以打包单个文件…</p>\n</blockquote>\n<h4 id=\"3-创建-babelrc配置文件\"><a href=\"#3-创建-babelrc配置文件\" class=\"headerlink\" title=\"3. 创建.babelrc配置文件\"></a><a name=\"babelrc\">3. 创建.babelrc配置文件</a></h4><ul>\n<li>虽然已经配置好了 Babel ，但并没有让它真正生效。在项目的根目录中创建一个 .babelrc 文件并启用一些插件。 <a href=\"https://babeljs.cn/docs/setup/#installation\" target=\"_blank\" rel=\"noopener\">详看</a></li>\n</ul>\n<p>首先，你可以使用转换 ES2015+ 的 env preset：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-preset-env --save-dev</span><br></pre></td></tr></table></figure></p>\n<p>为了让 preset 生效，你需要像下面这样定义你的 .babelrc 文件：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"env\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>.babelrc配置文件非常丰富：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ES2015转码规则</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-es2015</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># react转码规则</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-react</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-0</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-1</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-2</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-3</span><br></pre></td></tr></table></figure>\n<p>最后，我们的 .babelrc 文件可以长这个样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"es2015\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"stage-2\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-Babel-Polyfill\"><a href=\"#4-Babel-Polyfill\" class=\"headerlink\" title=\"4. Babel-Polyfill\"></a><a name=\"polyfill\">4. Babel-Polyfill</a></h4><p>Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如<code>Object.assign</code>）都不会转码。</p>\n<p>举例来说，ES6在Array对象上新增了<code>Array.from</code>方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。</p>\n<p>安装命令如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure></p>\n<p>然后，在脚本头部，加入如下一行代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'babel-polyfill'</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-Babel-Register\"><a href=\"#5-Babel-Register\" class=\"headerlink\" title=\"5. Babel-Register\"></a><a name=\"register\">5. Babel-Register</a></h4><p>babel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-register</span><br></pre></td></tr></table></figure></p>\n<p>使用时，必须首先加载babel-register：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">\"babel-register\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">\"./index.js\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>然后，就不需要手动对index.js转码了。</p>\n<blockquote>\n<p>需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在<code>开发环境</code>使用。</p>\n</blockquote>\n<h4 id=\"后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\"><a href=\"#后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\" class=\"headerlink\" title=\"后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\"></a><code>后记</code>：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。</h4><hr>\n<blockquote>\n<p>参考文档： <a href=\"https://babeljs.cn/\" target=\"_blank\" rel=\"noopener\">babeljs.cn</a> / <a href=\"http://www.ruanyifeng.com/blog/2016/01/babel.html?20170213113809\" target=\"_blank\" rel=\"noopener\">ruanyifeng.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"#install\">安装</a></li>\n<li><a href=\"#usage\">使用</a></li>\n<li><a href=\"#babelrc\">创建.babelrc文件</a></li>\n<li><a href=\"#polyfill\">Babel-Polyfill</a></li>\n<li><a href=\"#register\">Babel-Register</a></li>\n</ul>\n<p>&emsp;首先，为什么会写这样一篇文章呢？在进入公司几个月后，写业务代码都是使用es5语法，es6，于是想着使用Babel来构建一下。这样既可以愉快的使用ES6了，还能舒心的写代码，何乐而不为。</p>\n<ul>\n<li>Babel的使用是基于Node.js环境的，所以必须先安装Node。</li>\n<li>我们将采用通过安装babel-cli的方式来使用babel。</li>\n</ul>\n<h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a><a name=\"install\">1. 安装</a></h4><p>&emsp;虽然你可以在你的机器上全局安装<code>Babel CLI</code>, 但根据单个项目进行本地安装会更好一些。这样做有两个主要的原因：</p>\n<ul>\n<li>同一机器上的不同的项目可以依赖不同版本的 Babel, 这允许你一次更新一个项目。</li>\n<li>这意味着在你的工作环境中没有隐含的依赖项。它将使你的项目更方便移植、更易于安装。</li>\n</ul>\n<blockquote>\n<p>首先我们需要生成一个package.json文件，进入到项目目录执行<code>npm init</code>命令，随后一顿选择回车。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">YSY@SY-YU MINGW64 /d/START/webpack</span><br><span class=\"line\">$ npm init</span><br><span class=\"line\">This utility will walk you through creating a package.json file.</span><br><span class=\"line\">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class=\"line\"></span><br><span class=\"line\">See `npm <span class=\"built_in\">help</span> json` <span class=\"keyword\">for</span> definitive documentation on these fields</span><br><span class=\"line\">and exactly what they <span class=\"keyword\">do</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class=\"line\">save it as a dependency <span class=\"keyword\">in</span> the package.json file.</span><br><span class=\"line\"></span><br><span class=\"line\">Press ^C at any time to quit.</span><br><span class=\"line\">package name: (webpack)</span><br></pre></td></tr></table></figure>\n<p><em>最后，目录下会生成一个package.json文件，打开看一下</em><br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>里面都是刚才npm init时自己的配置</em></p>\n<blockquote>\n<p>我们可以通过以下命令本地安装 Babel CLI:</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 全局安装</span><br><span class=\"line\">npm install babel-cli -g</span><br><span class=\"line\">// 安装在当前项目中</span><br><span class=\"line\">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure>\n<p>我们在当前目录安装babel-cli，随后我们的package.json应该长这个样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"yvshare.cn\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-cli\"</span>: <span class=\"string\">\"^6.26.0\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a><a name=\"usage\">2. 使用</a></h4><ul>\n<li>我们将把我们的指令放在本地版本的 npm 脚本中，而不是直接通过命令行来运行 Babel.</li>\n</ul>\n<blockquote>\n<p>简单的在你的 package.json 中添加一个 “scripts” 属性并将 babel 命令放在它的 build 属性中：</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">+     \"build\": \"babel src -d lib\"  // 加入这一句命令</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"devDependencies\": &#123;</span><br><span class=\"line\">      \"babel-cli\": \"^6.26.0\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>现在从我们的终端可以运行以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure></p>\n<p><em>这会按照和之前一样的方式来运行 Babel 并将输出放在 lib 目录下，唯一不同在于我们现在使用了一个本地拷贝。</em></p>\n<blockquote>\n<p>值得注意的是在babel的build命令是可以在build属性中自行配置的，上面是把src目录下的脚本打包到lib目录中，你也可以打包单个文件…</p>\n</blockquote>\n<h4 id=\"3-创建-babelrc配置文件\"><a href=\"#3-创建-babelrc配置文件\" class=\"headerlink\" title=\"3. 创建.babelrc配置文件\"></a><a name=\"babelrc\">3. 创建.babelrc配置文件</a></h4><ul>\n<li>虽然已经配置好了 Babel ，但并没有让它真正生效。在项目的根目录中创建一个 .babelrc 文件并启用一些插件。 <a href=\"https://babeljs.cn/docs/setup/#installation\" target=\"_blank\" rel=\"noopener\">详看</a></li>\n</ul>\n<p>首先，你可以使用转换 ES2015+ 的 env preset：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-preset-env --save-dev</span><br></pre></td></tr></table></figure></p>\n<p>为了让 preset 生效，你需要像下面这样定义你的 .babelrc 文件：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"env\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>.babelrc配置文件非常丰富：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ES2015转码规则</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-es2015</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># react转码规则</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-react</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</span></span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-0</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-1</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-2</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-3</span><br></pre></td></tr></table></figure>\n<p>最后，我们的 .babelrc 文件可以长这个样：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"es2015\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"stage-2\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-Babel-Polyfill\"><a href=\"#4-Babel-Polyfill\" class=\"headerlink\" title=\"4. Babel-Polyfill\"></a><a name=\"polyfill\">4. Babel-Polyfill</a></h4><p>Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如<code>Object.assign</code>）都不会转码。</p>\n<p>举例来说，ES6在Array对象上新增了<code>Array.from</code>方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。</p>\n<p>安装命令如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure></p>\n<p>然后，在脚本头部，加入如下一行代码：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'babel-polyfill'</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-Babel-Register\"><a href=\"#5-Babel-Register\" class=\"headerlink\" title=\"5. Babel-Register\"></a><a name=\"register\">5. Babel-Register</a></h4><p>babel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-register</span><br></pre></td></tr></table></figure></p>\n<p>使用时，必须首先加载babel-register：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">\"babel-register\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">\"./index.js\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>然后，就不需要手动对index.js转码了。</p>\n<blockquote>\n<p>需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在<code>开发环境</code>使用。</p>\n</blockquote>\n<h4 id=\"后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\"><a href=\"#后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\" class=\"headerlink\" title=\"后记：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。\"></a><code>后记</code>：虽然实际项目上的配置根据实际情况有所不同，但是基本的东西就是这个样子了，以后有类似需求就可以根据文档来进行了，非常方便。</h4><hr>\n<blockquote>\n<p>参考文档： <a href=\"https://babeljs.cn/\" target=\"_blank\" rel=\"noopener\">babeljs.cn</a> / <a href=\"http://www.ruanyifeng.com/blog/2016/01/babel.html?20170213113809\" target=\"_blank\" rel=\"noopener\">ruanyifeng.com</a></p>\n</blockquote>\n"},{"id":"0809006","title":"关于javascript数组的一些思考","date":"2018-02-27T07:48:26.000Z","_content":"\n#### 关于数组的一些认识\n1. 使用构造器函数创建数组时:\n```javascript\nlet ary = new Array();\n```\n- 若参数只有一个，且为数字，`let ary1 = new Array(3)`，这是其实我们是在指定数组的长度的，即 `ary1.length === 3`。`ary1[0]`则为`undefined`;\n- 当定义`let ary2 = new Array(1, 2, 3)`时，此时`ary2 === [1, 2, 3]`;\n2. JS中的数组定义非常的自由：\n 看下面的例子：\n```javascript\nlet ary = [1, 2, 3];\nary[5] = 5;\nconsole.log(ary);           // [1,2,3,undefined,undefined,5]\nconsole.log(ary.length);    // 6\n```\n 再看：\n```javascript\nlet ary2 = [1, 2, 3, 4, 5];\nary2.length = 3;\nconsole.log(ary2);      // [1, 2, 3]\n```\n#### 常用的数组API\n1. 万能方法 `splice()`\n-  splice()方法允许我们对数组进行插入、替换和删除的功能。**splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组**，简直完美呀！\n- `splice()`方法接受三个参数，**第一个**为开始索引，**第二个**为删除元素的位置，**第三个**为插入的元素，可以为第二个，当然也可省略（表示删除元素）。\n- `splice()`方法会修改原数组！\n- 通过以下三个demo了解一下具体的用法吧：\n插入:\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,0,\"add1\");\nconsole.log(ary1);      [ 'first', 'add1', 'second', 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [] 没有删除则放回一个空数组\n```\n替换：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,1,\"replace\");\nconsole.log(ary1);      [ 'first', \"replace, 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [\"second\"] 返回被删除(即替换)的数组\n```\n删除：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,3);\nconsole.log(ary1);      [\"second\", \"third\", \"forth\"]\nconsole.log(ary2);      [\"first\", \"fifth\"]\n```\n2. `slice()` 方法\n- `slice()` 方法可以接受两个参数(start, end)；\n- `slice()` 方法可从已有的数组中返回选定的元素；\n- `slice()` 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；\n- `slice()` 方法**不会改变原始数组**，而是返回一个新数组。\ndemo1:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log (ary.slice(1,2) );      // [\"second\"]\nlet ary1 = ary.slice(1,2);          // [\"second\"]\nlet ary2 = ary.slice(1,3);          // [\"second\", \"third\"]\nconsole.log(ary);                   // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo2:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log(ary.slice(1,2));    // [\"second\"]\nconsole.log(ary.slice(1,3));    // [\"second\", \"third\"]\nconsole.log(ary));              // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo3:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary1 = ary.slice();     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary.slice(0);     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n\nary === ary1;       // false\nary === ary2;       // false\nary1 === ary2;      // false\n```\n**看出来啥猫腻没，这不是深复制一个数据吗！**","source":"_posts/0809006_关于JavaScript数组的一些思考.md","raw":"---\nid: 0809006\ntitle: 关于javascript数组的一些思考\ndate: 2018-02-27 15:48:26\ntags: \n    - JavaScript\ncategories:\n---\n\n#### 关于数组的一些认识\n1. 使用构造器函数创建数组时:\n```javascript\nlet ary = new Array();\n```\n- 若参数只有一个，且为数字，`let ary1 = new Array(3)`，这是其实我们是在指定数组的长度的，即 `ary1.length === 3`。`ary1[0]`则为`undefined`;\n- 当定义`let ary2 = new Array(1, 2, 3)`时，此时`ary2 === [1, 2, 3]`;\n2. JS中的数组定义非常的自由：\n 看下面的例子：\n```javascript\nlet ary = [1, 2, 3];\nary[5] = 5;\nconsole.log(ary);           // [1,2,3,undefined,undefined,5]\nconsole.log(ary.length);    // 6\n```\n 再看：\n```javascript\nlet ary2 = [1, 2, 3, 4, 5];\nary2.length = 3;\nconsole.log(ary2);      // [1, 2, 3]\n```\n#### 常用的数组API\n1. 万能方法 `splice()`\n-  splice()方法允许我们对数组进行插入、替换和删除的功能。**splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组**，简直完美呀！\n- `splice()`方法接受三个参数，**第一个**为开始索引，**第二个**为删除元素的位置，**第三个**为插入的元素，可以为第二个，当然也可省略（表示删除元素）。\n- `splice()`方法会修改原数组！\n- 通过以下三个demo了解一下具体的用法吧：\n插入:\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,0,\"add1\");\nconsole.log(ary1);      [ 'first', 'add1', 'second', 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [] 没有删除则放回一个空数组\n```\n替换：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,1,\"replace\");\nconsole.log(ary1);      [ 'first', \"replace, 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [\"second\"] 返回被删除(即替换)的数组\n```\n删除：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,3);\nconsole.log(ary1);      [\"second\", \"third\", \"forth\"]\nconsole.log(ary2);      [\"first\", \"fifth\"]\n```\n2. `slice()` 方法\n- `slice()` 方法可以接受两个参数(start, end)；\n- `slice()` 方法可从已有的数组中返回选定的元素；\n- `slice()` 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；\n- `slice()` 方法**不会改变原始数组**，而是返回一个新数组。\ndemo1:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log (ary.slice(1,2) );      // [\"second\"]\nlet ary1 = ary.slice(1,2);          // [\"second\"]\nlet ary2 = ary.slice(1,3);          // [\"second\", \"third\"]\nconsole.log(ary);                   // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo2:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log(ary.slice(1,2));    // [\"second\"]\nconsole.log(ary.slice(1,3));    // [\"second\", \"third\"]\nconsole.log(ary));              // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo3:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary1 = ary.slice();     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary.slice(0);     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n\nary === ary1;       // false\nary === ary2;       // false\nary1 === ary2;      // false\n```\n**看出来啥猫腻没，这不是深复制一个数据吗！**","slug":"0809006_关于JavaScript数组的一些思考","published":1,"updated":"2018-03-05T03:02:15.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qbi000c6cc0vfv07avq","content":"<h4 id=\"关于数组的一些认识\"><a href=\"#关于数组的一些认识\" class=\"headerlink\" title=\"关于数组的一些认识\"></a>关于数组的一些认识</h4><ol>\n<li>使用构造器函数创建数组时:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>若参数只有一个，且为数字，<code>let ary1 = new Array(3)</code>，这是其实我们是在指定数组的长度的，即 <code>ary1.length === 3</code>。<code>ary1[0]</code>则为<code>undefined</code>;</li>\n<li>当定义<code>let ary2 = new Array(1, 2, 3)</code>时，此时<code>ary2 === [1, 2, 3]</code>;</li>\n</ul>\n<ol>\n<li><p>JS中的数组定义非常的自由：<br>看下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">ary[<span class=\"number\">5</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);           <span class=\"comment\">// [1,2,3,undefined,undefined,5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.length);    <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>再看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">ary2.length = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"常用的数组API\"><a href=\"#常用的数组API\" class=\"headerlink\" title=\"常用的数组API\"></a>常用的数组API</h4><ol>\n<li>万能方法 <code>splice()</code></li>\n</ol>\n<ul>\n<li>splice()方法允许我们对数组进行插入、替换和删除的功能。<strong>splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组</strong>，简直完美呀！</li>\n<li><code>splice()</code>方法接受三个参数，<strong>第一个</strong>为开始索引，<strong>第二个</strong>为删除元素的位置，<strong>第三个</strong>为插入的元素，可以为第二个，当然也可省略（表示删除元素）。</li>\n<li><code>splice()</code>方法会修改原数组！</li>\n<li>通过以下三个demo了解一下具体的用法吧：<br>插入:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">\"add1\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">'add1'</span>, <span class=\"string\">'second'</span>, <span class=\"string\">'third'</span>, <span class=\"string\">'forth'</span>, <span class=\"string\">'fifth'</span> ]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [] 没有删除则放回一个空数组</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>替换：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">\"replace\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">\"replace, 'third', 'forth', 'fifth' ]</span></span><br><span class=\"line\"><span class=\"string\">console.log(ary2);      [\"</span>second<span class=\"string\">\"] 返回被删除(即替换)的数组</span></span><br></pre></td></tr></table></figure></p>\n<p>删除：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [<span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"fifth\"</span>]</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><code>slice()</code> 方法</li>\n</ol>\n<ul>\n<li><code>slice()</code> 方法可以接受两个参数(start, end)；</li>\n<li><code>slice()</code> 方法可从已有的数组中返回选定的元素；</li>\n<li><code>slice()</code> 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；</li>\n<li><code>slice()</code> 方法<strong>不会改变原始数组</strong>，而是返回一个新数组。<br>demo1:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log (ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>) );      <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>);          <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);          <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);                   <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>demo2:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>));    <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>));    <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary));              <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure></p>\n<p>demo3:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice();     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">0</span>);     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"></span><br><span class=\"line\">ary === ary1;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary === ary2;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary1 === ary2;      <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>看出来啥猫腻没，这不是深复制一个数据吗！</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"关于数组的一些认识\"><a href=\"#关于数组的一些认识\" class=\"headerlink\" title=\"关于数组的一些认识\"></a>关于数组的一些认识</h4><ol>\n<li>使用构造器函数创建数组时:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>若参数只有一个，且为数字，<code>let ary1 = new Array(3)</code>，这是其实我们是在指定数组的长度的，即 <code>ary1.length === 3</code>。<code>ary1[0]</code>则为<code>undefined</code>;</li>\n<li>当定义<code>let ary2 = new Array(1, 2, 3)</code>时，此时<code>ary2 === [1, 2, 3]</code>;</li>\n</ul>\n<ol>\n<li><p>JS中的数组定义非常的自由：<br>看下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">ary[<span class=\"number\">5</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);           <span class=\"comment\">// [1,2,3,undefined,undefined,5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.length);    <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>再看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">ary2.length = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"常用的数组API\"><a href=\"#常用的数组API\" class=\"headerlink\" title=\"常用的数组API\"></a>常用的数组API</h4><ol>\n<li>万能方法 <code>splice()</code></li>\n</ol>\n<ul>\n<li>splice()方法允许我们对数组进行插入、替换和删除的功能。<strong>splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组</strong>，简直完美呀！</li>\n<li><code>splice()</code>方法接受三个参数，<strong>第一个</strong>为开始索引，<strong>第二个</strong>为删除元素的位置，<strong>第三个</strong>为插入的元素，可以为第二个，当然也可省略（表示删除元素）。</li>\n<li><code>splice()</code>方法会修改原数组！</li>\n<li>通过以下三个demo了解一下具体的用法吧：<br>插入:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">\"add1\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">'add1'</span>, <span class=\"string\">'second'</span>, <span class=\"string\">'third'</span>, <span class=\"string\">'forth'</span>, <span class=\"string\">'fifth'</span> ]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [] 没有删除则放回一个空数组</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>替换：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">\"replace\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">\"replace, 'third', 'forth', 'fifth' ]</span></span><br><span class=\"line\"><span class=\"string\">console.log(ary2);      [\"</span>second<span class=\"string\">\"] 返回被删除(即替换)的数组</span></span><br></pre></td></tr></table></figure></p>\n<p>删除：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [<span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"fifth\"</span>]</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><code>slice()</code> 方法</li>\n</ol>\n<ul>\n<li><code>slice()</code> 方法可以接受两个参数(start, end)；</li>\n<li><code>slice()</code> 方法可从已有的数组中返回选定的元素；</li>\n<li><code>slice()</code> 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；</li>\n<li><code>slice()</code> 方法<strong>不会改变原始数组</strong>，而是返回一个新数组。<br>demo1:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log (ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>) );      <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>);          <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);          <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);                   <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>demo2:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>));    <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>));    <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary));              <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure></p>\n<p>demo3:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice();     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">0</span>);     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"></span><br><span class=\"line\">ary === ary1;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary === ary2;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary1 === ary2;      <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>看出来啥猫腻没，这不是深复制一个数据吗！</strong></p>\n"},{"id":"0809008","title":"JavaScript面向对象","date":"2018-02-27T07:52:37.000Z","_content":"\n#### 1. 原始方式：\n* 对象字面量方式\n```javascript\nvar Hero = { \n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    todo: function () { alert(this.name); }\n};\n```\n* Object构造函数方式\n```javascript\nvar Hero = new Object();\n\nHero.name = 'MasterYi';\nHero.skill = 'Q';\nHero.do = function(){\n    return this.name + ' use ' + this.skill + ' kill ' + 'yasuo';\n}\n\nalert( Hero.skill );    // AlphaStrike\nalert( Hero.do() );     // MasterYi use AlphaStrike kill yasuo\n```\n如上，当我们要创建批量的Hero1、Hero2……时，\n每次都要敲很多代码，资深copypaster都吃不消！\n然后就有了下面批量生产的工厂模式。\n\n#### 2. 工厂模式\n```javascript\nfunction heroObj(name, skill){\n    var Hero = new Object();\n\n    Hero.name = name;\n    Hero.skill = skill;\n    Hero.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n    return Hero;\n}\nvar riven = heroObj('yasuo', 'R');\nvar ashe = heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\n工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。\n指定姓名年龄就可以造一堆小宝宝啦，解放双手。\n但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、\n是人还是狗傻傻分不清（instanceof 测试为 Object），\n另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？\n\n#### 3. 构造函数\n```javascript\nfunction HeroObj(name, skill){\n\n    this.name = name;\n    this.skill = skill;\n    this.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n}\n\nvar riven = new heroObj('yasuo', 'R');\nvar ashe = new heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\nECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。\n\n#### 4. 原型模式\n* 直接使用 prototype 属性\n```javascript\nfunction Hero () {}\nHero.prototype.name = 'MasterYi';\nHero.prototype.skill = 'AlphaStrike';\nHero.prototype.do = function () { alert(this.name); };\n```\n* 字面量定义方式\n```javascript\nfunction Hero () {}\nHero.prototype = {\n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    sayName: function () { alert(this.name); }\n};\nvar p1 = new Hero(); //name='MasterYi'\nvar p2 = new Hero(); //name='MasterYi'\n```\n这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。\n\n#### 5. 混合模式\n```javascript\nfunction Hero (name, skill) {\n    this.name = name;\n    this.skill = skill;\n}\nHero.prototype = {\n    skillLists: ['Q', 'W', 'E', 'R'];\n    sayName: function () {\n        alert(this.name);\n    },\n    do: function () {\n        alert(this.name + ' use ' + this.skill + ' kill ' + 'MasterYi');\n    }\n};\nvar p1 = new Hero('yasuo', 'R');\nvar p2 = new Hero('ashe', 'w');\np1.sayName();   // yasuo\np1.skillLists;  // ['Q', 'W', 'E', 'R']\np2.do();        // ashe use w kill MasterYi\n```\n\n#### 6. 使用`class`关键字\n```javascript\nclass Hero {\n    constructor(){\n        this.name = 'MasterYi';\n        this.skill = 'AlphaStrike';\n    }\n    do(enemy){\n        alert(this.name + ' use ' +  this.skill + ' kill ' + enemy)\n    }\n}\n\nlet ashe = new Hero();\nashe.do('ashe');       // MasterYi use AlphaStrike kill ashe\n\nclass Yasuo extends Hero {\n    constructor(){\n        super()\n        this.name = 'yasuo'\n    }\n}\nlet yasuo = new Yasuo();\nyasuo.do('timor');      // yasuo use AlphaStrike kill timor\n```\n这里涉及到 `ES6` 里的新特性，想了解 `ES6` 中更多的新特性，大家可以去看看 [阮一峰](http://es6.ruanyifeng.com/) 老师的博客。","source":"_posts/0809008_JavaScript面向对象.md","raw":"---\nid: 0809008\ntitle: JavaScript面向对象\ndate: 2018-02-27 15:52:37\ntags: \n    - JavaScript\ncategories:\n---\n\n#### 1. 原始方式：\n* 对象字面量方式\n```javascript\nvar Hero = { \n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    todo: function () { alert(this.name); }\n};\n```\n* Object构造函数方式\n```javascript\nvar Hero = new Object();\n\nHero.name = 'MasterYi';\nHero.skill = 'Q';\nHero.do = function(){\n    return this.name + ' use ' + this.skill + ' kill ' + 'yasuo';\n}\n\nalert( Hero.skill );    // AlphaStrike\nalert( Hero.do() );     // MasterYi use AlphaStrike kill yasuo\n```\n如上，当我们要创建批量的Hero1、Hero2……时，\n每次都要敲很多代码，资深copypaster都吃不消！\n然后就有了下面批量生产的工厂模式。\n\n#### 2. 工厂模式\n```javascript\nfunction heroObj(name, skill){\n    var Hero = new Object();\n\n    Hero.name = name;\n    Hero.skill = skill;\n    Hero.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n    return Hero;\n}\nvar riven = heroObj('yasuo', 'R');\nvar ashe = heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\n工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。\n指定姓名年龄就可以造一堆小宝宝啦，解放双手。\n但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、\n是人还是狗傻傻分不清（instanceof 测试为 Object），\n另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？\n\n#### 3. 构造函数\n```javascript\nfunction HeroObj(name, skill){\n\n    this.name = name;\n    this.skill = skill;\n    this.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n}\n\nvar riven = new heroObj('yasuo', 'R');\nvar ashe = new heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\nECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。\n\n#### 4. 原型模式\n* 直接使用 prototype 属性\n```javascript\nfunction Hero () {}\nHero.prototype.name = 'MasterYi';\nHero.prototype.skill = 'AlphaStrike';\nHero.prototype.do = function () { alert(this.name); };\n```\n* 字面量定义方式\n```javascript\nfunction Hero () {}\nHero.prototype = {\n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    sayName: function () { alert(this.name); }\n};\nvar p1 = new Hero(); //name='MasterYi'\nvar p2 = new Hero(); //name='MasterYi'\n```\n这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。\n\n#### 5. 混合模式\n```javascript\nfunction Hero (name, skill) {\n    this.name = name;\n    this.skill = skill;\n}\nHero.prototype = {\n    skillLists: ['Q', 'W', 'E', 'R'];\n    sayName: function () {\n        alert(this.name);\n    },\n    do: function () {\n        alert(this.name + ' use ' + this.skill + ' kill ' + 'MasterYi');\n    }\n};\nvar p1 = new Hero('yasuo', 'R');\nvar p2 = new Hero('ashe', 'w');\np1.sayName();   // yasuo\np1.skillLists;  // ['Q', 'W', 'E', 'R']\np2.do();        // ashe use w kill MasterYi\n```\n\n#### 6. 使用`class`关键字\n```javascript\nclass Hero {\n    constructor(){\n        this.name = 'MasterYi';\n        this.skill = 'AlphaStrike';\n    }\n    do(enemy){\n        alert(this.name + ' use ' +  this.skill + ' kill ' + enemy)\n    }\n}\n\nlet ashe = new Hero();\nashe.do('ashe');       // MasterYi use AlphaStrike kill ashe\n\nclass Yasuo extends Hero {\n    constructor(){\n        super()\n        this.name = 'yasuo'\n    }\n}\nlet yasuo = new Yasuo();\nyasuo.do('timor');      // yasuo use AlphaStrike kill timor\n```\n这里涉及到 `ES6` 里的新特性，想了解 `ES6` 中更多的新特性，大家可以去看看 [阮一峰](http://es6.ruanyifeng.com/) 老师的博客。","slug":"0809008_JavaScript面向对象","published":1,"updated":"2018-03-05T03:01:37.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qbn000e6cc0a7h1wmwa","content":"<h4 id=\"1-原始方式：\"><a href=\"#1-原始方式：\" class=\"headerlink\" title=\"1. 原始方式：\"></a>1. 原始方式：</h4><ul>\n<li><p>对象字面量方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = &#123; </span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    todo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object构造函数方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">Hero.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.skill = <span class=\"string\">'Q'</span>;</span><br><span class=\"line\">Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'yasuo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert( Hero.skill );    <span class=\"comment\">// AlphaStrike</span></span><br><span class=\"line\">alert( Hero.do() );     <span class=\"comment\">// MasterYi use AlphaStrike kill yasuo</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如上，当我们要创建批量的Hero1、Hero2……时，<br>每次都要敲很多代码，资深copypaster都吃不消！<br>然后就有了下面批量生产的工厂模式。</p>\n<h4 id=\"2-工厂模式\"><a href=\"#2-工厂模式\" class=\"headerlink\" title=\"2. 工厂模式\"></a>2. 工厂模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    Hero.name = name;</span><br><span class=\"line\">    Hero.skill = skill;</span><br><span class=\"line\">    Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Hero;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。<br>指定姓名年龄就可以造一堆小宝宝啦，解放双手。<br>但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、<br>是人还是狗傻傻分不清（instanceof 测试为 Object），<br>另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？</p>\n<h4 id=\"3-构造函数\"><a href=\"#3-构造函数\" class=\"headerlink\" title=\"3. 构造函数\"></a>3. 构造函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HeroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>ECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。</p>\n<h4 id=\"4-原型模式\"><a href=\"#4-原型模式\" class=\"headerlink\" title=\"4. 原型模式\"></a>4. 原型模式</h4><ul>\n<li><p>直接使用 prototype 属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.prototype.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">Hero.prototype.do = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字面量定义方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。</p>\n<h4 id=\"5-混合模式\"><a href=\"#5-混合模式\" class=\"headerlink\" title=\"5. 混合模式\"></a>5. 混合模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\">name, skill</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    skillLists: [<span class=\"string\">'Q'</span>, <span class=\"string\">'W'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'R'</span>];</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">do</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'ashe'</span>, <span class=\"string\">'w'</span>);</span><br><span class=\"line\">p1.sayName();   <span class=\"comment\">// yasuo</span></span><br><span class=\"line\">p1.skillLists;  <span class=\"comment\">// ['Q', 'W', 'E', 'R']</span></span><br><span class=\"line\">p2.do();        <span class=\"comment\">// ashe use w kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-使用class关键字\"><a href=\"#6-使用class关键字\" class=\"headerlink\" title=\"6. 使用class关键字\"></a>6. 使用<code>class</code>关键字</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>(enemy)&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> +  <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + enemy)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ashe = <span class=\"keyword\">new</span> Hero();</span><br><span class=\"line\">ashe.do(<span class=\"string\">'ashe'</span>);       <span class=\"comment\">// MasterYi use AlphaStrike kill ashe</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Yasuo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'yasuo'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> yasuo = <span class=\"keyword\">new</span> Yasuo();</span><br><span class=\"line\">yasuo.do(<span class=\"string\">'timor'</span>);      <span class=\"comment\">// yasuo use AlphaStrike kill timor</span></span><br></pre></td></tr></table></figure>\n<p>这里涉及到 <code>ES6</code> 里的新特性，想了解 <code>ES6</code> 中更多的新特性，大家可以去看看 <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰</a> 老师的博客。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-原始方式：\"><a href=\"#1-原始方式：\" class=\"headerlink\" title=\"1. 原始方式：\"></a>1. 原始方式：</h4><ul>\n<li><p>对象字面量方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = &#123; </span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    todo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object构造函数方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">Hero.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.skill = <span class=\"string\">'Q'</span>;</span><br><span class=\"line\">Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'yasuo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert( Hero.skill );    <span class=\"comment\">// AlphaStrike</span></span><br><span class=\"line\">alert( Hero.do() );     <span class=\"comment\">// MasterYi use AlphaStrike kill yasuo</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如上，当我们要创建批量的Hero1、Hero2……时，<br>每次都要敲很多代码，资深copypaster都吃不消！<br>然后就有了下面批量生产的工厂模式。</p>\n<h4 id=\"2-工厂模式\"><a href=\"#2-工厂模式\" class=\"headerlink\" title=\"2. 工厂模式\"></a>2. 工厂模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    Hero.name = name;</span><br><span class=\"line\">    Hero.skill = skill;</span><br><span class=\"line\">    Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Hero;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。<br>指定姓名年龄就可以造一堆小宝宝啦，解放双手。<br>但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、<br>是人还是狗傻傻分不清（instanceof 测试为 Object），<br>另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？</p>\n<h4 id=\"3-构造函数\"><a href=\"#3-构造函数\" class=\"headerlink\" title=\"3. 构造函数\"></a>3. 构造函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HeroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>ECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。</p>\n<h4 id=\"4-原型模式\"><a href=\"#4-原型模式\" class=\"headerlink\" title=\"4. 原型模式\"></a>4. 原型模式</h4><ul>\n<li><p>直接使用 prototype 属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.prototype.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">Hero.prototype.do = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字面量定义方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。</p>\n<h4 id=\"5-混合模式\"><a href=\"#5-混合模式\" class=\"headerlink\" title=\"5. 混合模式\"></a>5. 混合模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\">name, skill</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    skillLists: [<span class=\"string\">'Q'</span>, <span class=\"string\">'W'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'R'</span>];</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">do</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'ashe'</span>, <span class=\"string\">'w'</span>);</span><br><span class=\"line\">p1.sayName();   <span class=\"comment\">// yasuo</span></span><br><span class=\"line\">p1.skillLists;  <span class=\"comment\">// ['Q', 'W', 'E', 'R']</span></span><br><span class=\"line\">p2.do();        <span class=\"comment\">// ashe use w kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-使用class关键字\"><a href=\"#6-使用class关键字\" class=\"headerlink\" title=\"6. 使用class关键字\"></a>6. 使用<code>class</code>关键字</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>(enemy)&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> +  <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + enemy)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ashe = <span class=\"keyword\">new</span> Hero();</span><br><span class=\"line\">ashe.do(<span class=\"string\">'ashe'</span>);       <span class=\"comment\">// MasterYi use AlphaStrike kill ashe</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Yasuo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'yasuo'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> yasuo = <span class=\"keyword\">new</span> Yasuo();</span><br><span class=\"line\">yasuo.do(<span class=\"string\">'timor'</span>);      <span class=\"comment\">// yasuo use AlphaStrike kill timor</span></span><br></pre></td></tr></table></figure>\n<p>这里涉及到 <code>ES6</code> 里的新特性，想了解 <code>ES6</code> 中更多的新特性，大家可以去看看 <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰</a> 老师的博客。</p>\n"},{"id":"0809010","title":"小窥Node.js服务端框架Express","date":"2018-03-02T08:07:06.000Z","_content":"","source":"_posts/0809010_小窥Node.js服务端框架Express.md","raw":"---\nid: 0809010\ntitle: 小窥Node.js服务端框架Express\ndate: 2018-03-02 16:07:06\ntags:\n    - Node.js\n    - Express\ncategories:\n---\n","slug":"0809010_小窥Node.js服务端框架Express","published":1,"updated":"2018-03-05T07:33:12.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qbr000g6cc05gy9w0j7","content":"","site":{"data":{}},"excerpt":"","more":""},{"id":"0809009","title":"vue-cli快速构建vue.js项目","date":"2018-03-01T06:59:28.000Z","_content":"- <a href=\"#Quickstart\">快速上手</a>\n- <a href=\"#Commands\">构建命令</a>\n- <a href=\"#Babel\">配置Babel</a>\n\n#### <a name=\"Quickstart\">1. 快速上手</a>\n本文介绍如何使用vue-cli快速构建vus.js项目，主要用到`webpack`，以及`vue-loader`，所以确保你的环境中安装有webpack。\n\n```bash\n# 安装vue-cli脚手架工具\n$ npm install -g vue-cli\n\n# 在 my-project 目录中生成一个项目\n# 这一步中你还可以选择是否安装vue-router,ESLint,unit tests, e2e tests...\n$ vue init webpack my-project\n\n# 进入到项目\n$ cd my-project\n\n# 安装依赖\n$ npm install\n\n# 构建并启动项目\n$ npm run dev\n```\n如果你在 `vue init webpack my-project` 步骤中选择安装所有的工具，那么我们的项目目录结构应该是这样的：\n```\n.\n├── build/                      # webpack config files\n│   └── ...\n├── config/\n│   ├── index.js                # main project config\n│   └── ...\n├── src/\n│   ├── main.js                 # app entry file\n│   ├── App.vue                 # main app component\n│   ├── components/             # ui components\n│   │   └── ...\n│   └── assets/                 # module assets (processed by webpack)\n│       └── ...\n├── static/                     # pure static assets (directly copied)\n├── test/\n│   └── unit/                   # unit tests\n│   │   ├── specs/              # test spec files\n│   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests\n│   │   ├── index.js            # test build entry file\n│   │   ├── jest.conf.js        # Config file when using Jest for unit tests\n│   │   └── karma.conf.js       # test runner config file when using Karma for unit tests\n│   │   ├── setup.js            # file that runs before Jest runs your unit tests\n│   └── e2e/                    # e2e tests\n│   │   ├── specs/              # test spec files\n│   │   ├── custom-assertions/  # custom assertions for e2e tests\n│   │   ├── runner.js           # test runner script\n│   │   └── nightwatch.conf.js  # test runner config file\n├── .babelrc                    # babel config\n├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor\n├── .eslintrc.js                # eslint config\n├── .eslintignore               # eslint ignore rules\n├── .gitignore                  # sensible defaults for gitignore\n├── .postcssrc.js               # postcss config\n├── index.html                  # index.html template\n├── package.json                # build scripts and dependencies\n└── README.md                   # Default README file\n```\n> 目录/文件介绍：\n\n- `build/`：该目录保存的是开发和生产环境中的webpack配置，一般情况下是不需要进行修改的；当需要自定义webpack配置时，可以从webpack.base.conf.js开始研究。\n\n- `config/index.js`：这是项目构建时需要的一些最常用到的配置文件。\n\n- `src/`：这里存放的就是我们的业务代码了，我们可以根据项目需要自行配置。\n\n- `static/`：在这里，我们可以存放一些我们不希望webpack来处理的静态资源文件，在使用webpack来构建时，这里的文件将会直接复制到构建后的资源目录下。\n\n- `test/unit`：单元测试相关文件。\n\n- `test/e2e`：e2e测试相关文件。\n\n- `index.html`：基于vue.js的SPA单页应用的入口HTML模板，在开发、构建过程中，webpack将生成很多资源文件，文件之间的URL会被自动的注入到该index.html中。\n\n- `package.json`：npm包源文件，包含所有的构建依赖和构建命令。\n\n#### <a name=\"Commands\">2. 构建命令</a>\n\n<strong>所有的构建命令都是通过`npm`脚本执行的，见`package.json//scripts`。<strong>\n\n```\nnpm run dev\n```\n在本地开发环境启动一个node.js服务器。\n- `webpack` + `vue-loader` 作用于vue的单文件组件\n- 状态保存，热加载\n- 使用`ESLint`检查js\n- 生成资源文件的sourcemap\n- ......\n\n```\nnpm run build\n```\n在生产环境中构建资源\n- 使用`UglifyJS v3`压缩JavaScript\n- 使用`html-minifier`压缩HTML\n- 使用`cssnano`将所有组件的CSS提取到一个文件中\n- 使用版本哈希编译所有的静态文件，以实现资源的持久缓存。为所有的资源自定生成合适的URL，最后注入到`index.html`中，完成整个工程的构建。\n\n```\nnpm run unit\n```\n- 使用Jest在JSDOM中运行单元测试\n\n```\nnpm run lint\n```\n- 运行ESLint并报告任何linting错误。\n\n> 更多构建命令请查阅相关资料\n\n#### <a name=\"Babel\">3. 配置Babel</a>\n\n> 详见我的[另外一篇文章](/2018/03/01/0809007/)\n\n`至此，通过vue-cli构建vue工程的基本过程已经结束，查看更多详细配置，`[请转](https://vuejs-templates.github.io/webpack/)","source":"_posts/0809009_vue-cli快速构建vue-js项目.md","raw":"---\nid: 0809009\ntitle: vue-cli快速构建vue.js项目\ndate: 2018-03-01 14:59:28\ntags:\n    - vue.js\n    - webpack\n    - JavaScript\n    - es6\ncategories:\n---\n- <a href=\"#Quickstart\">快速上手</a>\n- <a href=\"#Commands\">构建命令</a>\n- <a href=\"#Babel\">配置Babel</a>\n\n#### <a name=\"Quickstart\">1. 快速上手</a>\n本文介绍如何使用vue-cli快速构建vus.js项目，主要用到`webpack`，以及`vue-loader`，所以确保你的环境中安装有webpack。\n\n```bash\n# 安装vue-cli脚手架工具\n$ npm install -g vue-cli\n\n# 在 my-project 目录中生成一个项目\n# 这一步中你还可以选择是否安装vue-router,ESLint,unit tests, e2e tests...\n$ vue init webpack my-project\n\n# 进入到项目\n$ cd my-project\n\n# 安装依赖\n$ npm install\n\n# 构建并启动项目\n$ npm run dev\n```\n如果你在 `vue init webpack my-project` 步骤中选择安装所有的工具，那么我们的项目目录结构应该是这样的：\n```\n.\n├── build/                      # webpack config files\n│   └── ...\n├── config/\n│   ├── index.js                # main project config\n│   └── ...\n├── src/\n│   ├── main.js                 # app entry file\n│   ├── App.vue                 # main app component\n│   ├── components/             # ui components\n│   │   └── ...\n│   └── assets/                 # module assets (processed by webpack)\n│       └── ...\n├── static/                     # pure static assets (directly copied)\n├── test/\n│   └── unit/                   # unit tests\n│   │   ├── specs/              # test spec files\n│   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests\n│   │   ├── index.js            # test build entry file\n│   │   ├── jest.conf.js        # Config file when using Jest for unit tests\n│   │   └── karma.conf.js       # test runner config file when using Karma for unit tests\n│   │   ├── setup.js            # file that runs before Jest runs your unit tests\n│   └── e2e/                    # e2e tests\n│   │   ├── specs/              # test spec files\n│   │   ├── custom-assertions/  # custom assertions for e2e tests\n│   │   ├── runner.js           # test runner script\n│   │   └── nightwatch.conf.js  # test runner config file\n├── .babelrc                    # babel config\n├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor\n├── .eslintrc.js                # eslint config\n├── .eslintignore               # eslint ignore rules\n├── .gitignore                  # sensible defaults for gitignore\n├── .postcssrc.js               # postcss config\n├── index.html                  # index.html template\n├── package.json                # build scripts and dependencies\n└── README.md                   # Default README file\n```\n> 目录/文件介绍：\n\n- `build/`：该目录保存的是开发和生产环境中的webpack配置，一般情况下是不需要进行修改的；当需要自定义webpack配置时，可以从webpack.base.conf.js开始研究。\n\n- `config/index.js`：这是项目构建时需要的一些最常用到的配置文件。\n\n- `src/`：这里存放的就是我们的业务代码了，我们可以根据项目需要自行配置。\n\n- `static/`：在这里，我们可以存放一些我们不希望webpack来处理的静态资源文件，在使用webpack来构建时，这里的文件将会直接复制到构建后的资源目录下。\n\n- `test/unit`：单元测试相关文件。\n\n- `test/e2e`：e2e测试相关文件。\n\n- `index.html`：基于vue.js的SPA单页应用的入口HTML模板，在开发、构建过程中，webpack将生成很多资源文件，文件之间的URL会被自动的注入到该index.html中。\n\n- `package.json`：npm包源文件，包含所有的构建依赖和构建命令。\n\n#### <a name=\"Commands\">2. 构建命令</a>\n\n<strong>所有的构建命令都是通过`npm`脚本执行的，见`package.json//scripts`。<strong>\n\n```\nnpm run dev\n```\n在本地开发环境启动一个node.js服务器。\n- `webpack` + `vue-loader` 作用于vue的单文件组件\n- 状态保存，热加载\n- 使用`ESLint`检查js\n- 生成资源文件的sourcemap\n- ......\n\n```\nnpm run build\n```\n在生产环境中构建资源\n- 使用`UglifyJS v3`压缩JavaScript\n- 使用`html-minifier`压缩HTML\n- 使用`cssnano`将所有组件的CSS提取到一个文件中\n- 使用版本哈希编译所有的静态文件，以实现资源的持久缓存。为所有的资源自定生成合适的URL，最后注入到`index.html`中，完成整个工程的构建。\n\n```\nnpm run unit\n```\n- 使用Jest在JSDOM中运行单元测试\n\n```\nnpm run lint\n```\n- 运行ESLint并报告任何linting错误。\n\n> 更多构建命令请查阅相关资料\n\n#### <a name=\"Babel\">3. 配置Babel</a>\n\n> 详见我的[另外一篇文章](/2018/03/01/0809007/)\n\n`至此，通过vue-cli构建vue工程的基本过程已经结束，查看更多详细配置，`[请转](https://vuejs-templates.github.io/webpack/)","slug":"0809009_vue-cli快速构建vue-js项目","published":1,"updated":"2018-03-05T03:02:04.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qbt000i6cc0mors9g0l","content":"<ul>\n<li><a href=\"#Quickstart\">快速上手</a></li>\n<li><a href=\"#Commands\">构建命令</a></li>\n<li><a href=\"#Babel\">配置Babel</a></li>\n</ul>\n<h4 id=\"1-快速上手\"><a href=\"#1-快速上手\" class=\"headerlink\" title=\"1. 快速上手\"></a><a name=\"Quickstart\">1. 快速上手</a></h4><p>本文介绍如何使用vue-cli快速构建vus.js项目，主要用到<code>webpack</code>，以及<code>vue-loader</code>，所以确保你的环境中安装有webpack。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装vue-cli脚手架工具</span></span><br><span class=\"line\">$ npm install -g vue-cli</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 my-project 目录中生成一个项目</span></span><br><span class=\"line\"><span class=\"comment\"># 这一步中你还可以选择是否安装vue-router,ESLint,unit tests, e2e tests...</span></span><br><span class=\"line\">$ vue init webpack my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入到项目</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">$ npm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建并启动项目</span></span><br><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n<p>如果你在 <code>vue init webpack my-project</code> 步骤中选择安装所有的工具，那么我们的项目目录结构应该是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── build/                      # webpack config files</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── config/</span><br><span class=\"line\">│   ├── index.js                # main project config</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── src/</span><br><span class=\"line\">│   ├── main.js                 # app entry file</span><br><span class=\"line\">│   ├── App.vue                 # main app component</span><br><span class=\"line\">│   ├── components/             # ui components</span><br><span class=\"line\">│   │   └── ...</span><br><span class=\"line\">│   └── assets/                 # module assets (processed by webpack)</span><br><span class=\"line\">│       └── ...</span><br><span class=\"line\">├── static/                     # pure static assets (directly copied)</span><br><span class=\"line\">├── test/</span><br><span class=\"line\">│   └── unit/                   # unit tests</span><br><span class=\"line\">│   │   ├── specs/              # test spec files</span><br><span class=\"line\">│   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests</span><br><span class=\"line\">│   │   ├── index.js            # test build entry file</span><br><span class=\"line\">│   │   ├── jest.conf.js        # Config file when using Jest for unit tests</span><br><span class=\"line\">│   │   └── karma.conf.js       # test runner config file when using Karma for unit tests</span><br><span class=\"line\">│   │   ├── setup.js            # file that runs before Jest runs your unit tests</span><br><span class=\"line\">│   └── e2e/                    # e2e tests</span><br><span class=\"line\">│   │   ├── specs/              # test spec files</span><br><span class=\"line\">│   │   ├── custom-assertions/  # custom assertions for e2e tests</span><br><span class=\"line\">│   │   ├── runner.js           # test runner script</span><br><span class=\"line\">│   │   └── nightwatch.conf.js  # test runner config file</span><br><span class=\"line\">├── .babelrc                    # babel config</span><br><span class=\"line\">├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor</span><br><span class=\"line\">├── .eslintrc.js                # eslint config</span><br><span class=\"line\">├── .eslintignore               # eslint ignore rules</span><br><span class=\"line\">├── .gitignore                  # sensible defaults for gitignore</span><br><span class=\"line\">├── .postcssrc.js               # postcss config</span><br><span class=\"line\">├── index.html                  # index.html template</span><br><span class=\"line\">├── package.json                # build scripts and dependencies</span><br><span class=\"line\">└── README.md                   # Default README file</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>目录/文件介绍：</p>\n</blockquote>\n<ul>\n<li><p><code>build/</code>：该目录保存的是开发和生产环境中的webpack配置，一般情况下是不需要进行修改的；当需要自定义webpack配置时，可以从webpack.base.conf.js开始研究。</p>\n</li>\n<li><p><code>config/index.js</code>：这是项目构建时需要的一些最常用到的配置文件。</p>\n</li>\n<li><p><code>src/</code>：这里存放的就是我们的业务代码了，我们可以根据项目需要自行配置。</p>\n</li>\n<li><p><code>static/</code>：在这里，我们可以存放一些我们不希望webpack来处理的静态资源文件，在使用webpack来构建时，这里的文件将会直接复制到构建后的资源目录下。</p>\n</li>\n<li><p><code>test/unit</code>：单元测试相关文件。</p>\n</li>\n<li><p><code>test/e2e</code>：e2e测试相关文件。</p>\n</li>\n<li><p><code>index.html</code>：基于vue.js的SPA单页应用的入口HTML模板，在开发、构建过程中，webpack将生成很多资源文件，文件之间的URL会被自动的注入到该index.html中。</p>\n</li>\n<li><p><code>package.json</code>：npm包源文件，包含所有的构建依赖和构建命令。</p>\n</li>\n</ul>\n<h4 id=\"2-构建命令\"><a href=\"#2-构建命令\" class=\"headerlink\" title=\"2. 构建命令\"></a><a name=\"Commands\">2. 构建命令</a></h4><p><strong>所有的构建命令都是通过<code>npm</code>脚本执行的，见<code>package.json//scripts</code>。<strong></strong></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<p>在本地开发环境启动一个node.js服务器。</p>\n<ul>\n<li><code>webpack</code> + <code>vue-loader</code> 作用于vue的单文件组件</li>\n<li>状态保存，热加载</li>\n<li>使用<code>ESLint</code>检查js</li>\n<li>生成资源文件的sourcemap</li>\n<li>……</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p>在生产环境中构建资源</p>\n<ul>\n<li>使用<code>UglifyJS v3</code>压缩JavaScript</li>\n<li>使用<code>html-minifier</code>压缩HTML</li>\n<li>使用<code>cssnano</code>将所有组件的CSS提取到一个文件中</li>\n<li>使用版本哈希编译所有的静态文件，以实现资源的持久缓存。为所有的资源自定生成合适的URL，最后注入到<code>index.html</code>中，完成整个工程的构建。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run unit</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用Jest在JSDOM中运行单元测试</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run lint</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行ESLint并报告任何linting错误。</li>\n</ul>\n<blockquote>\n<p>更多构建命令请查阅相关资料</p>\n</blockquote>\n<h4 id=\"3-配置Babel\"><a href=\"#3-配置Babel\" class=\"headerlink\" title=\"3. 配置Babel\"></a><a name=\"Babel\">3. 配置Babel</a></h4><blockquote>\n<p>详见我的<a href=\"/2018/03/01/0809007/\">另外一篇文章</a></p>\n</blockquote>\n<p><code>至此，通过vue-cli构建vue工程的基本过程已经结束，查看更多详细配置，</code><a href=\"https://vuejs-templates.github.io/webpack/\" target=\"_blank\" rel=\"noopener\">请转</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"#Quickstart\">快速上手</a></li>\n<li><a href=\"#Commands\">构建命令</a></li>\n<li><a href=\"#Babel\">配置Babel</a></li>\n</ul>\n<h4 id=\"1-快速上手\"><a href=\"#1-快速上手\" class=\"headerlink\" title=\"1. 快速上手\"></a><a name=\"Quickstart\">1. 快速上手</a></h4><p>本文介绍如何使用vue-cli快速构建vus.js项目，主要用到<code>webpack</code>，以及<code>vue-loader</code>，所以确保你的环境中安装有webpack。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装vue-cli脚手架工具</span></span><br><span class=\"line\">$ npm install -g vue-cli</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 my-project 目录中生成一个项目</span></span><br><span class=\"line\"><span class=\"comment\"># 这一步中你还可以选择是否安装vue-router,ESLint,unit tests, e2e tests...</span></span><br><span class=\"line\">$ vue init webpack my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入到项目</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my-project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">$ npm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建并启动项目</span></span><br><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n<p>如果你在 <code>vue init webpack my-project</code> 步骤中选择安装所有的工具，那么我们的项目目录结构应该是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── build/                      # webpack config files</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── config/</span><br><span class=\"line\">│   ├── index.js                # main project config</span><br><span class=\"line\">│   └── ...</span><br><span class=\"line\">├── src/</span><br><span class=\"line\">│   ├── main.js                 # app entry file</span><br><span class=\"line\">│   ├── App.vue                 # main app component</span><br><span class=\"line\">│   ├── components/             # ui components</span><br><span class=\"line\">│   │   └── ...</span><br><span class=\"line\">│   └── assets/                 # module assets (processed by webpack)</span><br><span class=\"line\">│       └── ...</span><br><span class=\"line\">├── static/                     # pure static assets (directly copied)</span><br><span class=\"line\">├── test/</span><br><span class=\"line\">│   └── unit/                   # unit tests</span><br><span class=\"line\">│   │   ├── specs/              # test spec files</span><br><span class=\"line\">│   │   ├── eslintrc            # config file for eslint with extra settings only for unit tests</span><br><span class=\"line\">│   │   ├── index.js            # test build entry file</span><br><span class=\"line\">│   │   ├── jest.conf.js        # Config file when using Jest for unit tests</span><br><span class=\"line\">│   │   └── karma.conf.js       # test runner config file when using Karma for unit tests</span><br><span class=\"line\">│   │   ├── setup.js            # file that runs before Jest runs your unit tests</span><br><span class=\"line\">│   └── e2e/                    # e2e tests</span><br><span class=\"line\">│   │   ├── specs/              # test spec files</span><br><span class=\"line\">│   │   ├── custom-assertions/  # custom assertions for e2e tests</span><br><span class=\"line\">│   │   ├── runner.js           # test runner script</span><br><span class=\"line\">│   │   └── nightwatch.conf.js  # test runner config file</span><br><span class=\"line\">├── .babelrc                    # babel config</span><br><span class=\"line\">├── .editorconfig               # indentation, spaces/tabs and similar settings for your editor</span><br><span class=\"line\">├── .eslintrc.js                # eslint config</span><br><span class=\"line\">├── .eslintignore               # eslint ignore rules</span><br><span class=\"line\">├── .gitignore                  # sensible defaults for gitignore</span><br><span class=\"line\">├── .postcssrc.js               # postcss config</span><br><span class=\"line\">├── index.html                  # index.html template</span><br><span class=\"line\">├── package.json                # build scripts and dependencies</span><br><span class=\"line\">└── README.md                   # Default README file</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>目录/文件介绍：</p>\n</blockquote>\n<ul>\n<li><p><code>build/</code>：该目录保存的是开发和生产环境中的webpack配置，一般情况下是不需要进行修改的；当需要自定义webpack配置时，可以从webpack.base.conf.js开始研究。</p>\n</li>\n<li><p><code>config/index.js</code>：这是项目构建时需要的一些最常用到的配置文件。</p>\n</li>\n<li><p><code>src/</code>：这里存放的就是我们的业务代码了，我们可以根据项目需要自行配置。</p>\n</li>\n<li><p><code>static/</code>：在这里，我们可以存放一些我们不希望webpack来处理的静态资源文件，在使用webpack来构建时，这里的文件将会直接复制到构建后的资源目录下。</p>\n</li>\n<li><p><code>test/unit</code>：单元测试相关文件。</p>\n</li>\n<li><p><code>test/e2e</code>：e2e测试相关文件。</p>\n</li>\n<li><p><code>index.html</code>：基于vue.js的SPA单页应用的入口HTML模板，在开发、构建过程中，webpack将生成很多资源文件，文件之间的URL会被自动的注入到该index.html中。</p>\n</li>\n<li><p><code>package.json</code>：npm包源文件，包含所有的构建依赖和构建命令。</p>\n</li>\n</ul>\n<h4 id=\"2-构建命令\"><a href=\"#2-构建命令\" class=\"headerlink\" title=\"2. 构建命令\"></a><a name=\"Commands\">2. 构建命令</a></h4><p><strong>所有的构建命令都是通过<code>npm</code>脚本执行的，见<code>package.json//scripts</code>。<strong></strong></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<p>在本地开发环境启动一个node.js服务器。</p>\n<ul>\n<li><code>webpack</code> + <code>vue-loader</code> 作用于vue的单文件组件</li>\n<li>状态保存，热加载</li>\n<li>使用<code>ESLint</code>检查js</li>\n<li>生成资源文件的sourcemap</li>\n<li>……</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<p>在生产环境中构建资源</p>\n<ul>\n<li>使用<code>UglifyJS v3</code>压缩JavaScript</li>\n<li>使用<code>html-minifier</code>压缩HTML</li>\n<li>使用<code>cssnano</code>将所有组件的CSS提取到一个文件中</li>\n<li>使用版本哈希编译所有的静态文件，以实现资源的持久缓存。为所有的资源自定生成合适的URL，最后注入到<code>index.html</code>中，完成整个工程的构建。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run unit</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用Jest在JSDOM中运行单元测试</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run lint</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行ESLint并报告任何linting错误。</li>\n</ul>\n<blockquote>\n<p>更多构建命令请查阅相关资料</p>\n</blockquote>\n<h4 id=\"3-配置Babel\"><a href=\"#3-配置Babel\" class=\"headerlink\" title=\"3. 配置Babel\"></a><a name=\"Babel\">3. 配置Babel</a></h4><blockquote>\n<p>详见我的<a href=\"/2018/03/01/0809007/\">另外一篇文章</a></p>\n</blockquote>\n<p><code>至此，通过vue-cli构建vue工程的基本过程已经结束，查看更多详细配置，</code><a href=\"https://vuejs-templates.github.io/webpack/\" target=\"_blank\" rel=\"noopener\">请转</a></p>\n"},{"id":"0809011","title":"常用的GIT命令","date":"2018-03-02T08:08:25.000Z","_content":"","source":"_posts/0809011_常用的GIT命令.md","raw":"---\nid: 0809011\ntitle: 常用的GIT命令\ndate: 2018-03-02 16:08:25\ntags:\n    - GIT\ncategories:\n---\n","slug":"0809011_常用的GIT命令","published":1,"updated":"2018-03-05T03:02:42.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qbv000k6cc0zjk2u1i8","content":"","site":{"data":{}},"excerpt":"","more":""},{"id":"0809012","title":"常用的Vim命令","date":"2018-03-02T08:09:18.000Z","_content":"","source":"_posts/0809012_常用的Vim命令.md","raw":"---\nid: 0809012\ntitle: 常用的Vim命令\ndate: 2018-03-02 16:09:18\ntags:\n    - vim\ncategories:\n---\n","slug":"0809012_常用的Vim命令","published":1,"updated":"2018-03-05T03:06:13.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qbx000l6cc0w8udcbcw","content":"","site":{"data":{}},"excerpt":"","more":""},{"id":"0809014","title":"JavaScript类型检测","date":"2018-03-05T02:58:37.000Z","_content":"\n一个简单有用的js类型检测的方法：\n\n```javascript\nfunction checkType(sth) {\n    return Object.prototype.toString.call(o)\n    .match(/(\\w+)\\]$/)[1]\n    .toLowerCase();\n}\n\ncheckType({})               // object\ncheckType([])               // array\ncheckType(function(){})     // function\ncheckType(1)                // number\ncheckType(+'3')             // number\ncheckType(3+'')             // string\n```","source":"_posts/0809014_JavaScript类型检测.md","raw":"---\nid: 0809014\ntitle: JavaScript类型检测\ndate: 2018-03-05 10:58:37\ntags:\n    - JavaScript\ncategories:\n---\n\n一个简单有用的js类型检测的方法：\n\n```javascript\nfunction checkType(sth) {\n    return Object.prototype.toString.call(o)\n    .match(/(\\w+)\\]$/)[1]\n    .toLowerCase();\n}\n\ncheckType({})               // object\ncheckType([])               // array\ncheckType(function(){})     // function\ncheckType(1)                // number\ncheckType(+'3')             // number\ncheckType(3+'')             // string\n```","slug":"0809014_JavaScript类型检测","published":1,"updated":"2018-03-05T06:40:04.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qc0000m6cc0ff6rg11c","content":"<p>一个简单有用的js类型检测的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkType</span>(<span class=\"params\">sth</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o)</span><br><span class=\"line\">    .match(<span class=\"regexp\">/(\\w+)\\]$/</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    .toLowerCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkType(&#123;&#125;)               <span class=\"comment\">// object</span></span><br><span class=\"line\">checkType([])               <span class=\"comment\">// array</span></span><br><span class=\"line\">checkType(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)     <span class=\"comment\">// function</span></span><br><span class=\"line\">checkType(<span class=\"number\">1</span>)                <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(+<span class=\"string\">'3'</span>)             <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(<span class=\"number\">3</span>+<span class=\"string\">''</span>)             <span class=\"comment\">// string</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>一个简单有用的js类型检测的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkType</span>(<span class=\"params\">sth</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o)</span><br><span class=\"line\">    .match(<span class=\"regexp\">/(\\w+)\\]$/</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    .toLowerCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkType(&#123;&#125;)               <span class=\"comment\">// object</span></span><br><span class=\"line\">checkType([])               <span class=\"comment\">// array</span></span><br><span class=\"line\">checkType(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)     <span class=\"comment\">// function</span></span><br><span class=\"line\">checkType(<span class=\"number\">1</span>)                <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(+<span class=\"string\">'3'</span>)             <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(<span class=\"number\">3</span>+<span class=\"string\">''</span>)             <span class=\"comment\">// string</span></span><br></pre></td></tr></table></figure>"},{"id":"0809013","title":"常用的markdown语法","date":"2018-03-02T08:12:08.000Z","_content":"","source":"_posts/0809013_常用的markdown语法.md","raw":"---\nid: 0809013\ntitle: 常用的markdown语法\ndate: 2018-03-02 16:12:08\ntags:\n    - markdown\ncategories:\n---\n","slug":"0809013_常用的markdown语法","published":1,"updated":"2018-03-05T03:06:04.691Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qc3000p6cc009pgzt6p","content":"","site":{"data":{}},"excerpt":"","more":""},{"id":"0809015","title":"实时监听文本域输入","date":"2018-03-05T02:57:50.000Z","_content":"\n众所周知，使用 `onchange` 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， `onchange` 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用`keydown`和`keyup`外，我们还可以:\n- 使用 `onpropertychange`：\n\n```javascript\n<input type=\"text\" id=\"txt\">\n\n$(\"#ysy\").bind('input propertychange', function() {  \n    console.log(new Date().getTime()); \n});\n```\n- 使用 `oninput`：\n\n```javascript\ndocument.getElementById('txt').oninput = function(){\n    console.log(this.value);\n}\n```\n最后，总结一下`onchange, onpropertychange`和`oninput`之间的异同：\n1. `onchange`事件与`onpropertychange`事件的区别：`onchange`事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；`onpropertychange`事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。\n2. `oninput`事件与`onpropertychange`事件的区别：`oninput`事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；`onpropertychange`事件是任何属性改变都会触发的，而`oninput`却只在value改变时触发，`oninput`要通过`addEventListener()`来注册，`onpropertychange`注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）>\n3. `oninput`与`onpropertychange`失效的情况：  （1）`oninput`事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）`onpropertychange`事件：当input设置为`disable=true`后，onpropertychange不会触发。\n---","source":"_posts/0809015_实时监听文本域输入.md","raw":"---\nid: 0809015\ntitle: 实时监听文本域输入\ndate: 2018-03-05 10:57:50\ntags:\n    - JavaScript\ncategories:\n---\n\n众所周知，使用 `onchange` 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， `onchange` 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用`keydown`和`keyup`外，我们还可以:\n- 使用 `onpropertychange`：\n\n```javascript\n<input type=\"text\" id=\"txt\">\n\n$(\"#ysy\").bind('input propertychange', function() {  \n    console.log(new Date().getTime()); \n});\n```\n- 使用 `oninput`：\n\n```javascript\ndocument.getElementById('txt').oninput = function(){\n    console.log(this.value);\n}\n```\n最后，总结一下`onchange, onpropertychange`和`oninput`之间的异同：\n1. `onchange`事件与`onpropertychange`事件的区别：`onchange`事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；`onpropertychange`事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。\n2. `oninput`事件与`onpropertychange`事件的区别：`oninput`事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；`onpropertychange`事件是任何属性改变都会触发的，而`oninput`却只在value改变时触发，`oninput`要通过`addEventListener()`来注册，`onpropertychange`注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）>\n3. `oninput`与`onpropertychange`失效的情况：  （1）`oninput`事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）`onpropertychange`事件：当input设置为`disable=true`后，onpropertychange不会触发。\n---","slug":"0809015_实时监听文本域输入","published":1,"updated":"2018-03-05T06:35:51.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qc5000r6cc03jo0wayk","content":"<p>众所周知，使用 <code>onchange</code> 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， <code>onchange</code> 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用<code>keydown</code>和<code>keyup</code>外，我们还可以:</p>\n<ul>\n<li>使用 <code>onpropertychange</code>：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"txt\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">\"#ysy\"</span>).bind(<span class=\"string\">'input propertychange'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 <code>oninput</code>：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'txt'</span>).oninput = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，总结一下<code>onchange, onpropertychange</code>和<code>oninput</code>之间的异同：</p>\n<ol>\n<li><code>onchange</code>事件与<code>onpropertychange</code>事件的区别：<code>onchange</code>事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；<code>onpropertychange</code>事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。</li>\n<li><code>oninput</code>事件与<code>onpropertychange</code>事件的区别：<code>oninput</code>事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；<code>onpropertychange</code>事件是任何属性改变都会触发的，而<code>oninput</code>却只在value改变时触发，<code>oninput</code>要通过<code>addEventListener()</code>来注册，<code>onpropertychange</code>注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）&gt;</li>\n<li><code>oninput</code>与<code>onpropertychange</code>失效的情况：  （1）<code>oninput</code>事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）<code>onpropertychange</code>事件：当input设置为<code>disable=true</code>后，onpropertychange不会触发。</li>\n</ol>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p>众所周知，使用 <code>onchange</code> 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， <code>onchange</code> 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用<code>keydown</code>和<code>keyup</code>外，我们还可以:</p>\n<ul>\n<li>使用 <code>onpropertychange</code>：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"txt\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">\"#ysy\"</span>).bind(<span class=\"string\">'input propertychange'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 <code>oninput</code>：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'txt'</span>).oninput = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，总结一下<code>onchange, onpropertychange</code>和<code>oninput</code>之间的异同：</p>\n<ol>\n<li><code>onchange</code>事件与<code>onpropertychange</code>事件的区别：<code>onchange</code>事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；<code>onpropertychange</code>事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。</li>\n<li><code>oninput</code>事件与<code>onpropertychange</code>事件的区别：<code>oninput</code>事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；<code>onpropertychange</code>事件是任何属性改变都会触发的，而<code>oninput</code>却只在value改变时触发，<code>oninput</code>要通过<code>addEventListener()</code>来注册，<code>onpropertychange</code>注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）&gt;</li>\n<li><code>oninput</code>与<code>onpropertychange</code>失效的情况：  （1）<code>oninput</code>事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）<code>onpropertychange</code>事件：当input设置为<code>disable=true</code>后，onpropertychange不会触发。</li>\n</ol>\n<hr>\n"},{"id":"0809016","title":"获取JSON的key","date":"2018-03-05T02:56:54.000Z","_content":"\n```javascript\nvar obj = { name: \"naruto\", age: 23, dad: \"minato\"}\n\n```\n- 使用 `for in` 来循环：\n\n```javascript\nfor (var key in obj){\n    console.log(key) // 依次输出 \"name\", \"age\", \"dad\"\n}\n```\n这种方法比较常见，相信大家看到这个问题时第一时间都会想到吧，但是我要介绍的是下面这个更简单的方法。\n- 使用 `Object.keys()` 来获取 :\n\n```javascript\n- console.log( Object.keys(obj) ) // 输出一个数组 [\"name\", \"age\", \"dad\"]\n// 所以, 当我们需要某个key值时可以从当前数组中取得。\n```\n","source":"_posts/0809016_获取JSON的key.md","raw":"---\nid: 0809016\ntitle: 获取JSON的key\ndate: 2018-03-05 10:56:54\ntags:\n    - json\n    - JavaScript\ncategories:\n---\n\n```javascript\nvar obj = { name: \"naruto\", age: 23, dad: \"minato\"}\n\n```\n- 使用 `for in` 来循环：\n\n```javascript\nfor (var key in obj){\n    console.log(key) // 依次输出 \"name\", \"age\", \"dad\"\n}\n```\n这种方法比较常见，相信大家看到这个问题时第一时间都会想到吧，但是我要介绍的是下面这个更简单的方法。\n- 使用 `Object.keys()` 来获取 :\n\n```javascript\n- console.log( Object.keys(obj) ) // 输出一个数组 [\"name\", \"age\", \"dad\"]\n// 所以, 当我们需要某个key值时可以从当前数组中取得。\n```\n","slug":"0809016_获取JSON的key","published":1,"updated":"2018-03-05T06:33:56.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qc8000u6cc0tzbb7728","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"naruto\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">23</span>, <span class=\"attr\">dad</span>: <span class=\"string\">\"minato\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 <code>for in</code> 来循环：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key) <span class=\"comment\">// 依次输出 \"name\", \"age\", \"dad\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法比较常见，相信大家看到这个问题时第一时间都会想到吧，但是我要介绍的是下面这个更简单的方法。</p>\n<ul>\n<li>使用 <code>Object.keys()</code> 来获取 :</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"built_in\">console</span>.log( <span class=\"built_in\">Object</span>.keys(obj) ) <span class=\"comment\">// 输出一个数组 [\"name\", \"age\", \"dad\"]</span></span><br><span class=\"line\"><span class=\"comment\">// 所以, 当我们需要某个key值时可以从当前数组中取得。</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"naruto\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">23</span>, <span class=\"attr\">dad</span>: <span class=\"string\">\"minato\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 <code>for in</code> 来循环：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key) <span class=\"comment\">// 依次输出 \"name\", \"age\", \"dad\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法比较常见，相信大家看到这个问题时第一时间都会想到吧，但是我要介绍的是下面这个更简单的方法。</p>\n<ul>\n<li>使用 <code>Object.keys()</code> 来获取 :</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"built_in\">console</span>.log( <span class=\"built_in\">Object</span>.keys(obj) ) <span class=\"comment\">// 输出一个数组 [\"name\", \"age\", \"dad\"]</span></span><br><span class=\"line\"><span class=\"comment\">// 所以, 当我们需要某个key值时可以从当前数组中取得。</span></span><br></pre></td></tr></table></figure>\n"},{"id":"0809018","title":"在hexo中配置swiftype搜索平台","date":"2018-03-05T09:23:37.000Z","_content":"\n- 进入[swiftype](https://swiftype.com/)官网：\n<!-- ![swiftype](/images/swiftype.png) -->\n<img src=\"/images/swiftype.png\" class=\"preview\">","source":"_posts/0809018_在hexo中配置swiftype搜索平台.md","raw":"---\nid: 0809018\ntitle: 在hexo中配置swiftype搜索平台\ndate: 2018-03-05 17:23:37\ntags:\n    - swiftype\n    - JavaScript\ncategories:\n---\n\n- 进入[swiftype](https://swiftype.com/)官网：\n<!-- ![swiftype](/images/swiftype.png) -->\n<img src=\"/images/swiftype.png\" class=\"preview\">","slug":"0809018_在hexo中配置swiftype搜索平台","published":1,"updated":"2018-03-05T10:12:49.056Z","_id":"cjee12qcb000w6cc0s3uyeytj","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>进入<a href=\"https://swiftype.com/\" target=\"_blank\" rel=\"noopener\">swiftype</a>官网：<!-- ![swiftype](/images/swiftype.png) -->\n<img src=\"/images/swiftype.png\" class=\"preview\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>进入<a href=\"https://swiftype.com/\" target=\"_blank\" rel=\"noopener\">swiftype</a>官网：<!-- ![swiftype](/images/swiftype.png) -->\n<img src=\"/images/swiftype.png\" class=\"preview\"></li>\n</ul>\n"},{"id":"0809017","title":"ajax请求之axios","date":"2018-03-05T02:23:18.000Z","_content":"","source":"_posts/0809017_ajax请求之axios.md","raw":"---\nid: 0809017\ntitle: ajax请求之axios\ndate: 2018-03-05 10:23:18\ntags:\n    - ES6\n    - ajax\n    - Promise\ncategories:\n---\n","slug":"0809017_ajax请求之axios","published":1,"updated":"2018-03-05T03:05:51.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qch000y6cc0zc9czdc5","content":"","site":{"data":{}},"excerpt":"","more":""},{"id":"0809019","title":"搭建一个基于hexo的个人博客","date":"2018-03-05T09:26:49.000Z","_content":"","source":"_posts/0809019_搭建一个基于hexo的个人博客.md","raw":"---\nid: 0809019\ntitle: 搭建一个基于hexo的个人博客\ndate: 2018-03-05 17:26:49\ntags:\n    - hexo\ncategories:\n---\n","slug":"0809019_搭建一个基于hexo的个人博客","published":1,"updated":"2018-03-05T09:32:16.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjee12qcj000z6cc014e792rb","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjee12qao00006cc07m4ykz4b","tag_id":"cjee12qb000036cc0c9bn38p3","_id":"cjee12qbc00086cc0c0q79hkl"},{"post_id":"cjee12qaw00026cc0uehmotwm","tag_id":"cjee12qba00076cc0cg02pvgw","_id":"cjee12qbm000d6cc06db9a3q9"},{"post_id":"cjee12qb400046cc0iyqzsr68","tag_id":"cjee12qbh000b6cc0q9ddpnj4","_id":"cjee12qbs000h6cc06kd05mb6"},{"post_id":"cjee12qb600056cc0wpr4w404","tag_id":"cjee12qbq000f6cc0ie0vla0k","_id":"cjee12qc2000o6cc0ja5pjhpn"},{"post_id":"cjee12qb600056cc0wpr4w404","tag_id":"cjee12qbu000j6cc05ew5op7v","_id":"cjee12qc5000q6cc0m2ytret1"},{"post_id":"cjee12qc0000m6cc0ff6rg11c","tag_id":"cjee12qbq000f6cc0ie0vla0k","_id":"cjee12qc8000t6cc0dfdl0ad9"},{"post_id":"cjee12qc5000r6cc03jo0wayk","tag_id":"cjee12qbq000f6cc0ie0vla0k","_id":"cjee12qca000v6cc01k4kj1nm"},{"post_id":"cjee12qb900066cc0uru35ej7","tag_id":"cjee12qc2000n6cc0737bwd0w","_id":"cjee12qd100116cc0l597yogt"},{"post_id":"cjee12qb900066cc0uru35ej7","tag_id":"cjee12qc7000s6cc0nxsh3ui1","_id":"cjee12qd200126cc0io1bz5vz"},{"post_id":"cjee12qb900066cc0uru35ej7","tag_id":"cjee12qcf000x6cc003sw0a37","_id":"cjee12qd400146cc020mqcudi"},{"post_id":"cjee12qbd00096cc0lhe7ql5c","tag_id":"cjee12qbq000f6cc0ie0vla0k","_id":"cjee12qd700166cc0gm7gah98"},{"post_id":"cjee12qbd00096cc0lhe7ql5c","tag_id":"cjee12qd300136cc0vgdwkiwe","_id":"cjee12qd700176cc0iriadbd9"},{"post_id":"cjee12qbf000a6cc0f19b03hs","tag_id":"cjee12qd500156cc08w0jpd7d","_id":"cjee12qdb001b6cc06ut2wka6"},{"post_id":"cjee12qbf000a6cc0f19b03hs","tag_id":"cjee12qd800186cc0gktta0xu","_id":"cjee12qdb001c6cc07g0v8ya5"},{"post_id":"cjee12qbf000a6cc0f19b03hs","tag_id":"cjee12qbq000f6cc0ie0vla0k","_id":"cjee12qdd001e6cc0cew3u8g7"},{"post_id":"cjee12qbi000c6cc0vfv07avq","tag_id":"cjee12qbq000f6cc0ie0vla0k","_id":"cjee12qde001f6cc018y3vf2n"},{"post_id":"cjee12qbn000e6cc0a7h1wmwa","tag_id":"cjee12qbq000f6cc0ie0vla0k","_id":"cjee12qdf001h6cc0brjciz7y"},{"post_id":"cjee12qbr000g6cc05gy9w0j7","tag_id":"cjee12qde001g6cc0530fw8j4","_id":"cjee12qdh001k6cc0qgfcmx8k"},{"post_id":"cjee12qbr000g6cc05gy9w0j7","tag_id":"cjee12qdg001i6cc0frxbygp7","_id":"cjee12qdi001l6cc090deoy8f"},{"post_id":"cjee12qbt000i6cc0mors9g0l","tag_id":"cjee12qdh001j6cc0wp74h16z","_id":"cjee12qdm001p6cc044lgi5bq"},{"post_id":"cjee12qbt000i6cc0mors9g0l","tag_id":"cjee12qdi001m6cc0ogxmtixx","_id":"cjee12qdn001q6cc00770ondh"},{"post_id":"cjee12qbt000i6cc0mors9g0l","tag_id":"cjee12qbq000f6cc0ie0vla0k","_id":"cjee12qdo001s6cc0xt2egpma"},{"post_id":"cjee12qbt000i6cc0mors9g0l","tag_id":"cjee12qd800186cc0gktta0xu","_id":"cjee12qdp001t6cc00653ycdv"},{"post_id":"cjee12qbv000k6cc0zjk2u1i8","tag_id":"cjee12qdk001o6cc0d0rrm6j3","_id":"cjee12qdr001v6cc0q0orzbt7"},{"post_id":"cjee12qbx000l6cc0w8udcbcw","tag_id":"cjee12qdo001r6cc0meauxd1m","_id":"cjee12qdr001w6cc0xhjk1gxc"},{"post_id":"cjee12qc3000p6cc009pgzt6p","tag_id":"cjee12qdq001u6cc0j3u1moll","_id":"cjee12qdt001y6cc0gqocu41h"},{"post_id":"cjee12qc8000u6cc0tzbb7728","tag_id":"cjee12qds001x6cc08hdaeame","_id":"cjee12qdw00206cc00g1qej0y"},{"post_id":"cjee12qc8000u6cc0tzbb7728","tag_id":"cjee12qbq000f6cc0ie0vla0k","_id":"cjee12qdx00216cc0r6j7ndzc"},{"post_id":"cjee12qcb000w6cc0s3uyeytj","tag_id":"cjee12qdv001z6cc0zr2ud9s8","_id":"cjee12qdz00236cc00pse4sjf"},{"post_id":"cjee12qcb000w6cc0s3uyeytj","tag_id":"cjee12qbq000f6cc0ie0vla0k","_id":"cjee12qdz00246cc0gpvkdetv"},{"post_id":"cjee12qch000y6cc0zc9czdc5","tag_id":"cjee12qdx00226cc04yrrwf4x","_id":"cjee12qe300286cc00iupvp22"},{"post_id":"cjee12qch000y6cc0zc9czdc5","tag_id":"cjee12qe000256cc0e9awjrpt","_id":"cjee12qe500296cc0ysqd579p"},{"post_id":"cjee12qch000y6cc0zc9czdc5","tag_id":"cjee12qe100266cc0c9qnoktd","_id":"cjee12qe6002a6cc0gyha54oy"},{"post_id":"cjee12qcj000z6cc014e792rb","tag_id":"cjee12qe200276cc0pysbuf20","_id":"cjee12qe7002b6cc0m6l0m08l"}],"Tag":[{"name":"HTML","_id":"cjee12qb000036cc0c9bn38p3"},{"name":"CSS3","_id":"cjee12qba00076cc0cg02pvgw"},{"name":"test","_id":"cjee12qbh000b6cc0q9ddpnj4"},{"name":"JavaScript","_id":"cjee12qbq000f6cc0ie0vla0k"},{"name":"livere","_id":"cjee12qbu000j6cc05ew5op7v"},{"name":"HTML5","_id":"cjee12qc2000n6cc0737bwd0w"},{"name":"sessionStorage","_id":"cjee12qc7000s6cc0nxsh3ui1"},{"name":"localStorage","_id":"cjee12qcf000x6cc003sw0a37"},{"name":"JSON","_id":"cjee12qd300136cc0vgdwkiwe"},{"name":"Babel","_id":"cjee12qd500156cc08w0jpd7d"},{"name":"es6","_id":"cjee12qd800186cc0gktta0xu"},{"name":"Node.js","_id":"cjee12qde001g6cc0530fw8j4"},{"name":"Express","_id":"cjee12qdg001i6cc0frxbygp7"},{"name":"vue.js","_id":"cjee12qdh001j6cc0wp74h16z"},{"name":"webpack","_id":"cjee12qdi001m6cc0ogxmtixx"},{"name":"GIT","_id":"cjee12qdk001o6cc0d0rrm6j3"},{"name":"vim","_id":"cjee12qdo001r6cc0meauxd1m"},{"name":"markdown","_id":"cjee12qdq001u6cc0j3u1moll"},{"name":"json","_id":"cjee12qds001x6cc08hdaeame"},{"name":"swiftype","_id":"cjee12qdv001z6cc0zr2ud9s8"},{"name":"ES6","_id":"cjee12qdx00226cc04yrrwf4x"},{"name":"ajax","_id":"cjee12qe000256cc0e9awjrpt"},{"name":"Promise","_id":"cjee12qe100266cc0c9qnoktd"},{"name":"hexo","_id":"cjee12qe200276cc0pysbuf20"}]}}