{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/anatole/source/css/blog_basic.css","path":"css/blog_basic.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/logo@2x.png","path":"images/logo@2x.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","path":"js/jquery-migrate-1.2.1.min.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery.appear.js","path":"js/jquery.appear.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/anatole/.gitignore","hash":"cd089ae45ce870c45e434019e8f1ed4f066cd425","modified":1518334280000},{"_id":"themes/anatole/LICENSE","hash":"ee28de09fb00973dd131803ec3b30b6526c716d7","modified":1518319018000},{"_id":"themes/anatole/README.md","hash":"b1560aeedb772e839b93e71cc872330008bf7171","modified":1518319018000},{"_id":"themes/anatole/_config.sample.yml","hash":"7e1657b886a344a15a6da2c36f99f7269b4fb79b","modified":1518338163017},{"_id":"themes/anatole/package.json","hash":"eb94a9d0487218419c726152189c1c915d0c4fa7","modified":1518319349000},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1518317269091},{"_id":"source/_posts/hello.md","hash":"00a75e004cfe24d3e311340f80700fd9a150e45b","modified":1519713427190},{"_id":"themes/anatole/languages/pt-BR--.yml","hash":"765f275d7547779d67a1e83c55ef8850918e216e","modified":1518334973000},{"_id":"themes/anatole/languages/pt-BR.yml","hash":"765f275d7547779d67a1e83c55ef8850918e216e","modified":1518324857000},{"_id":"themes/anatole/languages/zh-cn.yml","hash":"b6ad22bfb3448d0d54cea0bcbb431e28e253cff9","modified":1518319018000},{"_id":"themes/anatole/layout/archive.pug","hash":"e5a7c55ff6402932dd6061b042c2695028814cfc","modified":1518319018000},{"_id":"themes/anatole/layout/category.pug","hash":"75ac0c1284a307a72e7b2f6cbf90f83f853e57f4","modified":1518319018000},{"_id":"themes/anatole/layout/index.pug","hash":"8c8d356abe40fc2465aa85c6904d9bc199458448","modified":1518319018000},{"_id":"themes/anatole/layout/mixins.pug","hash":"eee85d29a63b4d57d79fa331aeb26b10c1e21d04","modified":1518319018000},{"_id":"themes/anatole/layout/page.pug","hash":"4021d42128a2fccbb3a445f5a7d41dea93c8edff","modified":1518319018000},{"_id":"themes/anatole/layout/post.pug","hash":"ce89a2bbb50687eb452b2d4512a657e6c004a508","modified":1518319018000},{"_id":"themes/anatole/layout/tag.pug","hash":"fc386024d51ce6834ee287d9027460bdd4273882","modified":1518319018000},{"_id":"themes/anatole/layout/partial/comments.pug","hash":"bce55420275c10c3052255110d22b808ceb3db3b","modified":1518319018000},{"_id":"themes/anatole/layout/partial/footer.pug","hash":"965539c08fe3d0d40142f1b3468d692c5fdce76a","modified":1518336517000},{"_id":"themes/anatole/layout/partial/head.pug","hash":"dc32113aae3d8c07f6ab8878a056d61173a9a82a","modified":1518319018000},{"_id":"themes/anatole/layout/partial/layout.pug","hash":"b89c8e67a1fe09e48f43497e7c97626689caae77","modified":1518319018000},{"_id":"themes/anatole/layout/partial/nav.pug","hash":"71ab8da97f45bfd25e77746af307597e7a695492","modified":1518336209000},{"_id":"themes/anatole/layout/partial/sidebar.pug","hash":"e3f7374addf8565c9a2a73a886c4b9dd4948f205","modified":1518338186404},{"_id":"themes/anatole/source/css/blog_basic.css","hash":"2b8262f1f8324fb410be69938e8356fd6885068f","modified":1518319018000},{"_id":"themes/anatole/source/css/font-awesome.min.css","hash":"63ab94ae803ede34930640aa39219866bddeab63","modified":1518319018000},{"_id":"themes/anatole/source/css/style.css","hash":"f4ada7cff19886d6aa2fcdc4da3bddc5a544935f","modified":1518319018000},{"_id":"themes/anatole/source/css/style.scss","hash":"9d1df0a936aebfa25adc05d6b7304e75ef027fd4","modified":1518319018000},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1518319018000},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1518319018000},{"_id":"themes/anatole/source/images/favicon.png","hash":"86ddbf2c91296f911b92aee951da38e28d9ffc20","modified":1518329502000},{"_id":"themes/anatole/source/images/logo.png","hash":"fcfff1033431ef67503991c81e267eaa1def9a23","modified":1518329541000},{"_id":"themes/anatole/source/images/logo@2x.png","hash":"079514207e436af0a6ac2494595702a47c060eac","modified":1518329973000},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","hash":"875bce76a77590c3c438bbc6e014b39c23c8c88d","modified":1518319018000},{"_id":"themes/anatole/source/js/jquery.appear.js","hash":"8e936fd0f45787309d917541e911c3440f7565b1","modified":1518319018000},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1518319018000},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","hash":"e471023286b7dd1d2ccc72f670a471cfdfeafab7","modified":1518319018000},{"_id":"themes/anatole/source/js/jquery.js","hash":"aa6ccf721c4e76921abda46c120772d364e5b285","modified":1518319018000},{"_id":"public/2018/02/09/hello/index.html","hash":"8ee00a7aedb76067e24e86ec442b119619e858b1","modified":1518337679498},{"_id":"public/2018/02/09/hello-world/index.html","hash":"93c5c6eec4941d50e6b831bc18f321f3ebadc2b3","modified":1518337679498},{"_id":"public/archives/index.html","hash":"d8de1e81482c4c4fccb52594e581581d460e6de4","modified":1518337679498},{"_id":"public/index.html","hash":"7ba623d7bfbd308826feaa2a44469e7fd5194213","modified":1518337679502},{"_id":"public/css/style.scss","hash":"9d1df0a936aebfa25adc05d6b7304e75ef027fd4","modified":1518337679504},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1518337679504},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1518337679504},{"_id":"public/images/favicon.png","hash":"86ddbf2c91296f911b92aee951da38e28d9ffc20","modified":1518337679504},{"_id":"public/images/logo.png","hash":"fcfff1033431ef67503991c81e267eaa1def9a23","modified":1518337679504},{"_id":"public/images/logo@2x.png","hash":"079514207e436af0a6ac2494595702a47c060eac","modified":1518337679504},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1518337679507},{"_id":"public/css/blog_basic.css","hash":"7db88f0873e858b21a4c981c8481708ad9117478","modified":1518337679508},{"_id":"public/css/style.css","hash":"871a5c940cbc0ce5488a670f2285f2c3015cf71c","modified":1518337679509},{"_id":"public/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1518337679509},{"_id":"public/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1518337679509},{"_id":"public/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1518337679509},{"_id":"public/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1518337679509},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"e471023286b7dd1d2ccc72f670a471cfdfeafab7","modified":1518337679512},{"_id":"themes/anatole/_config.yml","hash":"cd6d9d3db70dba682d3473cc9e333123dd110e9a","modified":1519638607338},{"_id":"source/about/index.md","hash":"04ba66073f092f19094c5e7bbb7c221ef4a7ebbd","modified":1519641398391},{"_id":"source/tags/index.md","hash":"d6e9fcf1f9328400f07db8d2153c70b82a97db03","modified":1519714176629},{"_id":"source/categories/index.md","hash":"d6e9fcf1f9328400f07db8d2153c70b82a97db03","modified":1519714176629}],"Category":[{"name":"javascript","_id":"cje50eret00003kc0u90m2df6"},{"name":"J","_id":"cje5btzll00110gc065odggwo"},{"name":"JA","_id":"cje5btzso00130gc03dvfij3g"},{"name":"JAV","_id":"cje5bu0rx00150gc06ttmtakc"},{"name":"JAVA","_id":"cje5bu0tv00170gc0k42rzev2"},{"name":"JAVAS","_id":"cje5bu10o00190gc0he4modld"},{"name":"JAVASC","_id":"cje5bu1rz001b0gc0ijjy4222"},{"name":"JAVASCR","_id":"cje5bu242001d0gc0lqo4o4qk"},{"name":"JAVASCRI","_id":"cje5bu289001f0gc0y93x9yip"},{"name":"JAVASCRIP","_id":"cje5bu2fm001h0gc0szn2dxax"},{"name":"JAVASCRIPT","_id":"cje5bu2t3001j0gc0wb5b39ep"}],"Data":[],"Page":[{"title":"about","date":"2018-02-26T10:36:38.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-02-26 18:36:38\n---\n","updated":"2018-02-26T10:36:38.391Z","path":"about/index.html","_id":"cje4393fy0000ckc0b247644q","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"[CSS](/tags/CSS/)","source":"tags/index.md","raw":"[CSS](/tags/CSS/)","date":"2018-02-27T07:45:35.259Z","updated":"2018-02-27T07:45:35.259Z","path":"tags/index.html","_id":"cje5ckhz2001q0gc046jg9ne5","title":"","comments":1,"layout":"page","content":"<p><a href=\"/tags/CSS/\">CSS</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"/tags/CSS/\">CSS</a></p>\n"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags: \n    - HTML\ncategories: \n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-02-11T02:47:49.091Z","updated":"2018-02-27T07:28:58.607Z","_id":"cjdij1upx0000y4yok8m08yyx","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"hello","date":"2017-02-09T13:50:31.000Z","_content":"","source":"_posts/hello.md","raw":"---\ntitle: hello\ndate: 2017-02-09 21:50:31\ntags: \n    - HTML\n    - CSS\n---\n","slug":"hello","published":1,"updated":"2018-02-27T07:28:54.809Z","_id":"cjdij1uq30001y4yohabq8nz1","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于javascript数组的一些思考","date":"2018-02-27T07:48:26.000Z","_content":"\n### <font color=#21b2a6>JS中的数组</font>\n#### 关于数组的一些认识\n1. 使用构造器函数创建数组时:\n```javascript\nlet ary = new Array();\n```\n- 若参数只有一个，且为数字，`let ary1 = new Array(3)`，这是其实我们是在指定数组的长度的，即 `ary1.length === 3`。`ary1[0]`则为`undefined`;\n- 当定义`let ary2 = new Array(1, 2, 3)`时，此时`ary2 === [1, 2, 3]`;\n2. JS中的数组定义非常的自由：\n 看下面的例子：\n```javascript\nlet ary = [1, 2, 3];\nary[5] = 5;\nconsole.log(ary);           // [1,2,3,undefined,undefined,5]\nconsole.log(ary.length);    // 6\n```\n 再看：\n```javascript\nlet ary2 = [1, 2, 3, 4, 5];\nary2.length = 3;\nconsole.log(ary2);      // [1, 2, 3]\n```\n#### 常用的数组API\n1. 万能方法 `splice()`\n-  splice()方法允许我们对数组进行插入、替换和删除的功能。**splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组**，简直完美呀！\n- `splice()`方法接受三个参数，**第一个**为开始索引，**第二个**为删除元素的位置，**第三个**为插入的元素，可以为第二个，当然也可省略（表示删除元素）。\n- `splice()`方法会修改原数组！\n- 通过以下三个demo了解一下具体的用法吧：\n插入:\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,0,\"add1\");\nconsole.log(ary1);      [ 'first', 'add1', 'second', 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [] 没有删除则放回一个空数组\n```\n替换：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,1,\"replace\");\nconsole.log(ary1);      [ 'first', \"replace, 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [\"second\"] 返回被删除(即替换)的数组\n```\n删除：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,3);\nconsole.log(ary1);      [\"second\", \"third\", \"forth\"]\nconsole.log(ary2);      [\"first\", \"fifth\"]\n```\n2. `slice()` 方法\n- `slice()` 方法可以接受两个参数(start, end)；\n- `slice()` 方法可从已有的数组中返回选定的元素；\n- `slice()` 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；\n- `slice()` 方法**不会改变原始数组**，而是返回一个新数组。\ndemo1:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log (ary.slice(1,2) );      // [\"second\"]\nlet ary1 = ary.slice(1,2);          // [\"second\"]\nlet ary2 = ary.slice(1,3);          // [\"second\", \"third\"]\nconsole.log(ary);                   // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo2:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log(ary.slice(1,2));    // [\"second\"]\nconsole.log(ary.slice(1,3));    // [\"second\", \"third\"]\nconsole.log(ary));              // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo3:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary1 = ary.slice();     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary.slice(0);     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n\nary === ary1;       // false\nary === ary2;       // false\nary1 === ary2;      // false\n```\n**看出来啥猫腻没，这不是深复制一个数据吗！**","source":"_posts/关于JavaScript数组的一些思考.md","raw":"---\ntitle: 关于javascript数组的一些思考\ndate: 2018-02-27 15:48:26\ntags: \n    - JavaScript\ncategories:\n---\n\n### <font color=#21b2a6>JS中的数组</font>\n#### 关于数组的一些认识\n1. 使用构造器函数创建数组时:\n```javascript\nlet ary = new Array();\n```\n- 若参数只有一个，且为数字，`let ary1 = new Array(3)`，这是其实我们是在指定数组的长度的，即 `ary1.length === 3`。`ary1[0]`则为`undefined`;\n- 当定义`let ary2 = new Array(1, 2, 3)`时，此时`ary2 === [1, 2, 3]`;\n2. JS中的数组定义非常的自由：\n 看下面的例子：\n```javascript\nlet ary = [1, 2, 3];\nary[5] = 5;\nconsole.log(ary);           // [1,2,3,undefined,undefined,5]\nconsole.log(ary.length);    // 6\n```\n 再看：\n```javascript\nlet ary2 = [1, 2, 3, 4, 5];\nary2.length = 3;\nconsole.log(ary2);      // [1, 2, 3]\n```\n#### 常用的数组API\n1. 万能方法 `splice()`\n-  splice()方法允许我们对数组进行插入、替换和删除的功能。**splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组**，简直完美呀！\n- `splice()`方法接受三个参数，**第一个**为开始索引，**第二个**为删除元素的位置，**第三个**为插入的元素，可以为第二个，当然也可省略（表示删除元素）。\n- `splice()`方法会修改原数组！\n- 通过以下三个demo了解一下具体的用法吧：\n插入:\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,0,\"add1\");\nconsole.log(ary1);      [ 'first', 'add1', 'second', 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [] 没有删除则放回一个空数组\n```\n替换：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,1,\"replace\");\nconsole.log(ary1);      [ 'first', \"replace, 'third', 'forth', 'fifth' ]\nconsole.log(ary2);      [\"second\"] 返回被删除(即替换)的数组\n```\n删除：\n```javascript\nlet ary1 = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary1.splice(1,3);\nconsole.log(ary1);      [\"second\", \"third\", \"forth\"]\nconsole.log(ary2);      [\"first\", \"fifth\"]\n```\n2. `slice()` 方法\n- `slice()` 方法可以接受两个参数(start, end)；\n- `slice()` 方法可从已有的数组中返回选定的元素；\n- `slice()` 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；\n- `slice()` 方法**不会改变原始数组**，而是返回一个新数组。\ndemo1:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log (ary.slice(1,2) );      // [\"second\"]\nlet ary1 = ary.slice(1,2);          // [\"second\"]\nlet ary2 = ary.slice(1,3);          // [\"second\", \"third\"]\nconsole.log(ary);                   // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo2:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nconsole.log(ary.slice(1,2));    // [\"second\"]\nconsole.log(ary.slice(1,3));    // [\"second\", \"third\"]\nconsole.log(ary));              // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n```\ndemo3:\n```javascript\nlet ary = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary1 = ary.slice();     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\nlet ary2 = ary.slice(0);     // [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\n\nary === ary1;       // false\nary === ary2;       // false\nary1 === ary2;      // false\n```\n**看出来啥猫腻没，这不是深复制一个数据吗！**","slug":"关于JavaScript数组的一些思考","published":1,"updated":"2018-02-27T08:10:38.941Z","_id":"cje5comuv001r0gc07ic0jvlr","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"JS中的数组\"><a href=\"#JS中的数组\" class=\"headerlink\" title=\"JS中的数组\"></a><font color=\"#21b2a6\">JS中的数组</font></h3><h4 id=\"关于数组的一些认识\"><a href=\"#关于数组的一些认识\" class=\"headerlink\" title=\"关于数组的一些认识\"></a>关于数组的一些认识</h4><ol>\n<li>使用构造器函数创建数组时:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>若参数只有一个，且为数字，<code>let ary1 = new Array(3)</code>，这是其实我们是在指定数组的长度的，即 <code>ary1.length === 3</code>。<code>ary1[0]</code>则为<code>undefined</code>;</li>\n<li>当定义<code>let ary2 = new Array(1, 2, 3)</code>时，此时<code>ary2 === [1, 2, 3]</code>;</li>\n</ul>\n<ol>\n<li><p>JS中的数组定义非常的自由：<br>看下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">ary[<span class=\"number\">5</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);           <span class=\"comment\">// [1,2,3,undefined,undefined,5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.length);    <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>再看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">ary2.length = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"常用的数组API\"><a href=\"#常用的数组API\" class=\"headerlink\" title=\"常用的数组API\"></a>常用的数组API</h4><ol>\n<li>万能方法 <code>splice()</code></li>\n</ol>\n<ul>\n<li>splice()方法允许我们对数组进行插入、替换和删除的功能。<strong>splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组</strong>，简直完美呀！</li>\n<li><code>splice()</code>方法接受三个参数，<strong>第一个</strong>为开始索引，<strong>第二个</strong>为删除元素的位置，<strong>第三个</strong>为插入的元素，可以为第二个，当然也可省略（表示删除元素）。</li>\n<li><code>splice()</code>方法会修改原数组！</li>\n<li>通过以下三个demo了解一下具体的用法吧：<br>插入:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">\"add1\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">'add1'</span>, <span class=\"string\">'second'</span>, <span class=\"string\">'third'</span>, <span class=\"string\">'forth'</span>, <span class=\"string\">'fifth'</span> ]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [] 没有删除则放回一个空数组</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>替换：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">\"replace\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">\"replace, 'third', 'forth', 'fifth' ]</span></span><br><span class=\"line\"><span class=\"string\">console.log(ary2);      [\"</span>second<span class=\"string\">\"] 返回被删除(即替换)的数组</span></span><br></pre></td></tr></table></figure></p>\n<p>删除：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [<span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"fifth\"</span>]</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><code>slice()</code> 方法</li>\n</ol>\n<ul>\n<li><code>slice()</code> 方法可以接受两个参数(start, end)；</li>\n<li><code>slice()</code> 方法可从已有的数组中返回选定的元素；</li>\n<li><code>slice()</code> 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；</li>\n<li><code>slice()</code> 方法<strong>不会改变原始数组</strong>，而是返回一个新数组。<br>demo1:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log (ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>) );      <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>);          <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);          <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);                   <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>demo2:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>));    <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>));    <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary));              <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure></p>\n<p>demo3:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice();     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">0</span>);     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"></span><br><span class=\"line\">ary === ary1;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary === ary2;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary1 === ary2;      <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>看出来啥猫腻没，这不是深复制一个数据吗！</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"JS中的数组\"><a href=\"#JS中的数组\" class=\"headerlink\" title=\"JS中的数组\"></a><font color=\"#21b2a6\">JS中的数组</font></h3><h4 id=\"关于数组的一些认识\"><a href=\"#关于数组的一些认识\" class=\"headerlink\" title=\"关于数组的一些认识\"></a>关于数组的一些认识</h4><ol>\n<li>使用构造器函数创建数组时:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>若参数只有一个，且为数字，<code>let ary1 = new Array(3)</code>，这是其实我们是在指定数组的长度的，即 <code>ary1.length === 3</code>。<code>ary1[0]</code>则为<code>undefined</code>;</li>\n<li>当定义<code>let ary2 = new Array(1, 2, 3)</code>时，此时<code>ary2 === [1, 2, 3]</code>;</li>\n</ul>\n<ol>\n<li><p>JS中的数组定义非常的自由：<br>看下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">ary[<span class=\"number\">5</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);           <span class=\"comment\">// [1,2,3,undefined,undefined,5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.length);    <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>再看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">ary2.length = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"常用的数组API\"><a href=\"#常用的数组API\" class=\"headerlink\" title=\"常用的数组API\"></a>常用的数组API</h4><ol>\n<li>万能方法 <code>splice()</code></li>\n</ol>\n<ul>\n<li>splice()方法允许我们对数组进行插入、替换和删除的功能。<strong>splice方法返回一个有删除元素组成的新数组，没有删除时则返回一个空数组</strong>，简直完美呀！</li>\n<li><code>splice()</code>方法接受三个参数，<strong>第一个</strong>为开始索引，<strong>第二个</strong>为删除元素的位置，<strong>第三个</strong>为插入的元素，可以为第二个，当然也可省略（表示删除元素）。</li>\n<li><code>splice()</code>方法会修改原数组！</li>\n<li>通过以下三个demo了解一下具体的用法吧：<br>插入:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">\"add1\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">'add1'</span>, <span class=\"string\">'second'</span>, <span class=\"string\">'third'</span>, <span class=\"string\">'forth'</span>, <span class=\"string\">'fifth'</span> ]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [] 没有删除则放回一个空数组</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>替换：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">\"replace\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [ <span class=\"string\">'first'</span>, <span class=\"string\">\"replace, 'third', 'forth', 'fifth' ]</span></span><br><span class=\"line\"><span class=\"string\">console.log(ary2);      [\"</span>second<span class=\"string\">\"] 返回被删除(即替换)的数组</span></span><br></pre></td></tr></table></figure></p>\n<p>删除：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary1 = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary1.splice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1);      [<span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary2);      [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"fifth\"</span>]</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><code>slice()</code> 方法</li>\n</ol>\n<ul>\n<li><code>slice()</code> 方法可以接受两个参数(start, end)；</li>\n<li><code>slice()</code> 方法可从已有的数组中返回选定的元素；</li>\n<li><code>slice()</code> 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分；</li>\n<li><code>slice()</code> 方法<strong>不会改变原始数组</strong>，而是返回一个新数组。<br>demo1:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log (ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>) );      <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>);          <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>);          <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary);                   <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>demo2:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>));    <span class=\"comment\">// [\"second\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>));    <span class=\"comment\">// [\"second\", \"third\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary));              <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br></pre></td></tr></table></figure></p>\n<p>demo3:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>, <span class=\"string\">\"third\"</span>, <span class=\"string\">\"forth\"</span>, <span class=\"string\">\"fifth\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> ary1 = ary.slice();     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary2 = ary.slice(<span class=\"number\">0</span>);     <span class=\"comment\">// [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];</span></span><br><span class=\"line\"></span><br><span class=\"line\">ary === ary1;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary === ary2;       <span class=\"comment\">// false</span></span><br><span class=\"line\">ary1 === ary2;      <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>看出来啥猫腻没，这不是深复制一个数据吗！</strong></p>\n"},{"title":"JavaScript 里的面向对象","date":"2018-02-27T07:52:37.000Z","_content":"\n### <font color=#21b2a6>JavaScript 创建对象的几种常见的方式</font>\n#### 1. 原始方式：\n* 对象字面量方式\n```javascript\nvar Hero = { \n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    todo: function () { alert(this.name); }\n};\n```\n* Object构造函数方式\n```javascript\nvar Hero = new Object();\n\nHero.name = 'MasterYi';\nHero.skill = 'Q';\nHero.do = function(){\n    return this.name + ' use ' + this.skill + ' kill ' + 'yasuo';\n}\n\nalert( Hero.skill );    // AlphaStrike\nalert( Hero.do() );     // MasterYi use AlphaStrike kill yasuo\n```\n如上，当我们要创建批量的Hero1、Hero2……时，\n每次都要敲很多代码，资深copypaster都吃不消！\n然后就有了下面批量生产的工厂模式。\n\n#### 2. 工厂模式\n```javascript\nfunction heroObj(name, skill){\n    var Hero = new Object();\n\n    Hero.name = name;\n    Hero.skill = skill;\n    Hero.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n    return Hero;\n}\nvar riven = heroObj('yasuo', 'R');\nvar ashe = heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\n工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。\n指定姓名年龄就可以造一堆小宝宝啦，解放双手。\n但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、\n是人还是狗傻傻分不清（instanceof 测试为 Object），\n另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？\n\n#### 3. 构造函数\n```javascript\nfunction HeroObj(name, skill){\n\n    this.name = name;\n    this.skill = skill;\n    this.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n}\n\nvar riven = new heroObj('yasuo', 'R');\nvar ashe = new heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\nECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。\n\n#### 4. 原型模式\n* 直接使用 prototype 属性\n```javascript\nfunction Hero () {}\nHero.prototype.name = 'MasterYi';\nHero.prototype.skill = 'AlphaStrike';\nHero.prototype.do = function () { alert(this.name); };\n```\n* 字面量定义方式\n```javascript\nfunction Hero () {}\nHero.prototype = {\n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    sayName: function () { alert(this.name); }\n};\nvar p1 = new Hero(); //name='MasterYi'\nvar p2 = new Hero(); //name='MasterYi'\n```\n这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。\n\n#### 5. 混合模式\n```javascript\nfunction Hero (name, skill) {\n    this.name = name;\n    this.skill = skill;\n}\nHero.prototype = {\n    skillLists: ['Q', 'W', 'E', 'R'];\n    sayName: function () {\n        alert(this.name);\n    },\n    do: function () {\n        alert(this.name + ' use ' + this.skill + ' kill ' + 'MasterYi');\n    }\n};\nvar p1 = new Hero('yasuo', 'R');\nvar p2 = new Hero('ashe', 'w');\np1.sayName();   // yasuo\np1.skillLists;  // ['Q', 'W', 'E', 'R']\np2.do();        // ashe use w kill MasterYi\n```\n\n#### 6. 使用`class`关键字\n```javascript\nclass Hero {\n    constructor(){\n        this.name = 'MasterYi';\n        this.skill = 'AlphaStrike';\n    }\n    do(enemy){\n        alert(this.name + ' use ' +  this.skill + ' kill ' + enemy)\n    }\n}\n\nlet ashe = new Hero();\nashe.do('ashe');       // MasterYi use AlphaStrike kill ashe\n\nclass Yasuo extends Hero {\n    constructor(){\n        super()\n        this.name = 'yasuo'\n    }\n}\nlet yasuo = new Yasuo();\nyasuo.do('timor');      // yasuo use AlphaStrike kill timor\n```\n这里涉及到 `ES6` 里的新特性，想了解 `ES6` 中更多的新特性，大家可以去看看 [阮一峰](http://es6.ruanyifeng.com/) 老师的博客。","source":"_posts/JavaScript 创建对象的几种常见的方式.md","raw":"---\ntitle: JavaScript 里的面向对象\ndate: 2018-02-27 15:52:37\ntags: \n    - JavaScript\ncategories:\n---\n\n### <font color=#21b2a6>JavaScript 创建对象的几种常见的方式</font>\n#### 1. 原始方式：\n* 对象字面量方式\n```javascript\nvar Hero = { \n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    todo: function () { alert(this.name); }\n};\n```\n* Object构造函数方式\n```javascript\nvar Hero = new Object();\n\nHero.name = 'MasterYi';\nHero.skill = 'Q';\nHero.do = function(){\n    return this.name + ' use ' + this.skill + ' kill ' + 'yasuo';\n}\n\nalert( Hero.skill );    // AlphaStrike\nalert( Hero.do() );     // MasterYi use AlphaStrike kill yasuo\n```\n如上，当我们要创建批量的Hero1、Hero2……时，\n每次都要敲很多代码，资深copypaster都吃不消！\n然后就有了下面批量生产的工厂模式。\n\n#### 2. 工厂模式\n```javascript\nfunction heroObj(name, skill){\n    var Hero = new Object();\n\n    Hero.name = name;\n    Hero.skill = skill;\n    Hero.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n    return Hero;\n}\nvar riven = heroObj('yasuo', 'R');\nvar ashe = heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\n工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。\n指定姓名年龄就可以造一堆小宝宝啦，解放双手。\n但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、\n是人还是狗傻傻分不清（instanceof 测试为 Object），\n另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？\n\n#### 3. 构造函数\n```javascript\nfunction HeroObj(name, skill){\n\n    this.name = name;\n    this.skill = skill;\n    this.do = function(){\n        return this.name + ' use ' + this.skill + ' kill ' + 'MasterYi';\n    }\n\n}\n\nvar riven = new heroObj('yasuo', 'R');\nvar ashe = new heroObj('Caitlin', 'W');\n\nalert(riven.skill);     // R\nalert(ashe.do());       // Caitlin use W kill MasterYi\n```\nECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。\n\n#### 4. 原型模式\n* 直接使用 prototype 属性\n```javascript\nfunction Hero () {}\nHero.prototype.name = 'MasterYi';\nHero.prototype.skill = 'AlphaStrike';\nHero.prototype.do = function () { alert(this.name); };\n```\n* 字面量定义方式\n```javascript\nfunction Hero () {}\nHero.prototype = {\n    name: 'MasterYi',\n    skill: 'AlphaStrike',\n    sayName: function () { alert(this.name); }\n};\nvar p1 = new Hero(); //name='MasterYi'\nvar p2 = new Hero(); //name='MasterYi'\n```\n这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。\n\n#### 5. 混合模式\n```javascript\nfunction Hero (name, skill) {\n    this.name = name;\n    this.skill = skill;\n}\nHero.prototype = {\n    skillLists: ['Q', 'W', 'E', 'R'];\n    sayName: function () {\n        alert(this.name);\n    },\n    do: function () {\n        alert(this.name + ' use ' + this.skill + ' kill ' + 'MasterYi');\n    }\n};\nvar p1 = new Hero('yasuo', 'R');\nvar p2 = new Hero('ashe', 'w');\np1.sayName();   // yasuo\np1.skillLists;  // ['Q', 'W', 'E', 'R']\np2.do();        // ashe use w kill MasterYi\n```\n\n#### 6. 使用`class`关键字\n```javascript\nclass Hero {\n    constructor(){\n        this.name = 'MasterYi';\n        this.skill = 'AlphaStrike';\n    }\n    do(enemy){\n        alert(this.name + ' use ' +  this.skill + ' kill ' + enemy)\n    }\n}\n\nlet ashe = new Hero();\nashe.do('ashe');       // MasterYi use AlphaStrike kill ashe\n\nclass Yasuo extends Hero {\n    constructor(){\n        super()\n        this.name = 'yasuo'\n    }\n}\nlet yasuo = new Yasuo();\nyasuo.do('timor');      // yasuo use AlphaStrike kill timor\n```\n这里涉及到 `ES6` 里的新特性，想了解 `ES6` 中更多的新特性，大家可以去看看 [阮一峰](http://es6.ruanyifeng.com/) 老师的博客。","slug":"JavaScript 创建对象的几种常见的方式","published":1,"updated":"2018-02-27T08:10:12.798Z","_id":"cje5cutjf00240gc0sjx4tfdm","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"JavaScript-创建对象的几种常见的方式\"><a href=\"#JavaScript-创建对象的几种常见的方式\" class=\"headerlink\" title=\"JavaScript 创建对象的几种常见的方式\"></a><font color=\"#21b2a6\">JavaScript 创建对象的几种常见的方式</font></h3><h4 id=\"1-原始方式：\"><a href=\"#1-原始方式：\" class=\"headerlink\" title=\"1. 原始方式：\"></a>1. 原始方式：</h4><ul>\n<li><p>对象字面量方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = &#123; </span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    todo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object构造函数方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">Hero.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.skill = <span class=\"string\">'Q'</span>;</span><br><span class=\"line\">Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'yasuo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert( Hero.skill );    <span class=\"comment\">// AlphaStrike</span></span><br><span class=\"line\">alert( Hero.do() );     <span class=\"comment\">// MasterYi use AlphaStrike kill yasuo</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如上，当我们要创建批量的Hero1、Hero2……时，<br>每次都要敲很多代码，资深copypaster都吃不消！<br>然后就有了下面批量生产的工厂模式。</p>\n<h4 id=\"2-工厂模式\"><a href=\"#2-工厂模式\" class=\"headerlink\" title=\"2. 工厂模式\"></a>2. 工厂模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    Hero.name = name;</span><br><span class=\"line\">    Hero.skill = skill;</span><br><span class=\"line\">    Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Hero;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。<br>指定姓名年龄就可以造一堆小宝宝啦，解放双手。<br>但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、<br>是人还是狗傻傻分不清（instanceof 测试为 Object），<br>另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？</p>\n<h4 id=\"3-构造函数\"><a href=\"#3-构造函数\" class=\"headerlink\" title=\"3. 构造函数\"></a>3. 构造函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HeroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>ECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。</p>\n<h4 id=\"4-原型模式\"><a href=\"#4-原型模式\" class=\"headerlink\" title=\"4. 原型模式\"></a>4. 原型模式</h4><ul>\n<li><p>直接使用 prototype 属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.prototype.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">Hero.prototype.do = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字面量定义方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。</p>\n<h4 id=\"5-混合模式\"><a href=\"#5-混合模式\" class=\"headerlink\" title=\"5. 混合模式\"></a>5. 混合模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\">name, skill</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    skillLists: [<span class=\"string\">'Q'</span>, <span class=\"string\">'W'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'R'</span>];</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">do</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'ashe'</span>, <span class=\"string\">'w'</span>);</span><br><span class=\"line\">p1.sayName();   <span class=\"comment\">// yasuo</span></span><br><span class=\"line\">p1.skillLists;  <span class=\"comment\">// ['Q', 'W', 'E', 'R']</span></span><br><span class=\"line\">p2.do();        <span class=\"comment\">// ashe use w kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-使用class关键字\"><a href=\"#6-使用class关键字\" class=\"headerlink\" title=\"6. 使用class关键字\"></a>6. 使用<code>class</code>关键字</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>(enemy)&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> +  <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + enemy)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ashe = <span class=\"keyword\">new</span> Hero();</span><br><span class=\"line\">ashe.do(<span class=\"string\">'ashe'</span>);       <span class=\"comment\">// MasterYi use AlphaStrike kill ashe</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Yasuo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'yasuo'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> yasuo = <span class=\"keyword\">new</span> Yasuo();</span><br><span class=\"line\">yasuo.do(<span class=\"string\">'timor'</span>);      <span class=\"comment\">// yasuo use AlphaStrike kill timor</span></span><br></pre></td></tr></table></figure>\n<p>这里涉及到 <code>ES6</code> 里的新特性，想了解 <code>ES6</code> 中更多的新特性，大家可以去看看 <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰</a> 老师的博客。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"JavaScript-创建对象的几种常见的方式\"><a href=\"#JavaScript-创建对象的几种常见的方式\" class=\"headerlink\" title=\"JavaScript 创建对象的几种常见的方式\"></a><font color=\"#21b2a6\">JavaScript 创建对象的几种常见的方式</font></h3><h4 id=\"1-原始方式：\"><a href=\"#1-原始方式：\" class=\"headerlink\" title=\"1. 原始方式：\"></a>1. 原始方式：</h4><ul>\n<li><p>对象字面量方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = &#123; </span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    todo: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object构造函数方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">Hero.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.skill = <span class=\"string\">'Q'</span>;</span><br><span class=\"line\">Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'yasuo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">alert( Hero.skill );    <span class=\"comment\">// AlphaStrike</span></span><br><span class=\"line\">alert( Hero.do() );     <span class=\"comment\">// MasterYi use AlphaStrike kill yasuo</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如上，当我们要创建批量的Hero1、Hero2……时，<br>每次都要敲很多代码，资深copypaster都吃不消！<br>然后就有了下面批量生产的工厂模式。</p>\n<h4 id=\"2-工厂模式\"><a href=\"#2-工厂模式\" class=\"headerlink\" title=\"2. 工厂模式\"></a>2. 工厂模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Hero = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    Hero.name = name;</span><br><span class=\"line\">    Hero.skill = skill;</span><br><span class=\"line\">    Hero.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Hero;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>工厂模式就是批量化生产，简单调用就可以进入造人模式（啪啪啪……）。<br>指定姓名年龄就可以造一堆小宝宝啦，解放双手。<br>但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、<br>是人还是狗傻傻分不清（instanceof 测试为 Object），<br>另外每次造人时都要创建一个独立的temp对象，代码臃肿，你受得了？</p>\n<h4 id=\"3-构造函数\"><a href=\"#3-构造函数\" class=\"headerlink\" title=\"3. 构造函数\"></a>3. 构造函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HeroObj</span>(<span class=\"params\">name, skill</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> riven = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ashe = <span class=\"keyword\">new</span> heroObj(<span class=\"string\">'Caitlin'</span>, <span class=\"string\">'W'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(riven.skill);     <span class=\"comment\">// R</span></span><br><span class=\"line\">alert(ashe.do());       <span class=\"comment\">// Caitlin use W kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<p>ECMAScript中的构造函数可以用来创建特定类型的对象。像Object和Array的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。</p>\n<h4 id=\"4-原型模式\"><a href=\"#4-原型模式\" class=\"headerlink\" title=\"4. 原型模式\"></a>4. 原型模式</h4><ul>\n<li><p>直接使用 prototype 属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">Hero.prototype.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">Hero.prototype.do = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字面量定义方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'MasterYi'</span>,</span><br><span class=\"line\">    skill: <span class=\"string\">'AlphaStrike'</span>,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; alert(<span class=\"keyword\">this</span>.name); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(); <span class=\"comment\">//name='MasterYi'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。</p>\n<h4 id=\"5-混合模式\"><a href=\"#5-混合模式\" class=\"headerlink\" title=\"5. 混合模式\"></a>5. 混合模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hero</span> (<span class=\"params\">name, skill</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.skill = skill;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Hero.prototype = &#123;</span><br><span class=\"line\">    skillLists: [<span class=\"string\">'Q'</span>, <span class=\"string\">'W'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'R'</span>];</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">do</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> + <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + <span class=\"string\">'MasterYi'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'yasuo'</span>, <span class=\"string\">'R'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Hero(<span class=\"string\">'ashe'</span>, <span class=\"string\">'w'</span>);</span><br><span class=\"line\">p1.sayName();   <span class=\"comment\">// yasuo</span></span><br><span class=\"line\">p1.skillLists;  <span class=\"comment\">// ['Q', 'W', 'E', 'R']</span></span><br><span class=\"line\">p2.do();        <span class=\"comment\">// ashe use w kill MasterYi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6-使用class关键字\"><a href=\"#6-使用class关键字\" class=\"headerlink\" title=\"6. 使用class关键字\"></a>6. 使用<code>class</code>关键字</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'MasterYi'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.skill = <span class=\"string\">'AlphaStrike'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>(enemy)&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.name + <span class=\"string\">' use '</span> +  <span class=\"keyword\">this</span>.skill + <span class=\"string\">' kill '</span> + enemy)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ashe = <span class=\"keyword\">new</span> Hero();</span><br><span class=\"line\">ashe.do(<span class=\"string\">'ashe'</span>);       <span class=\"comment\">// MasterYi use AlphaStrike kill ashe</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Yasuo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Hero</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'yasuo'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> yasuo = <span class=\"keyword\">new</span> Yasuo();</span><br><span class=\"line\">yasuo.do(<span class=\"string\">'timor'</span>);      <span class=\"comment\">// yasuo use AlphaStrike kill timor</span></span><br></pre></td></tr></table></figure>\n<p>这里涉及到 <code>ES6</code> 里的新特性，想了解 <code>ES6</code> 中更多的新特性，大家可以去看看 <a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"noopener\">阮一峰</a> 老师的博客。</p>\n"},{"title":"codeing中常用到的tips","date":"2078-12-31T16:50:00.000Z","_content":"\n### <font color=#21b2a6>总结（记录）一些codeing过程中用到的tips</font>\n\n- <a href=\"#getKey\">1. 获取json的`key`值</a>\n- <a href=\"#input\">2. JS实时监听文本域的变化</a>\n- <a href=\"#checkType\">3. JavaScript类型检验</a>\n---\n#### <a name=\"getKey\">1. </a>获取json的 `key` 值\n```javascript\nvar obj = { name: \"naruto\", age: 23, dad: \"minato\"}\n````\n##### 1.1. 使用 `for in` 来循环 :\n```javascript\nfor (var key in obj){\n    console.log(key) // 依次输出 \"name\", \"age\", \"dad\"\n}\n```\n这种方法比较常见，相信大家看到这个问题时第一时间都会想到吧，但是我要介绍的是下面这个更简单的方法。\n##### 1.2. 使用 `Object.keys()` 来获取 :\n```\n- console.log( Object.keys(obj) ) // 输出一个数组 [\"name\", \"age\", \"dad\"]\n- 所以, 当我们需要某个key值时可以从当前数组中取得。\n```\n---\n\n#### <a name=\"input\">2. JS实时监听文本域的变化</a>\n众所周知，使用 `onchange` 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， `onchange` 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用`keydown`和`keyup`外，我们还可以:\n##### 2.1. 使用 `onpropertychange` \n```javascript\n<input type=\"text\" id=\"txt\">\n\n$(\"#ysy\").bind('input propertychange', function() {  \n    console.log(new Date().getTime()); \n});\n```\n##### 2.2 使用 `oninput` \n```javascript\ndocument.getElementById('txt').oninput = function(){\n    console.log(this.value);\n}\n```\n最后，总结一下`onchange, onpropertychange`和`oninput`之间的异同：\n1. `onchange`事件与`onpropertychange`事件的区别：`onchange`事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；`onpropertychange`事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。\n2. `oninput`事件与`onpropertychange`事件的区别：`oninput`事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；`onpropertychange`事件是任何属性改变都会触发的，而`oninput`却只在value改变时触发，`oninput`要通过`addEventListener()`来注册，`onpropertychange`注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）>\n3. `oninput`与`onpropertychange`失效的情况：  （1）`oninput`事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）`onpropertychange`事件：当input设置为`disable=true`后，onpropertychange不会触发。\n---\n\n#### <a name=\"checkType\">3. JavaScript类型检验</a>\n一个简单有用的js类型检验的方法\n```javascript\nfunction checkType(sth) {\n    return Object.prototype.toString.call(o)\n    .match(/(\\w+)\\]$/)[1]\n    .toLowerCase();\n}\n\ncheckType({})               // object\ncheckType([])               // array\ncheckType(function(){})     // function\ncheckType(1)                // number\ncheckType(+'3')             // number\ncheckType(3+'')             // string\n```\n","source":"_posts/codeing中常用到的tips.md","raw":"---\ntitle: codeing中常用到的tips\ndate: 2079-01-01 00:050:00\ntags: \n    - JavaScript\n    - other\n    - 置顶\ncategories:\n---\n\n### <font color=#21b2a6>总结（记录）一些codeing过程中用到的tips</font>\n\n- <a href=\"#getKey\">1. 获取json的`key`值</a>\n- <a href=\"#input\">2. JS实时监听文本域的变化</a>\n- <a href=\"#checkType\">3. JavaScript类型检验</a>\n---\n#### <a name=\"getKey\">1. </a>获取json的 `key` 值\n```javascript\nvar obj = { name: \"naruto\", age: 23, dad: \"minato\"}\n````\n##### 1.1. 使用 `for in` 来循环 :\n```javascript\nfor (var key in obj){\n    console.log(key) // 依次输出 \"name\", \"age\", \"dad\"\n}\n```\n这种方法比较常见，相信大家看到这个问题时第一时间都会想到吧，但是我要介绍的是下面这个更简单的方法。\n##### 1.2. 使用 `Object.keys()` 来获取 :\n```\n- console.log( Object.keys(obj) ) // 输出一个数组 [\"name\", \"age\", \"dad\"]\n- 所以, 当我们需要某个key值时可以从当前数组中取得。\n```\n---\n\n#### <a name=\"input\">2. JS实时监听文本域的变化</a>\n众所周知，使用 `onchange` 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， `onchange` 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用`keydown`和`keyup`外，我们还可以:\n##### 2.1. 使用 `onpropertychange` \n```javascript\n<input type=\"text\" id=\"txt\">\n\n$(\"#ysy\").bind('input propertychange', function() {  \n    console.log(new Date().getTime()); \n});\n```\n##### 2.2 使用 `oninput` \n```javascript\ndocument.getElementById('txt').oninput = function(){\n    console.log(this.value);\n}\n```\n最后，总结一下`onchange, onpropertychange`和`oninput`之间的异同：\n1. `onchange`事件与`onpropertychange`事件的区别：`onchange`事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；`onpropertychange`事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。\n2. `oninput`事件与`onpropertychange`事件的区别：`oninput`事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；`onpropertychange`事件是任何属性改变都会触发的，而`oninput`却只在value改变时触发，`oninput`要通过`addEventListener()`来注册，`onpropertychange`注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）>\n3. `oninput`与`onpropertychange`失效的情况：  （1）`oninput`事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）`onpropertychange`事件：当input设置为`disable=true`后，onpropertychange不会触发。\n---\n\n#### <a name=\"checkType\">3. JavaScript类型检验</a>\n一个简单有用的js类型检验的方法\n```javascript\nfunction checkType(sth) {\n    return Object.prototype.toString.call(o)\n    .match(/(\\w+)\\]$/)[1]\n    .toLowerCase();\n}\n\ncheckType({})               // object\ncheckType([])               // array\ncheckType(function(){})     // function\ncheckType(1)                // number\ncheckType(+'3')             // number\ncheckType(3+'')             // string\n```\n","slug":"codeing中常用到的tips","published":1,"updated":"2018-02-27T08:11:55.096Z","_id":"cje5da74z00260gc02o5te25m","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"总结（记录）一些codeing过程中用到的tips\"><a href=\"#总结（记录）一些codeing过程中用到的tips\" class=\"headerlink\" title=\"总结（记录）一些codeing过程中用到的tips\"></a><font color=\"#21b2a6\">总结（记录）一些codeing过程中用到的tips</font></h3><ul>\n<li><a href=\"#getKey\">1. 获取json的<code>key</code>值</a></li>\n<li><a href=\"#input\">2. JS实时监听文本域的变化</a></li>\n<li><a href=\"#checkType\">3. JavaScript类型检验</a></li>\n</ul>\n<hr>\n<h4 id=\"1-获取json的-key-值\"><a href=\"#1-获取json的-key-值\" class=\"headerlink\" title=\"1. 获取json的 key 值\"></a><a name=\"getKey\">1. </a>获取json的 <code>key</code> 值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"naruto\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">23</span>, <span class=\"attr\">dad</span>: <span class=\"string\">\"minato\"</span>&#125;</span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"1-1-使用-for-in-来循环\"><a href=\"#1-1-使用-for-in-来循环\" class=\"headerlink\" title=\"1.1. 使用 for in 来循环 :\"></a>1.1. 使用 <code>for in</code> 来循环 :</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key) <span class=\"comment\">// 依次输出 \"name\", \"age\", \"dad\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法比较常见，相信大家看到这个问题时第一时间都会想到吧，但是我要介绍的是下面这个更简单的方法。</p>\n<h5 id=\"1-2-使用-Object-keys-来获取\"><a href=\"#1-2-使用-Object-keys-来获取\" class=\"headerlink\" title=\"1.2. 使用 Object.keys() 来获取 :\"></a>1.2. 使用 <code>Object.keys()</code> 来获取 :</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- console.log( Object.keys(obj) ) // 输出一个数组 [&quot;name&quot;, &quot;age&quot;, &quot;dad&quot;]</span><br><span class=\"line\">- 所以, 当我们需要某个key值时可以从当前数组中取得。</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"2-JS实时监听文本域的变化\"><a href=\"#2-JS实时监听文本域的变化\" class=\"headerlink\" title=\"2. JS实时监听文本域的变化\"></a><a name=\"input\">2. JS实时监听文本域的变化</a></h4><p>众所周知，使用 <code>onchange</code> 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， <code>onchange</code> 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用<code>keydown</code>和<code>keyup</code>外，我们还可以:</p>\n<h5 id=\"2-1-使用-onpropertychange\"><a href=\"#2-1-使用-onpropertychange\" class=\"headerlink\" title=\"2.1. 使用 onpropertychange\"></a>2.1. 使用 <code>onpropertychange</code></h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"txt\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">\"#ysy\"</span>).bind(<span class=\"string\">'input propertychange'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-2-使用-oninput\"><a href=\"#2-2-使用-oninput\" class=\"headerlink\" title=\"2.2 使用 oninput\"></a>2.2 使用 <code>oninput</code></h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'txt'</span>).oninput = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，总结一下<code>onchange, onpropertychange</code>和<code>oninput</code>之间的异同：</p>\n<ol>\n<li><code>onchange</code>事件与<code>onpropertychange</code>事件的区别：<code>onchange</code>事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；<code>onpropertychange</code>事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。</li>\n<li><code>oninput</code>事件与<code>onpropertychange</code>事件的区别：<code>oninput</code>事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；<code>onpropertychange</code>事件是任何属性改变都会触发的，而<code>oninput</code>却只在value改变时触发，<code>oninput</code>要通过<code>addEventListener()</code>来注册，<code>onpropertychange</code>注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）&gt;</li>\n<li><code>oninput</code>与<code>onpropertychange</code>失效的情况：  （1）<code>oninput</code>事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）<code>onpropertychange</code>事件：当input设置为<code>disable=true</code>后，onpropertychange不会触发。</li>\n</ol>\n<hr>\n<h4 id=\"3-JavaScript类型检验\"><a href=\"#3-JavaScript类型检验\" class=\"headerlink\" title=\"3. JavaScript类型检验\"></a><a name=\"checkType\">3. JavaScript类型检验</a></h4><p>一个简单有用的js类型检验的方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkType</span>(<span class=\"params\">sth</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o)</span><br><span class=\"line\">    .match(<span class=\"regexp\">/(\\w+)\\]$/</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    .toLowerCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkType(&#123;&#125;)               <span class=\"comment\">// object</span></span><br><span class=\"line\">checkType([])               <span class=\"comment\">// array</span></span><br><span class=\"line\">checkType(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)     <span class=\"comment\">// function</span></span><br><span class=\"line\">checkType(<span class=\"number\">1</span>)                <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(+<span class=\"string\">'3'</span>)             <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(<span class=\"number\">3</span>+<span class=\"string\">''</span>)             <span class=\"comment\">// string</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"总结（记录）一些codeing过程中用到的tips\"><a href=\"#总结（记录）一些codeing过程中用到的tips\" class=\"headerlink\" title=\"总结（记录）一些codeing过程中用到的tips\"></a><font color=\"#21b2a6\">总结（记录）一些codeing过程中用到的tips</font></h3><ul>\n<li><a href=\"#getKey\">1. 获取json的<code>key</code>值</a></li>\n<li><a href=\"#input\">2. JS实时监听文本域的变化</a></li>\n<li><a href=\"#checkType\">3. JavaScript类型检验</a></li>\n</ul>\n<hr>\n<h4 id=\"1-获取json的-key-值\"><a href=\"#1-获取json的-key-值\" class=\"headerlink\" title=\"1. 获取json的 key 值\"></a><a name=\"getKey\">1. </a>获取json的 <code>key</code> 值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">\"naruto\"</span>, <span class=\"attr\">age</span>: <span class=\"number\">23</span>, <span class=\"attr\">dad</span>: <span class=\"string\">\"minato\"</span>&#125;</span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"1-1-使用-for-in-来循环\"><a href=\"#1-1-使用-for-in-来循环\" class=\"headerlink\" title=\"1.1. 使用 for in 来循环 :\"></a>1.1. 使用 <code>for in</code> 来循环 :</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key) <span class=\"comment\">// 依次输出 \"name\", \"age\", \"dad\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法比较常见，相信大家看到这个问题时第一时间都会想到吧，但是我要介绍的是下面这个更简单的方法。</p>\n<h5 id=\"1-2-使用-Object-keys-来获取\"><a href=\"#1-2-使用-Object-keys-来获取\" class=\"headerlink\" title=\"1.2. 使用 Object.keys() 来获取 :\"></a>1.2. 使用 <code>Object.keys()</code> 来获取 :</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- console.log( Object.keys(obj) ) // 输出一个数组 [&quot;name&quot;, &quot;age&quot;, &quot;dad&quot;]</span><br><span class=\"line\">- 所以, 当我们需要某个key值时可以从当前数组中取得。</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"2-JS实时监听文本域的变化\"><a href=\"#2-JS实时监听文本域的变化\" class=\"headerlink\" title=\"2. JS实时监听文本域的变化\"></a><a name=\"input\">2. JS实时监听文本域的变化</a></h4><p>众所周知，使用 <code>onchange</code> 事件来监听文本域的变化是我们在开发中用到的最多的方法。但是， <code>onchange</code> 是在文本域失焦时才触发，有时候由于需求的原因，需要我们来实时监听文本域的变化，除了使用<code>keydown</code>和<code>keyup</code>外，我们还可以:</p>\n<h5 id=\"2-1-使用-onpropertychange\"><a href=\"#2-1-使用-onpropertychange\" class=\"headerlink\" title=\"2.1. 使用 onpropertychange\"></a>2.1. 使用 <code>onpropertychange</code></h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"txt\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">\"#ysy\"</span>).bind(<span class=\"string\">'input propertychange'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-2-使用-oninput\"><a href=\"#2-2-使用-oninput\" class=\"headerlink\" title=\"2.2 使用 oninput\"></a>2.2 使用 <code>oninput</code></h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'txt'</span>).oninput = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，总结一下<code>onchange, onpropertychange</code>和<code>oninput</code>之间的异同：</p>\n<ol>\n<li><code>onchange</code>事件与<code>onpropertychange</code>事件的区别：<code>onchange</code>事件在内容改变（两次内容有可能还是相等的）且失去焦点时触发；<code>onpropertychange</code>事件却是实时触发，即每增加或删除一个字符就会触发，通过js改变也会触发该事件，但是该事件IE专有。</li>\n<li><code>oninput</code>事件与<code>onpropertychange</code>事件的区别：<code>oninput</code>事件是IE之外的大多数浏览器支持的事件，在value改变时触发，实时的，即每增加或删除一个字符就会触发，然而通过js改变value时，却不会触发；<code>onpropertychange</code>事件是任何属性改变都会触发的，而<code>oninput</code>却只在value改变时触发，<code>oninput</code>要通过<code>addEventListener()</code>来注册，<code>onpropertychange</code>注册方式跟一般事件一样。（此处都是指在js中动态绑定事件，以实现内容与行为分离）&gt;</li>\n<li><code>oninput</code>与<code>onpropertychange</code>失效的情况：  （1）<code>oninput</code>事件：a). 当脚本中改变value时，不会触发；b).从浏览器的自动下拉提示中选取时，不会触发。  （2）<code>onpropertychange</code>事件：当input设置为<code>disable=true</code>后，onpropertychange不会触发。</li>\n</ol>\n<hr>\n<h4 id=\"3-JavaScript类型检验\"><a href=\"#3-JavaScript类型检验\" class=\"headerlink\" title=\"3. JavaScript类型检验\"></a><a name=\"checkType\">3. JavaScript类型检验</a></h4><p>一个简单有用的js类型检验的方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkType</span>(<span class=\"params\">sth</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o)</span><br><span class=\"line\">    .match(<span class=\"regexp\">/(\\w+)\\]$/</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    .toLowerCase();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">checkType(&#123;&#125;)               <span class=\"comment\">// object</span></span><br><span class=\"line\">checkType([])               <span class=\"comment\">// array</span></span><br><span class=\"line\">checkType(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)     <span class=\"comment\">// function</span></span><br><span class=\"line\">checkType(<span class=\"number\">1</span>)                <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(+<span class=\"string\">'3'</span>)             <span class=\"comment\">// number</span></span><br><span class=\"line\">checkType(<span class=\"number\">3</span>+<span class=\"string\">''</span>)             <span class=\"comment\">// string</span></span><br></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjdij1uq30001y4yohabq8nz1","tag_id":"cje5bhxu3000e0gc0w9prcrhp","_id":"cje5btow6000z0gc0z04q2aq9"},{"post_id":"cjdij1uq30001y4yohabq8nz1","tag_id":"cje5bsv0c000n0gc0q3gs1tci","_id":"cje5btow600100gc0gzuq4oju"},{"post_id":"cjdij1upx0000y4yok8m08yyx","tag_id":"cje5bhxu3000e0gc0w9prcrhp","_id":"cje5buit9001n0gc0k2v1l7cj"},{"post_id":"cje5comuv001r0gc07ic0jvlr","tag_id":"cje5cpqjd00210gc0inrvsti3","_id":"cje5cpqje00220gc0e5pwpzzb"},{"post_id":"cje5cutjf00240gc0sjx4tfdm","tag_id":"cje5cpqjd00210gc0inrvsti3","_id":"cje5cvzji00250gc0iqbn0xz9"},{"post_id":"cje5da74z00260gc02o5te25m","tag_id":"cje5cpqjd00210gc0inrvsti3","_id":"cje5dhho7002i0gc0yx8rqpj2"},{"post_id":"cje5da74z00260gc02o5te25m","tag_id":"cje5dax9m00280gc0cu8pgm2i","_id":"cje5dhho8002j0gc08o05icgw"},{"post_id":"cje5da74z00260gc02o5te25m","tag_id":"cje5dcirq002a0gc0tj9v6k2n","_id":"cje5dhho8002k0gc0xnv62bq0"}],"Tag":[{"name":"h","_id":"cje43b76j0001ckc0hcifinld"},{"name":"ht","_id":"cje43b7bj0003ckc0j96gfstl"},{"name":"htm","_id":"cje43b7n60005ckc0bhvud36b"},{"name":"html","_id":"cje43b7s80007ckc0mi2corjf"},{"name":"H","_id":"cje5bhx4z00080gc0u7mmdm58"},{"name":"HT","_id":"cje5bhxbe000a0gc00s53ffbx"},{"name":"HTM","_id":"cje5bhxqc000c0gc0i0juzdch"},{"name":"HTML","_id":"cje5bhxu3000e0gc0w9prcrhp"},{"name":"-HTML","_id":"cje5bsqze000g0gc0lke8lcaq"},{"name":"C","_id":"cje5bsus7000j0gc0ovfn2mly"},{"name":"CS","_id":"cje5bsuwq000l0gc0frbv57sk"},{"name":"CSS","_id":"cje5bsv0c000n0gc0q3gs1tci"},{"name":"html c","_id":"cje5bth58000s0gc02n1c87z4"},{"name":"html cs","_id":"cje5bth94000u0gc0ge8trpb4"},{"name":"html css","_id":"cje5bthdw000w0gc0b0790uer"},{"name":"ja","_id":"cje5cpegy001s0gc0fvwup9qt"},{"name":"j","_id":"cje5cpf2y001u0gc09ceq4t5w"},{"name":"J","_id":"cje5cpgsr001w0gc0o33igw70"},{"name":"Ja","_id":"cje5cpgxu001y0gc0ifc07ep7"},{"name":"JavaScript","_id":"cje5cpqjd00210gc0inrvsti3"},{"name":"other","_id":"cje5dax9m00280gc0cu8pgm2i"},{"name":"置顶","_id":"cje5dcirq002a0gc0tj9v6k2n"}]}}